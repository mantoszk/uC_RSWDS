
RSWDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010268  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08010408  08010408  00020408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080107c8  080107c8  000207c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080107d0  080107d0  000207d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080107d4  080107d4  000207d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000358  20000000  080107d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000910  20000358  08010b30  00030358  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c68  08010b30  00030c68  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b5ff  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004d86  00000000  00000000  0006b987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000019b8  00000000  00000000  00070710  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017a0  00000000  00000000  000720c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cdab  00000000  00000000  00073868  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000bd23  00000000  00000000  00080613  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008c336  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000074c0  00000000  00000000  0008c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  00093874  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014b  00000000  00000000  000938f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080103f0 	.word	0x080103f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	080103f0 	.word	0x080103f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b97a 	b.w	8000d20 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	468c      	mov	ip, r1
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	9e08      	ldr	r6, [sp, #32]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d151      	bne.n	8000af8 <__udivmoddi4+0xb4>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d96d      	bls.n	8000b36 <__udivmoddi4+0xf2>
 8000a5a:	fab2 fe82 	clz	lr, r2
 8000a5e:	f1be 0f00 	cmp.w	lr, #0
 8000a62:	d00b      	beq.n	8000a7c <__udivmoddi4+0x38>
 8000a64:	f1ce 0c20 	rsb	ip, lr, #32
 8000a68:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a70:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a74:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a78:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a80:	0c25      	lsrs	r5, r4, #16
 8000a82:	fbbc f8fa 	udiv	r8, ip, sl
 8000a86:	fa1f f987 	uxth.w	r9, r7
 8000a8a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a92:	fb08 f309 	mul.w	r3, r8, r9
 8000a96:	42ab      	cmp	r3, r5
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x6c>
 8000a9a:	19ed      	adds	r5, r5, r7
 8000a9c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000aa0:	f080 8123 	bcs.w	8000cea <__udivmoddi4+0x2a6>
 8000aa4:	42ab      	cmp	r3, r5
 8000aa6:	f240 8120 	bls.w	8000cea <__udivmoddi4+0x2a6>
 8000aaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000aae:	443d      	add	r5, r7
 8000ab0:	1aed      	subs	r5, r5, r3
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ab8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000abc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac0:	fb00 f909 	mul.w	r9, r0, r9
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x98>
 8000ac8:	19e4      	adds	r4, r4, r7
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ace:	f080 810a 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad2:	45a1      	cmp	r9, r4
 8000ad4:	f240 8107 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	443c      	add	r4, r7
 8000adc:	eba4 0409 	sub.w	r4, r4, r9
 8000ae0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d061      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000aea:	fa24 f40e 	lsr.w	r4, r4, lr
 8000aee:	2300      	movs	r3, #0
 8000af0:	6034      	str	r4, [r6, #0]
 8000af2:	6073      	str	r3, [r6, #4]
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0xc8>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d054      	beq.n	8000baa <__udivmoddi4+0x166>
 8000b00:	2100      	movs	r1, #0
 8000b02:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b06:	4608      	mov	r0, r1
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	fab3 f183 	clz	r1, r3
 8000b10:	2900      	cmp	r1, #0
 8000b12:	f040 808e 	bne.w	8000c32 <__udivmoddi4+0x1ee>
 8000b16:	42ab      	cmp	r3, r5
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xdc>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80fa 	bhi.w	8000d14 <__udivmoddi4+0x2d0>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb65 0503 	sbc.w	r5, r5, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	46ac      	mov	ip, r5
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d03f      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000b2e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	b912      	cbnz	r2, 8000b3e <__udivmoddi4+0xfa>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b3e:	fab7 fe87 	clz	lr, r7
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d134      	bne.n	8000bb2 <__udivmoddi4+0x16e>
 8000b48:	1beb      	subs	r3, r5, r7
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	2101      	movs	r1, #1
 8000b52:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b56:	0c25      	lsrs	r5, r4, #16
 8000b58:	fb02 3318 	mls	r3, r2, r8, r3
 8000b5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b60:	fb0c f308 	mul.w	r3, ip, r8
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x134>
 8000b68:	19ed      	adds	r5, r5, r7
 8000b6a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x132>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	f200 80d1 	bhi.w	8000d18 <__udivmoddi4+0x2d4>
 8000b76:	4680      	mov	r8, r0
 8000b78:	1aed      	subs	r5, r5, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b80:	fb02 5510 	mls	r5, r2, r0, r5
 8000b84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b88:	fb0c fc00 	mul.w	ip, ip, r0
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x15c>
 8000b90:	19e4      	adds	r4, r4, r7
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x15a>
 8000b98:	45a4      	cmp	ip, r4
 8000b9a:	f200 80b8 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba8:	e79d      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000baa:	4631      	mov	r1, r6
 8000bac:	4630      	mov	r0, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	f1ce 0420 	rsb	r4, lr, #32
 8000bb6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bba:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bbe:	fa20 f804 	lsr.w	r8, r0, r4
 8000bc2:	0c3a      	lsrs	r2, r7, #16
 8000bc4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bc8:	ea48 0803 	orr.w	r8, r8, r3
 8000bcc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bd4:	fb02 4411 	mls	r4, r2, r1, r4
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000be0:	fb01 f30c 	mul.w	r3, r1, ip
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x1bc>
 8000bec:	19ed      	adds	r5, r5, r7
 8000bee:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf2:	f080 808a 	bcs.w	8000d0a <__udivmoddi4+0x2c6>
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	f240 8087 	bls.w	8000d0a <__udivmoddi4+0x2c6>
 8000bfc:	3902      	subs	r1, #2
 8000bfe:	443d      	add	r5, r7
 8000c00:	1aeb      	subs	r3, r5, r3
 8000c02:	fa1f f588 	uxth.w	r5, r8
 8000c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c0a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c12:	fb00 f30c 	mul.w	r3, r0, ip
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x1e6>
 8000c1a:	19ed      	adds	r5, r5, r7
 8000c1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c20:	d26f      	bcs.n	8000d02 <__udivmoddi4+0x2be>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0x2be>
 8000c26:	3802      	subs	r0, #2
 8000c28:	443d      	add	r5, r7
 8000c2a:	1aeb      	subs	r3, r5, r3
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	e78f      	b.n	8000b52 <__udivmoddi4+0x10e>
 8000c32:	f1c1 0720 	rsb	r7, r1, #32
 8000c36:	fa22 f807 	lsr.w	r8, r2, r7
 8000c3a:	408b      	lsls	r3, r1
 8000c3c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c40:	ea48 0303 	orr.w	r3, r8, r3
 8000c44:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c52:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c56:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c5a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c5e:	fa1f f883 	uxth.w	r8, r3
 8000c62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c66:	fb09 f408 	mul.w	r4, r9, r8
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c70:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x244>
 8000c76:	18ed      	adds	r5, r5, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	d243      	bcs.n	8000d06 <__udivmoddi4+0x2c2>
 8000c7e:	42ac      	cmp	r4, r5
 8000c80:	d941      	bls.n	8000d06 <__udivmoddi4+0x2c2>
 8000c82:	f1a9 0902 	sub.w	r9, r9, #2
 8000c86:	441d      	add	r5, r3
 8000c88:	1b2d      	subs	r5, r5, r4
 8000c8a:	fa1f fe8e 	uxth.w	lr, lr
 8000c8e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c92:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c9a:	fb00 f808 	mul.w	r8, r0, r8
 8000c9e:	45a0      	cmp	r8, r4
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x26e>
 8000ca2:	18e4      	adds	r4, r4, r3
 8000ca4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ca8:	d229      	bcs.n	8000cfe <__udivmoddi4+0x2ba>
 8000caa:	45a0      	cmp	r8, r4
 8000cac:	d927      	bls.n	8000cfe <__udivmoddi4+0x2ba>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	441c      	add	r4, r3
 8000cb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	454c      	cmp	r4, r9
 8000cc0:	46c6      	mov	lr, r8
 8000cc2:	464d      	mov	r5, r9
 8000cc4:	d315      	bcc.n	8000cf2 <__udivmoddi4+0x2ae>
 8000cc6:	d012      	beq.n	8000cee <__udivmoddi4+0x2aa>
 8000cc8:	b156      	cbz	r6, 8000ce0 <__udivmoddi4+0x29c>
 8000cca:	ebba 030e 	subs.w	r3, sl, lr
 8000cce:	eb64 0405 	sbc.w	r4, r4, r5
 8000cd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd6:	40cb      	lsrs	r3, r1
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	40cc      	lsrs	r4, r1
 8000cdc:	6037      	str	r7, [r6, #0]
 8000cde:	6074      	str	r4, [r6, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e6f8      	b.n	8000adc <__udivmoddi4+0x98>
 8000cea:	4690      	mov	r8, r2
 8000cec:	e6e0      	b.n	8000ab0 <__udivmoddi4+0x6c>
 8000cee:	45c2      	cmp	sl, r8
 8000cf0:	d2ea      	bcs.n	8000cc8 <__udivmoddi4+0x284>
 8000cf2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cf6:	eb69 0503 	sbc.w	r5, r9, r3
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7e4      	b.n	8000cc8 <__udivmoddi4+0x284>
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e7d7      	b.n	8000cb2 <__udivmoddi4+0x26e>
 8000d02:	4640      	mov	r0, r8
 8000d04:	e791      	b.n	8000c2a <__udivmoddi4+0x1e6>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e7be      	b.n	8000c88 <__udivmoddi4+0x244>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	e778      	b.n	8000c00 <__udivmoddi4+0x1bc>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	e745      	b.n	8000ba0 <__udivmoddi4+0x15c>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e708      	b.n	8000b2a <__udivmoddi4+0xe6>
 8000d18:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1c:	443d      	add	r5, r7
 8000d1e:	e72b      	b.n	8000b78 <__udivmoddi4+0x134>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 fba9 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f003 fc70 	bl	800463c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fbc1 	bl	800150e <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 fb89 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000014 	.word	0x20000014
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000000 	.word	0x20000000

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000004 	.word	0x20000004
 8000dec:	200003bc 	.word	0x200003bc

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200003bc 	.word	0x200003bc

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_Delay+0x40>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f7      	bcc.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e033      	b.n	8000eca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f002 ff13 	bl	8003ca4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e92:	f023 0302 	bic.w	r3, r3, #2
 8000e96:	f043 0202 	orr.w	r2, r3, #2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f93c 	bl	800111c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f023 0303 	bic.w	r3, r3, #3
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eba:	e001      	b.n	8000ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ed4:	b490      	push	{r4, r7}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0x1c>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e107      	b.n	8001100 <HAL_ADC_ConfigChannel+0x22c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b09      	cmp	r3, #9
 8000efe:	d926      	bls.n	8000f4e <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68d9      	ldr	r1, [r3, #12]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4403      	add	r3, r0
 8000f18:	3b1e      	subs	r3, #30
 8000f1a:	2007      	movs	r0, #7
 8000f1c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	400b      	ands	r3, r1
 8000f24:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68d9      	ldr	r1, [r3, #12]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	4623      	mov	r3, r4
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4423      	add	r3, r4
 8000f42:	3b1e      	subs	r3, #30
 8000f44:	fa00 f303 	lsl.w	r3, r0, r3
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	60d3      	str	r3, [r2, #12]
 8000f4c:	e023      	b.n	8000f96 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6919      	ldr	r1, [r3, #16]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4603      	mov	r3, r0
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4403      	add	r3, r0
 8000f66:	2007      	movs	r0, #7
 8000f68:	fa00 f303 	lsl.w	r3, r0, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	400b      	ands	r3, r1
 8000f70:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6919      	ldr	r1, [r3, #16]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	6898      	ldr	r0, [r3, #8]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	461c      	mov	r4, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4423      	add	r3, r4
 8000f8e:	fa00 f303 	lsl.w	r3, r0, r3
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d824      	bhi.n	8000fe8 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3b05      	subs	r3, #5
 8000fb4:	221f      	movs	r2, #31
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4003      	ands	r3, r0
 8000fbe:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	3b05      	subs	r3, #5
 8000fde:	fa04 f303 	lsl.w	r3, r4, r3
 8000fe2:	4303      	orrs	r3, r0
 8000fe4:	634b      	str	r3, [r1, #52]	; 0x34
 8000fe6:	e04c      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d824      	bhi.n	800103a <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	3b23      	subs	r3, #35	; 0x23
 8001006:	221f      	movs	r2, #31
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	4003      	ands	r3, r0
 8001010:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	461c      	mov	r4, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b23      	subs	r3, #35	; 0x23
 8001030:	fa04 f303 	lsl.w	r3, r4, r3
 8001034:	4303      	orrs	r3, r0
 8001036:	630b      	str	r3, [r1, #48]	; 0x30
 8001038:	e023      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3b41      	subs	r3, #65	; 0x41
 8001050:	221f      	movs	r2, #31
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	4003      	ands	r3, r0
 800105a:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461c      	mov	r4, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b41      	subs	r3, #65	; 0x41
 800107a:	fa04 f303 	lsl.w	r3, r4, r3
 800107e:	4303      	orrs	r3, r0
 8001080:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_ADC_ConfigChannel+0x238>)
 8001084:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_ADC_ConfigChannel+0x23c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d109      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b12      	cmp	r3, #18
 8001096:	d105      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_ADC_ConfigChannel+0x23c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d123      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x222>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d003      	beq.n	80010be <HAL_ADC_ConfigChannel+0x1ea>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b11      	cmp	r3, #17
 80010bc:	d11b      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b10      	cmp	r3, #16
 80010d0:	d111      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_ADC_ConfigChannel+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_ADC_ConfigChannel+0x244>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	0c9a      	lsrs	r2, r3, #18
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010e8:	e002      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bc90      	pop	{r4, r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40012300 	.word	0x40012300
 8001110:	40012000 	.word	0x40012000
 8001114:	20000014 	.word	0x20000014
 8001118:	431bde83 	.word	0x431bde83

0800111c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001124:	4b78      	ldr	r3, [pc, #480]	; (8001308 <ADC_Init+0x1ec>)
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	431a      	orrs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	6852      	ldr	r2, [r2, #4]
 800114c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001150:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	6851      	ldr	r1, [r2, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6912      	ldr	r2, [r2, #16]
 8001160:	0212      	lsls	r2, r2, #8
 8001162:	430a      	orrs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	6852      	ldr	r2, [r2, #4]
 8001170:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	6851      	ldr	r1, [r2, #4]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6892      	ldr	r2, [r2, #8]
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	6892      	ldr	r2, [r2, #8]
 8001192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	6891      	ldr	r1, [r2, #8]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68d2      	ldr	r2, [r2, #12]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	4a57      	ldr	r2, [pc, #348]	; (800130c <ADC_Init+0x1f0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d022      	beq.n	80011fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	6892      	ldr	r2, [r2, #8]
 80011be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	6891      	ldr	r1, [r2, #8]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011d2:	430a      	orrs	r2, r1
 80011d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6892      	ldr	r2, [r2, #8]
 80011e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	6891      	ldr	r1, [r2, #8]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011f4:	430a      	orrs	r2, r1
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e00f      	b.n	800121a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	6892      	ldr	r2, [r2, #8]
 8001204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	6892      	ldr	r2, [r2, #8]
 8001214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001218:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	6892      	ldr	r2, [r2, #8]
 8001224:	f022 0202 	bic.w	r2, r2, #2
 8001228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	6891      	ldr	r1, [r2, #8]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6992      	ldr	r2, [r2, #24]
 8001238:	0052      	lsls	r2, r2, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d01b      	beq.n	800127e <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6852      	ldr	r2, [r2, #4]
 8001250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001254:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	6852      	ldr	r2, [r2, #4]
 8001260:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001264:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	6851      	ldr	r1, [r2, #4]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001274:	3a01      	subs	r2, #1
 8001276:	0352      	lsls	r2, r2, #13
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	e007      	b.n	800128e <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	6852      	ldr	r2, [r2, #4]
 8001288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800128c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001298:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	69d2      	ldr	r2, [r2, #28]
 80012ac:	3a01      	subs	r2, #1
 80012ae:	0512      	lsls	r2, r2, #20
 80012b0:	430a      	orrs	r2, r1
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	6892      	ldr	r2, [r2, #8]
 80012be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	6891      	ldr	r1, [r2, #8]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012d2:	0252      	lsls	r2, r2, #9
 80012d4:	430a      	orrs	r2, r1
 80012d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	6892      	ldr	r2, [r2, #8]
 80012e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	6891      	ldr	r1, [r2, #8]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6952      	ldr	r2, [r2, #20]
 80012f6:	0292      	lsls	r2, r2, #10
 80012f8:	430a      	orrs	r2, r1
 80012fa:	609a      	str	r2, [r3, #8]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40012300 	.word	0x40012300
 800130c:	0f000001 	.word	0x0f000001

08001310 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800137e:	4909      	ldr	r1, [pc, #36]	; (80013a4 <NVIC_EnableIRQ+0x30>)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	f002 021f 	and.w	r2, r2, #31
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da0b      	bge.n	80013d4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	490d      	ldr	r1, [pc, #52]	; (80013f4 <NVIC_SetPriority+0x4c>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	3b04      	subs	r3, #4
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d2:	e009      	b.n	80013e8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	4908      	ldr	r1, [pc, #32]	; (80013f8 <NVIC_SetPriority+0x50>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	e000e100 	.word	0xe000e100

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	2201      	movs	r2, #1
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	401a      	ands	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001442:	2101      	movs	r1, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	1e59      	subs	r1, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff2f 	bl	8001310 <NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff44 	bl	8001358 <NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff37 	bl	8001374 <NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d106      	bne.n	8001544 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001542:	e005      	b.n	8001550 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0304 	bic.w	r3, r3, #4
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001564:	f000 f802 	bl	800156c <HAL_SYSTICK_Callback>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fc32 	bl	8000df0 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e099      	b.n	80016cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b8:	e00f      	b.n	80015da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ba:	f7ff fc19 	bl	8000df0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d908      	bls.n	80015da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e078      	b.n	80016cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e8      	bne.n	80015ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_DMA_Init+0x158>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2b04      	cmp	r3, #4
 8001632:	d107      	bne.n	8001644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4313      	orrs	r3, r2
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f023 0307 	bic.w	r3, r3, #7
 800165a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b04      	cmp	r3, #4
 800166c:	d117      	bne.n	800169e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00e      	beq.n	800169e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f9e9 	bl	8001a58 <DMA_CheckFifoParam>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800169a:	2301      	movs	r3, #1
 800169c:	e016      	b.n	80016cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f9a0 	bl	80019ec <DMA_CalcBaseAndBitshift>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	223f      	movs	r2, #63	; 0x3f
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f010803f 	.word	0xf010803f

080016d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_DMA_IRQHandler+0x258>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a92      	ldr	r2, [pc, #584]	; (8001934 <HAL_DMA_IRQHandler+0x25c>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a9b      	lsrs	r3, r3, #10
 80016f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	2208      	movs	r2, #8
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01a      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2208      	movs	r2, #8
 8001732:	409a      	lsls	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2201      	movs	r2, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d012      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2204      	movs	r2, #4
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00b      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2204      	movs	r2, #4
 800179e:	409a      	lsls	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f043 0204 	orr.w	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2210      	movs	r2, #16
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d043      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03c      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2210      	movs	r2, #16
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d018      	beq.n	800181a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
 8001806:	e01f      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e016      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	f022 0208 	bic.w	r2, r2, #8
 8001836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2220      	movs	r2, #32
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 808e 	beq.w	8001976 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8086 	beq.w	8001976 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2220      	movs	r2, #32
 8001870:	409a      	lsls	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b05      	cmp	r3, #5
 8001880:	d136      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	f022 0216 	bic.w	r2, r2, #22
 8001890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	6952      	ldr	r2, [r2, #20]
 800189c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <HAL_DMA_IRQHandler+0x1da>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f022 0208 	bic.w	r2, r2, #8
 80018c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	223f      	movs	r2, #63	; 0x3f
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d07d      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
        }
        return;
 80018ee:	e078      	b.n	80019e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d108      	bne.n	800191e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	2b00      	cmp	r3, #0
 8001912:	d030      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e02b      	b.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d027      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
 800192e:	e022      	b.n	8001976 <HAL_DMA_IRQHandler+0x29e>
 8001930:	20000014 	.word	0x20000014
 8001934:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	f022 0210 	bic.w	r2, r2, #16
 8001954:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	2b00      	cmp	r3, #0
 800197c:	d032      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d022      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2205      	movs	r2, #5
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d807      	bhi.n	80019be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f2      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x2ca>
 80019bc:	e000      	b.n	80019c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019e2:	bf00      	nop
    }
  }
}
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop

080019ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3b10      	subs	r3, #16
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <DMA_CalcBaseAndBitshift+0x64>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <DMA_CalcBaseAndBitshift+0x68>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d909      	bls.n	8001a2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a2c:	e007      	b.n	8001a3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	aaaaaaab 	.word	0xaaaaaaab
 8001a54:	08010710 	.word	0x08010710

08001a58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11f      	bne.n	8001ab2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d855      	bhi.n	8001b24 <DMA_CheckFifoParam+0xcc>
 8001a78:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <DMA_CheckFifoParam+0x28>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa3 	.word	0x08001aa3
 8001a88:	08001a91 	.word	0x08001a91
 8001a8c:	08001b25 	.word	0x08001b25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d045      	beq.n	8001b28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa0:	e042      	b.n	8001b28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aaa:	d13f      	bne.n	8001b2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab0:	e03c      	b.n	8001b2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d121      	bne.n	8001b00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d836      	bhi.n	8001b30 <DMA_CheckFifoParam+0xd8>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <DMA_CheckFifoParam+0x70>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001adf 	.word	0x08001adf
 8001ad0:	08001ad9 	.word	0x08001ad9
 8001ad4:	08001af1 	.word	0x08001af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
      break;
 8001adc:	e02f      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d024      	beq.n	8001b34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aee:	e021      	b.n	8001b34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af8:	d11e      	bne.n	8001b38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001afe:	e01b      	b.n	8001b38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d902      	bls.n	8001b0c <DMA_CheckFifoParam+0xb4>
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d003      	beq.n	8001b12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b0a:	e018      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b10:	e015      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00e      	beq.n	8001b3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
      break;
 8001b22:	e00b      	b.n	8001b3c <DMA_CheckFifoParam+0xe4>
      break;
 8001b24:	bf00      	nop
 8001b26:	e00a      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b28:	bf00      	nop
 8001b2a:	e008      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b2c:	bf00      	nop
 8001b2e:	e006      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b30:	bf00      	nop
 8001b32:	e004      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b34:	bf00      	nop
 8001b36:	e002      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;   
 8001b38:	bf00      	nop
 8001b3a:	e000      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b3c:	bf00      	nop
    }
  } 
  
  return status; 
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e159      	b.n	8001e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8148 	bne.w	8001e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x4a>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	69b9      	ldr	r1, [r7, #24]
 8001bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d00b      	beq.n	8001c32 <HAL_GPIO_Init+0xe6>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c26:	2b11      	cmp	r3, #17
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d130      	bne.n	8001c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a2 	beq.w	8001e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cd8:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <HAL_GPIO_Init+0x2ec>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x202>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x1fe>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a46      	ldr	r2, [pc, #280]	; (8001e40 <HAL_GPIO_Init+0x2f4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a45      	ldr	r2, [pc, #276]	; (8001e44 <HAL_GPIO_Init+0x2f8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x1f6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a44      	ldr	r2, [pc, #272]	; (8001e48 <HAL_GPIO_Init+0x2fc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x1f2>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d60:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d92:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	f67f aea2 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 f8fe 	bl	8004070 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0c8      	b.n	800202c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f002 f85c 	bl	8003f6c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f001 faf6 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4a57      	ldr	r2, [pc, #348]	; (8002034 <HAL_I2C_Init+0x1b4>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4952      	ldr	r1, [pc, #328]	; (8002038 <HAL_I2C_Init+0x1b8>)
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	d802      	bhi.n	8001efa <HAL_I2C_Init+0x7a>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	e009      	b.n	8001f0e <HAL_I2C_Init+0x8e>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_I2C_Init+0x1bc>)
 8001f06:	fba1 1303 	umull	r1, r3, r1, r3
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a47      	ldr	r2, [pc, #284]	; (8002038 <HAL_I2C_Init+0x1b8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d812      	bhi.n	8001f44 <HAL_I2C_Init+0xc4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d906      	bls.n	8001f40 <HAL_I2C_Init+0xc0>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	e045      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e043      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10f      	bne.n	8001f6c <HAL_I2C_Init+0xec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e010      	b.n	8001f8e <HAL_I2C_Init+0x10e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009a      	lsls	r2, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x116>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01a      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_I2C_Init+0x134>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb2:	e00b      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009a      	lsls	r2, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fcc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	69d1      	ldr	r1, [r2, #28]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6a12      	ldr	r2, [r2, #32]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6911      	ldr	r1, [r2, #16]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68d2      	ldr	r2, [r2, #12]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6951      	ldr	r1, [r2, #20]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6992      	ldr	r2, [r2, #24]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	431bde83 	.word	0x431bde83
 8002038:	000186a0 	.word	0x000186a0
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	460b      	mov	r3, r1
 800204e:	817b      	strh	r3, [r7, #10]
 8002050:	4613      	mov	r3, r2
 8002052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002058:	f7fe feca 	bl	8000df0 <HAL_GetTick>
 800205c:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	f040 80ee 	bne.w	8002248 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2319      	movs	r3, #25
 8002072:	2201      	movs	r2, #1
 8002074:	4977      	ldr	r1, [pc, #476]	; (8002254 <HAL_I2C_Master_Transmit+0x214>)
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fc6c 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
 8002084:	e0e1      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_I2C_Master_Transmit+0x54>
 8002090:	2302      	movs	r3, #2
 8002092:	e0da      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d007      	beq.n	80020ba <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2221      	movs	r2, #33	; 0x21
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2210      	movs	r2, #16
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	893a      	ldrh	r2, [r7, #8]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a5a      	ldr	r2, [pc, #360]	; (8002258 <HAL_I2C_Master_Transmit+0x218>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020fc:	8979      	ldrh	r1, [r7, #10]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fadc 	bl	80026c0 <I2C_MasterRequestWrite>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00f      	beq.n	800212e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b04      	cmp	r3, #4
 8002114:	d105      	bne.n	8002122 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e093      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e08d      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8002144:	e066      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fcc1 	bl	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00f      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2b04      	cmp	r3, #4
 800215c:	d109      	bne.n	8002172 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e069      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c58      	adds	r0, r3, #1
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	6248      	str	r0, [r1, #36]	; 0x24
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d119      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x1a4>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c58      	adds	r0, r3, #1
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	6248      	str	r0, [r1, #36]	; 0x24
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	6a39      	ldr	r1, [r7, #32]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fcaf 	bl	8002b4c <I2C_WaitOnBTFFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00f      	beq.n	8002214 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d109      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e01c      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e01a      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d194      	bne.n	8002146 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	00100002 	.word	0x00100002
 8002258:	ffff0000 	.word	0xffff0000

0800225c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
 800226c:	4613      	mov	r3, r2
 800226e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002274:	f7fe fdbc 	bl	8000df0 <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	f040 8215 	bne.w	80026b2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	4985      	ldr	r1, [pc, #532]	; (80024a8 <HAL_I2C_Master_Receive+0x24c>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb5e 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e208      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Receive+0x54>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e201      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2222      	movs	r2, #34	; 0x22
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2210      	movs	r2, #16
 80022f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a68      	ldr	r2, [pc, #416]	; (80024ac <HAL_I2C_Master_Receive+0x250>)
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fa50 	bl	80027c4 <I2C_MasterRequestRead>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00f      	beq.n	800234a <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b04      	cmp	r3, #4
 8002330:	d105      	bne.n	800233e <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1ba      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1b4      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e188      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e168      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11b      	bne.n	80023fa <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	e148      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002420:	e134      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	2b03      	cmp	r3, #3
 8002428:	f200 80eb 	bhi.w	8002602 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b01      	cmp	r3, #1
 8002432:	d127      	bne.n	8002484 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fbc4 	bl	8002bc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	2b20      	cmp	r3, #32
 800244a:	d101      	bne.n	8002450 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e131      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e12f      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	1c59      	adds	r1, r3, #1
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6251      	str	r1, [r2, #36]	; 0x24
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	6912      	ldr	r2, [r2, #16]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002482:	e103      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b02      	cmp	r3, #2
 800248a:	d14a      	bne.n	8002522 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	2200      	movs	r2, #0
 8002494:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_I2C_Master_Receive+0x254>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa5c 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e106      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
 80024a6:	bf00      	nop
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000
 80024b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c59      	adds	r1, r3, #1
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6251      	str	r1, [r2, #36]	; 0x24
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	6912      	ldr	r2, [r2, #16]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	6251      	str	r1, [r2, #36]	; 0x24
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	6912      	ldr	r2, [r2, #16]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002520:	e0b4      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	2200      	movs	r2, #0
 800252a:	4964      	ldr	r1, [pc, #400]	; (80026bc <HAL_I2C_Master_Receive+0x460>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fa11 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0bb      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c59      	adds	r1, r3, #1
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	6251      	str	r1, [r2, #36]	; 0x24
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6912      	ldr	r2, [r2, #16]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	2200      	movs	r2, #0
 8002582:	494e      	ldr	r1, [pc, #312]	; (80026bc <HAL_I2C_Master_Receive+0x460>)
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f9e5 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e08f      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	1c59      	adds	r1, r3, #1
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	6251      	str	r1, [r2, #36]	; 0x24
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	6912      	ldr	r2, [r2, #16]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c59      	adds	r1, r3, #1
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6251      	str	r1, [r2, #36]	; 0x24
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	6912      	ldr	r2, [r2, #16]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002600:	e044      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fadd 	bl	8002bc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b20      	cmp	r3, #32
 8002618:	d101      	bne.n	800261e <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e04a      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e048      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	6251      	str	r1, [r2, #36]	; 0x24
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	6912      	ldr	r2, [r2, #16]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d116      	bne.n	800268c <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	6251      	str	r1, [r2, #36]	; 0x24
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	6912      	ldr	r2, [r2, #16]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f aec6 	bne.w	8002422 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3728      	adds	r7, #40	; 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00010004 	.word	0x00010004

080026c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d006      	beq.n	80026ea <I2C_MasterRequestWrite+0x2a>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d003      	beq.n	80026ea <I2C_MasterRequestWrite+0x2a>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e8:	d108      	bne.n	80026fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00b      	b.n	8002714 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b12      	cmp	r3, #18
 8002702:	d107      	bne.n	8002714 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f917 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e040      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002738:	d107      	bne.n	800274a <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	897a      	ldrh	r2, [r7, #10]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	e021      	b.n	800278e <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	897a      	ldrh	r2, [r7, #10]
 8002750:	11d2      	asrs	r2, r2, #7
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 0206 	and.w	r2, r2, #6
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f062 020f 	orn	r2, r2, #15
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4915      	ldr	r1, [pc, #84]	; (80027bc <I2C_MasterRequestWrite+0xfc>)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f944 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b04      	cmp	r3, #4
 800277a:	d101      	bne.n	8002780 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e018      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e016      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	897a      	ldrh	r2, [r7, #10]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	490b      	ldr	r1, [pc, #44]	; (80027c0 <I2C_MasterRequestWrite+0x100>)
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f92e 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d101      	bne.n	80027ac <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e002      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e000      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	00010008 	.word	0x00010008
 80027c0:	00010002 	.word	0x00010002

080027c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	460b      	mov	r3, r1
 80027d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d006      	beq.n	80027fe <I2C_MasterRequestRead+0x3a>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d003      	beq.n	80027fe <I2C_MasterRequestRead+0x3a>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e00b      	b.n	8002828 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	2b11      	cmp	r3, #17
 8002816:	d107      	bne.n	8002828 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f88d 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e07f      	b.n	8002944 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800284c:	d108      	bne.n	8002860 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	897a      	ldrh	r2, [r7, #10]
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	611a      	str	r2, [r3, #16]
 800285e:	e05f      	b.n	8002920 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	897a      	ldrh	r2, [r7, #10]
 8002866:	11d2      	asrs	r2, r2, #7
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 0206 	and.w	r2, r2, #6
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f062 020f 	orn	r2, r2, #15
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4933      	ldr	r1, [pc, #204]	; (800294c <I2C_MasterRequestRead+0x188>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f8b9 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b04      	cmp	r3, #4
 8002890:	d101      	bne.n	8002896 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e056      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e054      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	897a      	ldrh	r2, [r7, #10]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4929      	ldr	r1, [pc, #164]	; (8002950 <I2C_MasterRequestRead+0x18c>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f8a3 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d101      	bne.n	80028c2 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e040      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e03e      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f82b 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e01d      	b.n	8002944 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	897a      	ldrh	r2, [r7, #10]
 800290e:	11d2      	asrs	r2, r2, #7
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 0206 	and.w	r2, r2, #6
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f062 020e 	orn	r2, r2, #14
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	490a      	ldr	r1, [pc, #40]	; (8002950 <I2C_MasterRequestRead+0x18c>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f865 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b04      	cmp	r3, #4
 8002938:	d101      	bne.n	800293e <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e002      	b.n	8002944 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e000      	b.n	8002944 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00010008 	.word	0x00010008
 8002950:	00010002 	.word	0x00010002

08002954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002964:	e01f      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d01b      	beq.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002974:	f7fe fa3c 	bl	8000df0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad2      	subs	r2, r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d910      	bls.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e023      	b.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10d      	bne.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x78>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	e00c      	b.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x92>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0bc      	beq.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a04:	e040      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d11c      	bne.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a2e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2204      	movs	r2, #4
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e03c      	b.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d017      	beq.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002a5e:	f7fe f9c7 	bl	8000df0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e020      	b.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10c      	bne.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e00b      	b.n	8002ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d19e      	bne.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ade:	e029      	b.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f8ba 	bl	8002c5a <I2C_IsAcknowledgeFailed>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e029      	b.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d01d      	beq.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002afe:	f7fe f977 	bl	8000df0 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d912      	bls.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d1ce      	bne.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b58:	e029      	b.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f87d 	bl	8002c5a <I2C_IsAcknowledgeFailed>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e029      	b.n	8002bbe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d01d      	beq.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b78:	f7fe f93a 	bl	8000df0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d912      	bls.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e007      	b.n	8002bbe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d1ce      	bne.n	8002b5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd2:	e036      	b.n	8002c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d114      	bne.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0210 	mvn.w	r2, #16
 8002bea:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e022      	b.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002c12:	f7fe f8ed 	bl	8000df0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d90f      	bls.n	8002c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e007      	b.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d1c1      	bne.n	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d114      	bne.n	8002c9c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c7a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e22d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d075      	beq.n	8002db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cca:	4ba3      	ldr	r3, [pc, #652]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4ba0      	ldr	r3, [pc, #640]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b9d      	ldr	r3, [pc, #628]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d10b      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	4b99      	ldr	r3, [pc, #612]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x108>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d157      	bne.n	8002db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e208      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d106      	bne.n	8002d20 <HAL_RCC_OscConfig+0x74>
 8002d12:	4a91      	ldr	r2, [pc, #580]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	4b90      	ldr	r3, [pc, #576]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01d      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x98>
 8002d2a:	4a8b      	ldr	r2, [pc, #556]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	4b8a      	ldr	r3, [pc, #552]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4a88      	ldr	r2, [pc, #544]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	4b87      	ldr	r3, [pc, #540]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d44:	4a84      	ldr	r2, [pc, #528]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d46:	4b84      	ldr	r3, [pc, #528]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4a81      	ldr	r2, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d52:	4b81      	ldr	r3, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe f844 	bl	8000df0 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe f840 	bl	8000df0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1cd      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0xc0>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f830 	bl	8000df0 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe f82c 	bl	8000df0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1b9      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0xe8>
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b62      	ldr	r3, [pc, #392]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b5f      	ldr	r3, [pc, #380]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b5c      	ldr	r3, [pc, #368]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e18d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4956      	ldr	r1, [pc, #344]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	4b55      	ldr	r3, [pc, #340]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <HAL_RCC_OscConfig+0x2b0>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fd ffe5 	bl	8000df0 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fd ffe1 	bl	8000df0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e16e      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4943      	ldr	r1, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_OscConfig+0x2b0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fd ffc4 	bl	8000df0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fd ffc0 	bl	8000df0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e14d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d030      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_RCC_OscConfig+0x2b4>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fd ffa4 	bl	8000df0 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fd ffa0 	bl	8000df0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e12d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x200>
 8002eca:	e015      	b.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_OscConfig+0x2b4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fd ff8d 	bl	8000df0 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fd ff89 	bl	8000df0 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e116      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80a0 	beq.w	8003046 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x2b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d121      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_RCC_OscConfig+0x2b8>)
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCC_OscConfig+0x2b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fd ff4f 	bl	8000df0 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e011      	b.n	8002f7a <HAL_RCC_OscConfig+0x2ce>
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	42470000 	.word	0x42470000
 8002f60:	42470e80 	.word	0x42470e80
 8002f64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fd ff42 	bl	8000df0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0cf      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
 8002f8e:	4a66      	ldr	r2, [pc, #408]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002f90:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	e01c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x32a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d10c      	bne.n	8002fbe <HAL_RCC_OscConfig+0x312>
 8002fa4:	4a60      	ldr	r2, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fa6:	4b60      	ldr	r3, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb0:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	e00b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x32a>
 8002fbe:	4a5a      	ldr	r2, [pc, #360]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fcc:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d015      	beq.n	800300a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fd ff07 	bl	8000df0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fd ff03 	bl	8000df0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e08e      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ee      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x33a>
 8003008:	e014      	b.n	8003034 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fd fef1 	bl	8000df0 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fd feed 	bl	8000df0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e078      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ee      	bne.n	8003012 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 800303c:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d064      	beq.n	8003118 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b08      	cmp	r3, #8
 8003058:	d05c      	beq.n	8003114 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d141      	bne.n	80030e6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_RCC_OscConfig+0x480>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fd fec2 	bl	8000df0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7fd febe 	bl	8000df0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04b      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308e:	4926      	ldr	r1, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	019b      	lsls	r3, r3, #6
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	3b01      	subs	r3, #1
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	061b      	lsls	r3, r3, #24
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_RCC_OscConfig+0x480>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fd fe97 	bl	8000df0 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fd fe93 	bl	8000df0 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e020      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x41a>
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_OscConfig+0x480>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd fe80 	bl	8000df0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fd fe7c 	bl	8000df0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e009      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x448>
 8003112:	e001      	b.n	8003118 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40007000 	.word	0x40007000
 8003128:	40023800 	.word	0x40023800
 800312c:	42470060 	.word	0x42470060

08003130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ca      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 020f 	and.w	r2, r3, #15
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20c      	bcs.n	800316c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0b6      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	4b58      	ldr	r3, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	4b52      	ldr	r3, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a8:	494f      	ldr	r1, [pc, #316]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d044      	beq.n	8003250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d119      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07d      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06d      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e065      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4936      	ldr	r1, [pc, #216]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 0203 	bic.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003220:	f7fd fde6 	bl	8000df0 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fd fde2 	bl	8000df0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e04d      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d90c      	bls.n	8003278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 020f 	and.w	r2, r3, #15
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e030      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4918      	ldr	r1, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a2:	4911      	ldr	r1, [pc, #68]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b6:	f000 f81d 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032ba:	4601      	mov	r1, r0
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	5cd3      	ldrb	r3, [r2, r3]
 80032ca:	fa21 f303 	lsr.w	r3, r1, r3
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fd fd48 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	08010718 	.word	0x08010718
 80032f0:	20000014 	.word	0x20000014

080032f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	b08f      	sub	sp, #60	; 0x3c
 80032fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003300:	2300      	movs	r3, #0
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330c:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b04      	cmp	r3, #4
 8003316:	d007      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x34>
 8003318:	2b08      	cmp	r3, #8
 800331a:	d008      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x3a>
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 80b2 	bne.w	8003486 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8003326:	e0b1      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003328:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800332c:	e0ae      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800332e:	4b5a      	ldr	r3, [pc, #360]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003338:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d04e      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003344:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	f04f 0400 	mov.w	r4, #0
 800334e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	ea01 0103 	and.w	r1, r1, r3
 800335a:	ea02 0204 	and.w	r2, r2, r4
 800335e:	460b      	mov	r3, r1
 8003360:	4614      	mov	r4, r2
 8003362:	0160      	lsls	r0, r4, #5
 8003364:	6278      	str	r0, [r7, #36]	; 0x24
 8003366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003368:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800336c:	6278      	str	r0, [r7, #36]	; 0x24
 800336e:	015b      	lsls	r3, r3, #5
 8003370:	623b      	str	r3, [r7, #32]
 8003372:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003376:	1a5b      	subs	r3, r3, r1
 8003378:	eb64 0402 	sbc.w	r4, r4, r2
 800337c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003380:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003384:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003388:	ebb8 0803 	subs.w	r8, r8, r3
 800338c:	eb69 0904 	sbc.w	r9, r9, r4
 8003390:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80033a8:	eb18 0801 	adds.w	r8, r8, r1
 80033ac:	eb49 0902 	adc.w	r9, r9, r2
 80033b0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80033c8:	4640      	mov	r0, r8
 80033ca:	4649      	mov	r1, r9
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	f7fd fb1d 	bl	8000a14 <__aeabi_uldivmod>
 80033da:	4603      	mov	r3, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
 80033e0:	e043      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	ea01 0103 	and.w	r1, r1, r3
 80033f8:	ea02 0204 	and.w	r2, r2, r4
 80033fc:	460b      	mov	r3, r1
 80033fe:	4614      	mov	r4, r2
 8003400:	0160      	lsls	r0, r4, #5
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003414:	1a5b      	subs	r3, r3, r1
 8003416:	eb64 0402 	sbc.w	r4, r4, r2
 800341a:	01a6      	lsls	r6, r4, #6
 800341c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003420:	019d      	lsls	r5, r3, #6
 8003422:	1aed      	subs	r5, r5, r3
 8003424:	eb66 0604 	sbc.w	r6, r6, r4
 8003428:	00f3      	lsls	r3, r6, #3
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	e897 0060 	ldmia.w	r7, {r5, r6}
 800343c:	186d      	adds	r5, r5, r1
 800343e:	eb46 0602 	adc.w	r6, r6, r2
 8003442:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003446:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800344a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800344e:	4655      	mov	r5, sl
 8003450:	465e      	mov	r6, fp
 8003452:	4628      	mov	r0, r5
 8003454:	4631      	mov	r1, r6
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	f04f 0400 	mov.w	r4, #0
 800345c:	461a      	mov	r2, r3
 800345e:	4623      	mov	r3, r4
 8003460:	f7fd fad8 	bl	8000a14 <__aeabi_uldivmod>
 8003464:	4603      	mov	r3, r0
 8003466:	460c      	mov	r4, r1
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0c1b      	lsrs	r3, r3, #16
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	3301      	adds	r3, #1
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800347a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003484:	e002      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800348a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800348e:	4618      	mov	r0, r3
 8003490:	373c      	adds	r7, #60	; 0x3c
 8003492:	46bd      	mov	sp, r7
 8003494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000014 	.word	0x20000014

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c4:	4601      	mov	r1, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0a9b      	lsrs	r3, r3, #10
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	08010728 	.word	0x08010728

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffdc 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034ec:	4601      	mov	r1, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0b5b      	lsrs	r3, r3, #13
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4a03      	ldr	r2, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	08010728 	.word	0x08010728

0800350c <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e03f      	b.n	800359e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f001 fa2e 	bl	8004994 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f90b 	bl	800376c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6912      	ldr	r2, [r2, #16]
 8003560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	6952      	ldr	r2, [r2, #20]
 8003570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003574:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	68d2      	ldr	r2, [r2, #12]
 8003580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003584:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af02      	add	r7, sp, #8
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 8082 	bne.w	80036cc <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Transmit+0x2e>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e07a      	b.n	80036ce <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Transmit+0x40>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e073      	b.n	80036ce <HAL_UART_Transmit+0x128>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	; 0x21
 80035f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035fc:	f7fd fbf8 	bl	8000df0 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800360e:	e041      	b.n	8003694 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	d121      	bne.n	800366c <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2200      	movs	r2, #0
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f84f 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e045      	b.n	80036ce <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003652:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3302      	adds	r3, #2
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	e017      	b.n	8003694 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3301      	adds	r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	e013      	b.n	8003694 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f82d 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e023      	b.n	80036ce <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1b8      	bne.n	8003610 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f814 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e00a      	b.n	80036ce <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80036e6:	e02c      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d028      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f6:	f7fd fb7b 	bl	8000df0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad2      	subs	r2, r2, r3
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	429a      	cmp	r2, r3
 8003704:	d91d      	bls.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	68d2      	ldr	r2, [r2, #12]
 8003710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003714:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	6952      	ldr	r2, [r2, #20]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	401a      	ands	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0c3      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003786:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037a8:	f023 030c 	bic.w	r3, r3, #12
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fc:	f040 80e4 	bne.w	80039c8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4aab      	ldr	r2, [pc, #684]	; (8003ab4 <UART_SetConfig+0x348>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <UART_SetConfig+0xa8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4aaa      	ldr	r2, [pc, #680]	; (8003ab8 <UART_SetConfig+0x34c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d16c      	bne.n	80038ee <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681c      	ldr	r4, [r3, #0]
 8003818:	f7ff fe64 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 800381c:	4602      	mov	r2, r0
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4aa2      	ldr	r2, [pc, #648]	; (8003abc <UART_SetConfig+0x350>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	011d      	lsls	r5, r3, #4
 800383c:	f7ff fe52 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003840:	4602      	mov	r2, r0
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb2 f6f3 	udiv	r6, r2, r3
 8003856:	f7ff fe45 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 800385a:	4602      	mov	r2, r0
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	4a92      	ldr	r2, [pc, #584]	; (8003abc <UART_SetConfig+0x350>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2264      	movs	r2, #100	; 0x64
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	1af3      	subs	r3, r6, r3
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	3332      	adds	r3, #50	; 0x32
 8003884:	4a8d      	ldr	r2, [pc, #564]	; (8003abc <UART_SetConfig+0x350>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003892:	441d      	add	r5, r3
 8003894:	f7ff fe26 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003898:	4602      	mov	r2, r0
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	441a      	add	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80038ae:	f7ff fe19 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <UART_SetConfig+0x350>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2264      	movs	r2, #100	; 0x64
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	1af3      	subs	r3, r6, r3
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a77      	ldr	r2, [pc, #476]	; (8003abc <UART_SetConfig+0x350>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	442b      	add	r3, r5
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	e154      	b.n	8003b98 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	f7ff fde3 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4a6b      	ldr	r2, [pc, #428]	; (8003abc <UART_SetConfig+0x350>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	011d      	lsls	r5, r3, #4
 8003916:	f7ff fdd1 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 800391a:	4602      	mov	r2, r0
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003930:	f7ff fdc4 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003934:	4602      	mov	r2, r0
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009a      	lsls	r2, r3, #2
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	4a5c      	ldr	r2, [pc, #368]	; (8003abc <UART_SetConfig+0x350>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2264      	movs	r2, #100	; 0x64
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	1af3      	subs	r3, r6, r3
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a57      	ldr	r2, [pc, #348]	; (8003abc <UART_SetConfig+0x350>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800396c:	441d      	add	r5, r3
 800396e:	f7ff fda5 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003972:	4602      	mov	r2, r0
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fbb2 f6f3 	udiv	r6, r2, r3
 8003988:	f7ff fd98 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 800398c:	4602      	mov	r2, r0
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4a46      	ldr	r2, [pc, #280]	; (8003abc <UART_SetConfig+0x350>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2264      	movs	r2, #100	; 0x64
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	1af3      	subs	r3, r6, r3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a41      	ldr	r2, [pc, #260]	; (8003abc <UART_SetConfig+0x350>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	442b      	add	r3, r5
 80039c4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80039c6:	e0e7      	b.n	8003b98 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <UART_SetConfig+0x348>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <UART_SetConfig+0x270>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <UART_SetConfig+0x34c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d171      	bne.n	8003ac0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	f7ff fd80 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009a      	lsls	r2, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	4a30      	ldr	r2, [pc, #192]	; (8003abc <UART_SetConfig+0x350>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	011d      	lsls	r5, r3, #4
 8003a04:	f7ff fd6e 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a1e:	f7ff fd61 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <UART_SetConfig+0x350>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2264      	movs	r2, #100	; 0x64
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	1af3      	subs	r3, r6, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	3332      	adds	r3, #50	; 0x32
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <UART_SetConfig+0x350>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a58:	441d      	add	r5, r3
 8003a5a:	f7ff fd43 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009a      	lsls	r2, r3, #2
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a74:	f7ff fd36 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <UART_SetConfig+0x350>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2264      	movs	r2, #100	; 0x64
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	1af3      	subs	r3, r6, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a06      	ldr	r2, [pc, #24]	; (8003abc <UART_SetConfig+0x350>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	442b      	add	r3, r5
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	e071      	b.n	8003b98 <UART_SetConfig+0x42c>
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40011400 	.word	0x40011400
 8003abc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681c      	ldr	r4, [r3, #0]
 8003ac4:	f7ff fcfa 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <UART_SetConfig+0x434>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	011d      	lsls	r5, r3, #4
 8003ae8:	f7ff fce8 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b02:	f7ff fcdb 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	; 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1af3      	subs	r3, r6, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3c:	441d      	add	r5, r3
 8003b3e:	f7ff fcbd 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b58:	f7ff fcb0 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009a      	lsls	r2, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2264      	movs	r2, #100	; 0x64
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	1af3      	subs	r3, r6, r3
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	442b      	add	r3, r5
 8003b94:	60a3      	str	r3, [r4, #8]
}
 8003b96:	e7ff      	b.n	8003b98 <UART_SetConfig+0x42c>
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba0:	51eb851f 	.word	0x51eb851f

08003ba4 <lidar_init>:
#include "TFMini.h"

bool lidar_init() {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	lidar_raw_values = malloc(number_of_characters*sizeof(uint8_t));
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <lidar_init+0x34>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00b fe35 	bl	800f81c <malloc>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <lidar_init+0x38>)
 8003bb8:	601a      	str	r2, [r3, #0]

	if (lidar_raw_values == NULL) {
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <lidar_init+0x38>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <lidar_init+0x28>
		printf("lidar malloc failed\r\n");
 8003bc2:	4807      	ldr	r0, [pc, #28]	; (8003be0 <lidar_init+0x3c>)
 8003bc4:	f00c fa3c 	bl	8010040 <puts>
		return false;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e003      	b.n	8003bd4 <lidar_init+0x30>
	}
	printf("lidar malloc succeeded\r\n");
 8003bcc:	4805      	ldr	r0, [pc, #20]	; (8003be4 <lidar_init+0x40>)
 8003bce:	f00c fa37 	bl	8010040 <puts>
	return true;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000008 	.word	0x20000008
 8003bdc:	200003c0 	.word	0x200003c0
 8003be0:	08010408 	.word	0x08010408
 8003be4:	08010420 	.word	0x08010420

08003be8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003bf0:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <MX_ADC1_Init+0xb0>)
 8003bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003bf6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c0e:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <MX_ADC1_Init+0xb4>)
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c28:	2202      	movs	r2, #2
 8003c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c38:	4816      	ldr	r0, [pc, #88]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c3a:	f7fd f907 	bl	8000e4c <HAL_ADC_Init>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c44:	214a      	movs	r1, #74	; 0x4a
 8003c46:	4816      	ldr	r0, [pc, #88]	; (8003ca0 <MX_ADC1_Init+0xb8>)
 8003c48:	f000 fcd2 	bl	80045f0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8003c4c:	230a      	movs	r3, #10
 8003c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003c54:	2307      	movs	r3, #7
 8003c56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c58:	463b      	mov	r3, r7
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	480d      	ldr	r0, [pc, #52]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c5e:	f7fd f939 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c68:	2154      	movs	r1, #84	; 0x54
 8003c6a:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <MX_ADC1_Init+0xb8>)
 8003c6c:	f000 fcc0 	bl	80045f0 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Rank = 2;
 8003c70:	2302      	movs	r3, #2
 8003c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c74:	463b      	mov	r3, r7
 8003c76:	4619      	mov	r1, r3
 8003c78:	4806      	ldr	r0, [pc, #24]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c7a:	f7fd f92b 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <MX_ADC1_Init+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c84:	215c      	movs	r1, #92	; 0x5c
 8003c86:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <MX_ADC1_Init+0xb8>)
 8003c88:	f000 fcb2 	bl	80045f0 <_Error_Handler>
  }

}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200003c4 	.word	0x200003c4
 8003c98:	40012000 	.word	0x40012000
 8003c9c:	0f000001 	.word	0x0f000001
 8003ca0:	080104d4 	.word	0x080104d4

08003ca4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a29      	ldr	r2, [pc, #164]	; (8003d58 <HAL_ADC_MspInit+0xb4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d14b      	bne.n	8003d4e <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <HAL_ADC_MspInit+0xb8>)
 8003cbc:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <HAL_ADC_MspInit+0xb8>)
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc6:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <HAL_ADC_MspInit+0xb8>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cde:	f107 030c 	add.w	r3, r7, #12
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	481e      	ldr	r0, [pc, #120]	; (8003d60 <HAL_ADC_MspInit+0xbc>)
 8003ce6:	f7fd ff31 	bl	8001b4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_ADC_MspInit+0xc4>)
 8003cee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d2e:	480d      	ldr	r0, [pc, #52]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d30:	f7fd fc24 	bl	800157c <HAL_DMA_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_ADC_MspInit+0x9e>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003d3a:	2184      	movs	r1, #132	; 0x84
 8003d3c:	480b      	ldr	r0, [pc, #44]	; (8003d6c <HAL_ADC_MspInit+0xc8>)
 8003d3e:	f000 fc57 	bl	80045f0 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d4e:	bf00      	nop
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40012000 	.word	0x40012000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020800 	.word	0x40020800
 8003d64:	2000040c 	.word	0x2000040c
 8003d68:	40026410 	.word	0x40026410
 8003d6c:	080104d4 	.word	0x080104d4

08003d70 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <MX_DMA_Init+0x4c>)
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <MX_DMA_Init+0x4c>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d84:	6313      	str	r3, [r2, #48]	; 0x30
 8003d86:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <MX_DMA_Init+0x4c>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	2038      	movs	r0, #56	; 0x38
 8003d98:	f7fd fb8f 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003d9c:	2038      	movs	r0, #56	; 0x38
 8003d9e:	f7fd fba8 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003da2:	2200      	movs	r2, #0
 8003da4:	2100      	movs	r1, #0
 8003da6:	2039      	movs	r0, #57	; 0x39
 8003da8:	f7fd fb87 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003dac:	2039      	movs	r0, #57	; 0x39
 8003dae:	f7fd fba0 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dcc:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f043 0304 	orr.w	r3, r3, #4
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e3c:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <MX_GPIO_Init+0xd4>)
 8003e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4813      	ldr	r0, [pc, #76]	; (8003e98 <MX_GPIO_Init+0xd8>)
 8003e4c:	f7fd fe7e 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin|VL53L0X_INT_Pin;
 8003e50:	2330      	movs	r3, #48	; 0x30
 8003e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <MX_GPIO_Init+0xdc>)
 8003e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4619      	mov	r1, r3
 8003e62:	480f      	ldr	r0, [pc, #60]	; (8003ea0 <MX_GPIO_Init+0xe0>)
 8003e64:	f7fd fe72 	bl	8001b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	200a      	movs	r0, #10
 8003e6e:	f7fd fb24 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003e72:	200a      	movs	r0, #10
 8003e74:	f7fd fb3d 	bl	80014f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2017      	movs	r0, #23
 8003e7e:	f7fd fb1c 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e82:	2017      	movs	r0, #23
 8003e84:	f7fd fb35 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 8003e88:	bf00      	nop
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	10110000 	.word	0x10110000
 8003e98:	40020800 	.word	0x40020800
 8003e9c:	10210000 	.word	0x10210000
 8003ea0:	40020000 	.word	0x40020000

08003ea4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <MX_I2C1_Init+0x58>)
 8003eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <MX_I2C1_Init+0x5c>)
 8003eb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ec6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ee2:	f7fd ffcd 	bl	8001e80 <HAL_I2C_Init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003eec:	2143      	movs	r1, #67	; 0x43
 8003eee:	4805      	ldr	r0, [pc, #20]	; (8003f04 <MX_I2C1_Init+0x60>)
 8003ef0:	f000 fb7e 	bl	80045f0 <_Error_Handler>
  }

}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200004c0 	.word	0x200004c0
 8003efc:	40005400 	.word	0x40005400
 8003f00:	00061a80 	.word	0x00061a80
 8003f04:	080104e4 	.word	0x080104e4

08003f08 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <MX_I2C3_Init+0x58>)
 8003f10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <MX_I2C3_Init+0x5c>)
 8003f16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003f44:	4805      	ldr	r0, [pc, #20]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f46:	f7fd ff9b 	bl	8001e80 <HAL_I2C_Init>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f50:	2156      	movs	r1, #86	; 0x56
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <MX_I2C3_Init+0x60>)
 8003f54:	f000 fb4c 	bl	80045f0 <_Error_Handler>
  }

}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	2000046c 	.word	0x2000046c
 8003f60:	40005c00 	.word	0x40005c00
 8003f64:	00061a80 	.word	0x00061a80
 8003f68:	080104e4 	.word	0x080104e4

08003f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_I2C_MspInit+0xc4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d11f      	bne.n	8003fbe <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f84:	2312      	movs	r3, #18
 8003f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f90:	2304      	movs	r3, #4
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4826      	ldr	r0, [pc, #152]	; (8004034 <HAL_I2C_MspInit+0xc8>)
 8003f9c:	f7fd fdd6 	bl	8001b4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	4a24      	ldr	r2, [pc, #144]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fae:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb0:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003fbc:	e034      	b.n	8004028 <HAL_I2C_MspInit+0xbc>
  else if(i2cHandle->Instance==I2C3)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_I2C_MspInit+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d12f      	bne.n	8004028 <HAL_I2C_MspInit+0xbc>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fce:	2312      	movs	r3, #18
 8003fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fda:	2304      	movs	r3, #4
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4816      	ldr	r0, [pc, #88]	; (8004040 <HAL_I2C_MspInit+0xd4>)
 8003fe6:	f7fd fdb1 	bl	8001b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ff0:	2312      	movs	r3, #18
 8003ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	4619      	mov	r1, r3
 8004006:	480f      	ldr	r0, [pc, #60]	; (8004044 <HAL_I2C_MspInit+0xd8>)
 8004008:	f7fd fda0 	bl	8001b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800401a:	6413      	str	r3, [r2, #64]	; 0x40
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	bf00      	nop
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40005400 	.word	0x40005400
 8004034:	40020400 	.word	0x40020400
 8004038:	40023800 	.word	0x40023800
 800403c:	40005c00 	.word	0x40005c00
 8004040:	40020800 	.word	0x40020800
 8004044:	40020000 	.word	0x40020000

08004048 <_write>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	b29a      	uxth	r2, r3
 8004058:	2332      	movs	r3, #50	; 0x32
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4803      	ldr	r0, [pc, #12]	; (800406c <_write+0x24>)
 800405e:	f7ff faa2 	bl	80035a6 <HAL_UART_Transmit>
	return len;
 8004062:	687b      	ldr	r3, [r7, #4]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000ae4 	.word	0x20000ae4

08004070 <HAL_GPIO_EXTI_Callback>:
VL53L0X_Dev_t dev2;
VL53L0X_DEV Dev2 = &dev2;
int status, status2, ting = 0;
volatile int VL53L0X_callback_counter, VL53L1X_callback_counter;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == VL53L0X_INT_Pin) {
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b20      	cmp	r3, #32
 800407e:	d104      	bne.n	800408a <HAL_GPIO_EXTI_Callback+0x1a>
		++VL53L0X_callback_counter;
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004088:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == VL53L1X_INT_Pin) {
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b10      	cmp	r3, #16
 800408e:	d104      	bne.n	800409a <HAL_GPIO_EXTI_Callback+0x2a>
		++VL53L1X_callback_counter;
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8004098:	6013      	str	r3, [r2, #0]
	}
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200008bc 	.word	0x200008bc
 80040ac:	200008cc 	.word	0x200008cc

080040b0 <AutonomousLowPowerRangingTest>:

void AutonomousLowPowerRangingTest(void) {
 80040b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af04      	add	r7, sp, #16

	static VL53L1_RangingMeasurementData_t RangingData;
	if (ting == 0) {
 80040b8:	4b57      	ldr	r3, [pc, #348]	; (8004218 <AutonomousLowPowerRangingTest+0x168>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d153      	bne.n	8004168 <AutonomousLowPowerRangingTest+0xb8>
		status = VL53L1_WaitDeviceBooted(Dev);
 80040c0:	4b56      	ldr	r3, [pc, #344]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f005 fe8b 	bl	8009de0 <VL53L1_WaitDeviceBooted>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b54      	ldr	r3, [pc, #336]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 80040d0:	601a      	str	r2, [r3, #0]
		status = VL53L1_DataInit(Dev);
 80040d2:	4b52      	ldr	r3, [pc, #328]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f005 fe06 	bl	8009ce8 <VL53L1_DataInit>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 80040e2:	601a      	str	r2, [r3, #0]
		status = VL53L1_StaticInit(Dev);
 80040e4:	4b4d      	ldr	r3, [pc, #308]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f005 fe52 	bl	8009d92 <VL53L1_StaticInit>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b4b      	ldr	r3, [pc, #300]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 80040f4:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetPresetMode(Dev, VL53L1_PRESETMODE_AUTONOMOUS);
 80040f6:	4b49      	ldr	r3, [pc, #292]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2103      	movs	r1, #3
 80040fc:	4618      	mov	r0, r3
 80040fe:	f005 ff54 	bl	8009faa <VL53L1_SetPresetMode>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	4b46      	ldr	r3, [pc, #280]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004108:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800410a:	4b44      	ldr	r3, [pc, #272]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2103      	movs	r1, #3
 8004110:	4618      	mov	r0, r3
 8004112:	f005 ff92 	bl	800a03a <VL53L1_SetDistanceMode>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 800411c:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 70000);
 800411e:	4b3f      	ldr	r3, [pc, #252]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4940      	ldr	r1, [pc, #256]	; (8004224 <AutonomousLowPowerRangingTest+0x174>)
 8004124:	4618      	mov	r0, r3
 8004126:	f006 f80f 	bl	800a148 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	4b3c      	ldr	r3, [pc, #240]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004130:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 200);
 8004132:	4b3a      	ldr	r3, [pc, #232]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	21c8      	movs	r1, #200	; 0xc8
 8004138:	4618      	mov	r0, r3
 800413a:	f006 f983 	bl	800a444 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800413e:	4603      	mov	r3, r0
 8004140:	461a      	mov	r2, r3
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004144:	601a      	str	r2, [r3, #0]
		status = VL53L1_StartMeasurement(Dev);
 8004146:	4b35      	ldr	r3, [pc, #212]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f006 faf0 	bl	800a730 <VL53L1_StartMeasurement>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004156:	601a      	str	r2, [r3, #0]

		if (status) {
 8004158:	4b31      	ldr	r3, [pc, #196]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <AutonomousLowPowerRangingTest+0xb8>
			printf("VL53L1_StartMeasurement failed \r\n");
 8004160:	4831      	ldr	r0, [pc, #196]	; (8004228 <AutonomousLowPowerRangingTest+0x178>)
 8004162:	f00b ff6d 	bl	8010040 <puts>
			while (1)
 8004166:	e7fe      	b.n	8004166 <AutonomousLowPowerRangingTest+0xb6>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004168:	bf30      	wfi
	if (interruptModeQuestionMark == 0) {
		//do // interrupt mode
		//{
		__WFI();

		if (VL53L1X_callback_counter != 0) {
 800416a:	4b30      	ldr	r3, [pc, #192]	; (800422c <AutonomousLowPowerRangingTest+0x17c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d04a      	beq.n	8004208 <AutonomousLowPowerRangingTest+0x158>
			VL53L1X_callback_counter = 0;
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <AutonomousLowPowerRangingTest+0x17c>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	492c      	ldr	r1, [pc, #176]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 800417e:	4618      	mov	r0, r3
 8004180:	f006 fdba 	bl	800acf8 <VL53L1_GetRangingMeasurementData>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 800418a:	601a      	str	r2, [r3, #0]
			if (status == 0) {
 800418c:	4b24      	ldr	r3, [pc, #144]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d130      	bne.n	80041f6 <AutonomousLowPowerRangingTest+0x146>
				if(RangingData.RangeMilliMeter < 5000)
 8004194:	4b26      	ldr	r3, [pc, #152]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 8004196:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800419a:	f241 3287 	movw	r2, #4999	; 0x1387
 800419e:	4293      	cmp	r3, r2
 80041a0:	dc29      	bgt.n	80041f6 <AutonomousLowPowerRangingTest+0x146>
				printf("VL53L1X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80041a2:	4b23      	ldr	r3, [pc, #140]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 80041a4:	7edb      	ldrb	r3, [r3, #27]
 80041a6:	461e      	mov	r6, r3
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 80041aa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80041ae:	4698      	mov	r8, r3
						RangingData.SignalRateRtnMegaCps / 65536.0, RangingData.AmbientRateRtnMegaCps / 65336.0);
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 80041b2:	689b      	ldr	r3, [r3, #8]
				printf("VL53L1X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc f9a5 	bl	8000504 <__aeabi_ui2d>
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <AutonomousLowPowerRangingTest+0x184>)
 80041c0:	f7fc fb40 	bl	8000844 <__aeabi_ddiv>
 80041c4:	4603      	mov	r3, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	4625      	mov	r5, r4
 80041ca:	461c      	mov	r4, r3
						RangingData.SignalRateRtnMegaCps / 65536.0, RangingData.AmbientRateRtnMegaCps / 65336.0);
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 80041ce:	68db      	ldr	r3, [r3, #12]
				printf("VL53L1X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f997 	bl	8000504 <__aeabi_ui2d>
 80041d6:	a30e      	add	r3, pc, #56	; (adr r3, 8004210 <AutonomousLowPowerRangingTest+0x160>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc fb32 	bl	8000844 <__aeabi_ddiv>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041e8:	e9cd 4500 	strd	r4, r5, [sp]
 80041ec:	4642      	mov	r2, r8
 80041ee:	4631      	mov	r1, r6
 80041f0:	4811      	ldr	r0, [pc, #68]	; (8004238 <AutonomousLowPowerRangingTest+0x188>)
 80041f2:	f00b feb1 	bl	800ff58 <iprintf>
			}
			status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f006 fb8e 	bl	800a91c <VL53L1_ClearInterruptAndStartMeasurement>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004206:	601a      	str	r2, [r3, #0]
				break;
			}
		} while (1);
		 */
	}
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004210:	00000000 	.word	0x00000000
 8004214:	40efe700 	.word	0x40efe700
 8004218:	20000374 	.word	0x20000374
 800421c:	2000000c 	.word	0x2000000c
 8004220:	200008d0 	.word	0x200008d0
 8004224:	00011170 	.word	0x00011170
 8004228:	080104f4 	.word	0x080104f4
 800422c:	200008cc 	.word	0x200008cc
 8004230:	20000378 	.word	0x20000378
 8004234:	40f00000 	.word	0x40f00000
 8004238:	08010518 	.word	0x08010518
 800423c:	00000000 	.word	0x00000000

08004240 <AutonomousLowPowerRangingTest2>:


void AutonomousLowPowerRangingTest2(void) {
 8004240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af04      	add	r7, sp, #16

	static VL53L0X_RangingMeasurementData_t RangingData;
	if (ting == 0) {
 8004248:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <AutonomousLowPowerRangingTest2+0x190>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d173      	bne.n	8004338 <AutonomousLowPowerRangingTest2+0xf8>
		status2 = VL53L0X_WaitDeviceBooted(Dev2);
 8004250:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 ff27 	bl	80050a8 <VL53L0X_WaitDeviceBooted>
 800425a:	4603      	mov	r3, r0
 800425c:	461a      	mov	r2, r3
 800425e:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 8004260:	601a      	str	r2, [r3, #0]
		status2 = VL53L0X_DataInit(Dev2);
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fc38 	bl	8004adc <VL53L0X_DataInit>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	4b59      	ldr	r3, [pc, #356]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 8004272:	601a      	str	r2, [r3, #0]
		status2 = VL53L0X_StaticInit(Dev2);
 8004274:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fd93 	bl	8004da4 <VL53L0X_StaticInit>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 8004284:	601a      	str	r2, [r3, #0]
		status2 = VL53L0X_SetDeviceMode(Dev2, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004286:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f000 ffa9 	bl	80051e4 <VL53L0X_SetDeviceMode>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 8004298:	601a      	str	r2, [r3, #0]
		//status = VL53L0X_SetDistanceMode(Dev2, VL53L1_DISTANCEMODE_LONG);
		status2 = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev2, 33000);
 800429a:	4b4e      	ldr	r3, [pc, #312]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f818 	bl	80052d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 80042ae:	601a      	str	r2, [r3, #0]
		status2 = VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev2, 200);
 80042b0:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	21c8      	movs	r1, #200	; 0xc8
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 f9ae 	bl	8005618 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 80042c2:	601a      	str	r2, [r3, #0]

		FixPoint1616_t signalLimit = (FixPoint1616_t) (0.1 * 65536);
 80042c4:	f641 1399 	movw	r3, #6553	; 0x1999
 80042c8:	607b      	str	r3, [r7, #4]
		FixPoint1616_t sigmaLimit = (FixPoint1616_t) (60 * 65536);
 80042ca:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80042ce:	603b      	str	r3, [r7, #0]

		status2 = VL53L0X_SetLimitCheckValue(Dev2,
 80042d0:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 fafd 	bl	80058d8 <VL53L0X_SetLimitCheckValue>
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 80042e4:	601a      	str	r2, [r3, #0]
		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);

		status2 = VL53L0X_SetLimitCheckValue(Dev2,
 80042e6:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 faf2 	bl	80058d8 <VL53L0X_SetLimitCheckValue>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 80042fa:	601a      	str	r2, [r3, #0]
		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);

		status2 = VL53L0X_SetVcselPulsePeriod(Dev2, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2212      	movs	r2, #18
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f001 f80d 	bl	8005324 <VL53L0X_SetVcselPulsePeriod>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 8004310:	601a      	str	r2, [r3, #0]

		status2 = VL53L0X_SetVcselPulsePeriod(Dev2, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8004312:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	220e      	movs	r2, #14
 8004318:	2101      	movs	r1, #1
 800431a:	4618      	mov	r0, r3
 800431c:	f001 f802 	bl	8005324 <VL53L0X_SetVcselPulsePeriod>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 8004326:	601a      	str	r2, [r3, #0]

		if (status2) {
 8004328:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <AutonomousLowPowerRangingTest2+0xf8>
			printf("VL53L0_StartMeasurement failed \r\n");
 8004330:	482a      	ldr	r0, [pc, #168]	; (80043dc <AutonomousLowPowerRangingTest2+0x19c>)
 8004332:	f00b fe85 	bl	8010040 <puts>
			while (1)
 8004336:	e7fe      	b.n	8004336 <AutonomousLowPowerRangingTest2+0xf6>
				;
		}
	}
	status2 = VL53L0X_PerformSingleRangingMeasurement(Dev2, &RangingData);
 8004338:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4928      	ldr	r1, [pc, #160]	; (80043e0 <AutonomousLowPowerRangingTest2+0x1a0>)
 800433e:	4618      	mov	r0, r3
 8004340:	f001 feac 	bl	800609c <VL53L0X_PerformSingleRangingMeasurement>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 800434a:	601a      	str	r2, [r3, #0]
	if (status2 == 0) {
 800434c:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <AutonomousLowPowerRangingTest2+0x198>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d12e      	bne.n	80043b2 <AutonomousLowPowerRangingTest2+0x172>
		if(RangingData.RangeMilliMeter < 3000)
 8004354:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <AutonomousLowPowerRangingTest2+0x1a0>)
 8004356:	891b      	ldrh	r3, [r3, #8]
 8004358:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800435c:	4293      	cmp	r3, r2
 800435e:	d828      	bhi.n	80043b2 <AutonomousLowPowerRangingTest2+0x172>
		printf("VL53L0X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter, RangingData.SignalRateRtnMegaCps / 65536.0,
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <AutonomousLowPowerRangingTest2+0x1a0>)
 8004362:	7e1b      	ldrb	r3, [r3, #24]
 8004364:	461e      	mov	r6, r3
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <AutonomousLowPowerRangingTest2+0x1a0>)
 8004368:	891b      	ldrh	r3, [r3, #8]
 800436a:	4698      	mov	r8, r3
 800436c:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <AutonomousLowPowerRangingTest2+0x1a0>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc f8c7 	bl	8000504 <__aeabi_ui2d>
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <AutonomousLowPowerRangingTest2+0x1a4>)
 800437c:	f7fc fa62 	bl	8000844 <__aeabi_ddiv>
 8004380:	4603      	mov	r3, r0
 8004382:	460c      	mov	r4, r1
 8004384:	4625      	mov	r5, r4
 8004386:	461c      	mov	r4, r3
				RangingData.AmbientRateRtnMegaCps / 65336.0);
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <AutonomousLowPowerRangingTest2+0x1a0>)
 800438a:	691b      	ldr	r3, [r3, #16]
		printf("VL53L0X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter, RangingData.SignalRateRtnMegaCps / 65536.0,
 800438c:	4618      	mov	r0, r3
 800438e:	f7fc f8b9 	bl	8000504 <__aeabi_ui2d>
 8004392:	a30d      	add	r3, pc, #52	; (adr r3, 80043c8 <AutonomousLowPowerRangingTest2+0x188>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f7fc fa54 	bl	8000844 <__aeabi_ddiv>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043a4:	e9cd 4500 	strd	r4, r5, [sp]
 80043a8:	4642      	mov	r2, r8
 80043aa:	4631      	mov	r1, r6
 80043ac:	480e      	ldr	r0, [pc, #56]	; (80043e8 <AutonomousLowPowerRangingTest2+0x1a8>)
 80043ae:	f00b fdd3 	bl	800ff58 <iprintf>
	}
	VL53L0X_ClearInterruptMask(Dev2,0);
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <AutonomousLowPowerRangingTest2+0x194>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 fff7 	bl	80063ac <VL53L0X_ClearInterruptMask>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c8:	00000000 	.word	0x00000000
 80043cc:	40efe700 	.word	0x40efe700
 80043d0:	20000374 	.word	0x20000374
 80043d4:	20000010 	.word	0x20000010
 80043d8:	200008c4 	.word	0x200008c4
 80043dc:	08010534 	.word	0x08010534
 80043e0:	20000394 	.word	0x20000394
 80043e4:	40f00000 	.word	0x40f00000
 80043e8:	08010558 	.word	0x08010558

080043ec <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80043f2:	f7fc fc97 	bl	8000d24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80043f6:	f000 f881 	bl	80044fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80043fa:	f7ff fce1 	bl	8003dc0 <MX_GPIO_Init>
	MX_DMA_Init();
 80043fe:	f7ff fcb7 	bl	8003d70 <MX_DMA_Init>
	MX_ADC1_Init();
 8004402:	f7ff fbf1 	bl	8003be8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8004406:	f7ff fd4d 	bl	8003ea4 <MX_I2C1_Init>
	MX_USART6_UART_Init();
 800440a:	f000 fa95 	bl	8004938 <MX_USART6_UART_Init>
	MX_I2C3_Init();
 800440e:	f7ff fd7b 	bl	8003f08 <MX_I2C3_Init>
	MX_USART2_UART_Init();
 8004412:	f000 fa63 	bl	80048dc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("Program has been started\r\n");
 8004416:	482f      	ldr	r0, [pc, #188]	; (80044d4 <main+0xe8>)
 8004418:	f00b fe12 	bl	8010040 <puts>
	PSD_init();
 800441c:	f000 f8ee 	bl	80045fc <PSD_init>
	lidar_init();
 8004420:	f7ff fbc0 	bl	8003ba4 <lidar_init>
	stopwatch_init();
 8004424:	f000 f9e4 	bl	80047f0 <stopwatch_init>

	set_stopwatch_blocking_time(0, 0);
 8004428:	2100      	movs	r1, #0
 800442a:	2000      	movs	r0, #0
 800442c:	f000 fa3e 	bl	80048ac <set_stopwatch_blocking_time>
	set_stopwatch_blocking_time(1, 0);
 8004430:	2100      	movs	r1, #0
 8004432:	2001      	movs	r0, #1
 8004434:	f000 fa3a 	bl	80048ac <set_stopwatch_blocking_time>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	dev.I2cDevAddr = 0x52;
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <main+0xec>)
 800443a:	2252      	movs	r2, #82	; 0x52
 800443c:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	dev.I2cHandle = &hi2c3;
 8004440:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <main+0xec>)
 8004442:	4a26      	ldr	r2, [pc, #152]	; (80044dc <main+0xf0>)
 8004444:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	dev.comms_speed_khz = 400;
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <main+0xec>)
 800444a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800444e:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
	dev2.I2cDevAddr = 0x52;
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <main+0xf4>)
 8004454:	2252      	movs	r2, #82	; 0x52
 8004456:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	dev2.i2c_handle = &hi2c1;
 800445a:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <main+0xf4>)
 800445c:	4a21      	ldr	r2, [pc, #132]	; (80044e4 <main+0xf8>)
 800445e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	dev2.comms_speed_khz = 400;
 8004462:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <main+0xf4>)
 8004464:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004468:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	uint8_t byteData;
	uint16_t wordData;
	VL53L1_RdByte(Dev, 0x010F, &byteData);
 800446c:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <main+0xfc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	1dfa      	adds	r2, r7, #7
 8004472:	f240 110f 	movw	r1, #271	; 0x10f
 8004476:	4618      	mov	r0, r3
 8004478:	f009 fd36 	bl	800dee8 <VL53L1_RdByte>
	printf("VL53L1X Model_ID: %02X\n\r", byteData);
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	4619      	mov	r1, r3
 8004480:	481a      	ldr	r0, [pc, #104]	; (80044ec <main+0x100>)
 8004482:	f00b fd69 	bl	800ff58 <iprintf>
	VL53L1_RdByte(Dev, 0x0110, &byteData);
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <main+0xfc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1dfa      	adds	r2, r7, #7
 800448c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004490:	4618      	mov	r0, r3
 8004492:	f009 fd29 	bl	800dee8 <VL53L1_RdByte>
	printf("VL53L1X Module_Type: %02X\n\r", byteData);
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	4619      	mov	r1, r3
 800449a:	4815      	ldr	r0, [pc, #84]	; (80044f0 <main+0x104>)
 800449c:	f00b fd5c 	bl	800ff58 <iprintf>
	VL53L1_RdWord(Dev, 0x010F, &wordData);
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <main+0xfc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	1d3a      	adds	r2, r7, #4
 80044a6:	f240 110f 	movw	r1, #271	; 0x10f
 80044aa:	4618      	mov	r0, r3
 80044ac:	f009 fd4e 	bl	800df4c <VL53L1_RdWord>
	printf("VL53L1X: %02X\n\r", wordData);
 80044b0:	88bb      	ldrh	r3, [r7, #4]
 80044b2:	4619      	mov	r1, r3
 80044b4:	480f      	ldr	r0, [pc, #60]	; (80044f4 <main+0x108>)
 80044b6:	f00b fd4f 	bl	800ff58 <iprintf>

	while (1) {
		AutonomousLowPowerRangingTest();
 80044ba:	f7ff fdf9 	bl	80040b0 <AutonomousLowPowerRangingTest>
		AutonomousLowPowerRangingTest2();
 80044be:	f7ff febf 	bl	8004240 <AutonomousLowPowerRangingTest2>
		//VL53L0X_Measurement();
		HAL_Delay(100);
 80044c2:	2064      	movs	r0, #100	; 0x64
 80044c4:	f7fc fca0 	bl	8000e08 <HAL_Delay>
		++ting;
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <main+0x10c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <main+0x10c>)
 80044d0:	6013      	str	r3, [r2, #0]
		AutonomousLowPowerRangingTest();
 80044d2:	e7f2      	b.n	80044ba <main+0xce>
 80044d4:	08010574 	.word	0x08010574
 80044d8:	20000514 	.word	0x20000514
 80044dc:	2000046c 	.word	0x2000046c
 80044e0:	200008d4 	.word	0x200008d4
 80044e4:	200004c0 	.word	0x200004c0
 80044e8:	2000000c 	.word	0x2000000c
 80044ec:	08010590 	.word	0x08010590
 80044f0:	080105ac 	.word	0x080105ac
 80044f4:	080105c8 	.word	0x080105c8
 80044f8:	20000374 	.word	0x20000374

080044fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b094      	sub	sp, #80	; 0x50
 8004500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4a36      	ldr	r2, [pc, #216]	; (80045e0 <SystemClock_Config+0xe4>)
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <SystemClock_Config+0xe4>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <SystemClock_Config+0xe4>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	4a30      	ldr	r2, [pc, #192]	; (80045e4 <SystemClock_Config+0xe8>)
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <SystemClock_Config+0xe8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <SystemClock_Config+0xe8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800453e:	2302      	movs	r3, #2
 8004540:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004542:	2301      	movs	r3, #1
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8004546:	2310      	movs	r3, #16
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800454a:	2302      	movs	r3, #2
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800454e:	2300      	movs	r3, #0
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8004552:	2310      	movs	r3, #16
 8004554:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8004556:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800455c:	2304      	movs	r3, #4
 800455e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004560:	2307      	movs	r3, #7
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004564:	f107 0320 	add.w	r3, r7, #32
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fb9f 	bl	8002cac <HAL_RCC_OscConfig>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d004      	beq.n	800457e <SystemClock_Config+0x82>
		_Error_Handler(__FILE__, __LINE__);
 8004574:	f240 1143 	movw	r1, #323	; 0x143
 8004578:	481b      	ldr	r0, [pc, #108]	; (80045e8 <SystemClock_Config+0xec>)
 800457a:	f000 f839 	bl	80045f0 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800457e:	230f      	movs	r3, #15
 8004580:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004582:	2302      	movs	r3, #2
 8004584:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800458a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800458e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fdc8 	bl	8003130 <HAL_RCC_ClockConfig>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <SystemClock_Config+0xb4>
		_Error_Handler(__FILE__, __LINE__);
 80045a6:	f240 114f 	movw	r1, #335	; 0x14f
 80045aa:	480f      	ldr	r0, [pc, #60]	; (80045e8 <SystemClock_Config+0xec>)
 80045ac:	f000 f820 	bl	80045f0 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80045b0:	f7fe ff78 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <SystemClock_Config+0xf0>)
 80045b8:	fba3 2302 	umull	r2, r3, r3, r2
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc ffa5 	bl	800150e <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80045c4:	2004      	movs	r0, #4
 80045c6:	f7fc ffaf 	bl	8001528 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	f04f 30ff 	mov.w	r0, #4294967295
 80045d2:	f7fc ff72 	bl	80014ba <HAL_NVIC_SetPriority>
}
 80045d6:	bf00      	nop
 80045d8:	3750      	adds	r7, #80	; 0x50
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40007000 	.word	0x40007000
 80045e8:	080105d8 	.word	0x080105d8
 80045ec:	10624dd3 	.word	0x10624dd3

080045f0 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80045fa:	e7fe      	b.n	80045fa <_Error_Handler+0xa>

080045fc <PSD_init>:
#include "psd.h"

bool PSD_init() {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	psd_raw_values = malloc(number_of_sensors * sizeof(uint16_t));
 8004600:	2302      	movs	r3, #2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f00b f909 	bl	800f81c <malloc>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <PSD_init+0x34>)
 8004610:	601a      	str	r2, [r3, #0]

	if (psd_raw_values == NULL) {
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <PSD_init+0x34>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <PSD_init+0x28>
		printf("psd malloc failed\r\n");
 800461a:	4806      	ldr	r0, [pc, #24]	; (8004634 <PSD_init+0x38>)
 800461c:	f00b fd10 	bl	8010040 <puts>
		return false;
 8004620:	2300      	movs	r3, #0
 8004622:	e003      	b.n	800462c <PSD_init+0x30>
	}
	printf("psd malloc succeeded\r\n");
 8004624:	4804      	ldr	r0, [pc, #16]	; (8004638 <PSD_init+0x3c>)
 8004626:	f00b fd0b 	bl	8010040 <puts>
	return true;
 800462a:	2301      	movs	r3, #1
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	200008c0 	.word	0x200008c0
 8004634:	080105e8 	.word	0x080105e8
 8004638:	080105fc 	.word	0x080105fc

0800463c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	4a25      	ldr	r2, [pc, #148]	; (80046dc <HAL_MspInit+0xa0>)
 8004648:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_MspInit+0xa0>)
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004650:	6453      	str	r3, [r2, #68]	; 0x44
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_MspInit+0xa0>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	4a1e      	ldr	r2, [pc, #120]	; (80046dc <HAL_MspInit+0xa0>)
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_MspInit+0xa0>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	6413      	str	r3, [r2, #64]	; 0x40
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <HAL_MspInit+0xa0>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800467a:	2007      	movs	r0, #7
 800467c:	f7fc ff12 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004680:	2200      	movs	r2, #0
 8004682:	2100      	movs	r1, #0
 8004684:	f06f 000b 	mvn.w	r0, #11
 8004688:	f7fc ff17 	bl	80014ba <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800468c:	2200      	movs	r2, #0
 800468e:	2100      	movs	r1, #0
 8004690:	f06f 000a 	mvn.w	r0, #10
 8004694:	f7fc ff11 	bl	80014ba <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004698:	2200      	movs	r2, #0
 800469a:	2100      	movs	r1, #0
 800469c:	f06f 0009 	mvn.w	r0, #9
 80046a0:	f7fc ff0b 	bl	80014ba <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	f06f 0004 	mvn.w	r0, #4
 80046ac:	f7fc ff05 	bl	80014ba <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	2100      	movs	r1, #0
 80046b4:	f06f 0003 	mvn.w	r0, #3
 80046b8:	f7fc feff 	bl	80014ba <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80046bc:	2200      	movs	r2, #0
 80046be:	2100      	movs	r1, #0
 80046c0:	f06f 0001 	mvn.w	r0, #1
 80046c4:	f7fc fef9 	bl	80014ba <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80046c8:	2200      	movs	r2, #0
 80046ca:	2100      	movs	r1, #0
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	f7fc fef3 	bl	80014ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40023800 	.word	0x40023800

080046e0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80046ee:	b480      	push	{r7}
 80046f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046f2:	e7fe      	b.n	80046f2 <HardFault_Handler+0x4>

080046f4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046f8:	e7fe      	b.n	80046f8 <MemManage_Handler+0x4>

080046fa <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80046fa:	b480      	push	{r7}
 80046fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046fe:	e7fe      	b.n	80046fe <BusFault_Handler+0x4>

08004700 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004704:	e7fe      	b.n	8004704 <UsageFault_Handler+0x4>

08004706 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004706:	b480      	push	{r7}
 8004708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004734:	f7fc fb48 	bl	8000dc8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004738:	f7fc ff12 	bl	8001560 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}

08004740 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004744:	2010      	movs	r0, #16
 8004746:	f7fd fb83 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}

0800474e <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004752:	2020      	movs	r0, #32
 8004754:	f7fd fb7c 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}

0800475c <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004760:	4802      	ldr	r0, [pc, #8]	; (800476c <DMA2_Stream0_IRQHandler+0x10>)
 8004762:	f7fc ffb9 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004766:	bf00      	nop
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	2000040c 	.word	0x2000040c

08004770 <DMA2_Stream1_IRQHandler>:

/**
* @brief This function handles DMA2 stream1 global interrupt.
*/
void DMA2_Stream1_IRQHandler(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004774:	4802      	ldr	r0, [pc, #8]	; (8004780 <DMA2_Stream1_IRQHandler+0x10>)
 8004776:	f7fc ffaf 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000a44 	.word	0x20000a44

08004784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <SystemInit+0x60>)
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <SystemInit+0x60>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004798:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <SystemInit+0x64>)
 800479a:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <SystemInit+0x64>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <SystemInit+0x64>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80047aa:	4a0f      	ldr	r2, [pc, #60]	; (80047e8 <SystemInit+0x64>)
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <SystemInit+0x64>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80047b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80047ba:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <SystemInit+0x64>)
 80047bc:	4a0b      	ldr	r2, [pc, #44]	; (80047ec <SystemInit+0x68>)
 80047be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80047c0:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <SystemInit+0x64>)
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <SystemInit+0x64>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <SystemInit+0x64>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047d2:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <SystemInit+0x60>)
 80047d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047d8:	609a      	str	r2, [r3, #8]
#endif
}
 80047da:	bf00      	nop
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	40023800 	.word	0x40023800
 80047ec:	24003010 	.word	0x24003010

080047f0 <stopwatch_init>:
#include "timer.h"

bool stopwatch_init() {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
	stopwatch = malloc(number_of_stopwatches * sizeof(uint16_t));
 80047f6:	2302      	movs	r3, #2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4618      	mov	r0, r3
 80047fc:	f00b f80e 	bl	800f81c <malloc>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <stopwatch_init+0xa8>)
 8004806:	601a      	str	r2, [r3, #0]
	is_stopwatch_on = malloc(number_of_stopwatches * sizeof(bool));
 8004808:	2302      	movs	r3, #2
 800480a:	4618      	mov	r0, r3
 800480c:	f00b f806 	bl	800f81c <malloc>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	4b21      	ldr	r3, [pc, #132]	; (800489c <stopwatch_init+0xac>)
 8004816:	601a      	str	r2, [r3, #0]
	stopwatch_lock_time = malloc(number_of_stopwatches * sizeof(uint16_t));
 8004818:	2302      	movs	r3, #2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f00a fffd 	bl	800f81c <malloc>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <stopwatch_init+0xb0>)
 8004828:	601a      	str	r2, [r3, #0]

	if (stopwatch == NULL || is_stopwatch_on == NULL
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <stopwatch_init+0xa8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <stopwatch_init+0x52>
 8004832:	4b1a      	ldr	r3, [pc, #104]	; (800489c <stopwatch_init+0xac>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <stopwatch_init+0x52>
			|| stopwatch_lock_time == NULL) {
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <stopwatch_init+0xb0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <stopwatch_init+0x5c>
		printf("stopwatch malloc failed\r\n");
 8004842:	4818      	ldr	r0, [pc, #96]	; (80048a4 <stopwatch_init+0xb4>)
 8004844:	f00b fbfc 	bl	8010040 <puts>
		return false;
 8004848:	2300      	movs	r3, #0
 800484a:	e021      	b.n	8004890 <stopwatch_init+0xa0>
	}

	for(uint8_t i = 0; i<number_of_stopwatches; ++i)
 800484c:	2300      	movs	r3, #0
 800484e:	71fb      	strb	r3, [r7, #7]
 8004850:	e016      	b.n	8004880 <stopwatch_init+0x90>
	{
		stopwatch[i] = 0;
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <stopwatch_init+0xa8>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	2200      	movs	r2, #0
 800485e:	801a      	strh	r2, [r3, #0]
		is_stopwatch_on[i] = false;
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <stopwatch_init+0xac>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	4413      	add	r3, r2
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
		stopwatch_lock_time[i] = 0;
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <stopwatch_init+0xb0>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	2200      	movs	r2, #0
 8004878:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<number_of_stopwatches; ++i)
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	3301      	adds	r3, #1
 800487e:	71fb      	strb	r3, [r7, #7]
 8004880:	2202      	movs	r2, #2
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	4293      	cmp	r3, r2
 8004886:	d3e4      	bcc.n	8004852 <stopwatch_init+0x62>
	}

	printf("stopwatch malloc succeeded\r\n");
 8004888:	4807      	ldr	r0, [pc, #28]	; (80048a8 <stopwatch_init+0xb8>)
 800488a:	f00b fbd9 	bl	8010040 <puts>
	return true;
 800488e:	2301      	movs	r3, #1
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000a40 	.word	0x20000a40
 800489c:	200008c8 	.word	0x200008c8
 80048a0:	200008b8 	.word	0x200008b8
 80048a4:	08010648 	.word	0x08010648
 80048a8:	08010664 	.word	0x08010664

080048ac <set_stopwatch_blocking_time>:

bool is_locked(uint8_t _stopwatch_number) {
	return is_stopwatch_on[_stopwatch_number];
}

void set_stopwatch_blocking_time(uint8_t _stopwatch_number, uint16_t _blocking_time) {
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	460a      	mov	r2, r1
 80048b6:	71fb      	strb	r3, [r7, #7]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80bb      	strh	r3, [r7, #4]
	stopwatch_lock_time[_stopwatch_number] = _blocking_time;
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <set_stopwatch_blocking_time+0x2c>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	88ba      	ldrh	r2, [r7, #4]
 80048c8:	801a      	strh	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	200008b8 	.word	0x200008b8

080048dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <MX_USART2_UART_Init+0x50>)
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <MX_USART2_UART_Init+0x54>)
 80048e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048e6:	4b11      	ldr	r3, [pc, #68]	; (800492c <MX_USART2_UART_Init+0x50>)
 80048e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <MX_USART2_UART_Init+0x50>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <MX_USART2_UART_Init+0x50>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <MX_USART2_UART_Init+0x50>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <MX_USART2_UART_Init+0x50>)
 8004902:	220c      	movs	r2, #12
 8004904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <MX_USART2_UART_Init+0x50>)
 8004908:	2200      	movs	r2, #0
 800490a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <MX_USART2_UART_Init+0x50>)
 800490e:	2200      	movs	r2, #0
 8004910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004912:	4806      	ldr	r0, [pc, #24]	; (800492c <MX_USART2_UART_Init+0x50>)
 8004914:	f7fe fdfa 	bl	800350c <HAL_UART_Init>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800491e:	2145      	movs	r1, #69	; 0x45
 8004920:	4804      	ldr	r0, [pc, #16]	; (8004934 <MX_USART2_UART_Init+0x58>)
 8004922:	f7ff fe65 	bl	80045f0 <_Error_Handler>
  }

}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000ae4 	.word	0x20000ae4
 8004930:	40004400 	.word	0x40004400
 8004934:	080106c0 	.word	0x080106c0

08004938 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <MX_USART6_UART_Init+0x50>)
 800493e:	4a13      	ldr	r2, [pc, #76]	; (800498c <MX_USART6_UART_Init+0x54>)
 8004940:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <MX_USART6_UART_Init+0x50>)
 8004944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004948:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <MX_USART6_UART_Init+0x50>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <MX_USART6_UART_Init+0x50>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <MX_USART6_UART_Init+0x50>)
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <MX_USART6_UART_Init+0x50>)
 800495e:	2204      	movs	r2, #4
 8004960:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <MX_USART6_UART_Init+0x50>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004968:	4b07      	ldr	r3, [pc, #28]	; (8004988 <MX_USART6_UART_Init+0x50>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800496e:	4806      	ldr	r0, [pc, #24]	; (8004988 <MX_USART6_UART_Init+0x50>)
 8004970:	f7fe fdcc 	bl	800350c <HAL_UART_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <MX_USART6_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800497a:	2158      	movs	r1, #88	; 0x58
 800497c:	4804      	ldr	r0, [pc, #16]	; (8004990 <MX_USART6_UART_Init+0x58>)
 800497e:	f7ff fe37 	bl	80045f0 <_Error_Handler>
  }

}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000aa4 	.word	0x20000aa4
 800498c:	40011400 	.word	0x40011400
 8004990:	080106c0 	.word	0x080106c0

08004994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <HAL_UART_MspInit+0x100>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d11e      	bne.n	80049e4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	4a3b      	ldr	r2, [pc, #236]	; (8004a98 <HAL_UART_MspInit+0x104>)
 80049ac:	4b3a      	ldr	r3, [pc, #232]	; (8004a98 <HAL_UART_MspInit+0x104>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40
 80049b6:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <HAL_UART_MspInit+0x104>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049c2:	230c      	movs	r3, #12
 80049c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c6:	2302      	movs	r3, #2
 80049c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ce:	2303      	movs	r3, #3
 80049d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049d2:	2307      	movs	r3, #7
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	4619      	mov	r1, r3
 80049dc:	482f      	ldr	r0, [pc, #188]	; (8004a9c <HAL_UART_MspInit+0x108>)
 80049de:	f7fd f8b5 	bl	8001b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80049e2:	e053      	b.n	8004a8c <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART6)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2d      	ldr	r2, [pc, #180]	; (8004aa0 <HAL_UART_MspInit+0x10c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d14e      	bne.n	8004a8c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <HAL_UART_MspInit+0x104>)
 80049f4:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <HAL_UART_MspInit+0x104>)
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	6453      	str	r3, [r2, #68]	; 0x44
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <HAL_UART_MspInit+0x104>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a0a:	23c0      	movs	r3, #192	; 0xc0
 8004a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a16:	2303      	movs	r3, #3
 8004a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4619      	mov	r1, r3
 8004a24:	481f      	ldr	r0, [pc, #124]	; (8004aa4 <HAL_UART_MspInit+0x110>)
 8004a26:	f7fd f891 	bl	8001b4c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004a2a:	4b1f      	ldr	r3, [pc, #124]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <HAL_UART_MspInit+0x118>)
 8004a2e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a32:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004a36:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a4c:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004a58:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a5e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a60:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004a6c:	480e      	ldr	r0, [pc, #56]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a6e:	f7fc fd85 	bl	800157c <HAL_DMA_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_UART_MspInit+0xec>
      _Error_Handler(__FILE__, __LINE__);
 8004a78:	2199      	movs	r1, #153	; 0x99
 8004a7a:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <HAL_UART_MspInit+0x11c>)
 8004a7c:	f7ff fdb8 	bl	80045f0 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004a8c:	bf00      	nop
 8004a8e:	3728      	adds	r7, #40	; 0x28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40004400 	.word	0x40004400
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40020000 	.word	0x40020000
 8004aa0:	40011400 	.word	0x40011400
 8004aa4:	40020800 	.word	0x40020800
 8004aa8:	20000a44 	.word	0x20000a44
 8004aac:	40026428 	.word	0x40026428
 8004ab0:	080106c0 	.word	0x080106c0

08004ab4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004ac2:	6839      	ldr	r1, [r7, #0]
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f001 fcd3 	bl	8006470 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004aca:	4603      	mov	r3, r0
 8004acc:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004adc:	b5b0      	push	{r4, r5, r7, lr}
 8004ade:	b096      	sub	sp, #88	; 0x58
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004aea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004af2:	2200      	movs	r2, #0
 8004af4:	2188      	movs	r1, #136	; 0x88
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f004 ffd8 	bl	8009aac <VL53L0X_WrByte>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b10:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004b1a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a9e      	ldr	r2, [pc, #632]	; (8004d9c <VL53L0X_DataInit+0x2c0>)
 8004b22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a9d      	ldr	r2, [pc, #628]	; (8004da0 <VL53L0X_DataInit+0x2c4>)
 8004b2a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fac2 	bl	80050c4 <VL53L0X_GetDeviceParameters>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004b46:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d112      	bne.n	8004b74 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004b52:	2300      	movs	r3, #0
 8004b54:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f103 0410 	add.w	r4, r3, #16
 8004b5c:	f107 0510 	add.w	r5, r7, #16
 8004b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2264      	movs	r2, #100	; 0x64
 8004b78:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004b82:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b8c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004b96:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f004 ff80 	bl	8009aac <VL53L0X_WrByte>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004bba:	2201      	movs	r2, #1
 8004bbc:	21ff      	movs	r1, #255	; 0xff
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f004 ff74 	bl	8009aac <VL53L0X_WrByte>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f004 ff68 	bl	8009aac <VL53L0X_WrByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004bea:	f107 030f 	add.w	r3, r7, #15
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2191      	movs	r1, #145	; 0x91
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f004 fffa 	bl	8009bec <VL53L0X_RdByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004c0e:	2201      	movs	r2, #1
 8004c10:	2100      	movs	r1, #0
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f004 ff4a 	bl	8009aac <VL53L0X_WrByte>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c26:	2200      	movs	r2, #0
 8004c28:	21ff      	movs	r1, #255	; 0xff
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f004 ff3e 	bl	8009aac <VL53L0X_WrByte>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2180      	movs	r1, #128	; 0x80
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f004 ff32 	bl	8009aac <VL53L0X_WrByte>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c56:	2300      	movs	r3, #0
 8004c58:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5a:	e014      	b.n	8004c86 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004c5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d114      	bne.n	8004c8e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fd83 	bl	8005778 <VL53L0X_SetLimitCheckEnable>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c82:	3301      	adds	r3, #1
 8004c84:	653b      	str	r3, [r7, #80]	; 0x50
 8004c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	dde7      	ble.n	8004c5c <VL53L0X_DataInit+0x180>
 8004c8c:	e000      	b.n	8004c90 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004c8e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004c90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fd6b 	bl	8005778 <VL53L0X_SetLimitCheckEnable>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004ca8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2103      	movs	r1, #3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fd5f 	bl	8005778 <VL53L0X_SetLimitCheckEnable>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004cc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2104      	movs	r1, #4
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fd53 	bl	8005778 <VL53L0X_SetLimitCheckEnable>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004cd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d107      	bne.n	8004cf0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2105      	movs	r1, #5
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fd47 	bl	8005778 <VL53L0X_SetLimitCheckEnable>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004cf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d108      	bne.n	8004d0a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cf8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fdea 	bl	80058d8 <VL53L0X_SetLimitCheckValue>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d16:	2101      	movs	r1, #1
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fddd 	bl	80058d8 <VL53L0X_SetLimitCheckValue>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d108      	bne.n	8004d3e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d2c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004d30:	2102      	movs	r1, #2
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fdd0 	bl	80058d8 <VL53L0X_SetLimitCheckValue>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d46:	2200      	movs	r2, #0
 8004d48:	2103      	movs	r1, #3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fdc4 	bl	80058d8 <VL53L0X_SetLimitCheckValue>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004d66:	22ff      	movs	r2, #255	; 0xff
 8004d68:	2101      	movs	r1, #1
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f004 fe9e 	bl	8009aac <VL53L0X_WrByte>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004d7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004d8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3758      	adds	r7, #88	; 0x58
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bdb0      	pop	{r4, r5, r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	00016b85 	.word	0x00016b85
 8004da0:	000970a4 	.word	0x000970a4

08004da4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004da4:	b5b0      	push	{r4, r5, r7, lr}
 8004da6:	b09e      	sub	sp, #120	; 0x78
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004db2:	f107 031c 	add.w	r3, r7, #28
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f00a fd41 	bl	800f842 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004de0:	2101      	movs	r1, #1
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f002 fa9b 	bl	800731e <VL53L0X_get_info_from_device>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004df4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d80d      	bhi.n	8004e24 <VL53L0X_StaticInit+0x80>
 8004e08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d102      	bne.n	8004e16 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d806      	bhi.n	8004e24 <VL53L0X_StaticInit+0x80>
 8004e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d90b      	bls.n	8004e3c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004e24:	f107 0218 	add.w	r2, r7, #24
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fd1a 	bl	8006868 <VL53L0X_perform_ref_spad_management>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004e3a:	e009      	b.n	8004e50 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e40:	461a      	mov	r2, r3
 8004e42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 ff1b 	bl	8006c80 <VL53L0X_set_reference_spads>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004e50:	4b94      	ldr	r3, [pc, #592]	; (80050a4 <VL53L0X_StaticInit+0x300>)
 8004e52:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004e54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10f      	bne.n	8004e7c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004e62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004e66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e76:	e001      	b.n	8004e7c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004e78:	4b8a      	ldr	r3, [pc, #552]	; (80050a4 <VL53L0X_StaticInit+0x300>)
 8004e7a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004e7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004e84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f003 fdec 	bl	8008a64 <VL53L0X_load_tuning_settings>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 f929 	bl	80060fc <VL53L0X_SetGpioConfig>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004eb0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d121      	bne.n	8004efc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004eb8:	2201      	movs	r2, #1
 8004eba:	21ff      	movs	r1, #255	; 0xff
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f004 fdf5 	bl	8009aac <VL53L0X_WrByte>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004ec8:	f107 031a 	add.w	r3, r7, #26
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2184      	movs	r1, #132	; 0x84
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f004 feac 	bl	8009c2e <VL53L0X_RdWord>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	21ff      	movs	r1, #255	; 0xff
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f004 fddf 	bl	8009aac <VL53L0X_WrByte>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004efc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004f04:	8b7b      	ldrh	r3, [r7, #26]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	461a      	mov	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004f10:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004f18:	f107 031c 	add.w	r3, r7, #28
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8d0 	bl	80050c4 <VL53L0X_GetDeviceParameters>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004f2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d110      	bne.n	8004f54 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004f32:	f107 0319 	add.w	r3, r7, #25
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9ae 	bl	800529a <VL53L0X_GetFractionEnable>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004f44:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004f4c:	7e7a      	ldrb	r2, [r7, #25]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004f54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10e      	bne.n	8004f7a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f103 0410 	add.w	r4, r3, #16
 8004f62:	f107 051c 	add.w	r5, r7, #28
 8004f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d111      	bne.n	8004fa6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004f82:	f107 0319 	add.w	r3, r7, #25
 8004f86:	461a      	mov	r2, r3
 8004f88:	2101      	movs	r1, #1
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f004 fe2e 	bl	8009bec <VL53L0X_RdByte>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004f96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004f9e:	7e7a      	ldrb	r2, [r7, #25]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004fa6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9e6 	bl	8005384 <VL53L0X_SetSequenceStepEnable>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004fbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d107      	bne.n	8004fd6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2102      	movs	r1, #2
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9da 	bl	8005384 <VL53L0X_SetSequenceStepEnable>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004fd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fe6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004fee:	f107 0313 	add.w	r3, r7, #19
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f9ac 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005002:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800500a:	7cfa      	ldrb	r2, [r7, #19]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005012:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800501a:	f107 0313 	add.w	r3, r7, #19
 800501e:	461a      	mov	r2, r3
 8005020:	2101      	movs	r1, #1
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f996 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800502e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005036:	7cfa      	ldrb	r2, [r7, #19]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800503e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005046:	f107 030c 	add.w	r3, r7, #12
 800504a:	461a      	mov	r2, r3
 800504c:	2103      	movs	r1, #3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f002 fee6 	bl	8007e20 <get_sequence_step_timeout>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800505a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800506a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	461a      	mov	r2, r3
 8005078:	2104      	movs	r1, #4
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f002 fed0 	bl	8007e20 <get_sequence_step_timeout>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005086:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005096:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800509a:	4618      	mov	r0, r3
 800509c:	3770      	adds	r7, #112	; 0x70
 800509e:	46bd      	mov	sp, r7
 80050a0:	bdb0      	pop	{r4, r5, r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000018 	.word	0x20000018

080050a8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80050b0:	239d      	movs	r3, #157	; 0x9d
 80050b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80050b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8cc 	bl	8005274 <VL53L0X_GetDeviceMode>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80050e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d107      	bne.n	80050f8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fac6 	bl	8005680 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80050f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	3310      	adds	r3, #16
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fafc 	bl	8005712 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff fcc1 	bl	8004ab4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005132:	4603      	mov	r3, r0
 8005134:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d134      	bne.n	80051a8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	e02a      	b.n	800519a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d12a      	bne.n	80051a2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	b299      	uxth	r1, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	3308      	adds	r3, #8
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	4413      	add	r3, r2
 800515a:	3304      	adds	r3, #4
 800515c:	461a      	mov	r2, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fc1c 	bl	800599c <VL53L0X_GetLimitCheckValue>
 8005164:	4603      	mov	r3, r0
 8005166:	461a      	mov	r2, r3
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	4313      	orrs	r3, r2
 800516c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800516e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d117      	bne.n	80051a6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	b299      	uxth	r1, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3318      	adds	r3, #24
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	4413      	add	r3, r2
 8005182:	461a      	mov	r2, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fb83 	bl	8005890 <VL53L0X_GetLimitCheckEnable>
 800518a:	4603      	mov	r3, r0
 800518c:	461a      	mov	r2, r3
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	4313      	orrs	r3, r2
 8005192:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	3301      	adds	r3, #1
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	ddd1      	ble.n	8005144 <VL53L0X_GetDeviceParameters+0x80>
 80051a0:	e002      	b.n	80051a8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80051a6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d107      	bne.n	80051c0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	333c      	adds	r3, #60	; 0x3c
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fc7e 	bl	8005ab8 <VL53L0X_GetWrapAroundCheckEnable>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80051c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f895 	bl	80052fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	2b15      	cmp	r3, #21
 80051f8:	d832      	bhi.n	8005260 <VL53L0X_SetDeviceMode+0x7c>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <VL53L0X_SetDeviceMode+0x1c>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005259 	.word	0x08005259
 8005204:	08005259 	.word	0x08005259
 8005208:	08005261 	.word	0x08005261
 800520c:	08005259 	.word	0x08005259
 8005210:	08005261 	.word	0x08005261
 8005214:	08005261 	.word	0x08005261
 8005218:	08005261 	.word	0x08005261
 800521c:	08005261 	.word	0x08005261
 8005220:	08005261 	.word	0x08005261
 8005224:	08005261 	.word	0x08005261
 8005228:	08005261 	.word	0x08005261
 800522c:	08005261 	.word	0x08005261
 8005230:	08005261 	.word	0x08005261
 8005234:	08005261 	.word	0x08005261
 8005238:	08005261 	.word	0x08005261
 800523c:	08005261 	.word	0x08005261
 8005240:	08005261 	.word	0x08005261
 8005244:	08005261 	.word	0x08005261
 8005248:	08005261 	.word	0x08005261
 800524c:	08005261 	.word	0x08005261
 8005250:	08005259 	.word	0x08005259
 8005254:	08005259 	.word	0x08005259
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	741a      	strb	r2, [r3, #16]
		break;
 800525e:	e001      	b.n	8005264 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005260:	23f8      	movs	r3, #248	; 0xf8
 8005262:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7c1a      	ldrb	r2, [r3, #16]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800528a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	2109      	movs	r1, #9
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f004 fc9d 	bl	8009bec <VL53L0X_RdByte>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80052b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80052cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f003 fa2a 	bl	8008742 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80052f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005308:	2300      	movs	r3, #0
 800530a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f003 faf7 	bl	8008902 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
 8005330:	4613      	mov	r3, r2
 8005332:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005338:	78ba      	ldrb	r2, [r7, #2]
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f002 ff41 	bl	80081c6 <VL53L0X_set_vcsel_pulse_period>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	460b      	mov	r3, r1
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4619      	mov	r1, r3
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f003 f9b1 	bl	80086d4 <VL53L0X_get_vcsel_pulse_period>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	70fb      	strb	r3, [r7, #3]
 8005390:	4613      	mov	r3, r2
 8005392:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80053a0:	f107 030f 	add.w	r3, r7, #15
 80053a4:	461a      	mov	r2, r3
 80053a6:	2101      	movs	r1, #1
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f004 fc1f 	bl	8009bec <VL53L0X_RdByte>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80053b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d159      	bne.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80053be:	78bb      	ldrb	r3, [r7, #2]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d12b      	bne.n	800541c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d825      	bhi.n	8005416 <VL53L0X_SetSequenceStepEnable+0x92>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053e5 	.word	0x080053e5
 80053d4:	080053ef 	.word	0x080053ef
 80053d8:	080053f9 	.word	0x080053f9
 80053dc:	08005403 	.word	0x08005403
 80053e0:	0800540d 	.word	0x0800540d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80053e4:	7dbb      	ldrb	r3, [r7, #22]
 80053e6:	f043 0310 	orr.w	r3, r3, #16
 80053ea:	75bb      	strb	r3, [r7, #22]
				break;
 80053ec:	e041      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80053ee:	7dbb      	ldrb	r3, [r7, #22]
 80053f0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80053f4:	75bb      	strb	r3, [r7, #22]
				break;
 80053f6:	e03c      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80053f8:	7dbb      	ldrb	r3, [r7, #22]
 80053fa:	f043 0304 	orr.w	r3, r3, #4
 80053fe:	75bb      	strb	r3, [r7, #22]
				break;
 8005400:	e037      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005402:	7dbb      	ldrb	r3, [r7, #22]
 8005404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005408:	75bb      	strb	r3, [r7, #22]
				break;
 800540a:	e032      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800540c:	7dbb      	ldrb	r3, [r7, #22]
 800540e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005412:	75bb      	strb	r3, [r7, #22]
				break;
 8005414:	e02d      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005416:	23fc      	movs	r3, #252	; 0xfc
 8005418:	75fb      	strb	r3, [r7, #23]
 800541a:	e02a      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	2b04      	cmp	r3, #4
 8005420:	d825      	bhi.n	800546e <VL53L0X_SetSequenceStepEnable+0xea>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800543d 	.word	0x0800543d
 800542c:	08005447 	.word	0x08005447
 8005430:	08005451 	.word	0x08005451
 8005434:	0800545b 	.word	0x0800545b
 8005438:	08005465 	.word	0x08005465
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800543c:	7dbb      	ldrb	r3, [r7, #22]
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	75bb      	strb	r3, [r7, #22]
				break;
 8005444:	e015      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005446:	7dbb      	ldrb	r3, [r7, #22]
 8005448:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800544c:	75bb      	strb	r3, [r7, #22]
				break;
 800544e:	e010      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005450:	7dbb      	ldrb	r3, [r7, #22]
 8005452:	f023 0304 	bic.w	r3, r3, #4
 8005456:	75bb      	strb	r3, [r7, #22]
				break;
 8005458:	e00b      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800545a:	7dbb      	ldrb	r3, [r7, #22]
 800545c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005460:	75bb      	strb	r3, [r7, #22]
				break;
 8005462:	e006      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005464:	7dbb      	ldrb	r3, [r7, #22]
 8005466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800546a:	75bb      	strb	r3, [r7, #22]
				break;
 800546c:	e001      	b.n	8005472 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800546e:	23fc      	movs	r3, #252	; 0xfc
 8005470:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	7dba      	ldrb	r2, [r7, #22]
 8005476:	429a      	cmp	r2, r3
 8005478:	d01e      	beq.n	80054b8 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800547a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d107      	bne.n	8005492 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8005482:	7dbb      	ldrb	r3, [r7, #22]
 8005484:	461a      	mov	r2, r3
 8005486:	2101      	movs	r1, #1
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f004 fb0f 	bl	8009aac <VL53L0X_WrByte>
 800548e:	4603      	mov	r3, r0
 8005490:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7dba      	ldrb	r2, [r7, #22]
 800549e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80054a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80054b0:	6939      	ldr	r1, [r7, #16]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff ff10 	bl	80052d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80054b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	72fb      	strb	r3, [r7, #11]
 80054d2:	4613      	mov	r3, r2
 80054d4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80054e0:	7afb      	ldrb	r3, [r7, #11]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d836      	bhi.n	8005554 <sequence_step_enabled+0x90>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <sequence_step_enabled+0x28>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005501 	.word	0x08005501
 80054f0:	08005513 	.word	0x08005513
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005537 	.word	0x08005537
 80054fc:	08005549 	.word	0x08005549
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005500:	7abb      	ldrb	r3, [r7, #10]
 8005502:	111b      	asrs	r3, r3, #4
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	701a      	strb	r2, [r3, #0]
		break;
 8005510:	e022      	b.n	8005558 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005512:	7abb      	ldrb	r3, [r7, #10]
 8005514:	10db      	asrs	r3, r3, #3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	701a      	strb	r2, [r3, #0]
		break;
 8005522:	e019      	b.n	8005558 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005524:	7abb      	ldrb	r3, [r7, #10]
 8005526:	109b      	asrs	r3, r3, #2
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	b2da      	uxtb	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	701a      	strb	r2, [r3, #0]
		break;
 8005534:	e010      	b.n	8005558 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005536:	7abb      	ldrb	r3, [r7, #10]
 8005538:	119b      	asrs	r3, r3, #6
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	701a      	strb	r2, [r3, #0]
		break;
 8005546:	e007      	b.n	8005558 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005548:	7abb      	ldrb	r3, [r7, #10]
 800554a:	09db      	lsrs	r3, r3, #7
 800554c:	b2da      	uxtb	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	701a      	strb	r2, [r3, #0]
		break;
 8005552:	e001      	b.n	8005558 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005554:	23fc      	movs	r3, #252	; 0xfc
 8005556:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800555c:	4618      	mov	r0, r3
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800557a:	f107 030e 	add.w	r3, r7, #14
 800557e:	461a      	mov	r2, r3
 8005580:	2101      	movs	r1, #1
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f004 fb32 	bl	8009bec <VL53L0X_RdByte>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800558c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005594:	7bba      	ldrb	r2, [r7, #14]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2100      	movs	r1, #0
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff ff92 	bl	80054c4 <sequence_step_enabled>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d108      	bne.n	80055be <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80055ac:	7bba      	ldrb	r2, [r7, #14]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	3302      	adds	r3, #2
 80055b2:	2101      	movs	r1, #1
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ff85 	bl	80054c4 <sequence_step_enabled>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80055c6:	7bba      	ldrb	r2, [r7, #14]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	3301      	adds	r3, #1
 80055cc:	2102      	movs	r1, #2
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff ff78 	bl	80054c4 <sequence_step_enabled>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d108      	bne.n	80055f2 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80055e0:	7bba      	ldrb	r2, [r7, #14]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	3303      	adds	r3, #3
 80055e6:	2103      	movs	r1, #3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff6b 	bl	80054c4 <sequence_step_enabled>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d108      	bne.n	800560c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80055fa:	7bba      	ldrb	r2, [r7, #14]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	3304      	adds	r3, #4
 8005600:	2104      	movs	r1, #4
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ff5e 	bl	80054c4 <sequence_step_enabled>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800560c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005626:	f107 030e 	add.w	r3, r7, #14
 800562a:	461a      	mov	r2, r3
 800562c:	21f8      	movs	r1, #248	; 0xf8
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f004 fafd 	bl	8009c2e <VL53L0X_RdWord>
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d112      	bne.n	8005666 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8005640:	89fb      	ldrh	r3, [r7, #14]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d006      	beq.n	8005654 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	fb03 f302 	mul.w	r3, r3, r2
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e001      	b.n	8005658 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	2104      	movs	r1, #4
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f004 fa69 	bl	8009b34 <VL53L0X_WrDWord>
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005674:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800568e:	f107 030c 	add.w	r3, r7, #12
 8005692:	461a      	mov	r2, r3
 8005694:	21f8      	movs	r1, #248	; 0xf8
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f004 fac9 	bl	8009c2e <VL53L0X_RdWord>
 800569c:	4603      	mov	r3, r0
 800569e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80056a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d108      	bne.n	80056ba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	461a      	mov	r2, r3
 80056ae:	2104      	movs	r1, #4
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f004 fadd 	bl	8009c70 <VL53L0X_RdDWord>
 80056b6:	4603      	mov	r3, r0
 80056b8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10c      	bne.n	80056dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80056c2:	89bb      	ldrh	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	89ba      	ldrh	r2, [r7, #12]
 80056cc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80056dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	7f1b      	ldrb	r3, [r3, #28]
 80056fa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	7bba      	ldrb	r2, [r7, #14]
 8005700:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b086      	sub	sp, #24
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005720:	f107 030e 	add.w	r3, r7, #14
 8005724:	461a      	mov	r2, r3
 8005726:	2120      	movs	r1, #32
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f004 fa80 	bl	8009c2e <VL53L0X_RdWord>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d118      	bne.n	800576c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800573a:	89fb      	ldrh	r3, [r7, #14]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	771a      	strb	r2, [r3, #28]
 8005752:	e00b      	b.n	800576c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005754:	89fb      	ldrh	r3, [r7, #14]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800576c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005788:	2300      	movs	r3, #0
 800578a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005798:	887b      	ldrh	r3, [r7, #2]
 800579a:	2b05      	cmp	r3, #5
 800579c:	d902      	bls.n	80057a4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800579e:	23fc      	movs	r3, #252	; 0xfc
 80057a0:	75fb      	strb	r3, [r7, #23]
 80057a2:	e05b      	b.n	800585c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80057a4:	787b      	ldrb	r3, [r7, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73bb      	strb	r3, [r7, #14]
 80057b6:	e00a      	b.n	80057ce <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	330c      	adds	r3, #12
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	2b05      	cmp	r3, #5
 80057d2:	d841      	bhi.n	8005858 <VL53L0X_SetLimitCheckEnable+0xe0>
 80057d4:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <VL53L0X_SetLimitCheckEnable+0x64>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	080057f5 	.word	0x080057f5
 80057e0:	080057ff 	.word	0x080057ff
 80057e4:	08005815 	.word	0x08005815
 80057e8:	0800581f 	.word	0x0800581f
 80057ec:	08005829 	.word	0x08005829
 80057f0:	08005841 	.word	0x08005841

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	7bfa      	ldrb	r2, [r7, #15]
 80057f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80057fc:	e02e      	b.n	800585c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005802:	b29b      	uxth	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	2144      	movs	r1, #68	; 0x44
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f004 f971 	bl	8009af0 <VL53L0X_WrWord>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]

			break;
 8005812:	e023      	b.n	800585c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800581c:	e01e      	b.n	800585c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005826:	e019      	b.n	800585c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800582e:	7b7b      	ldrb	r3, [r7, #13]
 8005830:	22fe      	movs	r2, #254	; 0xfe
 8005832:	2160      	movs	r1, #96	; 0x60
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f004 f997 	bl	8009b68 <VL53L0X_UpdateByte>
 800583a:	4603      	mov	r3, r0
 800583c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800583e:	e00d      	b.n	800585c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005846:	7b7b      	ldrb	r3, [r7, #13]
 8005848:	22ef      	movs	r2, #239	; 0xef
 800584a:	2160      	movs	r1, #96	; 0x60
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f004 f98b 	bl	8009b68 <VL53L0X_UpdateByte>
 8005852:	4603      	mov	r3, r0
 8005854:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005856:	e001      	b.n	800585c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005858:	23fc      	movs	r3, #252	; 0xfc
 800585a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800585c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10f      	bne.n	8005884 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005864:	787b      	ldrb	r3, [r7, #1]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800586a:	887b      	ldrh	r3, [r7, #2]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4413      	add	r3, r2
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005876:	e005      	b.n	8005884 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	460b      	mov	r3, r1
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800589e:	2300      	movs	r3, #0
 80058a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80058a2:	897b      	ldrh	r3, [r7, #10]
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d905      	bls.n	80058b4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058a8:	23fc      	movs	r3, #252	; 0xfc
 80058aa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e008      	b.n	80058c6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80058b4:	897b      	ldrh	r3, [r7, #10]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058be:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7dba      	ldrb	r2, [r7, #22]
 80058c4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	460b      	mov	r3, r1
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80058f6:	7dbb      	ldrb	r3, [r7, #22]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058fc:	897b      	ldrh	r3, [r7, #10]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	330c      	adds	r3, #12
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	e040      	b.n	800598e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	2b05      	cmp	r3, #5
 8005910:	d830      	bhi.n	8005974 <VL53L0X_SetLimitCheckValue+0x9c>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <VL53L0X_SetLimitCheckValue+0x40>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005931 	.word	0x08005931
 800591c:	08005939 	.word	0x08005939
 8005920:	0800594f 	.word	0x0800594f
 8005924:	08005957 	.word	0x08005957
 8005928:	0800595f 	.word	0x0800595f
 800592c:	0800595f 	.word	0x0800595f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005936:	e01f      	b.n	8005978 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800593c:	b29b      	uxth	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	2144      	movs	r1, #68	; 0x44
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f004 f8d4 	bl	8009af0 <VL53L0X_WrWord>
 8005948:	4603      	mov	r3, r0
 800594a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800594c:	e014      	b.n	8005978 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005954:	e010      	b.n	8005978 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800595c:	e00c      	b.n	8005978 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	2164      	movs	r1, #100	; 0x64
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f004 f8c1 	bl	8009af0 <VL53L0X_WrWord>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005972:	e001      	b.n	8005978 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005974:	23fc      	movs	r3, #252	; 0xfc
 8005976:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005980:	897b      	ldrh	r3, [r7, #10]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	330c      	adds	r3, #12
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800598e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop

0800599c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	460b      	mov	r3, r1
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	2b05      	cmp	r3, #5
 80059b6:	d847      	bhi.n	8005a48 <VL53L0X_GetLimitCheckValue+0xac>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <VL53L0X_GetLimitCheckValue+0x24>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059d9 	.word	0x080059d9
 80059c4:	080059e5 	.word	0x080059e5
 80059c8:	08005a0b 	.word	0x08005a0b
 80059cc:	08005a17 	.word	0x08005a17
 80059d0:	08005a23 	.word	0x08005a23
 80059d4:	08005a23 	.word	0x08005a23

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	77bb      	strb	r3, [r7, #30]
		break;
 80059e2:	e033      	b.n	8005a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80059e4:	f107 0316 	add.w	r3, r7, #22
 80059e8:	461a      	mov	r2, r3
 80059ea:	2144      	movs	r1, #68	; 0x44
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f004 f91e 	bl	8009c2e <VL53L0X_RdWord>
 80059f2:	4603      	mov	r3, r0
 80059f4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80059f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80059fe:	8afb      	ldrh	r3, [r7, #22]
 8005a00:	025b      	lsls	r3, r3, #9
 8005a02:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005a04:	2301      	movs	r3, #1
 8005a06:	77bb      	strb	r3, [r7, #30]
		break;
 8005a08:	e020      	b.n	8005a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	77bb      	strb	r3, [r7, #30]
		break;
 8005a14:	e01a      	b.n	8005a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77bb      	strb	r3, [r7, #30]
		break;
 8005a20:	e014      	b.n	8005a4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005a22:	f107 0316 	add.w	r3, r7, #22
 8005a26:	461a      	mov	r2, r3
 8005a28:	2164      	movs	r1, #100	; 0x64
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f004 f8ff 	bl	8009c2e <VL53L0X_RdWord>
 8005a30:	4603      	mov	r3, r0
 8005a32:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005a34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005a3c:	8afb      	ldrh	r3, [r7, #22]
 8005a3e:	025b      	lsls	r3, r3, #9
 8005a40:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	77bb      	strb	r3, [r7, #30]
		break;
 8005a46:	e001      	b.n	8005a4c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a48:	23fc      	movs	r3, #252	; 0xfc
 8005a4a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d12a      	bne.n	8005aaa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005a54:	7fbb      	ldrb	r3, [r7, #30]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d124      	bne.n	8005aa4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d110      	bne.n	8005a82 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005a60:	897b      	ldrh	r3, [r7, #10]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	330c      	adds	r3, #12
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005a74:	897b      	ldrh	r3, [r7, #10]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005a80:	e013      	b.n	8005aaa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005a88:	897b      	ldrh	r3, [r7, #10]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005aa2:	e002      	b.n	8005aaa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005ac6:	f107 030e 	add.w	r3, r7, #14
 8005aca:	461a      	mov	r2, r3
 8005acc:	2101      	movs	r1, #1
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f004 f88c 	bl	8009bec <VL53L0X_RdByte>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10e      	bne.n	8005afe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005ae0:	7bba      	ldrb	r2, [r7, #14]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	b25b      	sxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da03      	bge.n	8005af8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e002      	b.n	8005afe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005b28:	f107 030e 	add.w	r3, r7, #14
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fba0 	bl	8005274 <VL53L0X_GetDeviceMode>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d107      	bne.n	8005b50 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f882 	bl	8005c50 <VL53L0X_StartMeasurement>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 fb13 	bl	8007184 <VL53L0X_measurement_poll_for_completion>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2203      	movs	r2, #3
 8005b74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005b9a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005b9c:	7dbb      	ldrb	r3, [r7, #22]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d005      	beq.n	8005bae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d002      	beq.n	8005bae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005ba8:	7dbb      	ldrb	r3, [r7, #22]
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d147      	bne.n	8005c3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	f107 0210 	add.w	r2, r7, #16
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fbc1 	bl	8006340 <VL53L0X_GetInterruptThresholds>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005bc8:	d803      	bhi.n	8005bd2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005bca:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005bcc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005bd0:	d935      	bls.n	8005c3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d131      	bne.n	8005c3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d006      	beq.n	8005bee <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005be0:	491a      	ldr	r1, [pc, #104]	; (8005c4c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f002 ff3e 	bl	8008a64 <VL53L0X_load_tuning_settings>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]
 8005bec:	e027      	b.n	8005c3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005bee:	2204      	movs	r2, #4
 8005bf0:	21ff      	movs	r1, #255	; 0xff
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f003 ff5a 	bl	8009aac <VL53L0X_WrByte>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005c02:	2200      	movs	r2, #0
 8005c04:	2170      	movs	r1, #112	; 0x70
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f003 ff50 	bl	8009aac <VL53L0X_WrByte>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c16:	2200      	movs	r2, #0
 8005c18:	21ff      	movs	r1, #255	; 0xff
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f003 ff46 	bl	8009aac <VL53L0X_WrByte>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2180      	movs	r1, #128	; 0x80
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f003 ff3c 	bl	8009aac <VL53L0X_WrByte>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461a      	mov	r2, r3
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	2000010c 	.word	0x2000010c

08005c50 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005c60:	f107 030e 	add.w	r3, r7, #14
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff fb04 	bl	8005274 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f003 ff1b 	bl	8009aac <VL53L0X_WrByte>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	21ff      	movs	r1, #255	; 0xff
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f003 ff14 	bl	8009aac <VL53L0X_WrByte>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f003 ff0d 	bl	8009aac <VL53L0X_WrByte>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2191      	movs	r1, #145	; 0x91
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f003 ff03 	bl	8009aac <VL53L0X_WrByte>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005caa:	2201      	movs	r2, #1
 8005cac:	2100      	movs	r1, #0
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f003 fefc 	bl	8009aac <VL53L0X_WrByte>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	21ff      	movs	r1, #255	; 0xff
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f003 fef5 	bl	8009aac <VL53L0X_WrByte>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f003 feee 	bl	8009aac <VL53L0X_WrByte>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d037      	beq.n	8005d4a <VL53L0X_StartMeasurement+0xfa>
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d04f      	beq.n	8005d7e <VL53L0X_StartMeasurement+0x12e>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d167      	bne.n	8005db2 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f003 fee0 	bl	8009aac <VL53L0X_WrByte>
 8005cec:	4603      	mov	r3, r0
 8005cee:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d15d      	bne.n	8005db8 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8005d06:	f107 030d 	add.w	r3, r7, #13
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f003 ff6c 	bl	8009bec <VL53L0X_RdByte>
 8005d14:	4603      	mov	r3, r0
 8005d16:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005d1e:	7b7a      	ldrb	r2, [r7, #13]
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	4013      	ands	r3, r2
 8005d24:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d107      	bne.n	8005d3c <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8005d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d3a:	d3e1      	bcc.n	8005d00 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d42:	d339      	bcc.n	8005db8 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005d44:	23f9      	movs	r3, #249	; 0xf9
 8005d46:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005d48:	e036      	b.n	8005db8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005d52:	2101      	movs	r1, #1
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff15 	bl	8005b84 <VL53L0X_CheckAndLoadInterruptSettings>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005d5e:	2202      	movs	r2, #2
 8005d60:	2100      	movs	r1, #0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f003 fea2 	bl	8009aac <VL53L0X_WrByte>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d123      	bne.n	8005dbc <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2204      	movs	r2, #4
 8005d78:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005d7c:	e01e      	b.n	8005dbc <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005d86:	2101      	movs	r1, #1
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fefb 	bl	8005b84 <VL53L0X_CheckAndLoadInterruptSettings>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005d92:	2204      	movs	r2, #4
 8005d94:	2100      	movs	r1, #0
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f003 fe88 	bl	8009aac <VL53L0X_WrByte>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10b      	bne.n	8005dc0 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2204      	movs	r2, #4
 8005dac:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005db0:	e006      	b.n	8005dc0 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005db2:	23f8      	movs	r3, #248	; 0xf8
 8005db4:	75fb      	strb	r3, [r7, #23]
 8005db6:	e004      	b.n	8005dc2 <VL53L0X_StartMeasurement+0x172>
		break;
 8005db8:	bf00      	nop
 8005dba:	e002      	b.n	8005dc2 <VL53L0X_StartMeasurement+0x172>
		break;
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <VL53L0X_StartMeasurement+0x172>
		break;
 8005dc0:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005de2:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d112      	bne.n	8005e10 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005dea:	f107 0308 	add.w	r3, r7, #8
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fb1b 	bl	800642c <VL53L0X_GetInterruptMaskStatus>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d103      	bne.n	8005e08 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	e01c      	b.n	8005e42 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e018      	b.n	8005e42 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005e10:	f107 030d 	add.w	r3, r7, #13
 8005e14:	461a      	mov	r2, r3
 8005e16:	2114      	movs	r1, #20
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f003 fee7 	bl	8009bec <VL53L0X_RdByte>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005e2a:	7b7b      	ldrb	r3, [r7, #13]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005e50:	b5b0      	push	{r4, r5, r7, lr}
 8005e52:	b096      	sub	sp, #88	; 0x58
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005e60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e64:	230c      	movs	r3, #12
 8005e66:	2114      	movs	r1, #20
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f003 fdf6 	bl	8009a5a <VL53L0X_ReadMulti>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005e74:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 80d2 	bne.w	8006022 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2200      	movs	r2, #0
 8005e82:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005e8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005ea6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	025b      	lsls	r3, r3, #9
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005ec4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005eda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ede:	025b      	lsls	r3, r3, #9
 8005ee0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005ee6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f02:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005f04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005f12:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005f1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f24:	d047      	beq.n	8005fb6 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005f26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f28:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f2c:	fb02 f303 	mul.w	r3, r2, r3
 8005f30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005f34:	4a58      	ldr	r2, [pc, #352]	; (8006098 <VL53L0X_GetRangingMeasurementData+0x248>)
 8005f36:	fb82 1203 	smull	r1, r2, r2, r3
 8005f3a:	1192      	asrs	r2, r2, #6
 8005f3c:	17db      	asrs	r3, r3, #31
 8005f3e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005f40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7f1b      	ldrb	r3, [r3, #28]
 8005f4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005f52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02d      	beq.n	8005fb6 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005f5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f5c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	121b      	asrs	r3, r3, #8
 8005f66:	461a      	mov	r2, r3
				if ((SignalRate
 8005f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d10d      	bne.n	8005f8a <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8005f6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8005f76:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005f7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f7e:	e016      	b.n	8005fae <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8005f80:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005f84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f88:	e011      	b.n	8005fae <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005f8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f90:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005f94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f96:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005f9e:	121b      	asrs	r3, r3, #8
 8005fa0:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa4:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005fa6:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005faa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005fae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fb2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005fb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005fbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005fca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	019b      	lsls	r3, r3, #6
 8005fd2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	75da      	strb	r2, [r3, #23]
 8005fd8:	e006      	b.n	8005fe8 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005fe0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005fe8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005fec:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005ff0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f003 f9d8 	bl	80093b4 <VL53L0X_get_pal_range_status>
 8006004:	4603      	mov	r3, r0
 8006006:	461a      	mov	r2, r3
 8006008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800600c:	4313      	orrs	r3, r2
 800600e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006012:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800601a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006022:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d12f      	bne.n	800608a <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f107 040c 	add.w	r4, r7, #12
 8006030:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800603c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006044:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006052:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006058:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800605e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006064:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800606a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006070:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800607a:	f107 050c 	add.w	r5, r7, #12
 800607e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800608a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800608e:	4618      	mov	r0, r3
 8006090:	3750      	adds	r7, #80	; 0x50
 8006092:	46bd      	mov	sp, r7
 8006094:	bdb0      	pop	{r4, r5, r7, pc}
 8006096:	bf00      	nop
 8006098:	10624dd3 	.word	0x10624dd3

0800609c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80060aa:	2100      	movs	r1, #0
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff f899 	bl	80051e4 <VL53L0X_SetDeviceMode>
 80060b2:	4603      	mov	r3, r0
 80060b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80060b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fd2c 	bl	8005b1c <VL53L0X_PerformSingleMeasurement>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80060c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d105      	bne.n	80060dc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff febc 	bl	8005e50 <VL53L0X_GetRangingMeasurementData>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80060dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80060e4:	2100      	movs	r1, #0
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f960 	bl	80063ac <VL53L0X_ClearInterruptMask>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80060f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4603      	mov	r3, r0
 800610c:	70fb      	strb	r3, [r7, #3]
 800610e:	460b      	mov	r3, r1
 8006110:	70bb      	strb	r3, [r7, #2]
 8006112:	4613      	mov	r3, r2
 8006114:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006120:	23f6      	movs	r3, #246	; 0xf6
 8006122:	73fb      	strb	r3, [r7, #15]
 8006124:	e105      	b.n	8006332 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006126:	78bb      	ldrb	r3, [r7, #2]
 8006128:	2b14      	cmp	r3, #20
 800612a:	d110      	bne.n	800614e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800612c:	7e3b      	ldrb	r3, [r7, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006132:	2310      	movs	r3, #16
 8006134:	73bb      	strb	r3, [r7, #14]
 8006136:	e001      	b.n	800613c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006138:	2301      	movs	r3, #1
 800613a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	461a      	mov	r2, r3
 8006140:	2184      	movs	r1, #132	; 0x84
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f003 fcb2 	bl	8009aac <VL53L0X_WrByte>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]
 800614c:	e0f1      	b.n	8006332 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800614e:	78bb      	ldrb	r3, [r7, #2]
 8006150:	2b15      	cmp	r3, #21
 8006152:	f040 8097 	bne.w	8006284 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006156:	2201      	movs	r2, #1
 8006158:	21ff      	movs	r1, #255	; 0xff
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f003 fca6 	bl	8009aac <VL53L0X_WrByte>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4313      	orrs	r3, r2
 8006168:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f003 fc9c 	bl	8009aac <VL53L0X_WrByte>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	4313      	orrs	r3, r2
 800617c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800617e:	2200      	movs	r2, #0
 8006180:	21ff      	movs	r1, #255	; 0xff
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f003 fc92 	bl	8009aac <VL53L0X_WrByte>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	4313      	orrs	r3, r2
 8006190:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006192:	2201      	movs	r2, #1
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f003 fc88 	bl	8009aac <VL53L0X_WrByte>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80061a6:	2202      	movs	r2, #2
 80061a8:	2185      	movs	r1, #133	; 0x85
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f003 fc7e 	bl	8009aac <VL53L0X_WrByte>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80061ba:	2204      	movs	r2, #4
 80061bc:	21ff      	movs	r1, #255	; 0xff
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f003 fc74 	bl	8009aac <VL53L0X_WrByte>
 80061c4:	4603      	mov	r3, r0
 80061c6:	461a      	mov	r2, r3
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80061ce:	2200      	movs	r2, #0
 80061d0:	21cd      	movs	r1, #205	; 0xcd
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f003 fc6a 	bl	8009aac <VL53L0X_WrByte>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	4313      	orrs	r3, r2
 80061e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80061e2:	2211      	movs	r2, #17
 80061e4:	21cc      	movs	r1, #204	; 0xcc
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f003 fc60 	bl	8009aac <VL53L0X_WrByte>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80061f6:	2207      	movs	r2, #7
 80061f8:	21ff      	movs	r1, #255	; 0xff
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f003 fc56 	bl	8009aac <VL53L0X_WrByte>
 8006200:	4603      	mov	r3, r0
 8006202:	461a      	mov	r2, r3
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	4313      	orrs	r3, r2
 8006208:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800620a:	2200      	movs	r2, #0
 800620c:	21be      	movs	r1, #190	; 0xbe
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f003 fc4c 	bl	8009aac <VL53L0X_WrByte>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	4313      	orrs	r3, r2
 800621c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800621e:	2206      	movs	r2, #6
 8006220:	21ff      	movs	r1, #255	; 0xff
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f003 fc42 	bl	8009aac <VL53L0X_WrByte>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	4313      	orrs	r3, r2
 8006230:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006232:	2209      	movs	r2, #9
 8006234:	21cc      	movs	r1, #204	; 0xcc
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f003 fc38 	bl	8009aac <VL53L0X_WrByte>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	4313      	orrs	r3, r2
 8006244:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006246:	2200      	movs	r2, #0
 8006248:	21ff      	movs	r1, #255	; 0xff
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f003 fc2e 	bl	8009aac <VL53L0X_WrByte>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	4313      	orrs	r3, r2
 8006258:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800625a:	2201      	movs	r2, #1
 800625c:	21ff      	movs	r1, #255	; 0xff
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f003 fc24 	bl	8009aac <VL53L0X_WrByte>
 8006264:	4603      	mov	r3, r0
 8006266:	461a      	mov	r2, r3
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	4313      	orrs	r3, r2
 800626c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800626e:	2200      	movs	r2, #0
 8006270:	2100      	movs	r1, #0
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f003 fc1a 	bl	8009aac <VL53L0X_WrByte>
 8006278:	4603      	mov	r3, r0
 800627a:	461a      	mov	r2, r3
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	4313      	orrs	r3, r2
 8006280:	73fb      	strb	r3, [r7, #15]
 8006282:	e056      	b.n	8006332 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d120      	bne.n	80062ce <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800628c:	787b      	ldrb	r3, [r7, #1]
 800628e:	2b04      	cmp	r3, #4
 8006290:	d81b      	bhi.n	80062ca <VL53L0X_SetGpioConfig+0x1ce>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <VL53L0X_SetGpioConfig+0x19c>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062ad 	.word	0x080062ad
 800629c:	080062b3 	.word	0x080062b3
 80062a0:	080062b9 	.word	0x080062b9
 80062a4:	080062bf 	.word	0x080062bf
 80062a8:	080062c5 	.word	0x080062c5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80062ac:	2300      	movs	r3, #0
 80062ae:	73bb      	strb	r3, [r7, #14]
				break;
 80062b0:	e00d      	b.n	80062ce <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73bb      	strb	r3, [r7, #14]
				break;
 80062b6:	e00a      	b.n	80062ce <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80062b8:	2302      	movs	r3, #2
 80062ba:	73bb      	strb	r3, [r7, #14]
				break;
 80062bc:	e007      	b.n	80062ce <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80062be:	2303      	movs	r3, #3
 80062c0:	73bb      	strb	r3, [r7, #14]
				break;
 80062c2:	e004      	b.n	80062ce <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80062c4:	2304      	movs	r3, #4
 80062c6:	73bb      	strb	r3, [r7, #14]
				break;
 80062c8:	e001      	b.n	80062ce <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 80062ca:	23f5      	movs	r3, #245	; 0xf5
 80062cc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 80062ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d107      	bne.n	80062e6 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	461a      	mov	r2, r3
 80062da:	210a      	movs	r1, #10
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f003 fbe5 	bl	8009aac <VL53L0X_WrByte>
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80062e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80062ee:	7e3b      	ldrb	r3, [r7, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73bb      	strb	r3, [r7, #14]
 80062f8:	e001      	b.n	80062fe <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 80062fa:	2310      	movs	r3, #16
 80062fc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	22ef      	movs	r2, #239	; 0xef
 8006302:	2184      	movs	r1, #132	; 0x84
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f003 fc2f 	bl	8009b68 <VL53L0X_UpdateByte>
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800630e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	787a      	ldrb	r2, [r7, #1]
 800631a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800631e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006326:	2100      	movs	r1, #0
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f83f 	bl	80063ac <VL53L0X_ClearInterruptMask>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	460b      	mov	r3, r1
 800634e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006354:	f107 0314 	add.w	r3, r7, #20
 8006358:	461a      	mov	r2, r3
 800635a:	210e      	movs	r1, #14
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f003 fc66 	bl	8009c2e <VL53L0X_RdWord>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006366:	8abb      	ldrh	r3, [r7, #20]
 8006368:	045b      	lsls	r3, r3, #17
 800636a:	461a      	mov	r2, r3
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <VL53L0X_GetInterruptThresholds+0x68>)
 800636e:	4013      	ands	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800637c:	f107 0314 	add.w	r3, r7, #20
 8006380:	461a      	mov	r2, r3
 8006382:	210c      	movs	r1, #12
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f003 fc52 	bl	8009c2e <VL53L0X_RdWord>
 800638a:	4603      	mov	r3, r0
 800638c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800638e:	8abb      	ldrh	r3, [r7, #20]
 8006390:	045b      	lsls	r3, r3, #17
 8006392:	461a      	mov	r2, r3
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <VL53L0X_GetInterruptThresholds+0x68>)
 8006396:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800639c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	1ffe0000 	.word	0x1ffe0000

080063ac <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80063be:	2201      	movs	r2, #1
 80063c0:	210b      	movs	r1, #11
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f003 fb72 	bl	8009aac <VL53L0X_WrByte>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80063cc:	2200      	movs	r2, #0
 80063ce:	210b      	movs	r1, #11
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f003 fb6b 	bl	8009aac <VL53L0X_WrByte>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	4313      	orrs	r3, r2
 80063de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80063e0:	f107 030d 	add.w	r3, r7, #13
 80063e4:	461a      	mov	r2, r3
 80063e6:	2113      	movs	r1, #19
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f003 fbff 	bl	8009bec <VL53L0X_RdByte>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461a      	mov	r2, r3
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	3301      	adds	r3, #1
 80063fc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80063fe:	7b7b      	ldrb	r3, [r7, #13]
 8006400:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d803      	bhi.n	8006416 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800640e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0d3      	beq.n	80063be <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800641c:	23f4      	movs	r3, #244	; 0xf4
 800641e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800643a:	f107 030e 	add.w	r3, r7, #14
 800643e:	461a      	mov	r2, r3
 8006440:	2113      	movs	r1, #19
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f003 fbd2 	bl	8009bec <VL53L0X_RdByte>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	f003 0207 	and.w	r2, r3, #7
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	f003 0318 	and.w	r3, r3, #24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006460:	23fa      	movs	r3, #250	; 0xfa
 8006462:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800647e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006482:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006488:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800648a:	f107 0308 	add.w	r3, r7, #8
 800648e:	461a      	mov	r2, r3
 8006490:	2128      	movs	r1, #40	; 0x28
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f003 fbcb 	bl	8009c2e <VL53L0X_RdWord>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800649c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11e      	bne.n	80064e2 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80064ae:	893b      	ldrh	r3, [r7, #8]
 80064b0:	461a      	mov	r2, r3
 80064b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	dd0b      	ble.n	80064d2 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80064ba:	893a      	ldrh	r2, [r7, #8]
 80064bc:	897b      	ldrh	r3, [r7, #10]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	b21b      	sxth	r3, r3
 80064c4:	461a      	mov	r2, r3
					* 250;
 80064c6:	23fa      	movs	r3, #250	; 0xfa
 80064c8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e007      	b.n	80064e2 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80064d2:	893b      	ldrh	r3, [r7, #8]
 80064d4:	b21b      	sxth	r3, r3
 80064d6:	461a      	mov	r2, r3
 80064d8:	23fa      	movs	r3, #250	; 0xfa
 80064da:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80064e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b08b      	sub	sp, #44	; 0x2c
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80064fc:	2308      	movs	r3, #8
 80064fe:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	fbb2 f3f3 	udiv	r3, r2, r3
 8006514:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	fbb3 f2f2 	udiv	r2, r3, r2
 800651e:	69b9      	ldr	r1, [r7, #24]
 8006520:	fb01 f202 	mul.w	r2, r1, r2
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
 800652c:	e030      	b.n	8006590 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	4413      	add	r3, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	429a      	cmp	r2, r3
 8006542:	d11e      	bne.n	8006582 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006544:	7ffa      	ldrb	r2, [r7, #31]
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	fa42 f303 	asr.w	r3, r2, r3
 800654c:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006552:	e016      	b.n	8006582 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006554:	7ffb      	ldrb	r3, [r7, #31]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <get_next_good_spad+0x88>
				success = 1;
 800655e:	2301      	movs	r3, #1
 8006560:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	fb02 f203 	mul.w	r2, r2, r3
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	4413      	add	r3, r2
 800656e:	461a      	mov	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	601a      	str	r2, [r3, #0]
				break;
 8006574:	e009      	b.n	800658a <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006576:	7ffb      	ldrb	r3, [r7, #31]
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	3301      	adds	r3, #1
 8006580:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006582:	6a3a      	ldr	r2, [r7, #32]
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	429a      	cmp	r2, r3
 8006588:	d3e4      	bcc.n	8006554 <get_next_good_spad+0x66>
				coarseIndex++) {
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	3301      	adds	r3, #1
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	429a      	cmp	r2, r3
 8006596:	d202      	bcs.n	800659e <get_next_good_spad+0xb0>
 8006598:	7fbb      	ldrb	r3, [r7, #30]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0c7      	beq.n	800652e <get_next_good_spad+0x40>
		}
	}
}
 800659e:	bf00      	nop
 80065a0:	372c      	adds	r7, #44	; 0x2c
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80065be:	4a07      	ldr	r2, [pc, #28]	; (80065dc <is_aperture+0x30>)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <is_aperture+0x22>
		isAperture = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	200002c4 	.word	0x200002c4

080065e0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b089      	sub	sp, #36	; 0x24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80065f0:	2308      	movs	r3, #8
 80065f2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	fbb3 f2f2 	udiv	r2, r3, r2
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	fb01 f202 	mul.w	r2, r1, r2
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006618:	23ce      	movs	r3, #206	; 0xce
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e010      	b.n	8006640 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	4413      	add	r3, r2
 8006624:	68f9      	ldr	r1, [r7, #12]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	440a      	add	r2, r1
 800662a:	7812      	ldrb	r2, [r2, #0]
 800662c:	b251      	sxtb	r1, r2
 800662e:	2001      	movs	r0, #1
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	fa00 f202 	lsl.w	r2, r0, r2
 8006636:	b252      	sxtb	r2, r2
 8006638:	430a      	orrs	r2, r1
 800663a:	b252      	sxtb	r2, r2
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]

	return status;
 8006640:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3724      	adds	r7, #36	; 0x24
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800665a:	2306      	movs	r3, #6
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	21b0      	movs	r1, #176	; 0xb0
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f003 f9cf 	bl	8009a04 <VL53L0X_WriteMulti>
 8006666:	4603      	mov	r3, r0
 8006668:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800666a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006680:	2306      	movs	r3, #6
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	21b0      	movs	r1, #176	; 0xb0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f003 f9e7 	bl	8009a5a <VL53L0X_ReadMulti>
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08c      	sub	sp, #48	; 0x30
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	460b      	mov	r3, r1
 80066aa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80066b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80066ba:	2300      	movs	r3, #0
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066be:	e02b      	b.n	8006718 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80066c0:	f107 031c 	add.w	r3, r7, #28
 80066c4:	6a3a      	ldr	r2, [r7, #32]
 80066c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff10 	bl	80064ee <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d103      	bne.n	80066de <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066d6:	23ce      	movs	r3, #206	; 0xce
 80066d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80066dc:	e020      	b.n	8006720 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	4413      	add	r3, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff ff60 	bl	80065ac <is_aperture>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066f6:	23ce      	movs	r3, #206	; 0xce
 80066f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80066fc:	e010      	b.n	8006720 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006706:	6838      	ldr	r0, [r7, #0]
 8006708:	f7ff ff6a 	bl	80065e0 <enable_spad_bit>
		currentSpad++;
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	3301      	adds	r3, #1
 8006710:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	3301      	adds	r3, #1
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
 8006718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800671c:	429a      	cmp	r2, r3
 800671e:	d3cf      	bcc.n	80066c0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006726:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff8d 	bl	8006650 <set_ref_spad_map>
 8006736:	4603      	mov	r3, r0
 8006738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800673c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006740:	2b00      	cmp	r3, #0
 8006742:	d121      	bne.n	8006788 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	4619      	mov	r1, r3
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff ff93 	bl	8006676 <get_ref_spad_map>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800675a:	e011      	b.n	8006780 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	4413      	add	r3, r2
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	f107 0114 	add.w	r1, r7, #20
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	440b      	add	r3, r1
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d003      	beq.n	800677a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006772:	23ce      	movs	r3, #206	; 0xce
 8006774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006778:	e006      	b.n	8006788 <enable_ref_spads+0xec>
			}
			i++;
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	3301      	adds	r3, #1
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	429a      	cmp	r2, r3
 8006786:	d3e9      	bcc.n	800675c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006788:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800678c:	4618      	mov	r0, r3
 800678e:	3730      	adds	r7, #48	; 0x30
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80067b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80067b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d107      	bne.n	80067cc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80067bc:	22c0      	movs	r2, #192	; 0xc0
 80067be:	2101      	movs	r1, #1
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f003 f973 	bl	8009aac <VL53L0X_WrByte>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80067cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d108      	bne.n	80067e6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80067d4:	f107 0308 	add.w	r3, r7, #8
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff fc5e 	bl	800609c <VL53L0X_PerformSingleRangingMeasurement>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80067e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d107      	bne.n	80067fe <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067ee:	2201      	movs	r2, #1
 80067f0:	21ff      	movs	r1, #255	; 0xff
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f003 f95a 	bl	8009aac <VL53L0X_WrByte>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80067fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	21b6      	movs	r1, #182	; 0xb6
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f003 fa0f 	bl	8009c2e <VL53L0X_RdWord>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006816:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800681a:	2b00      	cmp	r3, #0
 800681c:	d107      	bne.n	800682e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800681e:	2200      	movs	r2, #0
 8006820:	21ff      	movs	r1, #255	; 0xff
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f003 f942 	bl	8009aac <VL53L0X_WrByte>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800682e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006832:	2b00      	cmp	r3, #0
 8006834:	d112      	bne.n	800685c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800683a:	461a      	mov	r2, r3
 800683c:	2101      	movs	r1, #1
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f003 f934 	bl	8009aac <VL53L0X_WrByte>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800684a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006858:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800685c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006860:	4618      	mov	r0, r3
 8006862:	3728      	adds	r7, #40	; 0x28
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b09d      	sub	sp, #116	; 0x74
 800686c:	af06      	add	r7, sp, #24
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006874:	2300      	movs	r3, #0
 8006876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800687a:	23b4      	movs	r3, #180	; 0xb4
 800687c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006880:	2303      	movs	r3, #3
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006884:	232c      	movs	r3, #44	; 0x2c
 8006886:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006894:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006898:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80068a2:	2306      	movs	r3, #6
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80068cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80068ce:	2300      	movs	r3, #0
 80068d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d2:	e009      	b.n	80068e8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	4413      	add	r3, r2
 80068da:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80068e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e4:	3301      	adds	r3, #1
 80068e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d3f1      	bcc.n	80068d4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068f0:	2201      	movs	r2, #1
 80068f2:	21ff      	movs	r1, #255	; 0xff
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f003 f8d9 	bl	8009aac <VL53L0X_WrByte>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006900:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006908:	2200      	movs	r2, #0
 800690a:	214f      	movs	r1, #79	; 0x4f
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f003 f8cd 	bl	8009aac <VL53L0X_WrByte>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006918:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006920:	222c      	movs	r2, #44	; 0x2c
 8006922:	214e      	movs	r1, #78	; 0x4e
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f003 f8c1 	bl	8009aac <VL53L0X_WrByte>
 800692a:	4603      	mov	r3, r0
 800692c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006930:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006934:	2b00      	cmp	r3, #0
 8006936:	d107      	bne.n	8006948 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006938:	2200      	movs	r2, #0
 800693a:	21ff      	movs	r1, #255	; 0xff
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f003 f8b5 	bl	8009aac <VL53L0X_WrByte>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006948:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006950:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006954:	461a      	mov	r2, r3
 8006956:	21b6      	movs	r1, #182	; 0xb6
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f003 f8a7 	bl	8009aac <VL53L0X_WrByte>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006964:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006968:	2b00      	cmp	r3, #0
 800696a:	d107      	bne.n	800697c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800696c:	2200      	movs	r2, #0
 800696e:	2180      	movs	r1, #128	; 0x80
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f003 f89b 	bl	8009aac <VL53L0X_WrByte>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800697c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006984:	f107 0210 	add.w	r2, r7, #16
 8006988:	f107 0111 	add.w	r1, r7, #17
 800698c:	2300      	movs	r3, #0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fbbb 	bl	800710a <VL53L0X_perform_ref_calibration>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800699a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d121      	bne.n	80069e6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80069ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80069be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80069c2:	f107 0218 	add.w	r2, r7, #24
 80069c6:	9204      	str	r2, [sp, #16]
 80069c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ca:	9203      	str	r2, [sp, #12]
 80069cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069ce:	9202      	str	r2, [sp, #8]
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	4623      	mov	r3, r4
 80069d8:	4602      	mov	r2, r0
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fe5e 	bl	800669c <enable_ref_spads>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d174      	bne.n	8006ad8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80069f2:	f107 0312 	add.w	r3, r7, #18
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fecb 	bl	8006794 <perform_ref_signal_measurement>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006a04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d161      	bne.n	8006ad0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006a0c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006a0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d25d      	bcs.n	8006ad0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a18:	e009      	b.n	8006a2e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d3f1      	bcc.n	8006a1a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006a36:	e002      	b.n	8006a3e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006a3e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a44:	4413      	add	r3, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fdb0 	bl	80065ac <is_aperture>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006a52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d3ee      	bcc.n	8006a38 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006a6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006a72:	f107 0218 	add.w	r2, r7, #24
 8006a76:	9204      	str	r2, [sp, #16]
 8006a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7a:	9203      	str	r2, [sp, #12]
 8006a7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a7e:	9202      	str	r2, [sp, #8]
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	4623      	mov	r3, r4
 8006a88:	4602      	mov	r2, r0
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fe06 	bl	800669c <enable_ref_spads>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006a96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d11b      	bne.n	8006ad6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006aa2:	f107 0312 	add.w	r3, r7, #18
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff fe73 	bl	8006794 <perform_ref_signal_measurement>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006ab4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10c      	bne.n	8006ad6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006abc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006abe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d208      	bcs.n	8006ad6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006ace:	e002      	b.n	8006ad6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad4:	e000      	b.n	8006ad8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006ad6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006ad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f040 80af 	bne.w	8006c40 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006ae2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006ae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	f240 80aa 	bls.w	8006c40 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006afc:	f107 031c 	add.w	r3, r7, #28
 8006b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b02:	4618      	mov	r0, r3
 8006b04:	f008 fe92 	bl	800f82c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006b08:	8a7b      	ldrh	r3, [r7, #18]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfb8      	it	lt
 8006b14:	425b      	neglt	r3, r3
 8006b16:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006b1e:	e086      	b.n	8006c2e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006b26:	f107 0314 	add.w	r3, r7, #20
 8006b2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2e:	f7ff fcde 	bl	80064ee <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d103      	bne.n	8006b42 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006b3a:	23ce      	movs	r3, #206	; 0xce
 8006b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006b40:	e07e      	b.n	8006c40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006b42:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff fd2e 	bl	80065ac <is_aperture>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d003      	beq.n	8006b62 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006b60:	e06e      	b.n	8006c40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b64:	3301      	adds	r3, #1
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fd32 	bl	80065e0 <enable_spad_bit>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006b82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10c      	bne.n	8006ba4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fd59 	bl	8006650 <set_ref_spad_map>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006ba4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d146      	bne.n	8006c3a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006bac:	f107 0312 	add.w	r3, r7, #18
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fdee 	bl	8006794 <perform_ref_signal_measurement>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006bbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d13b      	bne.n	8006c3e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006bc6:	8a7b      	ldrh	r3, [r7, #18]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bfb8      	it	lt
 8006bd2:	425b      	neglt	r3, r3
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006bd6:	8a7b      	ldrh	r3, [r7, #18]
 8006bd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d21c      	bcs.n	8006c18 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d914      	bls.n	8006c10 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006be6:	f107 031c 	add.w	r3, r7, #28
 8006bea:	4619      	mov	r1, r3
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fd2f 	bl	8006650 <set_ref_spad_map>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006bfe:	f107 011c 	add.w	r1, r7, #28
 8006c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c04:	4618      	mov	r0, r3
 8006c06:	f008 fe11 	bl	800f82c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c16:	e00a      	b.n	8006c2e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006c22:	f107 031c 	add.w	r3, r7, #28
 8006c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f008 fdff 	bl	800f82c <memcpy>
		while (!complete) {
 8006c2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f43f af74 	beq.w	8006b20 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006c38:	e002      	b.n	8006c40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006c3e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d115      	bne.n	8006c74 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c4c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006c54:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006c74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	375c      	adds	r7, #92	; 0x5c
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd90      	pop	{r4, r7, pc}

08006c80 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b093      	sub	sp, #76	; 0x4c
 8006c84:	af06      	add	r7, sp, #24
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006c98:	23b4      	movs	r3, #180	; 0xb4
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006c9e:	2306      	movs	r3, #6
 8006ca0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006ca2:	232c      	movs	r3, #44	; 0x2c
 8006ca4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	21ff      	movs	r1, #255	; 0xff
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f002 fefe 	bl	8009aac <VL53L0X_WrByte>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006cb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d107      	bne.n	8006cce <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	214f      	movs	r1, #79	; 0x4f
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f002 fef2 	bl	8009aac <VL53L0X_WrByte>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006cce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006cd6:	222c      	movs	r2, #44	; 0x2c
 8006cd8:	214e      	movs	r1, #78	; 0x4e
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f002 fee6 	bl	8009aac <VL53L0X_WrByte>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006ce6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006cee:	2200      	movs	r2, #0
 8006cf0:	21ff      	movs	r1, #255	; 0xff
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f002 feda 	bl	8009aac <VL53L0X_WrByte>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006cfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	21b6      	movs	r1, #182	; 0xb6
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f002 fecc 	bl	8009aac <VL53L0X_WrByte>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1e:	e009      	b.n	8006d34 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	3301      	adds	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
 8006d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d3f1      	bcc.n	8006d20 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d011      	beq.n	8006d66 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006d42:	e002      	b.n	8006d4a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	3301      	adds	r3, #1
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006d4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	4413      	add	r3, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fc2a 	bl	80065ac <is_aperture>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <VL53L0X_set_reference_spads+0xe6>
 8006d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d3ee      	bcc.n	8006d44 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d76:	79f9      	ldrb	r1, [r7, #7]
 8006d78:	f107 0214 	add.w	r2, r7, #20
 8006d7c:	9204      	str	r2, [sp, #16]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	9203      	str	r2, [sp, #12]
 8006d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d84:	9202      	str	r2, [sp, #8]
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	4602      	mov	r2, r0
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f7ff fc83 	bl	800669c <enable_ref_spads>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10c      	bne.n	8006dbe <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	79fa      	ldrb	r2, [r7, #7]
 8006dba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006dbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3734      	adds	r7, #52	; 0x34
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd90      	pop	{r4, r7, pc}

08006dca <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f002 fe5c 	bl	8009aac <VL53L0X_WrByte>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f9bf 	bl	8007184 <VL53L0X_measurement_poll_for_completion>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006e12:	2100      	movs	r1, #0
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff fac9 	bl	80063ac <VL53L0X_ClearInterruptMask>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006e26:	2200      	movs	r2, #0
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f002 fe3e 	bl	8009aac <VL53L0X_WrByte>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	4608      	mov	r0, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	70fb      	strb	r3, [r7, #3]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70bb      	strb	r3, [r7, #2]
 8006e56:	4613      	mov	r3, r2
 8006e58:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e62:	2201      	movs	r2, #1
 8006e64:	21ff      	movs	r1, #255	; 0xff
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f002 fe20 	bl	8009aac <VL53L0X_WrByte>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f002 fe16 	bl	8009aac <VL53L0X_WrByte>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	21ff      	movs	r1, #255	; 0xff
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 fe0c 	bl	8009aac <VL53L0X_WrByte>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01e      	beq.n	8006ee2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d009      	beq.n	8006ec0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	21cb      	movs	r1, #203	; 0xcb
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f002 fe9b 	bl	8009bec <VL53L0X_RdByte>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	461a      	mov	r2, r3
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006ec0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02a      	beq.n	8006f1e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006ec8:	f107 030e 	add.w	r3, r7, #14
 8006ecc:	461a      	mov	r2, r3
 8006ece:	21ee      	movs	r1, #238	; 0xee
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f002 fe8b 	bl	8009bec <VL53L0X_RdByte>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	e01d      	b.n	8006f1e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006eea:	78bb      	ldrb	r3, [r7, #2]
 8006eec:	461a      	mov	r2, r3
 8006eee:	21cb      	movs	r1, #203	; 0xcb
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f002 fddb 	bl	8009aac <VL53L0X_WrByte>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	461a      	mov	r2, r3
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006f08:	787b      	ldrb	r3, [r7, #1]
 8006f0a:	2280      	movs	r2, #128	; 0x80
 8006f0c:	21ee      	movs	r1, #238	; 0xee
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f002 fe2a 	bl	8009b68 <VL53L0X_UpdateByte>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f1e:	2201      	movs	r2, #1
 8006f20:	21ff      	movs	r1, #255	; 0xff
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f002 fdc2 	bl	8009aac <VL53L0X_WrByte>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006f32:	2201      	movs	r2, #1
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f002 fdb8 	bl	8009aac <VL53L0X_WrByte>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f46:	2200      	movs	r2, #0
 8006f48:	21ff      	movs	r1, #255	; 0xff
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f002 fdae 	bl	8009aac <VL53L0X_WrByte>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	701a      	strb	r2, [r3, #0]

	return Status;
 8006f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b08a      	sub	sp, #40	; 0x28
 8006f76:	af04      	add	r7, sp, #16
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	461a      	mov	r2, r3
 8006f80:	460b      	mov	r3, r1
 8006f82:	71fb      	strb	r3, [r7, #7]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006f9c:	79bb      	ldrb	r3, [r7, #6]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006fa8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006faa:	2201      	movs	r2, #1
 8006fac:	2101      	movs	r1, #1
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f002 fd7c 	bl	8009aac <VL53L0X_WrByte>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006fc0:	2140      	movs	r1, #64	; 0x40
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff ff01 	bl	8006dca <VL53L0X_perform_single_ref_calibration>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d115      	bne.n	8007000 <VL53L0X_perform_vhv_calibration+0x8e>
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d112      	bne.n	8007000 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006fda:	7d39      	ldrb	r1, [r7, #20]
 8006fdc:	7d7a      	ldrb	r2, [r7, #21]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9303      	str	r3, [sp, #12]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	9302      	str	r3, [sp, #8]
 8006fe6:	f107 0313 	add.w	r3, r7, #19
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff ff23 	bl	8006e40 <VL53L0X_ref_calibration_io>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]
 8006ffe:	e002      	b.n	8007006 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2200      	movs	r2, #0
 8007004:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d112      	bne.n	8007034 <VL53L0X_perform_vhv_calibration+0xc2>
 800700e:	79bb      	ldrb	r3, [r7, #6]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007014:	7dbb      	ldrb	r3, [r7, #22]
 8007016:	461a      	mov	r2, r3
 8007018:	2101      	movs	r1, #1
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f002 fd46 	bl	8009aac <VL53L0X_WrByte>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	7dba      	ldrb	r2, [r7, #22]
 8007030:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007034:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af04      	add	r7, sp, #16
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4611      	mov	r1, r2
 800704c:	461a      	mov	r2, r3
 800704e:	460b      	mov	r3, r1
 8007050:	71fb      	strb	r3, [r7, #7]
 8007052:	4613      	mov	r3, r2
 8007054:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007066:	79bb      	ldrb	r3, [r7, #6]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007072:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007074:	2202      	movs	r2, #2
 8007076:	2101      	movs	r1, #1
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f002 fd17 	bl	8009aac <VL53L0X_WrByte>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800708a:	2100      	movs	r1, #0
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff fe9c 	bl	8006dca <VL53L0X_perform_single_ref_calibration>
 8007092:	4603      	mov	r3, r0
 8007094:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d115      	bne.n	80070ca <VL53L0X_perform_phase_calibration+0x8a>
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d112      	bne.n	80070ca <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80070a4:	7d39      	ldrb	r1, [r7, #20]
 80070a6:	7d7a      	ldrb	r2, [r7, #21]
 80070a8:	2301      	movs	r3, #1
 80070aa:	9303      	str	r3, [sp, #12]
 80070ac:	2300      	movs	r3, #0
 80070ae:	9302      	str	r3, [sp, #8]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	f107 0313 	add.w	r3, r7, #19
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	460b      	mov	r3, r1
 80070bc:	2101      	movs	r1, #1
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7ff febe 	bl	8006e40 <VL53L0X_ref_calibration_io>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]
 80070c8:	e002      	b.n	80070d0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80070d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d112      	bne.n	80070fe <VL53L0X_perform_phase_calibration+0xbe>
 80070d8:	79bb      	ldrb	r3, [r7, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00f      	beq.n	80070fe <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070de:	7dbb      	ldrb	r3, [r7, #22]
 80070e0:	461a      	mov	r2, r3
 80070e2:	2101      	movs	r1, #1
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f002 fce1 	bl	8009aac <VL53L0X_WrByte>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80070ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	7dba      	ldrb	r2, [r7, #22]
 80070fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80070fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b086      	sub	sp, #24
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007118:	2300      	movs	r3, #0
 800711a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007126:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	2300      	movs	r3, #0
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7ff ff1f 	bl	8006f72 <VL53L0X_perform_vhv_calibration>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d107      	bne.n	8007150 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007140:	78fa      	ldrb	r2, [r7, #3]
 8007142:	2300      	movs	r3, #0
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff ff7a 	bl	8007040 <VL53L0X_perform_phase_calibration>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10f      	bne.n	8007178 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007158:	7dbb      	ldrb	r3, [r7, #22]
 800715a:	461a      	mov	r2, r3
 800715c:	2101      	movs	r1, #1
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f002 fca4 	bl	8009aac <VL53L0X_WrByte>
 8007164:	4603      	mov	r3, r0
 8007166:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d103      	bne.n	8007178 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	7dba      	ldrb	r2, [r7, #22]
 8007174:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800718c:	2300      	movs	r3, #0
 800718e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007198:	f107 030f 	add.w	r3, r7, #15
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe fe15 	bl	8005dce <VL53L0X_GetMeasurementDataReady>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80071a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d110      	bne.n	80071d2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d00f      	beq.n	80071d6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3301      	adds	r3, #1
 80071ba:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80071c2:	d302      	bcc.n	80071ca <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80071c4:	23f9      	movs	r3, #249	; 0xf9
 80071c6:	75fb      	strb	r3, [r7, #23]
			break;
 80071c8:	e006      	b.n	80071d8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f002 fd72 	bl	8009cb4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80071d0:	e7e2      	b.n	8007198 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80071d2:	bf00      	nop
 80071d4:	e000      	b.n	80071d8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80071d6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80071d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	3301      	adds	r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	4603      	mov	r3, r0
 8007212:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	b2db      	uxtb	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800723c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007240:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007242:	e002      	b.n	800724a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	089b      	lsrs	r3, r3, #2
 8007248:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	429a      	cmp	r2, r3
 8007250:	d8f8      	bhi.n	8007244 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007252:	e017      	b.n	8007284 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d80b      	bhi.n	8007278 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	085a      	lsrs	r2, r3, #1
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4413      	add	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e002      	b.n	800727e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	089b      	lsrs	r3, r3, #2
 8007282:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e4      	bne.n	8007254 <VL53L0X_isqrt+0x24>
	}

	return res;
 800728a:	68fb      	ldr	r3, [r7, #12]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2183      	movs	r1, #131	; 0x83
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f002 fbff 	bl	8009aac <VL53L0X_WrByte>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80072b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d11e      	bne.n	80072fe <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80072c4:	f107 030f 	add.w	r3, r7, #15
 80072c8:	461a      	mov	r2, r3
 80072ca:	2183      	movs	r1, #131	; 0x83
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f002 fc8d 	bl	8009bec <VL53L0X_RdByte>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <VL53L0X_device_read_strobe+0x5a>
 80072dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3301      	adds	r3, #1
 80072e8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80072f0:	d3e8      	bcc.n	80072c4 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80072f8:	d301      	bcc.n	80072fe <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80072fa:	23f9      	movs	r3, #249	; 0xf9
 80072fc:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80072fe:	2201      	movs	r2, #1
 8007300:	2183      	movs	r1, #131	; 0x83
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f002 fbd2 	bl	8009aac <VL53L0X_WrByte>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	4313      	orrs	r3, r2
 8007310:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007312:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b098      	sub	sp, #96	; 0x60
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
 800732c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800734e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007366:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800736a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800736e:	2b07      	cmp	r3, #7
 8007370:	f000 8408 	beq.w	8007b84 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007374:	2201      	movs	r2, #1
 8007376:	2180      	movs	r1, #128	; 0x80
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f002 fb97 	bl	8009aac <VL53L0X_WrByte>
 800737e:	4603      	mov	r3, r0
 8007380:	461a      	mov	r2, r3
 8007382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007386:	4313      	orrs	r3, r2
 8007388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800738c:	2201      	movs	r2, #1
 800738e:	21ff      	movs	r1, #255	; 0xff
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 fb8b 	bl	8009aac <VL53L0X_WrByte>
 8007396:	4603      	mov	r3, r0
 8007398:	461a      	mov	r2, r3
 800739a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800739e:	4313      	orrs	r3, r2
 80073a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80073a4:	2200      	movs	r2, #0
 80073a6:	2100      	movs	r1, #0
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f002 fb7f 	bl	8009aac <VL53L0X_WrByte>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80073bc:	2206      	movs	r2, #6
 80073be:	21ff      	movs	r1, #255	; 0xff
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f002 fb73 	bl	8009aac <VL53L0X_WrByte>
 80073c6:	4603      	mov	r3, r0
 80073c8:	461a      	mov	r2, r3
 80073ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80073d4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80073d8:	461a      	mov	r2, r3
 80073da:	2183      	movs	r1, #131	; 0x83
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f002 fc05 	bl	8009bec <VL53L0X_RdByte>
 80073e2:	4603      	mov	r3, r0
 80073e4:	461a      	mov	r2, r3
 80073e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80073f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073f4:	f043 0304 	orr.w	r3, r3, #4
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	2183      	movs	r1, #131	; 0x83
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f002 fb54 	bl	8009aac <VL53L0X_WrByte>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800740c:	4313      	orrs	r3, r2
 800740e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007412:	2207      	movs	r2, #7
 8007414:	21ff      	movs	r1, #255	; 0xff
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f002 fb48 	bl	8009aac <VL53L0X_WrByte>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007424:	4313      	orrs	r3, r2
 8007426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800742a:	2201      	movs	r2, #1
 800742c:	2181      	movs	r1, #129	; 0x81
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f002 fb3c 	bl	8009aac <VL53L0X_WrByte>
 8007434:	4603      	mov	r3, r0
 8007436:	461a      	mov	r2, r3
 8007438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743c:	4313      	orrs	r3, r2
 800743e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f002 fc36 	bl	8009cb4 <VL53L0X_PollingDelay>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007450:	4313      	orrs	r3, r2
 8007452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007456:	2201      	movs	r2, #1
 8007458:	2180      	movs	r1, #128	; 0x80
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f002 fb26 	bl	8009aac <VL53L0X_WrByte>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007468:	4313      	orrs	r3, r2
 800746a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8098 	beq.w	80075aa <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800747a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800747e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007482:	2b00      	cmp	r3, #0
 8007484:	f040 8091 	bne.w	80075aa <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007488:	226b      	movs	r2, #107	; 0x6b
 800748a:	2194      	movs	r1, #148	; 0x94
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f002 fb0d 	bl	8009aac <VL53L0X_WrByte>
 8007492:	4603      	mov	r3, r0
 8007494:	461a      	mov	r2, r3
 8007496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800749a:	4313      	orrs	r3, r2
 800749c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff fef9 	bl	8007298 <VL53L0X_device_read_strobe>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074b8:	461a      	mov	r2, r3
 80074ba:	2190      	movs	r1, #144	; 0x90
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f002 fbd7 	bl	8009c70 <VL53L0X_RdDWord>
 80074c2:	4603      	mov	r3, r0
 80074c4:	461a      	mov	r2, r3
 80074c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	0bdb      	lsrs	r3, r3, #15
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80074ec:	2224      	movs	r2, #36	; 0x24
 80074ee:	2194      	movs	r1, #148	; 0x94
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f002 fadb 	bl	8009aac <VL53L0X_WrByte>
 80074f6:	4603      	mov	r3, r0
 80074f8:	461a      	mov	r2, r3
 80074fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074fe:	4313      	orrs	r3, r2
 8007500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff fec7 	bl	8007298 <VL53L0X_device_read_strobe>
 800750a:	4603      	mov	r3, r0
 800750c:	461a      	mov	r2, r3
 800750e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007512:	4313      	orrs	r3, r2
 8007514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800751c:	461a      	mov	r2, r3
 800751e:	2190      	movs	r1, #144	; 0x90
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f002 fba5 	bl	8009c70 <VL53L0X_RdDWord>
 8007526:	4603      	mov	r3, r0
 8007528:	461a      	mov	r2, r3
 800752a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800752e:	4313      	orrs	r3, r2
 8007530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	0e1b      	lsrs	r3, r3, #24
 8007538:	b2db      	uxtb	r3, r3
 800753a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	b2db      	uxtb	r3, r3
 8007542:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	0a1b      	lsrs	r3, r3, #8
 8007548:	b2db      	uxtb	r3, r3
 800754a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	b2db      	uxtb	r3, r3
 8007550:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007552:	2225      	movs	r2, #37	; 0x25
 8007554:	2194      	movs	r1, #148	; 0x94
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f002 faa8 	bl	8009aac <VL53L0X_WrByte>
 800755c:	4603      	mov	r3, r0
 800755e:	461a      	mov	r2, r3
 8007560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007564:	4313      	orrs	r3, r2
 8007566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fe94 	bl	8007298 <VL53L0X_device_read_strobe>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007578:	4313      	orrs	r3, r2
 800757a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800757e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007582:	461a      	mov	r2, r3
 8007584:	2190      	movs	r1, #144	; 0x90
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f002 fb72 	bl	8009c70 <VL53L0X_RdDWord>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007594:	4313      	orrs	r3, r2
 8007596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	0e1b      	lsrs	r3, r3, #24
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8189 	beq.w	80078c8 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80075b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075ba:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f040 8182 	bne.w	80078c8 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80075c4:	2202      	movs	r2, #2
 80075c6:	2194      	movs	r1, #148	; 0x94
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f002 fa6f 	bl	8009aac <VL53L0X_WrByte>
 80075ce:	4603      	mov	r3, r0
 80075d0:	461a      	mov	r2, r3
 80075d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fe5b 	bl	8007298 <VL53L0X_device_read_strobe>
 80075e2:	4603      	mov	r3, r0
 80075e4:	461a      	mov	r2, r3
 80075e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80075f0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80075f4:	461a      	mov	r2, r3
 80075f6:	2190      	movs	r1, #144	; 0x90
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 faf7 	bl	8009bec <VL53L0X_RdByte>
 80075fe:	4603      	mov	r3, r0
 8007600:	461a      	mov	r2, r3
 8007602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007606:	4313      	orrs	r3, r2
 8007608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800760c:	227b      	movs	r2, #123	; 0x7b
 800760e:	2194      	movs	r1, #148	; 0x94
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f002 fa4b 	bl	8009aac <VL53L0X_WrByte>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800761e:	4313      	orrs	r3, r2
 8007620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff fe37 	bl	8007298 <VL53L0X_device_read_strobe>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007632:	4313      	orrs	r3, r2
 8007634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007638:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800763c:	461a      	mov	r2, r3
 800763e:	2190      	movs	r1, #144	; 0x90
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f002 fad3 	bl	8009bec <VL53L0X_RdByte>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764e:	4313      	orrs	r3, r2
 8007650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007654:	2277      	movs	r2, #119	; 0x77
 8007656:	2194      	movs	r1, #148	; 0x94
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f002 fa27 	bl	8009aac <VL53L0X_WrByte>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007666:	4313      	orrs	r3, r2
 8007668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff fe13 	bl	8007298 <VL53L0X_device_read_strobe>
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800767a:	4313      	orrs	r3, r2
 800767c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007684:	461a      	mov	r2, r3
 8007686:	2190      	movs	r1, #144	; 0x90
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f002 faf1 	bl	8009c70 <VL53L0X_RdDWord>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007696:	4313      	orrs	r3, r2
 8007698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	0e5b      	lsrs	r3, r3, #25
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	0c9b      	lsrs	r3, r3, #18
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	0adb      	lsrs	r3, r3, #11
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	091b      	lsrs	r3, r3, #4
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80076e6:	2278      	movs	r2, #120	; 0x78
 80076e8:	2194      	movs	r1, #148	; 0x94
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f002 f9de 	bl	8009aac <VL53L0X_WrByte>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff fdca 	bl	8007298 <VL53L0X_device_read_strobe>
 8007704:	4603      	mov	r3, r0
 8007706:	461a      	mov	r2, r3
 8007708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800770c:	4313      	orrs	r3, r2
 800770e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007716:	461a      	mov	r2, r3
 8007718:	2190      	movs	r1, #144	; 0x90
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 faa8 	bl	8009c70 <VL53L0X_RdDWord>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007728:	4313      	orrs	r3, r2
 800772a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	0f5b      	lsrs	r3, r3, #29
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007738:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800773a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800773e:	4413      	add	r3, r2
 8007740:	b2db      	uxtb	r3, r3
 8007742:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	0d9b      	lsrs	r3, r3, #22
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	b2db      	uxtb	r3, r3
 8007750:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	0bdb      	lsrs	r3, r3, #15
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775c:	b2db      	uxtb	r3, r3
 800775e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776a:	b2db      	uxtb	r3, r3
 800776c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007778:	b2db      	uxtb	r3, r3
 800777a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	b2db      	uxtb	r3, r3
 8007780:	019b      	lsls	r3, r3, #6
 8007782:	b2db      	uxtb	r3, r3
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	b2db      	uxtb	r3, r3
 800778a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800778e:	2279      	movs	r2, #121	; 0x79
 8007790:	2194      	movs	r1, #148	; 0x94
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f002 f98a 	bl	8009aac <VL53L0X_WrByte>
 8007798:	4603      	mov	r3, r0
 800779a:	461a      	mov	r2, r3
 800779c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fd76 	bl	8007298 <VL53L0X_device_read_strobe>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077be:	461a      	mov	r2, r3
 80077c0:	2190      	movs	r1, #144	; 0x90
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f002 fa54 	bl	8009c70 <VL53L0X_RdDWord>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077d0:	4313      	orrs	r3, r2
 80077d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	0e9b      	lsrs	r3, r3, #26
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80077e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077e6:	4413      	add	r3, r2
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	0cdb      	lsrs	r3, r3, #19
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	0b1b      	lsrs	r3, r3, #12
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007804:	b2db      	uxtb	r3, r3
 8007806:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007812:	b2db      	uxtb	r3, r3
 8007814:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	b2db      	uxtb	r3, r3
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007828:	227a      	movs	r2, #122	; 0x7a
 800782a:	2194      	movs	r1, #148	; 0x94
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f002 f93d 	bl	8009aac <VL53L0X_WrByte>
 8007832:	4603      	mov	r3, r0
 8007834:	461a      	mov	r2, r3
 8007836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800783a:	4313      	orrs	r3, r2
 800783c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fd29 	bl	8007298 <VL53L0X_device_read_strobe>
 8007846:	4603      	mov	r3, r0
 8007848:	461a      	mov	r2, r3
 800784a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800784e:	4313      	orrs	r3, r2
 8007850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007858:	461a      	mov	r2, r3
 800785a:	2190      	movs	r1, #144	; 0x90
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f002 fa07 	bl	8009c70 <VL53L0X_RdDWord>
 8007862:	4603      	mov	r3, r0
 8007864:	461a      	mov	r2, r3
 8007866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800786a:	4313      	orrs	r3, r2
 800786c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	0f9b      	lsrs	r3, r3, #30
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800787c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007880:	4413      	add	r3, r2
 8007882:	b2db      	uxtb	r3, r3
 8007884:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	0ddb      	lsrs	r3, r3, #23
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007890:	b2db      	uxtb	r3, r3
 8007892:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	0c1b      	lsrs	r3, r3, #16
 8007898:	b2db      	uxtb	r3, r3
 800789a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	0a5b      	lsrs	r3, r3, #9
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	089b      	lsrs	r3, r3, #2
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80f1 	beq.w	8007ab6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80078d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078d8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 80ea 	bne.w	8007ab6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80078e2:	227b      	movs	r2, #123	; 0x7b
 80078e4:	2194      	movs	r1, #148	; 0x94
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f002 f8e0 	bl	8009aac <VL53L0X_WrByte>
 80078ec:	4603      	mov	r3, r0
 80078ee:	461a      	mov	r2, r3
 80078f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fccc 	bl	8007298 <VL53L0X_device_read_strobe>
 8007900:	4603      	mov	r3, r0
 8007902:	461a      	mov	r2, r3
 8007904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007908:	4313      	orrs	r3, r2
 800790a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800790e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007912:	461a      	mov	r2, r3
 8007914:	2190      	movs	r1, #144	; 0x90
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f002 f9aa 	bl	8009c70 <VL53L0X_RdDWord>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007924:	4313      	orrs	r3, r2
 8007926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800792a:	227c      	movs	r2, #124	; 0x7c
 800792c:	2194      	movs	r1, #148	; 0x94
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f002 f8bc 	bl	8009aac <VL53L0X_WrByte>
 8007934:	4603      	mov	r3, r0
 8007936:	461a      	mov	r2, r3
 8007938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800793c:	4313      	orrs	r3, r2
 800793e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff fca8 	bl	8007298 <VL53L0X_device_read_strobe>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007950:	4313      	orrs	r3, r2
 8007952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800795a:	461a      	mov	r2, r3
 800795c:	2190      	movs	r1, #144	; 0x90
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f002 f986 	bl	8009c70 <VL53L0X_RdDWord>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800796c:	4313      	orrs	r3, r2
 800796e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007972:	2273      	movs	r2, #115	; 0x73
 8007974:	2194      	movs	r1, #148	; 0x94
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f002 f898 	bl	8009aac <VL53L0X_WrByte>
 800797c:	4603      	mov	r3, r0
 800797e:	461a      	mov	r2, r3
 8007980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007984:	4313      	orrs	r3, r2
 8007986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fc84 	bl	8007298 <VL53L0X_device_read_strobe>
 8007990:	4603      	mov	r3, r0
 8007992:	461a      	mov	r2, r3
 8007994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007998:	4313      	orrs	r3, r2
 800799a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800799e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079a2:	461a      	mov	r2, r3
 80079a4:	2190      	movs	r1, #144	; 0x90
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f002 f962 	bl	8009c70 <VL53L0X_RdDWord>
 80079ac:	4603      	mov	r3, r0
 80079ae:	461a      	mov	r2, r3
 80079b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80079be:	b29b      	uxth	r3, r3
 80079c0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80079c2:	2274      	movs	r2, #116	; 0x74
 80079c4:	2194      	movs	r1, #148	; 0x94
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f002 f870 	bl	8009aac <VL53L0X_WrByte>
 80079cc:	4603      	mov	r3, r0
 80079ce:	461a      	mov	r2, r3
 80079d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff fc5c 	bl	8007298 <VL53L0X_device_read_strobe>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079f2:	461a      	mov	r2, r3
 80079f4:	2190      	movs	r1, #144	; 0x90
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f002 f93a 	bl	8009c70 <VL53L0X_RdDWord>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007a0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a10:	4313      	orrs	r3, r2
 8007a12:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007a14:	2275      	movs	r2, #117	; 0x75
 8007a16:	2194      	movs	r1, #148	; 0x94
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f002 f847 	bl	8009aac <VL53L0X_WrByte>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fc33 	bl	8007298 <VL53L0X_device_read_strobe>
 8007a32:	4603      	mov	r3, r0
 8007a34:	461a      	mov	r2, r3
 8007a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a44:	461a      	mov	r2, r3
 8007a46:	2190      	movs	r1, #144	; 0x90
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f002 f911 	bl	8009c70 <VL53L0X_RdDWord>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	461a      	mov	r2, r3
 8007a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007a64:	2276      	movs	r2, #118	; 0x76
 8007a66:	2194      	movs	r1, #148	; 0x94
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f002 f81f 	bl	8009aac <VL53L0X_WrByte>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461a      	mov	r2, r3
 8007a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fc0b 	bl	8007298 <VL53L0X_device_read_strobe>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a94:	461a      	mov	r2, r3
 8007a96:	2190      	movs	r1, #144	; 0x90
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f002 f8e9 	bl	8009c70 <VL53L0X_RdDWord>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2181      	movs	r1, #129	; 0x81
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fff6 	bl	8009aac <VL53L0X_WrByte>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007ace:	2206      	movs	r2, #6
 8007ad0:	21ff      	movs	r1, #255	; 0xff
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 ffea 	bl	8009aac <VL53L0X_WrByte>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007ae6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007aea:	461a      	mov	r2, r3
 8007aec:	2183      	movs	r1, #131	; 0x83
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f002 f87c 	bl	8009bec <VL53L0X_RdByte>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007b02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b06:	f023 0304 	bic.w	r3, r3, #4
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	2183      	movs	r1, #131	; 0x83
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 ffcb 	bl	8009aac <VL53L0X_WrByte>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b24:	2201      	movs	r2, #1
 8007b26:	21ff      	movs	r1, #255	; 0xff
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 ffbf 	bl	8009aac <VL53L0X_WrByte>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	461a      	mov	r2, r3
 8007b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	2100      	movs	r1, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 ffb3 	bl	8009aac <VL53L0X_WrByte>
 8007b46:	4603      	mov	r3, r0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b54:	2200      	movs	r2, #0
 8007b56:	21ff      	movs	r1, #255	; 0xff
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 ffa7 	bl	8009aac <VL53L0X_WrByte>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2180      	movs	r1, #128	; 0x80
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 ff9b 	bl	8009aac <VL53L0X_WrByte>
 8007b76:	4603      	mov	r3, r0
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007b84:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 808f 	bne.w	8007cac <VL53L0X_get_info_from_device+0x98e>
 8007b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b92:	2b07      	cmp	r3, #7
 8007b94:	f000 808a 	beq.w	8007cac <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d024      	beq.n	8007bec <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ba6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d11e      	bne.n	8007bec <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007bb4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007bbe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc6:	e00e      	b.n	8007be6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007bc8:	f107 0208 	add.w	r2, r7, #8
 8007bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bce:	4413      	add	r3, r2
 8007bd0:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007bdc:	460a      	mov	r2, r1
 8007bde:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be2:	3301      	adds	r3, #1
 8007be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	dded      	ble.n	8007bc8 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d018      	beq.n	8007c28 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007bfa:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d112      	bne.n	8007c28 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c0c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	33f3      	adds	r3, #243	; 0xf3
 8007c1a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007c1c:	f107 0310 	add.w	r3, r7, #16
 8007c20:	4619      	mov	r1, r3
 8007c22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c24:	f008 fa67 	bl	80100f6 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d030      	beq.n	8007c94 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007c32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c36:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d12a      	bne.n	8007c94 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c50:	025b      	lsls	r3, r3, #9
 8007c52:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d011      	beq.n	8007c8c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007c7c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007c80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007c84:	425b      	negs	r3, r3
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007c8c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007c94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007ca2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3760      	adds	r7, #96	; 0x60
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007cb8:	b490      	push	{r4, r7}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007cc4:	f240 6377 	movw	r3, #1655	; 0x677
 8007cc8:	f04f 0400 	mov.w	r4, #0
 8007ccc:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8007cd0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007cd4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	fb02 f303 	mul.w	r3, r2, r3
 8007ce4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc90      	pop	{r4, r7}
 8007cf0:	4770      	bx	lr

08007cf2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b087      	sub	sp, #28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d017      	beq.n	8007d3c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007d12:	e005      	b.n	8007d20 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007d1a:	89fb      	ldrh	r3, [r7, #14]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f4      	bne.n	8007d14 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007d2a:	89fb      	ldrh	r3, [r7, #14]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007d38:	4413      	add	r3, r2
 8007d3a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007d3c:	8afb      	ldrh	r3, [r7, #22]

}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	4603      	mov	r3, r0
 8007d52:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	0a12      	lsrs	r2, r2, #8
 8007d60:	b292      	uxth	r2, r2
 8007d62:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007d68:	68fb      	ldr	r3, [r7, #12]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff ff92 	bl	8007cb8 <VL53L0X_calc_macro_period_ps>
 8007d94:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d9c:	4a0a      	ldr	r2, [pc, #40]	; (8007dc8 <VL53L0X_calc_timeout_mclks+0x50>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	099b      	lsrs	r3, r3, #6
 8007da4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dac:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	441a      	add	r2, r3
	timeout_period_mclks =
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3720      	adds	r7, #32
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	10624dd3 	.word	0x10624dd3

08007dcc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007de0:	787b      	ldrb	r3, [r7, #1]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff ff67 	bl	8007cb8 <VL53L0X_calc_macro_period_ps>
 8007dea:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007df2:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <VL53L0X_calc_timeout_us+0x50>)
 8007df4:	fba2 2303 	umull	r2, r3, r2, r3
 8007df8:	099b      	lsrs	r3, r3, #6
 8007dfa:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007dfc:	887b      	ldrh	r3, [r7, #2]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	fb02 f303 	mul.w	r3, r2, r3
 8007e04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007e08:	4a04      	ldr	r2, [pc, #16]	; (8007e1c <VL53L0X_calc_timeout_us+0x50>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	099b      	lsrs	r3, r3, #6
 8007e10:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007e12:	697b      	ldr	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	10624dd3 	.word	0x10624dd3

08007e20 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08c      	sub	sp, #48	; 0x30
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <get_sequence_step_timeout+0x38>
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d002      	beq.n	8007e58 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d128      	bne.n	8007eaa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	2100      	movs	r1, #0
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7fd fa77 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d109      	bne.n	8007e88 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007e74:	f107 0320 	add.w	r3, r7, #32
 8007e78:	461a      	mov	r2, r3
 8007e7a:	2146      	movs	r1, #70	; 0x46
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f001 feb5 	bl	8009bec <VL53L0X_RdByte>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007e88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ff5b 	bl	8007d4a <VL53L0X_decode_timeout>
 8007e94:	4603      	mov	r3, r0
 8007e96:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e98:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff ff93 	bl	8007dcc <VL53L0X_calc_timeout_us>
 8007ea6:	62b8      	str	r0, [r7, #40]	; 0x28
 8007ea8:	e092      	b.n	8007fd0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d135      	bne.n	8007f1c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007eb0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7fd fa4b 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ec4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f040 8081 	bne.w	8007fd0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ece:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7fd fa3c 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007ee2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007eea:	f107 031e 	add.w	r3, r7, #30
 8007eee:	461a      	mov	r2, r3
 8007ef0:	2151      	movs	r1, #81	; 0x51
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f001 fe9b 	bl	8009c2e <VL53L0X_RdWord>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007efe:	8bfb      	ldrh	r3, [r7, #30]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff ff22 	bl	8007d4a <VL53L0X_decode_timeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007f0a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007f0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f10:	4619      	mov	r1, r3
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff ff5a 	bl	8007dcc <VL53L0X_calc_timeout_us>
 8007f18:	62b8      	str	r0, [r7, #40]	; 0x28
 8007f1a:	e059      	b.n	8007fd0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d156      	bne.n	8007fd0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007f22:	f107 0314 	add.w	r3, r7, #20
 8007f26:	4619      	mov	r1, r3
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7fd fb1d 	bl	8005568 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01d      	beq.n	8007f74 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f38:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	2100      	movs	r1, #0
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7fd fa07 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007f4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10f      	bne.n	8007f74 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007f54:	f107 031e 	add.w	r3, r7, #30
 8007f58:	461a      	mov	r2, r3
 8007f5a:	2151      	movs	r1, #81	; 0x51
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f001 fe66 	bl	8009c2e <VL53L0X_RdWord>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007f68:	8bfb      	ldrh	r3, [r7, #30]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff feed 	bl	8007d4a <VL53L0X_decode_timeout>
 8007f70:	4603      	mov	r3, r0
 8007f72:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f7c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007f80:	461a      	mov	r2, r3
 8007f82:	2101      	movs	r1, #1
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7fd f9e5 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007f90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10f      	bne.n	8007fb8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007f98:	f107 031c 	add.w	r3, r7, #28
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	2171      	movs	r1, #113	; 0x71
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f001 fe44 	bl	8009c2e <VL53L0X_RdWord>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007fac:	8bbb      	ldrh	r3, [r7, #28]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff fecb 	bl	8007d4a <VL53L0X_decode_timeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007fb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007fc0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7ff feff 	bl	8007dcc <VL53L0X_calc_timeout_us>
 8007fce:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd4:	601a      	str	r2, [r3, #0]

	return Status;
 8007fd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3730      	adds	r7, #48	; 0x30
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b08a      	sub	sp, #40	; 0x28
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	460b      	mov	r3, r1
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <set_sequence_step_timeout+0x26>
 8007ffc:	7afb      	ldrb	r3, [r7, #11]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d002      	beq.n	8008008 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d138      	bne.n	800807a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008008:	f107 031b 	add.w	r3, r7, #27
 800800c:	461a      	mov	r2, r3
 800800e:	2100      	movs	r1, #0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7fd f99f 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800801c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008020:	2b00      	cmp	r3, #0
 8008022:	d11a      	bne.n	800805a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008024:	7efb      	ldrb	r3, [r7, #27]
 8008026:	461a      	mov	r2, r3
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7ff fea4 	bl	8007d78 <VL53L0X_calc_timeout_mclks>
 8008030:	4603      	mov	r3, r0
 8008032:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008034:	8bbb      	ldrh	r3, [r7, #28]
 8008036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803a:	d903      	bls.n	8008044 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800803c:	23ff      	movs	r3, #255	; 0xff
 800803e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008042:	e004      	b.n	800804e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008044:	8bbb      	ldrh	r3, [r7, #28]
 8008046:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008048:	3b01      	subs	r3, #1
 800804a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800804e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800805a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800805e:	2b00      	cmp	r3, #0
 8008060:	f040 80ab 	bne.w	80081ba <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008068:	461a      	mov	r2, r3
 800806a:	2146      	movs	r1, #70	; 0x46
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f001 fd1d 	bl	8009aac <VL53L0X_WrByte>
 8008072:	4603      	mov	r3, r0
 8008074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008078:	e09f      	b.n	80081ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	2b03      	cmp	r3, #3
 800807e:	d135      	bne.n	80080ec <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008080:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11b      	bne.n	80080c0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008088:	f107 031b 	add.w	r3, r7, #27
 800808c:	461a      	mov	r2, r3
 800808e:	2100      	movs	r1, #0
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7fd f95f 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8008096:	4603      	mov	r3, r0
 8008098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800809c:	7efb      	ldrb	r3, [r7, #27]
 800809e:	461a      	mov	r2, r3
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fe68 	bl	8007d78 <VL53L0X_calc_timeout_mclks>
 80080a8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80080aa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80080ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fe1f 	bl	8007cf2 <VL53L0X_encode_timeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080b8:	8b3a      	ldrh	r2, [r7, #24]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80080c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d108      	bne.n	80080da <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80080c8:	8b3b      	ldrh	r3, [r7, #24]
 80080ca:	461a      	mov	r2, r3
 80080cc:	2151      	movs	r1, #81	; 0x51
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f001 fd0e 	bl	8009af0 <VL53L0X_WrWord>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80080da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d16b      	bne.n	80081ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80080ea:	e066      	b.n	80081ba <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d160      	bne.n	80081b4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80080f2:	f107 0310 	add.w	r3, r7, #16
 80080f6:	4619      	mov	r1, r3
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7fd fa35 	bl	8005568 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008102:	7cfb      	ldrb	r3, [r7, #19]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01d      	beq.n	8008144 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008108:	f107 031b 	add.w	r3, r7, #27
 800810c:	461a      	mov	r2, r3
 800810e:	2100      	movs	r1, #0
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7fd f91f 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800811c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10f      	bne.n	8008144 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008124:	f107 0318 	add.w	r3, r7, #24
 8008128:	461a      	mov	r2, r3
 800812a:	2151      	movs	r1, #81	; 0x51
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f001 fd7e 	bl	8009c2e <VL53L0X_RdWord>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008138:	8b3b      	ldrh	r3, [r7, #24]
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff fe05 	bl	8007d4a <VL53L0X_decode_timeout>
 8008140:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008142:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800814c:	f107 031b 	add.w	r3, r7, #27
 8008150:	461a      	mov	r2, r3
 8008152:	2101      	movs	r1, #1
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7fd f8fd 	bl	8005354 <VL53L0X_GetVcselPulsePeriod>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008164:	2b00      	cmp	r3, #0
 8008166:	d128      	bne.n	80081ba <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008168:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800816a:	461a      	mov	r2, r3
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff fe02 	bl	8007d78 <VL53L0X_calc_timeout_mclks>
 8008174:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008178:	6a3a      	ldr	r2, [r7, #32]
 800817a:	4413      	add	r3, r2
 800817c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800817e:	6a38      	ldr	r0, [r7, #32]
 8008180:	f7ff fdb7 	bl	8007cf2 <VL53L0X_encode_timeout>
 8008184:	4603      	mov	r3, r0
 8008186:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8008188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800818c:	2b00      	cmp	r3, #0
 800818e:	d108      	bne.n	80081a2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008190:	8bfb      	ldrh	r3, [r7, #30]
 8008192:	461a      	mov	r2, r3
 8008194:	2171      	movs	r1, #113	; 0x71
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f001 fcaa 	bl	8009af0 <VL53L0X_WrWord>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80081a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d107      	bne.n	80081ba <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80081b2:	e002      	b.n	80081ba <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081b4:	23fc      	movs	r3, #252	; 0xfc
 80081b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80081ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3728      	adds	r7, #40	; 0x28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b08a      	sub	sp, #40	; 0x28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
 80081d2:	4613      	mov	r3, r2
 80081d4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80081dc:	230c      	movs	r3, #12
 80081de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80081e2:	2312      	movs	r3, #18
 80081e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80081ee:	230e      	movs	r3, #14
 80081f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80081f8:	78bb      	ldrb	r3, [r7, #2]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008204:	23fc      	movs	r3, #252	; 0xfc
 8008206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800820a:	e020      	b.n	800824e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10d      	bne.n	800822e <VL53L0X_set_vcsel_pulse_period+0x68>
 8008212:	78ba      	ldrb	r2, [r7, #2]
 8008214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008218:	429a      	cmp	r2, r3
 800821a:	d304      	bcc.n	8008226 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800821c:	78ba      	ldrb	r2, [r7, #2]
 800821e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008222:	429a      	cmp	r2, r3
 8008224:	d903      	bls.n	800822e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008226:	23fc      	movs	r3, #252	; 0xfc
 8008228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800822c:	e00f      	b.n	800824e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d10c      	bne.n	800824e <VL53L0X_set_vcsel_pulse_period+0x88>
 8008234:	78ba      	ldrb	r2, [r7, #2]
 8008236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800823a:	429a      	cmp	r2, r3
 800823c:	d304      	bcc.n	8008248 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800823e:	78ba      	ldrb	r2, [r7, #2]
 8008240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008244:	429a      	cmp	r2, r3
 8008246:	d902      	bls.n	800824e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008248:	23fc      	movs	r3, #252	; 0xfc
 800824a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800824e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8008256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800825a:	e237      	b.n	80086cc <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d150      	bne.n	8008304 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8008262:	78bb      	ldrb	r3, [r7, #2]
 8008264:	2b0c      	cmp	r3, #12
 8008266:	d110      	bne.n	800828a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008268:	2218      	movs	r2, #24
 800826a:	2157      	movs	r1, #87	; 0x57
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fc1d 	bl	8009aac <VL53L0X_WrByte>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8008278:	2208      	movs	r2, #8
 800827a:	2156      	movs	r1, #86	; 0x56
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fc15 	bl	8009aac <VL53L0X_WrByte>
 8008282:	4603      	mov	r3, r0
 8008284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008288:	e17f      	b.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800828a:	78bb      	ldrb	r3, [r7, #2]
 800828c:	2b0e      	cmp	r3, #14
 800828e:	d110      	bne.n	80082b2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8008290:	2230      	movs	r2, #48	; 0x30
 8008292:	2157      	movs	r1, #87	; 0x57
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fc09 	bl	8009aac <VL53L0X_WrByte>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80082a0:	2208      	movs	r2, #8
 80082a2:	2156      	movs	r1, #86	; 0x56
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 fc01 	bl	8009aac <VL53L0X_WrByte>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082b0:	e16b      	b.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80082b2:	78bb      	ldrb	r3, [r7, #2]
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d110      	bne.n	80082da <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80082b8:	2240      	movs	r2, #64	; 0x40
 80082ba:	2157      	movs	r1, #87	; 0x57
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 fbf5 	bl	8009aac <VL53L0X_WrByte>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80082c8:	2208      	movs	r2, #8
 80082ca:	2156      	movs	r1, #86	; 0x56
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fbed 	bl	8009aac <VL53L0X_WrByte>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082d8:	e157      	b.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80082da:	78bb      	ldrb	r3, [r7, #2]
 80082dc:	2b12      	cmp	r3, #18
 80082de:	f040 8154 	bne.w	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80082e2:	2250      	movs	r2, #80	; 0x50
 80082e4:	2157      	movs	r1, #87	; 0x57
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 fbe0 	bl	8009aac <VL53L0X_WrByte>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80082f2:	2208      	movs	r2, #8
 80082f4:	2156      	movs	r1, #86	; 0x56
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fbd8 	bl	8009aac <VL53L0X_WrByte>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008302:	e142      	b.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	2b01      	cmp	r3, #1
 8008308:	f040 813f 	bne.w	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800830c:	78bb      	ldrb	r3, [r7, #2]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d14c      	bne.n	80083ac <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8008312:	2210      	movs	r2, #16
 8008314:	2148      	movs	r1, #72	; 0x48
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fbc8 	bl	8009aac <VL53L0X_WrByte>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8008322:	2208      	movs	r2, #8
 8008324:	2147      	movs	r1, #71	; 0x47
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 fbc0 	bl	8009aac <VL53L0X_WrByte>
 800832c:	4603      	mov	r3, r0
 800832e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008332:	2202      	movs	r2, #2
 8008334:	2132      	movs	r1, #50	; 0x32
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fbb8 	bl	8009aac <VL53L0X_WrByte>
 800833c:	4603      	mov	r3, r0
 800833e:	461a      	mov	r2, r3
 8008340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008344:	4313      	orrs	r3, r2
 8008346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800834a:	220c      	movs	r2, #12
 800834c:	2130      	movs	r1, #48	; 0x30
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 fbac 	bl	8009aac <VL53L0X_WrByte>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800835c:	4313      	orrs	r3, r2
 800835e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008362:	2201      	movs	r2, #1
 8008364:	21ff      	movs	r1, #255	; 0xff
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fba0 	bl	8009aac <VL53L0X_WrByte>
 800836c:	4603      	mov	r3, r0
 800836e:	461a      	mov	r2, r3
 8008370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008374:	4313      	orrs	r3, r2
 8008376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800837a:	2230      	movs	r2, #48	; 0x30
 800837c:	2130      	movs	r1, #48	; 0x30
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 fb94 	bl	8009aac <VL53L0X_WrByte>
 8008384:	4603      	mov	r3, r0
 8008386:	461a      	mov	r2, r3
 8008388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800838c:	4313      	orrs	r3, r2
 800838e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008392:	2200      	movs	r2, #0
 8008394:	21ff      	movs	r1, #255	; 0xff
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fb88 	bl	8009aac <VL53L0X_WrByte>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083aa:	e0ee      	b.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80083ac:	78bb      	ldrb	r3, [r7, #2]
 80083ae:	2b0a      	cmp	r3, #10
 80083b0:	d14c      	bne.n	800844c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80083b2:	2228      	movs	r2, #40	; 0x28
 80083b4:	2148      	movs	r1, #72	; 0x48
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fb78 	bl	8009aac <VL53L0X_WrByte>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80083c2:	2208      	movs	r2, #8
 80083c4:	2147      	movs	r1, #71	; 0x47
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fb70 	bl	8009aac <VL53L0X_WrByte>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80083d2:	2203      	movs	r2, #3
 80083d4:	2132      	movs	r1, #50	; 0x32
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fb68 	bl	8009aac <VL53L0X_WrByte>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80083ea:	2209      	movs	r2, #9
 80083ec:	2130      	movs	r1, #48	; 0x30
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 fb5c 	bl	8009aac <VL53L0X_WrByte>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008402:	2201      	movs	r2, #1
 8008404:	21ff      	movs	r1, #255	; 0xff
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 fb50 	bl	8009aac <VL53L0X_WrByte>
 800840c:	4603      	mov	r3, r0
 800840e:	461a      	mov	r2, r3
 8008410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008414:	4313      	orrs	r3, r2
 8008416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800841a:	2220      	movs	r2, #32
 800841c:	2130      	movs	r1, #48	; 0x30
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 fb44 	bl	8009aac <VL53L0X_WrByte>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800842c:	4313      	orrs	r3, r2
 800842e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008432:	2200      	movs	r2, #0
 8008434:	21ff      	movs	r1, #255	; 0xff
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 fb38 	bl	8009aac <VL53L0X_WrByte>
 800843c:	4603      	mov	r3, r0
 800843e:	461a      	mov	r2, r3
 8008440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008444:	4313      	orrs	r3, r2
 8008446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800844a:	e09e      	b.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800844c:	78bb      	ldrb	r3, [r7, #2]
 800844e:	2b0c      	cmp	r3, #12
 8008450:	d14c      	bne.n	80084ec <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8008452:	2238      	movs	r2, #56	; 0x38
 8008454:	2148      	movs	r1, #72	; 0x48
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fb28 	bl	8009aac <VL53L0X_WrByte>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8008462:	2208      	movs	r2, #8
 8008464:	2147      	movs	r1, #71	; 0x47
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fb20 	bl	8009aac <VL53L0X_WrByte>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008472:	2203      	movs	r2, #3
 8008474:	2132      	movs	r1, #50	; 0x32
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fb18 	bl	8009aac <VL53L0X_WrByte>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008484:	4313      	orrs	r3, r2
 8008486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800848a:	2208      	movs	r2, #8
 800848c:	2130      	movs	r1, #48	; 0x30
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 fb0c 	bl	8009aac <VL53L0X_WrByte>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800849c:	4313      	orrs	r3, r2
 800849e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80084a2:	2201      	movs	r2, #1
 80084a4:	21ff      	movs	r1, #255	; 0xff
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fb00 	bl	8009aac <VL53L0X_WrByte>
 80084ac:	4603      	mov	r3, r0
 80084ae:	461a      	mov	r2, r3
 80084b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80084ba:	2220      	movs	r2, #32
 80084bc:	2130      	movs	r1, #48	; 0x30
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 faf4 	bl	8009aac <VL53L0X_WrByte>
 80084c4:	4603      	mov	r3, r0
 80084c6:	461a      	mov	r2, r3
 80084c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084d2:	2200      	movs	r2, #0
 80084d4:	21ff      	movs	r1, #255	; 0xff
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 fae8 	bl	8009aac <VL53L0X_WrByte>
 80084dc:	4603      	mov	r3, r0
 80084de:	461a      	mov	r2, r3
 80084e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084ea:	e04e      	b.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80084ec:	78bb      	ldrb	r3, [r7, #2]
 80084ee:	2b0e      	cmp	r3, #14
 80084f0:	d14b      	bne.n	800858a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80084f2:	2248      	movs	r2, #72	; 0x48
 80084f4:	2148      	movs	r1, #72	; 0x48
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 fad8 	bl	8009aac <VL53L0X_WrByte>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8008502:	2208      	movs	r2, #8
 8008504:	2147      	movs	r1, #71	; 0x47
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 fad0 	bl	8009aac <VL53L0X_WrByte>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008512:	2203      	movs	r2, #3
 8008514:	2132      	movs	r1, #50	; 0x32
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fac8 	bl	8009aac <VL53L0X_WrByte>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008524:	4313      	orrs	r3, r2
 8008526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800852a:	2207      	movs	r2, #7
 800852c:	2130      	movs	r1, #48	; 0x30
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 fabc 	bl	8009aac <VL53L0X_WrByte>
 8008534:	4603      	mov	r3, r0
 8008536:	461a      	mov	r2, r3
 8008538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800853c:	4313      	orrs	r3, r2
 800853e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008542:	2201      	movs	r2, #1
 8008544:	21ff      	movs	r1, #255	; 0xff
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 fab0 	bl	8009aac <VL53L0X_WrByte>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008554:	4313      	orrs	r3, r2
 8008556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800855a:	2220      	movs	r2, #32
 800855c:	2130      	movs	r1, #48	; 0x30
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 faa4 	bl	8009aac <VL53L0X_WrByte>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800856c:	4313      	orrs	r3, r2
 800856e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008572:	2200      	movs	r2, #0
 8008574:	21ff      	movs	r1, #255	; 0xff
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fa98 	bl	8009aac <VL53L0X_WrByte>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008584:	4313      	orrs	r3, r2
 8008586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800858a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800858e:	2b00      	cmp	r3, #0
 8008590:	d17e      	bne.n	8008690 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8008592:	78bb      	ldrb	r3, [r7, #2]
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fe38 	bl	800720a <VL53L0X_encode_vcsel_period>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d045      	beq.n	8008636 <VL53L0X_set_vcsel_pulse_period+0x470>
 80085aa:	e06e      	b.n	800868a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80085ac:	f107 0314 	add.w	r3, r7, #20
 80085b0:	461a      	mov	r2, r3
 80085b2:	2103      	movs	r1, #3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff fc33 	bl	8007e20 <get_sequence_step_timeout>
 80085ba:	4603      	mov	r3, r0
 80085bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80085c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d109      	bne.n	80085dc <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	461a      	mov	r2, r3
 80085ce:	2102      	movs	r1, #2
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff fc25 	bl	8007e20 <get_sequence_step_timeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80085dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d109      	bne.n	80085f8 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80085e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80085e8:	461a      	mov	r2, r3
 80085ea:	2150      	movs	r1, #80	; 0x50
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 fa5d 	bl	8009aac <VL53L0X_WrByte>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80085f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d108      	bne.n	8008612 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	461a      	mov	r2, r3
 8008604:	2103      	movs	r1, #3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fceb 	bl	8007fe2 <set_sequence_step_timeout>
 800860c:	4603      	mov	r3, r0
 800860e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008616:	2b00      	cmp	r3, #0
 8008618:	d108      	bne.n	800862c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	461a      	mov	r2, r3
 800861e:	2102      	movs	r1, #2
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fcde 	bl	8007fe2 <set_sequence_step_timeout>
 8008626:	4603      	mov	r3, r0
 8008628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	78ba      	ldrb	r2, [r7, #2]
 8008630:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008634:	e02c      	b.n	8008690 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008636:	f107 0318 	add.w	r3, r7, #24
 800863a:	461a      	mov	r2, r3
 800863c:	2104      	movs	r1, #4
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fbee 	bl	8007e20 <get_sequence_step_timeout>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800864a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8008652:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008656:	461a      	mov	r2, r3
 8008658:	2170      	movs	r1, #112	; 0x70
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fa26 	bl	8009aac <VL53L0X_WrByte>
 8008660:	4603      	mov	r3, r0
 8008662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008666:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800866a:	2b00      	cmp	r3, #0
 800866c:	d108      	bne.n	8008680 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	461a      	mov	r2, r3
 8008672:	2104      	movs	r1, #4
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff fcb4 	bl	8007fe2 <set_sequence_step_timeout>
 800867a:	4603      	mov	r3, r0
 800867c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	78ba      	ldrb	r2, [r7, #2]
 8008684:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008688:	e002      	b.n	8008690 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800868a:	23fc      	movs	r3, #252	; 0xfc
 800868c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008694:	2b00      	cmp	r3, #0
 8008696:	d109      	bne.n	80086ac <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800869e:	69f9      	ldr	r1, [r7, #28]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fc fe19 	bl	80052d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80086ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d109      	bne.n	80086c8 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 80086b4:	f107 010f 	add.w	r1, r7, #15
 80086b8:	2301      	movs	r3, #1
 80086ba:	2200      	movs	r2, #0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7fe fcbf 	bl	8007040 <VL53L0X_perform_phase_calibration>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80086c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3728      	adds	r7, #40	; 0x28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	460b      	mov	r3, r1
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80086e6:	7afb      	ldrb	r3, [r7, #11]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d00a      	beq.n	8008706 <VL53L0X_get_vcsel_pulse_period+0x32>
 80086f0:	e013      	b.n	800871a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80086f2:	f107 0316 	add.w	r3, r7, #22
 80086f6:	461a      	mov	r2, r3
 80086f8:	2150      	movs	r1, #80	; 0x50
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f001 fa76 	bl	8009bec <VL53L0X_RdByte>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008704:	e00b      	b.n	800871e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008706:	f107 0316 	add.w	r3, r7, #22
 800870a:	461a      	mov	r2, r3
 800870c:	2170      	movs	r1, #112	; 0x70
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f001 fa6c 	bl	8009bec <VL53L0X_RdByte>
 8008714:	4603      	mov	r3, r0
 8008716:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008718:	e001      	b.n	800871e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800871a:	23fc      	movs	r3, #252	; 0xfc
 800871c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800871e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d107      	bne.n	8008736 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008726:	7dbb      	ldrb	r3, [r7, #22]
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fd5b 	bl	80071e4 <VL53L0X_decode_vcsel_period>
 800872e:	4603      	mov	r3, r0
 8008730:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	701a      	strb	r2, [r3, #0]

	return Status;
 8008736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b092      	sub	sp, #72	; 0x48
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800874c:	2300      	movs	r3, #0
 800874e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008752:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008756:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008758:	f240 7376 	movw	r3, #1910	; 0x776
 800875c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800875e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008762:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008764:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800876a:	f240 234e 	movw	r3, #590	; 0x24e
 800876e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008770:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008776:	f44f 7325 	mov.w	r3, #660	; 0x294
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800877c:	f240 2326 	movw	r3, #550	; 0x226
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008786:	f644 6320 	movw	r3, #20000	; 0x4e20
 800878a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	429a      	cmp	r2, r3
 8008796:	d205      	bcs.n	80087a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008798:	23fc      	movs	r3, #252	; 0xfc
 800879a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800879e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087a2:	e0aa      	b.n	80088fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80087a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fc fed6 	bl	8005568 <VL53L0X_GetSequenceStepEnables>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80087c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d15b      	bne.n	8008882 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80087ca:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d105      	bne.n	80087dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80087d0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d102      	bne.n	80087dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80087d6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d052      	beq.n	8008882 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	461a      	mov	r2, r3
 80087e2:	2102      	movs	r1, #2
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff fb1b 	bl	8007e20 <get_sequence_step_timeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80087f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80087f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087fc:	e07d      	b.n	80088fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80087fe:	7d3b      	ldrb	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00f      	beq.n	8008824 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008804:	693a      	ldr	r2, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	4413      	add	r3, r2
 800880a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008810:	429a      	cmp	r2, r3
 8008812:	d204      	bcs.n	800881e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	643b      	str	r3, [r7, #64]	; 0x40
 800881c:	e002      	b.n	8008824 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800881e:	23fc      	movs	r3, #252	; 0xfc
 8008820:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008824:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800882c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008830:	e063      	b.n	80088fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008832:	7dbb      	ldrb	r3, [r7, #22]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d011      	beq.n	800885c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	4413      	add	r3, r2
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008842:	69fa      	ldr	r2, [r7, #28]
 8008844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008846:	429a      	cmp	r2, r3
 8008848:	d204      	bcs.n	8008854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800884a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	643b      	str	r3, [r7, #64]	; 0x40
 8008852:	e016      	b.n	8008882 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008854:	23fc      	movs	r3, #252	; 0xfc
 8008856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800885a:	e012      	b.n	8008882 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800885c:	7d7b      	ldrb	r3, [r7, #21]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00f      	beq.n	8008882 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008866:	4413      	add	r3, r2
 8008868:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800886e:	429a      	cmp	r2, r3
 8008870:	d204      	bcs.n	800887c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	643b      	str	r3, [r7, #64]	; 0x40
 800887a:	e002      	b.n	8008882 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800887c:	23fc      	movs	r3, #252	; 0xfc
 800887e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008882:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800888a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800888e:	e034      	b.n	80088fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d019      	beq.n	80088ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008896:	f107 030c 	add.w	r3, r7, #12
 800889a:	461a      	mov	r2, r3
 800889c:	2103      	movs	r1, #3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fabe 	bl	8007e20 <get_sequence_step_timeout>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	4413      	add	r3, r2
 80088b0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d204      	bcs.n	80088c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80088ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	643b      	str	r3, [r7, #64]	; 0x40
 80088c2:	e002      	b.n	80088ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088c4:	23fc      	movs	r3, #252	; 0xfc
 80088c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80088ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d111      	bne.n	80088f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80088d2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00e      	beq.n	80088f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80088d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80088e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088e2:	2104      	movs	r1, #4
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff fb7c 	bl	8007fe2 <set_sequence_step_timeout>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80088f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3748      	adds	r7, #72	; 0x48
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b090      	sub	sp, #64	; 0x40
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800890c:	2300      	movs	r3, #0
 800890e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008912:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008916:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008918:	f240 7376 	movw	r3, #1910	; 0x776
 800891c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800891e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008924:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008928:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800892a:	f240 234e 	movw	r3, #590	; 0x24e
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008930:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008936:	f44f 7325 	mov.w	r3, #660	; 0x294
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800893c:	f240 2326 	movw	r3, #550	; 0x226
 8008940:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894a:	441a      	add	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008950:	f107 0318 	add.w	r3, r7, #24
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7fc fe06 	bl	8005568 <VL53L0X_GetSequenceStepEnables>
 800895c:	4603      	mov	r3, r0
 800895e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008962:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800896a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800896e:	e075      	b.n	8008a5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008970:	7e3b      	ldrb	r3, [r7, #24]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008976:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800897c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800897e:	2b00      	cmp	r3, #0
 8008980:	d030      	beq.n	80089e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008982:	f107 0310 	add.w	r3, r7, #16
 8008986:	461a      	mov	r2, r3
 8008988:	2102      	movs	r1, #2
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fa48 	bl	8007e20 <get_sequence_step_timeout>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008996:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800899a:	2b00      	cmp	r3, #0
 800899c:	d122      	bne.n	80089e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800899e:	7e3b      	ldrb	r3, [r7, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d007      	beq.n	80089b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80089a8:	6939      	ldr	r1, [r7, #16]
 80089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ac:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80089ae:	441a      	add	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80089b4:	7ebb      	ldrb	r3, [r7, #26]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80089be:	6939      	ldr	r1, [r7, #16]
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	440b      	add	r3, r1
 80089c4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80089c6:	441a      	add	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	e00a      	b.n	80089e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80089ce:	7e7b      	ldrb	r3, [r7, #25]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80089d8:	6939      	ldr	r1, [r7, #16]
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80089de:	441a      	add	r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d114      	bne.n	8008a16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80089ec:	7efb      	ldrb	r3, [r7, #27]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d011      	beq.n	8008a16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80089f2:	f107 030c 	add.w	r3, r7, #12
 80089f6:	461a      	mov	r2, r3
 80089f8:	2103      	movs	r1, #3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fa10 	bl	8007e20 <get_sequence_step_timeout>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008a0a:	68f9      	ldr	r1, [r7, #12]
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008a10:	441a      	add	r2, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d114      	bne.n	8008a48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8008a1e:	7f3b      	ldrb	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d011      	beq.n	8008a48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008a24:	f107 0314 	add.w	r3, r7, #20
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2104      	movs	r1, #4
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff f9f7 	bl	8007e20 <get_sequence_step_timeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008a3c:	6979      	ldr	r1, [r7, #20]
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008a42:	441a      	add	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d103      	bne.n	8008a58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3740      	adds	r7, #64	; 0x40
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008a76:	e0c6      	b.n	8008c06 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	3301      	adds	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008a88:	7cfb      	ldrb	r3, [r7, #19]
 8008a8a:	2bff      	cmp	r3, #255	; 0xff
 8008a8c:	f040 808d 	bne.w	8008baa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	4413      	add	r3, r2
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008aa0:	7cbb      	ldrb	r3, [r7, #18]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d87e      	bhi.n	8008ba4 <VL53L0X_load_tuning_settings+0x140>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <VL53L0X_load_tuning_settings+0x48>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008af7 	.word	0x08008af7
 8008ab4:	08008b31 	.word	0x08008b31
 8008ab8:	08008b6b 	.word	0x08008b6b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	747b      	strb	r3, [r7, #17]
				Index++;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	743b      	strb	r3, [r7, #16]
				Index++;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008adc:	7c7b      	ldrb	r3, [r7, #17]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	7c3b      	ldrb	r3, [r7, #16]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	4413      	add	r3, r2
 8008aea:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	89fa      	ldrh	r2, [r7, #14]
 8008af0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008af4:	e087      	b.n	8008c06 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	4413      	add	r3, r2
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	747b      	strb	r3, [r7, #17]
				Index++;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	3301      	adds	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	3301      	adds	r3, #1
 8008b14:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008b16:	7c7b      	ldrb	r3, [r7, #17]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	7c3b      	ldrb	r3, [r7, #16]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	4413      	add	r3, r2
 8008b24:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	89fa      	ldrh	r2, [r7, #14]
 8008b2a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008b2e:	e06a      	b.n	8008c06 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	747b      	strb	r3, [r7, #17]
				Index++;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4413      	add	r3, r2
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	743b      	strb	r3, [r7, #16]
				Index++;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008b50:	7c7b      	ldrb	r3, [r7, #17]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	021b      	lsls	r3, r3, #8
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	7c3b      	ldrb	r3, [r7, #16]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	89fa      	ldrh	r2, [r7, #14]
 8008b64:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008b68:	e04d      	b.n	8008c06 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	4413      	add	r3, r2
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	747b      	strb	r3, [r7, #17]
				Index++;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	3301      	adds	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	4413      	add	r3, r2
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	743b      	strb	r3, [r7, #16]
				Index++;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	3301      	adds	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008b8a:	7c7b      	ldrb	r3, [r7, #17]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	7c3b      	ldrb	r3, [r7, #16]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	4413      	add	r3, r2
 8008b98:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	89fa      	ldrh	r2, [r7, #14]
 8008b9e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008ba2:	e030      	b.n	8008c06 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ba4:	23fc      	movs	r3, #252	; 0xfc
 8008ba6:	77fb      	strb	r3, [r7, #31]
 8008ba8:	e02d      	b.n	8008c06 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008baa:	7cfb      	ldrb	r3, [r7, #19]
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d828      	bhi.n	8008c02 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	737b      	strb	r3, [r7, #13]
			Index++;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61bb      	str	r3, [r7, #24]
 8008bc4:	e00f      	b.n	8008be6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	4413      	add	r3, r2
 8008bcc:	7819      	ldrb	r1, [r3, #0]
 8008bce:	f107 0208 	add.w	r2, r7, #8
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	460a      	mov	r2, r1
 8008bd8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	3301      	adds	r3, #1
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	7cfa      	ldrb	r2, [r7, #19]
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	dceb      	bgt.n	8008bc6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008bee:	7cfb      	ldrb	r3, [r7, #19]
 8008bf0:	f107 0208 	add.w	r2, r7, #8
 8008bf4:	7b79      	ldrb	r1, [r7, #13]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 ff04 	bl	8009a04 <VL53L0X_WriteMulti>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	77fb      	strb	r3, [r7, #31]
 8008c00:	e001      	b.n	8008c06 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c02:	23fc      	movs	r3, #252	; 0xfc
 8008c04:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d004      	beq.n	8008c1c <VL53L0X_load_tuning_settings+0x1b8>
 8008c12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f43f af2e 	beq.w	8008a78 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008c3e:	f107 0313 	add.w	r3, r7, #19
 8008c42:	4619      	mov	r1, r3
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7fc fd4f 	bl	80056e8 <VL53L0X_GetXTalkCompensationEnable>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008c4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d111      	bne.n	8008c7a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008c56:	7cfb      	ldrb	r3, [r7, #19]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00e      	beq.n	8008c7a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	8a9b      	ldrh	r3, [r3, #20]
 8008c66:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	fb03 f302 	mul.w	r3, r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	3380      	adds	r3, #128	; 0x80
 8008c74:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008c7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b086      	sub	sp, #24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008c9e:	f107 0310 	add.w	r3, r7, #16
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff ffbe 	bl	8008c28 <VL53L0X_get_total_xtalk_rate>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	441a      	add	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	601a      	str	r2, [r3, #0]

	return Status;
 8008cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b09a      	sub	sp, #104	; 0x68
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008cde:	2312      	movs	r3, #18
 8008ce0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008ce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ce6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008ce8:	2342      	movs	r3, #66	; 0x42
 8008cea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008cec:	2306      	movs	r3, #6
 8008cee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008cf0:	2307      	movs	r3, #7
 8008cf2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008d08:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	3380      	adds	r3, #128	; 0x80
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01b      	beq.n	8008d68 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	029b      	lsls	r3, r3, #10
 8008d34:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	085a      	lsrs	r2, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	4413      	add	r3, r2
 8008d3e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008d40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d48:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008d4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	4413      	add	r3, r2
 8008d52:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d58:	fb02 f303 	mul.w	r3, r2, r3
 8008d5c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d64:	0c1b      	lsrs	r3, r3, #16
 8008d66:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d6c:	fb02 f303 	mul.w	r3, r2, r3
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d78:	0c1b      	lsrs	r3, r3, #16
 8008d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d80:	fb02 f303 	mul.w	r3, r2, r3
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d8c:	0c1b      	lsrs	r3, r3, #16
 8008d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d92:	085a      	lsrs	r2, r3, #1
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	441a      	add	r2, r3
 8008d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008da4:	fb02 f303 	mul.w	r3, r2, r3
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db0:	d302      	bcc.n	8008db8 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8008db2:	4b55      	ldr	r3, [pc, #340]	; (8008f08 <VL53L0X_calc_dmax+0x238>)
 8008db4:	663b      	str	r3, [r7, #96]	; 0x60
 8008db6:	e016      	b.n	8008de6 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dba:	085a      	lsrs	r2, r3, #1
 8008dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dbe:	441a      	add	r2, r3
 8008dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dcc:	fb02 f303 	mul.w	r3, r2, r3
 8008dd0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008dd8:	0c1b      	lsrs	r3, r3, #16
 8008dda:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
 8008de4:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008de8:	039b      	lsls	r3, r3, #14
 8008dea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008dee:	4a47      	ldr	r2, [pc, #284]	; (8008f0c <VL53L0X_calc_dmax+0x23c>)
 8008df0:	fba2 2303 	umull	r2, r3, r2, r3
 8008df4:	099b      	lsrs	r3, r3, #6
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfc:	fb02 f303 	mul.w	r3, r2, r3
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e06:	fb02 f303 	mul.w	r3, r2, r3
 8008e0a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	091b      	lsrs	r3, r3, #4
 8008e12:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1e:	4613      	mov	r3, r2
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4413      	add	r3, r2
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008e2e:	0b9b      	lsrs	r3, r3, #14
 8008e30:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e36:	4413      	add	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	4413      	add	r3, r2
 8008e42:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4c:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	039b      	lsls	r3, r3, #14
 8008e52:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e66:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e6c:	fb02 f303 	mul.w	r3, r2, r3
 8008e70:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e78:	4a24      	ldr	r2, [pc, #144]	; (8008f0c <VL53L0X_calc_dmax+0x23c>)
 8008e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7e:	099b      	lsrs	r3, r3, #6
 8008e80:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e8e:	4a1f      	ldr	r2, [pc, #124]	; (8008f0c <VL53L0X_calc_dmax+0x23c>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	099b      	lsrs	r3, r3, #6
 8008e96:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9a:	3380      	adds	r3, #128	; 0x80
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d008      	beq.n	8008eb8 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	085a      	lsrs	r2, r3, #1
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	441a      	add	r2, r3
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008eb6:	e001      	b.n	8008ebc <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008ebc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008ebe:	f7fe f9b7 	bl	8007230 <VL53L0X_isqrt>
 8008ec2:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d008      	beq.n	8008edc <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	085a      	lsrs	r2, r3, #1
 8008ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed0:	441a      	add	r2, r3
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eda:	e001      	b.n	8008ee0 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008ee0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008ee2:	f7fe f9a5 	bl	8007230 <VL53L0X_isqrt>
 8008ee6:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008ee8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d902      	bls.n	8008efc <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8008ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008efa:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008efc:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3768      	adds	r7, #104	; 0x68
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	fff00000 	.word	0xfff00000
 8008f0c:	10624dd3 	.word	0x10624dd3

08008f10 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b0b4      	sub	sp, #208	; 0xd0
 8008f14:	af04      	add	r7, sp, #16
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008f1e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008f26:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008f2e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008f36:	f241 235c 	movw	r3, #4700	; 0x125c
 8008f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008f3e:	4b9e      	ldr	r3, [pc, #632]	; (80091b8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008f44:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008f48:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008f4a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f56:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008f58:	4b98      	ldr	r3, [pc, #608]	; (80091bc <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008f5a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f60:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008f62:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008f66:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008f68:	f240 6377 	movw	r3, #1655	; 0x677
 8008f6c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f82:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008f86:	0c1b      	lsrs	r3, r3, #16
 8008f88:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008f90:	f107 0310 	add.w	r3, r7, #16
 8008f94:	461a      	mov	r2, r3
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7ff fe74 	bl	8008c86 <VL53L0X_get_total_signal_rate>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008fa4:	f107 0314 	add.w	r3, r7, #20
 8008fa8:	461a      	mov	r2, r3
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7ff fe3b 	bl	8008c28 <VL53L0X_get_total_xtalk_rate>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fbe:	fb02 f303 	mul.w	r3, r2, r3
 8008fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008fca:	0c1b      	lsrs	r3, r3, #16
 8008fcc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008fdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d902      	bls.n	8008fec <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008fec:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d168      	bne.n	80090c6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009004:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009008:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800900c:	461a      	mov	r2, r3
 800900e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7fe feb0 	bl	8007d78 <VL53L0X_calc_timeout_mclks>
 8009018:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800902a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800902e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009032:	461a      	mov	r2, r3
 8009034:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7fe fe9d 	bl	8007d78 <VL53L0X_calc_timeout_mclks>
 800903e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009040:	2303      	movs	r3, #3
 8009042:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009046:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800904a:	2b08      	cmp	r3, #8
 800904c:	d102      	bne.n	8009054 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800904e:	2302      	movs	r3, #2
 8009050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009058:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800905a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800905e:	fb02 f303 	mul.w	r3, r2, r3
 8009062:	02db      	lsls	r3, r3, #11
 8009064:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009068:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800906c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009070:	4a53      	ldr	r2, [pc, #332]	; (80091c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009072:	fba2 2303 	umull	r2, r3, r2, r3
 8009076:	099b      	lsrs	r3, r3, #6
 8009078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800907c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009080:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009082:	fb02 f303 	mul.w	r3, r2, r3
 8009086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800908a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800908e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009092:	4a4b      	ldr	r2, [pc, #300]	; (80091c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009094:	fba2 2303 	umull	r2, r3, r2, r3
 8009098:	099b      	lsrs	r3, r3, #6
 800909a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	3380      	adds	r3, #128	; 0x80
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090ac:	fb02 f303 	mul.w	r3, r2, r3
 80090b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80090b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80090b8:	3380      	adds	r3, #128	; 0x80
 80090ba:	0a1b      	lsrs	r3, r3, #8
 80090bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80090c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80090ce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80090d2:	e165      	b.n	80093a0 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 80090d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10c      	bne.n	80090f4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090e0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	e153      	b.n	800939c <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 80090f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009102:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009106:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800910a:	041a      	lsls	r2, r3, #16
 800910c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800910e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800911a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800911c:	429a      	cmp	r2, r3
 800911e:	d902      	bls.n	8009126 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009126:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800912a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800912e:	fb02 f303 	mul.w	r3, r2, r3
 8009132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009136:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800913a:	4613      	mov	r3, r2
 800913c:	005b      	lsls	r3, r3, #1
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe f874 	bl	8007230 <VL53L0X_isqrt>
 8009148:	4603      	mov	r3, r0
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	891b      	ldrh	r3, [r3, #8]
 8009152:	461a      	mov	r2, r3
 8009154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009156:	fb03 f302 	mul.w	r3, r3, r2
 800915a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800915c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800915e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009160:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009164:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009166:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009168:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800916c:	4a14      	ldr	r2, [pc, #80]	; (80091c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800916e:	fba2 2303 	umull	r2, r3, r2, r3
 8009172:	099b      	lsrs	r3, r3, #6
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009178:	041b      	lsls	r3, r3, #16
 800917a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800917e:	4a10      	ldr	r2, [pc, #64]	; (80091c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009180:	fba2 2303 	umull	r2, r3, r2, r3
 8009184:	099b      	lsrs	r3, r3, #6
 8009186:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	021b      	lsls	r3, r3, #8
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800918e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	fbb2 f3f3 	udiv	r3, r2, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfb8      	it	lt
 800919a:	425b      	neglt	r3, r3
 800919c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	021b      	lsls	r3, r3, #8
 80091a2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	7e1b      	ldrb	r3, [r3, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80091ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091b4:	e035      	b.n	8009222 <VL53L0X_calc_sigma_estimate+0x312>
 80091b6:	bf00      	nop
 80091b8:	028f87ae 	.word	0x028f87ae
 80091bc:	0006999a 	.word	0x0006999a
 80091c0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80091c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80091d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091dc:	fb02 f303 	mul.w	r3, r2, r3
 80091e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80091e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80091e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091ea:	4413      	add	r3, r2
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80091f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80091fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80091fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800920c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009210:	fb02 f303 	mul.w	r3, r2, r3
 8009214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800921c:	0b9b      	lsrs	r3, r3, #14
 800921e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009228:	fb02 f303 	mul.w	r3, r2, r3
 800922c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009234:	0c1b      	lsrs	r3, r3, #16
 8009236:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923c:	fb02 f303 	mul.w	r3, r2, r3
 8009240:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8009242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800924e:	0c1b      	lsrs	r3, r3, #16
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009256:	fb02 f303 	mul.w	r3, r2, r3
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800925c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	4413      	add	r3, r2
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009266:	f7fd ffe3 	bl	8007230 <VL53L0X_isqrt>
 800926a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	041b      	lsls	r3, r3, #16
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	3332      	adds	r3, #50	; 0x32
 8009276:	4a4c      	ldr	r2, [pc, #304]	; (80093a8 <VL53L0X_calc_sigma_estimate+0x498>)
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	095a      	lsrs	r2, r3, #5
 800927e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009280:	fbb2 f3f3 	udiv	r3, r2, r3
 8009284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800928c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009290:	fb02 f303 	mul.w	r3, r2, r3
 8009294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800929c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80092a0:	3308      	adds	r3, #8
 80092a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80092a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092aa:	4a40      	ldr	r2, [pc, #256]	; (80093ac <VL53L0X_calc_sigma_estimate+0x49c>)
 80092ac:	fba2 2303 	umull	r2, r3, r2, r3
 80092b0:	0b5b      	lsrs	r3, r3, #13
 80092b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80092b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092bc:	429a      	cmp	r2, r3
 80092be:	d902      	bls.n	80092c6 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80092c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80092c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80092d4:	4a36      	ldr	r2, [pc, #216]	; (80093b0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	099b      	lsrs	r3, r3, #6
 80092dc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80092e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092e6:	441a      	add	r2, r3
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fd ff9e 	bl	8007230 <VL53L0X_isqrt>
 80092f4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009302:	4a2b      	ldr	r2, [pc, #172]	; (80093b0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8009304:	fba2 2303 	umull	r2, r3, r2, r3
 8009308:	099b      	lsrs	r3, r3, #6
 800930a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800930c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009310:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009314:	fb02 f303 	mul.w	r3, r2, r3
 8009318:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	69fa      	ldr	r2, [r7, #28]
 800931e:	fb02 f303 	mul.w	r3, r2, r3
 8009322:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	4413      	add	r3, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7fd ff80 	bl	8007230 <VL53L0X_isqrt>
 8009330:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009338:	fb02 f303 	mul.w	r3, r2, r3
 800933c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8009340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <VL53L0X_calc_sigma_estimate+0x44a>
 8009346:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <VL53L0X_calc_sigma_estimate+0x44a>
 800934e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009356:	429a      	cmp	r2, r3
 8009358:	d903      	bls.n	8009362 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800935a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800935e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009368:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8009374:	6939      	ldr	r1, [r7, #16]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800937e:	9302      	str	r3, [sp, #8]
 8009380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800938e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7ff fc9d 	bl	8008cd0 <VL53L0X_calc_dmax>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800939c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	37c0      	adds	r7, #192	; 0xc0
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	51eb851f 	.word	0x51eb851f
 80093ac:	d1b71759 	.word	0xd1b71759
 80093b0:	10624dd3 	.word	0x10624dd3

080093b4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b090      	sub	sp, #64	; 0x40
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	607a      	str	r2, [r7, #4]
 80093be:	461a      	mov	r2, r3
 80093c0:	460b      	mov	r3, r1
 80093c2:	72fb      	strb	r3, [r7, #11]
 80093c4:	4613      	mov	r3, r2
 80093c6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093c8:	2300      	movs	r3, #0
 80093ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009406:	7afb      	ldrb	r3, [r7, #11]
 8009408:	10db      	asrs	r3, r3, #3
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009414:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d017      	beq.n	800944c <VL53L0X_get_pal_range_status+0x98>
 800941c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009420:	2b05      	cmp	r3, #5
 8009422:	d013      	beq.n	800944c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009424:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009428:	2b07      	cmp	r3, #7
 800942a:	d00f      	beq.n	800944c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800942c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009430:	2b0c      	cmp	r3, #12
 8009432:	d00b      	beq.n	800944c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009434:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009438:	2b0d      	cmp	r3, #13
 800943a:	d007      	beq.n	800944c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800943c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009440:	2b0e      	cmp	r3, #14
 8009442:	d003      	beq.n	800944c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009444:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009448:	2b0f      	cmp	r3, #15
 800944a:	d103      	bne.n	8009454 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009452:	e002      	b.n	800945a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800945a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800945e:	2b00      	cmp	r3, #0
 8009460:	d109      	bne.n	8009476 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009462:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009466:	461a      	mov	r2, r3
 8009468:	2100      	movs	r1, #0
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7fc fa10 	bl	8005890 <VL53L0X_GetLimitCheckEnable>
 8009470:	4603      	mov	r3, r0
 8009472:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800947a:	2b00      	cmp	r3, #0
 800947c:	d02e      	beq.n	80094dc <VL53L0X_get_pal_range_status+0x128>
 800947e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009482:	2b00      	cmp	r3, #0
 8009484:	d12a      	bne.n	80094dc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8009486:	f107 0310 	add.w	r3, r7, #16
 800948a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800948e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fd3d 	bl	8008f10 <VL53L0X_calc_sigma_estimate>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800949c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d103      	bne.n	80094ac <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094aa:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80094ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d113      	bne.n	80094dc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80094b4:	f107 0320 	add.w	r3, r7, #32
 80094b8:	461a      	mov	r2, r3
 80094ba:	2100      	movs	r1, #0
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7fc fa6d 	bl	800599c <VL53L0X_GetLimitCheckValue>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d006      	beq.n	80094dc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80094ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d902      	bls.n	80094dc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80094dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80094e4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80094e8:	461a      	mov	r2, r3
 80094ea:	2102      	movs	r1, #2
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7fc f9cf 	bl	8005890 <VL53L0X_GetLimitCheckEnable>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80094f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d044      	beq.n	800958a <VL53L0X_get_pal_range_status+0x1d6>
 8009500:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009504:	2b00      	cmp	r3, #0
 8009506:	d140      	bne.n	800958a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009508:	f107 031c 	add.w	r3, r7, #28
 800950c:	461a      	mov	r2, r3
 800950e:	2102      	movs	r1, #2
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7fc fa43 	bl	800599c <VL53L0X_GetLimitCheckValue>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800951c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009520:	2b00      	cmp	r3, #0
 8009522:	d107      	bne.n	8009534 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009524:	2201      	movs	r2, #1
 8009526:	21ff      	movs	r1, #255	; 0xff
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fabf 	bl	8009aac <VL53L0X_WrByte>
 800952e:	4603      	mov	r3, r0
 8009530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009534:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800953c:	f107 0316 	add.w	r3, r7, #22
 8009540:	461a      	mov	r2, r3
 8009542:	21b6      	movs	r1, #182	; 0xb6
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 fb72 	bl	8009c2e <VL53L0X_RdWord>
 800954a:	4603      	mov	r3, r0
 800954c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8009550:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009554:	2b00      	cmp	r3, #0
 8009556:	d107      	bne.n	8009568 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009558:	2200      	movs	r2, #0
 800955a:	21ff      	movs	r1, #255	; 0xff
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 faa5 	bl	8009aac <VL53L0X_WrByte>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009568:	8afb      	ldrh	r3, [r7, #22]
 800956a:	025b      	lsls	r3, r3, #9
 800956c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009572:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d006      	beq.n	800958a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800957c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800957e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009580:	429a      	cmp	r2, r3
 8009582:	d902      	bls.n	800958a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009584:	2301      	movs	r3, #1
 8009586:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800958a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d109      	bne.n	80095a6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009596:	461a      	mov	r2, r3
 8009598:	2103      	movs	r1, #3
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7fc f978 	bl	8005890 <VL53L0X_GetLimitCheckEnable>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80095a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d023      	beq.n	80095f6 <VL53L0X_get_pal_range_status+0x242>
 80095ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d11f      	bne.n	80095f6 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80095b6:	893b      	ldrh	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	637b      	str	r3, [r7, #52]	; 0x34
 80095c0:	e005      	b.n	80095ce <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	021a      	lsls	r2, r3, #8
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095cc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80095ce:	f107 0318 	add.w	r3, r7, #24
 80095d2:	461a      	mov	r2, r3
 80095d4:	2103      	movs	r1, #3
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f7fc f9e0 	bl	800599c <VL53L0X_GetLimitCheckValue>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d006      	beq.n	80095f6 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80095e8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80095ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d202      	bcs.n	80095f6 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d14a      	bne.n	8009694 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80095fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009602:	2b01      	cmp	r3, #1
 8009604:	d103      	bne.n	800960e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009608:	22ff      	movs	r2, #255	; 0xff
 800960a:	701a      	strb	r2, [r3, #0]
 800960c:	e042      	b.n	8009694 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800960e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009612:	2b01      	cmp	r3, #1
 8009614:	d007      	beq.n	8009626 <VL53L0X_get_pal_range_status+0x272>
 8009616:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800961a:	2b02      	cmp	r3, #2
 800961c:	d003      	beq.n	8009626 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800961e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009622:	2b03      	cmp	r3, #3
 8009624:	d103      	bne.n	800962e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009628:	2205      	movs	r2, #5
 800962a:	701a      	strb	r2, [r3, #0]
 800962c:	e032      	b.n	8009694 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800962e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009632:	2b06      	cmp	r3, #6
 8009634:	d003      	beq.n	800963e <VL53L0X_get_pal_range_status+0x28a>
 8009636:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800963a:	2b09      	cmp	r3, #9
 800963c:	d103      	bne.n	8009646 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800963e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009640:	2204      	movs	r2, #4
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	e026      	b.n	8009694 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009646:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800964a:	2b08      	cmp	r3, #8
 800964c:	d007      	beq.n	800965e <VL53L0X_get_pal_range_status+0x2aa>
 800964e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009652:	2b0a      	cmp	r3, #10
 8009654:	d003      	beq.n	800965e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009656:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800965a:	2b01      	cmp	r3, #1
 800965c:	d103      	bne.n	8009666 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800965e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009660:	2203      	movs	r2, #3
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	e016      	b.n	8009694 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009666:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800966a:	2b04      	cmp	r3, #4
 800966c:	d003      	beq.n	8009676 <VL53L0X_get_pal_range_status+0x2c2>
 800966e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009672:	2b01      	cmp	r3, #1
 8009674:	d103      	bne.n	800967e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009678:	2202      	movs	r2, #2
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	e00a      	b.n	8009694 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800967e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009682:	2b01      	cmp	r3, #1
 8009684:	d103      	bne.n	800968e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009688:	2201      	movs	r2, #1
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	e002      	b.n	8009694 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800968e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009690:	2200      	movs	r2, #0
 8009692:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800969c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969e:	2200      	movs	r2, #0
 80096a0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80096a2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80096a6:	461a      	mov	r2, r3
 80096a8:	2101      	movs	r1, #1
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f7fc f8f0 	bl	8005890 <VL53L0X_GetLimitCheckEnable>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80096b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d14f      	bne.n	800975e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80096be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <VL53L0X_get_pal_range_status+0x31a>
 80096c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d103      	bne.n	80096d6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d4:	e002      	b.n	80096dc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80096e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80096e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d003      	beq.n	80096f6 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80096ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fc:	e002      	b.n	8009704 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800970a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800970e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <VL53L0X_get_pal_range_status+0x36a>
 8009716:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800971a:	2b01      	cmp	r3, #1
 800971c:	d103      	bne.n	8009726 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800971e:	2301      	movs	r3, #1
 8009720:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009724:	e002      	b.n	800972c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009736:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <VL53L0X_get_pal_range_status+0x392>
 800973e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009742:	2b01      	cmp	r3, #1
 8009744:	d103      	bne.n	800974e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009746:	2301      	movs	r3, #1
 8009748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974c:	e002      	b.n	8009754 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800975a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800975e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009762:	4618      	mov	r0, r3
 8009764:	3740      	adds	r7, #64	; 0x40
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <VL53L0X_write_byte>:

#include "vl53l0x/vl53l0x_i2c_platform.h"

uint8_t _i2c_buffer[64];

int32_t VL53L0X_write_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t   data){
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af02      	add	r7, sp, #8
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	461a      	mov	r2, r3
 800977a:	4603      	mov	r3, r0
 800977c:	70fb      	strb	r3, [r7, #3]
 800977e:	460b      	mov	r3, r1
 8009780:	70bb      	strb	r3, [r7, #2]
 8009782:	4613      	mov	r3, r2
 8009784:	707b      	strb	r3, [r7, #1]

	_i2c_buffer[0]=index;
 8009786:	4a0a      	ldr	r2, [pc, #40]	; (80097b0 <VL53L0X_write_byte+0x44>)
 8009788:	78bb      	ldrb	r3, [r7, #2]
 800978a:	7013      	strb	r3, [r2, #0]
	_i2c_buffer[1]=data;
 800978c:	4a08      	ldr	r2, [pc, #32]	; (80097b0 <VL53L0X_write_byte+0x44>)
 800978e:	787b      	ldrb	r3, [r7, #1]
 8009790:	7053      	strb	r3, [r2, #1]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,2,10);
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	b299      	uxth	r1, r3
 8009796:	230a      	movs	r3, #10
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	2302      	movs	r3, #2
 800979c:	4a04      	ldr	r2, [pc, #16]	; (80097b0 <VL53L0X_write_byte+0x44>)
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7f8 fc4e 	bl	8002040 <HAL_I2C_Master_Transmit>
 80097a4:	4603      	mov	r3, r0

}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20000b24 	.word	0x20000b24

080097b4 <VL53L0X_read_byte>:

int32_t VL53L0X_read_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata){
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	607b      	str	r3, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	72fb      	strb	r3, [r7, #11]
 80097c2:	4613      	mov	r3, r2
 80097c4:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(i2c_handle,address,&index,1,10)){
 80097c6:	7afb      	ldrb	r3, [r7, #11]
 80097c8:	b299      	uxth	r1, r3
 80097ca:	f107 020a 	add.w	r2, r7, #10
 80097ce:	230a      	movs	r3, #10
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	2301      	movs	r3, #1
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7f8 fc33 	bl	8002040 <HAL_I2C_Master_Transmit>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <VL53L0X_read_byte+0x30>
		return 1;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e00c      	b.n	80097fe <VL53L0X_read_byte+0x4a>
	}

	return HAL_I2C_Master_Receive(i2c_handle,address|1,pdata,1,10);
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	f043 0301 	orr.w	r3, r3, #1
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	b299      	uxth	r1, r3
 80097ee:	230a      	movs	r3, #10
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	2301      	movs	r3, #1
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7f8 fd30 	bl	800225c <HAL_I2C_Master_Receive>
 80097fc:	4603      	mov	r3, r0



}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint32_t *pdata) {
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af02      	add	r7, sp, #8
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	72fb      	strb	r3, [r7, #11]
 8009816:	4613      	mov	r3, r2
 8009818:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800981a:	7afb      	ldrb	r3, [r7, #11]
 800981c:	b299      	uxth	r1, r3
 800981e:	f107 020a 	add.w	r2, r7, #10
 8009822:	230a      	movs	r3, #10
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	2301      	movs	r3, #1
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7f8 fc09 	bl	8002040 <HAL_I2C_Master_Transmit>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <VL53L0X_read_dword+0x30>
		return 1;
 8009834:	2301      	movs	r3, #1
 8009836:	e021      	b.n	800987c <VL53L0X_read_dword+0x74>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 4, 10)) {
 8009838:	7afb      	ldrb	r3, [r7, #11]
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	b2db      	uxtb	r3, r3
 8009840:	b299      	uxth	r1, r3
 8009842:	230a      	movs	r3, #10
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	2304      	movs	r3, #4
 8009848:	4a0e      	ldr	r2, [pc, #56]	; (8009884 <VL53L0X_read_dword+0x7c>)
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7f8 fd06 	bl	800225c <HAL_I2C_Master_Receive>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <VL53L0X_read_dword+0x52>
		return 1;
 8009856:	2301      	movs	r3, #1
 8009858:	e010      	b.n	800987c <VL53L0X_read_dword+0x74>
	}

	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <VL53L0X_read_dword+0x7c>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) _i2c_buffer[1] << 16)
 8009860:	4b08      	ldr	r3, [pc, #32]	; (8009884 <VL53L0X_read_dword+0x7c>)
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	041b      	lsls	r3, r3, #16
 8009866:	441a      	add	r2, r3
			+ ((uint32_t) _i2c_buffer[2] << 8) + (uint32_t) _i2c_buffer[3];
 8009868:	4b06      	ldr	r3, [pc, #24]	; (8009884 <VL53L0X_read_dword+0x7c>)
 800986a:	789b      	ldrb	r3, [r3, #2]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	4413      	add	r3, r2
 8009870:	4a04      	ldr	r2, [pc, #16]	; (8009884 <VL53L0X_read_dword+0x7c>)
 8009872:	78d2      	ldrb	r2, [r2, #3]
 8009874:	441a      	add	r2, r3
	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	601a      	str	r2, [r3, #0]
	return 0;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000b24 	.word	0x20000b24

08009888 <VL53L0X_write_word>:


int32_t VL53L0X_write_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t  data){
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af02      	add	r7, sp, #8
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	4608      	mov	r0, r1
 8009892:	4611      	mov	r1, r2
 8009894:	461a      	mov	r2, r3
 8009896:	4603      	mov	r3, r0
 8009898:	70fb      	strb	r3, [r7, #3]
 800989a:	460b      	mov	r3, r1
 800989c:	70bb      	strb	r3, [r7, #2]
 800989e:	4613      	mov	r3, r2
 80098a0:	803b      	strh	r3, [r7, #0]


    _i2c_buffer[0] = index;
 80098a2:	4a0d      	ldr	r2, [pc, #52]	; (80098d8 <VL53L0X_write_word+0x50>)
 80098a4:	78bb      	ldrb	r3, [r7, #2]
 80098a6:	7013      	strb	r3, [r2, #0]
    _i2c_buffer[1] = data >> 8;
 80098a8:	883b      	ldrh	r3, [r7, #0]
 80098aa:	0a1b      	lsrs	r3, r3, #8
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <VL53L0X_write_word+0x50>)
 80098b2:	705a      	strb	r2, [r3, #1]
    _i2c_buffer[2] = data & 0x00FF;
 80098b4:	883b      	ldrh	r3, [r7, #0]
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <VL53L0X_write_word+0x50>)
 80098ba:	709a      	strb	r2, [r3, #2]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,3,10);
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	b299      	uxth	r1, r3
 80098c0:	230a      	movs	r3, #10
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2303      	movs	r3, #3
 80098c6:	4a04      	ldr	r2, [pc, #16]	; (80098d8 <VL53L0X_write_word+0x50>)
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7f8 fbb9 	bl	8002040 <HAL_I2C_Master_Transmit>
 80098ce:	4603      	mov	r3, r0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20000b24 	.word	0x20000b24

080098dc <VL53L0X_read_word>:


int32_t VL53L0X_read_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t *pdata){
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	607b      	str	r3, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	72fb      	strb	r3, [r7, #11]
 80098ea:	4613      	mov	r3, r2
 80098ec:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	b299      	uxth	r1, r3
 80098f2:	f107 020a 	add.w	r2, r7, #10
 80098f6:	230a      	movs	r3, #10
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	2301      	movs	r3, #1
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f7f8 fb9f 	bl	8002040 <HAL_I2C_Master_Transmit>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <VL53L0X_read_word+0x30>
		return 1;
 8009908:	2301      	movs	r3, #1
 800990a:	e01d      	b.n	8009948 <VL53L0X_read_word+0x6c>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 2, 10)) {
 800990c:	7afb      	ldrb	r3, [r7, #11]
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	b2db      	uxtb	r3, r3
 8009914:	b299      	uxth	r1, r3
 8009916:	230a      	movs	r3, #10
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	2302      	movs	r3, #2
 800991c:	4a0c      	ldr	r2, [pc, #48]	; (8009950 <VL53L0X_read_word+0x74>)
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7f8 fc9c 	bl	800225c <HAL_I2C_Master_Receive>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <VL53L0X_read_word+0x52>
		return 1;
 800992a:	2301      	movs	r3, #1
 800992c:	e00c      	b.n	8009948 <VL53L0X_read_word+0x6c>
	}

	 *pdata = ((uint16_t)_i2c_buffer[0]<<8) + (uint16_t)_i2c_buffer[1];
 800992e:	4b08      	ldr	r3, [pc, #32]	; (8009950 <VL53L0X_read_word+0x74>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	b29a      	uxth	r2, r3
 8009938:	4b05      	ldr	r3, [pc, #20]	; (8009950 <VL53L0X_read_word+0x74>)
 800993a:	785b      	ldrb	r3, [r3, #1]
 800993c:	b29b      	uxth	r3, r3
 800993e:	4413      	add	r3, r2
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	801a      	strh	r2, [r3, #0]
	return 0;
 8009946:	2300      	movs	r3, #0

}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	20000b24 	.word	0x20000b24

08009954 <VL53L0X_read_multi>:


int32_t VL53L0X_read_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata, int32_t count){
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af02      	add	r7, sp, #8
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	607b      	str	r3, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	72fb      	strb	r3, [r7, #11]
 8009962:	4613      	mov	r3, r2
 8009964:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 8009966:	7afb      	ldrb	r3, [r7, #11]
 8009968:	b299      	uxth	r1, r3
 800996a:	f107 020a 	add.w	r2, r7, #10
 800996e:	230a      	movs	r3, #10
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	2301      	movs	r3, #1
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7f8 fb63 	bl	8002040 <HAL_I2C_Master_Transmit>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <VL53L0X_read_multi+0x30>
		return 1;
 8009980:	2301      	movs	r3, #1
 8009982:	e013      	b.n	80099ac <VL53L0X_read_multi+0x58>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, pdata, count, 10)) {
 8009984:	7afb      	ldrb	r3, [r7, #11]
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	b2db      	uxtb	r3, r3
 800998c:	b299      	uxth	r1, r3
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	b29a      	uxth	r2, r3
 8009992:	230a      	movs	r3, #10
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	4613      	mov	r3, r2
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7f8 fc5e 	bl	800225c <HAL_I2C_Master_Receive>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <VL53L0X_read_multi+0x56>
		return 1;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e000      	b.n	80099ac <VL53L0X_read_multi+0x58>
	}

	return 0;
 80099aa:	2300      	movs	r3, #0


}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <VL53L0X_write_multi>:


int32_t VL53L0X_write_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint8_t  *pdata, int32_t count){
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	460b      	mov	r3, r1
 80099c0:	72fb      	strb	r3, [r7, #11]
 80099c2:	4613      	mov	r3, r2
 80099c4:	72bb      	strb	r3, [r7, #10]
    _i2c_buffer[0] = index;
 80099c6:	4a0d      	ldr	r2, [pc, #52]	; (80099fc <VL53L0X_write_multi+0x48>)
 80099c8:	7abb      	ldrb	r3, [r7, #10]
 80099ca:	7013      	strb	r3, [r2, #0]
    memcpy(&_i2c_buffer[1], pdata, count);
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	480b      	ldr	r0, [pc, #44]	; (8009a00 <VL53L0X_write_multi+0x4c>)
 80099d4:	f005 ff2a 	bl	800f82c <memcpy>

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,count+1,10);
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	b299      	uxth	r1, r3
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	3301      	adds	r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	230a      	movs	r3, #10
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	4613      	mov	r3, r2
 80099ea:	4a04      	ldr	r2, [pc, #16]	; (80099fc <VL53L0X_write_multi+0x48>)
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f7f8 fb27 	bl	8002040 <HAL_I2C_Master_Transmit>
 80099f2:	4603      	mov	r3, r0

}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	20000b24 	.word	0x20000b24
 8009a00:	20000b25 	.word	0x20000b25

08009a04 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08a      	sub	sp, #40	; 0x28
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	607a      	str	r2, [r7, #4]
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	460b      	mov	r3, r1
 8009a12:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b3f      	cmp	r3, #63	; 0x3f
 8009a20:	d901      	bls.n	8009a26 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a22:	23fc      	movs	r3, #252	; 0xfc
 8009a24:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009a2c:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	7afa      	ldrb	r2, [r7, #11]
 8009a38:	7df9      	ldrb	r1, [r7, #23]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f7ff ffb9 	bl	80099b4 <VL53L0X_write_multi>
 8009a42:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a4a:	23ec      	movs	r3, #236	; 0xec
 8009a4c:	77fb      	strb	r3, [r7, #31]

    return Status;
 8009a4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b088      	sub	sp, #32
 8009a5e:	af02      	add	r7, sp, #8
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	607a      	str	r2, [r7, #4]
 8009a64:	603b      	str	r3, [r7, #0]
 8009a66:	460b      	mov	r3, r1
 8009a68:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b3f      	cmp	r3, #63	; 0x3f
 8009a72:	d901      	bls.n	8009a78 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a74:	23fc      	movs	r3, #252	; 0xfc
 8009a76:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009a7e:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	7afa      	ldrb	r2, [r7, #11]
 8009a8a:	7db9      	ldrb	r1, [r7, #22]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f7ff ff60 	bl	8009954 <VL53L0X_read_multi>
 8009a94:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <VL53L0X_ReadMulti+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a9c:	23ec      	movs	r3, #236	; 0xec
 8009a9e:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009ac6:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009ace:	78bb      	ldrb	r3, [r7, #2]
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	7bb9      	ldrb	r1, [r7, #14]
 8009ad4:	f7ff fe4a 	bl	800976c <VL53L0X_write_byte>
 8009ad8:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <VL53L0X_WrByte+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ae0:	23ec      	movs	r3, #236	; 0xec
 8009ae2:	73fb      	strb	r3, [r7, #15]

    return Status;
 8009ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
 8009afc:	4613      	mov	r3, r2
 8009afe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009b0a:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(Dev->i2c_handle,deviceAddress, index, data);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009b12:	883b      	ldrh	r3, [r7, #0]
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	7bb9      	ldrb	r1, [r7, #14]
 8009b18:	f7ff feb6 	bl	8009888 <VL53L0X_write_word>
 8009b1c:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <VL53L0X_WrWord+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b24:	23ec      	movs	r3, #236	; 0xec
 8009b26:	73fb      	strb	r3, [r7, #15]

    return Status;
 8009b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data){
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009b4c:	75bb      	strb	r3, [r7, #22]

	//status_int = VL53L0X_write_dword(Dev->i2c_handle,deviceAddress, index, data);

	if (status_int != 0)
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <VL53L0X_WrDWord+0x24>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b54:	23ec      	movs	r3, #236	; 0xec
 8009b56:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	4608      	mov	r0, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	461a      	mov	r2, r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	70fb      	strb	r3, [r7, #3]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70bb      	strb	r3, [r7, #2]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009b8c:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, &data);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009b94:	f107 030f 	add.w	r3, r7, #15
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	7db9      	ldrb	r1, [r7, #22]
 8009b9c:	f7ff fe0a 	bl	80097b4 <VL53L0X_read_byte>
 8009ba0:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <VL53L0X_UpdateByte+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ba8:	23ec      	movs	r3, #236	; 0xec
 8009baa:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8009bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d115      	bne.n	8009be0 <VL53L0X_UpdateByte+0x78>
        data = (data & AndData) | OrData;
 8009bb4:	7bfa      	ldrb	r2, [r7, #15]
 8009bb6:	78bb      	ldrb	r3, [r7, #2]
 8009bb8:	4013      	ands	r3, r2
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	787b      	ldrb	r3, [r7, #1]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	78fa      	ldrb	r2, [r7, #3]
 8009bce:	7db9      	ldrb	r1, [r7, #22]
 8009bd0:	f7ff fdcc 	bl	800976c <VL53L0X_write_byte>
 8009bd4:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <VL53L0X_UpdateByte+0x78>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009bdc:	23ec      	movs	r3, #236	; 0xec
 8009bde:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 8009be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009c04:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, data);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009c0c:	7afa      	ldrb	r2, [r7, #11]
 8009c0e:	7db9      	ldrb	r1, [r7, #22]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f7ff fdcf 	bl	80097b4 <VL53L0X_read_byte>
 8009c16:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <VL53L0X_RdByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009c1e:	23ec      	movs	r3, #236	; 0xec
 8009c20:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b086      	sub	sp, #24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	460b      	mov	r3, r1
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009c46:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(Dev->i2c_handle,deviceAddress, index, data);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009c4e:	7afa      	ldrb	r2, [r7, #11]
 8009c50:	7db9      	ldrb	r1, [r7, #22]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f7ff fe42 	bl	80098dc <VL53L0X_read_word>
 8009c58:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <VL53L0X_RdWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009c60:	23ec      	movs	r3, #236	; 0xec
 8009c62:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009c88:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(Dev->i2c_handle,deviceAddress, index, data);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009c90:	7afa      	ldrb	r2, [r7, #11]
 8009c92:	7db9      	ldrb	r1, [r7, #22]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f7ff fdb7 	bl	8009808 <VL53L0X_read_dword>
 8009c9a:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <VL53L0X_RdDWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ca2:	23ec      	movs	r3, #236	; 0xec
 8009ca4:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	72fb      	strb	r3, [r7, #11]
    LOG_FUNCTION_START("");

    //czekaj 2 ms nie rob nic
    //HAL_Delay(2);

	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e002      	b.n	8009ccc <VL53L0X_PollingDelay+0x18>
		time++;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	60fb      	str	r3, [r7, #12]
	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4a05      	ldr	r2, [pc, #20]	; (8009ce4 <VL53L0X_PollingDelay+0x30>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d9f8      	bls.n	8009cc6 <VL53L0X_PollingDelay+0x12>
	}

    LOG_FUNCTION_END(status);
    return status;
 8009cd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	0003d08f 	.word	0x0003d08f

08009ce8 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8009cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d105      	bne.n	8009d08 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 f836 	bl	800ad70 <VL53L1_data_init>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8009d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d107      	bne.n	8009d20 <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009d20:	2300      	movs	r3, #0
 8009d22:	73bb      	strb	r3, [r7, #14]
 8009d24:	e012      	b.n	8009d4c <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 8009d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d112      	bne.n	8009d54 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2201      	movs	r2, #1
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fbf1 	bl	800a51e <VL53L1_SetLimitCheckEnable>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	73bb      	strb	r3, [r7, #14]
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d9e9      	bls.n	8009d26 <VL53L1_DataInit+0x3e>
 8009d52:	e000      	b.n	8009d56 <VL53L1_DataInit+0x6e>
		else
			break;
 8009d54:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8009d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d107      	bne.n	8009d6e <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8009d5e:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8009d62:	2100      	movs	r1, #0
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fc3b 	bl	800a5e0 <VL53L1_SetLimitCheckValue>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8009d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d107      	bne.n	8009d86 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8009d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fc2f 	bl	800a5e0 <VL53L1_SetLimitCheckValue>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2203      	movs	r2, #3
 8009da2:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8009da6:	2320      	movs	r3, #32
 8009da8:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7bba      	ldrb	r2, [r7, #14]
 8009dae:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2203      	movs	r2, #3
 8009db4:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8009dc8:	2108      	movs	r1, #8
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f8ed 	bl	8009faa <VL53L1_SetPresetMode>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8009dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8009dec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f005 fab9 	bl	800f368 <VL53L1_poll_for_boot_completion>
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8009dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	603a      	str	r2, [r7, #0]
 8009e12:	71fb      	strb	r3, [r7, #7]
 8009e14:	460b      	mov	r3, r1
 8009e16:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8009e1c:	4a2c      	ldr	r2, [pc, #176]	; (8009ed0 <ComputeDevicePresetMode+0xc8>)
 8009e1e:	f107 0310 	add.w	r3, r7, #16
 8009e22:	6812      	ldr	r2, [r2, #0]
 8009e24:	4611      	mov	r1, r2
 8009e26:	8019      	strh	r1, [r3, #0]
 8009e28:	3302      	adds	r3, #2
 8009e2a:	0c12      	lsrs	r2, r2, #16
 8009e2c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8009e2e:	4a29      	ldr	r2, [pc, #164]	; (8009ed4 <ComputeDevicePresetMode+0xcc>)
 8009e30:	f107 030c 	add.w	r3, r7, #12
 8009e34:	6812      	ldr	r2, [r2, #0]
 8009e36:	4611      	mov	r1, r2
 8009e38:	8019      	strh	r1, [r3, #0]
 8009e3a:	3302      	adds	r3, #2
 8009e3c:	0c12      	lsrs	r2, r2, #16
 8009e3e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8009e40:	4a25      	ldr	r2, [pc, #148]	; (8009ed8 <ComputeDevicePresetMode+0xd0>)
 8009e42:	f107 0308 	add.w	r3, r7, #8
 8009e46:	6812      	ldr	r2, [r2, #0]
 8009e48:	4611      	mov	r1, r2
 8009e4a:	8019      	strh	r1, [r3, #0]
 8009e4c:	3302      	adds	r3, #2
 8009e4e:	0c12      	lsrs	r2, r2, #16
 8009e50:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2201      	movs	r2, #1
 8009e56:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8009e58:	79bb      	ldrb	r3, [r7, #6]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d002      	beq.n	8009e64 <ComputeDevicePresetMode+0x5c>
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d003      	beq.n	8009e6a <ComputeDevicePresetMode+0x62>
 8009e62:	e005      	b.n	8009e70 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	75bb      	strb	r3, [r7, #22]
		break;
 8009e68:	e004      	b.n	8009e74 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	75bb      	strb	r3, [r7, #22]
		break;
 8009e6e:	e001      	b.n	8009e74 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8009e70:	2302      	movs	r3, #2
 8009e72:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d004      	beq.n	8009e84 <ComputeDevicePresetMode+0x7c>
 8009e7a:	2b08      	cmp	r3, #8
 8009e7c:	d014      	beq.n	8009ea8 <ComputeDevicePresetMode+0xa0>
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d009      	beq.n	8009e96 <ComputeDevicePresetMode+0x8e>
 8009e82:	e01a      	b.n	8009eba <ComputeDevicePresetMode+0xb2>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8009e84:	7dbb      	ldrb	r3, [r7, #22]
 8009e86:	f107 0218 	add.w	r2, r7, #24
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	701a      	strb	r2, [r3, #0]
		break;
 8009e94:	e013      	b.n	8009ebe <ComputeDevicePresetMode+0xb6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8009e96:	7dbb      	ldrb	r3, [r7, #22]
 8009e98:	f107 0218 	add.w	r2, r7, #24
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	701a      	strb	r2, [r3, #0]
		break;
 8009ea6:	e00a      	b.n	8009ebe <ComputeDevicePresetMode+0xb6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8009ea8:	7dbb      	ldrb	r3, [r7, #22]
 8009eaa:	f107 0218 	add.w	r2, r7, #24
 8009eae:	4413      	add	r3, r2
 8009eb0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	701a      	strb	r2, [r3, #0]
		break;
 8009eb8:	e001      	b.n	8009ebe <ComputeDevicePresetMode+0xb6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8009eba:	23f8      	movs	r3, #248	; 0xf8
 8009ebc:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8009ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	371c      	adds	r7, #28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	080106fc 	.word	0x080106fc
 8009ed4:	08010700 	.word	0x08010700
 8009ed8:	08010704 	.word	0x08010704

08009edc <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8009edc:	b5b0      	push	{r4, r5, r7, lr}
 8009ede:	b08e      	sub	sp, #56	; 0x38
 8009ee0:	af04      	add	r7, sp, #16
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	72fb      	strb	r3, [r7, #11]
 8009eea:	4613      	mov	r3, r2
 8009eec:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d002      	beq.n	8009f00 <SetPresetMode+0x24>
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	2b08      	cmp	r3, #8
 8009efe:	d103      	bne.n	8009f08 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8009f00:	2340      	movs	r3, #64	; 0x40
 8009f02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f06:	e002      	b.n	8009f0e <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8009f08:	2320      	movs	r3, #32
 8009f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8009f0e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8009f12:	7ab9      	ldrb	r1, [r7, #10]
 8009f14:	7afb      	ldrb	r3, [r7, #11]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff ff76 	bl	8009e08 <ComputeDevicePresetMode>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8009f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d112      	bne.n	8009f50 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8009f2a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8009f2e:	f107 001c 	add.w	r0, r7, #28
 8009f32:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8009f36:	f107 0314 	add.w	r3, r7, #20
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	f107 0318 	add.w	r3, r7, #24
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	4603      	mov	r3, r0
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f001 f9d3 	bl	800b2f0 <VL53L1_get_preset_mode_timing_cfg>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8009f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d112      	bne.n	8009f7e <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8009f58:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8009f5c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8009f5e:	69fd      	ldr	r5, [r7, #28]
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	9102      	str	r1, [sp, #8]
 8009f68:	9201      	str	r2, [sp, #4]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4601      	mov	r1, r0
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f001 fa66 	bl	800b444 <VL53L1_set_preset_mode>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8009f7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d103      	bne.n	8009f8e <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009f8c:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8009f8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d103      	bne.n	8009f9e <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	7afa      	ldrb	r2, [r7, #11]
 8009f9a:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8009f9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3728      	adds	r7, #40	; 0x28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bdb0      	pop	{r4, r5, r7, pc}

08009faa <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8009fbe:	7bba      	ldrb	r2, [r7, #14]
 8009fc0:	78f9      	ldrb	r1, [r7, #3]
 8009fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff ff88 	bl	8009edc <SetPresetMode>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8009fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d11f      	bne.n	800a018 <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7bba      	ldrb	r2, [r7, #14]
 8009fdc:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	7bba      	ldrb	r2, [r7, #14]
 8009fe4:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d005      	beq.n	8009ffa <VL53L1_SetPresetMode+0x50>
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d002      	beq.n	8009ffa <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	d107      	bne.n	800a00a <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8009ffa:	f24a 0128 	movw	r1, #41000	; 0xa028
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f8a2 	bl	800a148 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]
 800a008:	e006      	b.n	800a018 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800a00a:	f248 2135 	movw	r1, #33333	; 0x8235
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f89a 	bl	800a148 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800a014:	4603      	mov	r3, r0
 800a016:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d106      	bne.n	800a02e <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800a020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa0d 	bl	800a444 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800a02a:	4603      	mov	r3, r0
 800a02c:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b088      	sub	sp, #32
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a046:	2300      	movs	r3, #0
 800a048:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a050:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d008      	beq.n	800a06a <VL53L1_SetDistanceMode+0x30>
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d005      	beq.n	800a06a <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	2b03      	cmp	r3, #3
 800a062:	d002      	beq.n	800a06a <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800a064:	f06f 0303 	mvn.w	r3, #3
 800a068:	e069      	b.n	800a13e <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 800a06a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 800a072:	78fb      	ldrb	r3, [r7, #3]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d002      	beq.n	800a07e <VL53L1_SetDistanceMode+0x44>
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d102      	bne.n	800a084 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	77bb      	strb	r3, [r7, #30]
 800a082:	e001      	b.n	800a088 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800a084:	2303      	movs	r3, #3
 800a086:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 800a088:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d107      	bne.n	800a0a0 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800a090:	f107 0308 	add.w	r3, r7, #8
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 f8d3 	bl	800b242 <VL53L1_get_user_zone>
 800a09c:	4603      	mov	r3, r0
 800a09e:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800a0a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800a0ae:	f107 0314 	add.w	r3, r7, #20
 800a0b2:	f107 0210 	add.w	r2, r7, #16
 800a0b6:	f107 010c 	add.w	r1, r7, #12
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fffc 	bl	800b0b8 <VL53L1_get_timeouts_us>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800a0c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d107      	bne.n	800a0dc <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 800a0cc:	7fba      	ldrb	r2, [r7, #30]
 800a0ce:	7f79      	ldrb	r1, [r7, #29]
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff ff02 	bl	8009edc <SetPresetMode>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800a0dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10b      	bne.n	800a0fc <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7fba      	ldrb	r2, [r7, #30]
 800a0e8:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	7fba      	ldrb	r2, [r7, #30]
 800a0f0:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	78fa      	ldrb	r2, [r7, #3]
 800a0f8:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a0fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10e      	bne.n	800a122 <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800a104:	68f9      	ldr	r1, [r7, #12]
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 ff9c 	bl	800b048 <VL53L1_set_timeouts_us>
 800a110:	4603      	mov	r3, r0
 800a112:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800a114:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a122:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d107      	bne.n	800a13a <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 f863 	bl	800b1fc <VL53L1_set_user_zone>
 800a136:	4603      	mov	r3, r0
 800a138:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800a13a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3720      	adds	r7, #32
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08c      	sub	sp, #48	; 0x30
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800a158:	4b63      	ldr	r3, [pc, #396]	; (800a2e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a0>)
 800a15a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	4a63      	ldr	r2, [pc, #396]	; (800a2ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d902      	bls.n	800a16a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a164:	23fc      	movs	r3, #252	; 0xfc
 800a166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800a16a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d109      	bne.n	800a186 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a172:	f107 031a 	add.w	r3, r7, #26
 800a176:	461a      	mov	r2, r3
 800a178:	2105      	movs	r1, #5
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fac0 	bl	800a700 <VL53L1_GetSequenceStepEnable>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a186:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d109      	bne.n	800a1a2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a18e:	f107 0319 	add.w	r3, r7, #25
 800a192:	461a      	mov	r2, r3
 800a194:	2106      	movs	r1, #6
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fab2 	bl	800a700 <VL53L1_GetSequenceStepEnable>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a1a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10b      	bne.n	800a1c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 800a1aa:	f107 0314 	add.w	r3, r7, #20
 800a1ae:	f107 0210 	add.w	r2, r7, #16
 800a1b2:	f107 010c 	add.w	r1, r7, #12
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 ff7e 	bl	800b0b8 <VL53L1_get_timeouts_us>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800a1c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d17f      	bne.n	800a2ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a1d0:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800a1da:	7efb      	ldrb	r3, [r7, #27]
 800a1dc:	2b04      	cmp	r3, #4
 800a1de:	d004      	beq.n	800a1ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xa2>
 800a1e0:	2b08      	cmp	r3, #8
 800a1e2:	d023      	beq.n	800a22c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe4>
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d00e      	beq.n	800a206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
 800a1e8:	e03f      	b.n	800a26a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x122>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a1ea:	7ebb      	ldrb	r3, [r7, #26]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d002      	beq.n	800a1f6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xae>
 800a1f0:	7e7b      	ldrb	r3, [r7, #25]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d103      	bne.n	800a1fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
				TimingGuard = 5000;
 800a1f6:	f241 3388 	movw	r3, #5000	; 0x1388
 800a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800a1fc:	e038      	b.n	800a270 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>
				TimingGuard = 1000;
 800a1fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a202:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a204:	e034      	b.n	800a270 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a20c:	7ebb      	ldrb	r3, [r7, #26]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d002      	beq.n	800a218 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd0>
 800a212:	7e7b      	ldrb	r3, [r7, #25]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d103      	bne.n	800a220 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
				TimingGuard = 26600;
 800a218:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800a21c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a21e:	e002      	b.n	800a226 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
			else
				TimingGuard = 21600;
 800a220:	f245 4360 	movw	r3, #21600	; 0x5460
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800a226:	2302      	movs	r3, #2
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800a22a:	e021      	b.n	800a270 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800a232:	23f5      	movs	r3, #245	; 0xf5
 800a234:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800a236:	f107 0308 	add.w	r3, r7, #8
 800a23a:	461a      	mov	r2, r3
 800a23c:	f248 0136 	movw	r1, #32822	; 0x8036
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 ffbf 	bl	800c1c4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dd07      	ble.n	800a25c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
				vhv += vhv_loops *
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	22f5      	movs	r2, #245	; 0xf5
 800a250:	fb02 f303 	mul.w	r3, r2, r3
 800a254:	461a      	mov	r2, r3
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	4413      	add	r3, r2
 800a25a:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800a262:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800a264:	2302      	movs	r3, #2
 800a266:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800a268:	e002      	b.n	800a270 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a26a:	23f8      	movs	r3, #248	; 0xf8
 800a26c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a274:	429a      	cmp	r2, r3
 800a276:	d803      	bhi.n	800a280 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800a278:	23fc      	movs	r3, #252	; 0xfc
 800a27a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a27e:	e003      	b.n	800a288 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800a286:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800a288:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d11c      	bne.n	800a2ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	429a      	cmp	r2, r3
 800a296:	d903      	bls.n	800a2a0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800a298:	23fc      	movs	r3, #252	; 0xfc
 800a29a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a29e:	e00d      	b.n	800a2bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x174>
			else {
				TimingBudget /= divisor;
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a8:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800a2aa:	68f9      	ldr	r1, [r7, #12]
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fec9 	bl	800b048 <VL53L1_set_timeouts_us>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800a2bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
				VL53L1DevDataSet(Dev,
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800a2ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d103      	bne.n	800a2da <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x192>
		VL53L1DevDataSet(Dev,
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3730      	adds	r7, #48	; 0x30
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	00086470 	.word	0x00086470
 800a2ec:	00989680 	.word	0x00989680

0800a2f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08c      	sub	sp, #48	; 0x30
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800a31e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a322:	2b00      	cmp	r3, #0
 800a324:	d109      	bne.n	800a33a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a326:	f107 031b 	add.w	r3, r7, #27
 800a32a:	461a      	mov	r2, r3
 800a32c:	2105      	movs	r1, #5
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f9e6 	bl	800a700 <VL53L1_GetSequenceStepEnable>
 800a334:	4603      	mov	r3, r0
 800a336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800a33a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d109      	bne.n	800a356 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a342:	f107 031a 	add.w	r3, r7, #26
 800a346:	461a      	mov	r2, r3
 800a348:	2106      	movs	r1, #6
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f9d8 	bl	800a700 <VL53L1_GetSequenceStepEnable>
 800a350:	4603      	mov	r3, r0
 800a352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800a356:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800a35e:	f107 0310 	add.w	r3, r7, #16
 800a362:	f107 0214 	add.w	r2, r7, #20
 800a366:	f107 010c 	add.w	r1, r7, #12
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fea4 	bl	800b0b8 <VL53L1_get_timeouts_us>
 800a370:	4603      	mov	r3, r0
 800a372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800a376:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d154      	bne.n	800a428 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		switch (PresetMode) {
 800a388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d004      	beq.n	800a39a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xaa>
 800a390:	2b08      	cmp	r3, #8
 800a392:	d027      	beq.n	800a3e4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf4>
 800a394:	2b03      	cmp	r3, #3
 800a396:	d011      	beq.n	800a3bc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 800a398:	e043      	b.n	800a422 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x132>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a39a:	7efb      	ldrb	r3, [r7, #27]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d002      	beq.n	800a3a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb6>
 800a3a0:	7ebb      	ldrb	r3, [r7, #26]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d105      	bne.n	800a3b2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc2>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800a3b0:	e03a      	b.n	800a428 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800a3b8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a3ba:	e035      	b.n	800a428 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a3bc:	7efb      	ldrb	r3, [r7, #27]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d002      	beq.n	800a3c8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 800a3c2:	7ebb      	ldrb	r3, [r7, #26]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d106      	bne.n	800a3d6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe6>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800a3ce:	3334      	adds	r3, #52	; 0x34
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800a3d4:	e028      	b.n	800a428 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800a3dc:	3330      	adds	r3, #48	; 0x30
 800a3de:	005b      	lsls	r3, r3, #1
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a3e2:	e021      	b.n	800a428 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800a3e4:	23f5      	movs	r3, #245	; 0xf5
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800a3e8:	f107 0308 	add.w	r3, r7, #8
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f248 0136 	movw	r1, #32822	; 0x8036
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f001 fee6 	bl	800c1c4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd07      	ble.n	800a40e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x11e>
				vhv += vhv_loops *
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	22f5      	movs	r2, #245	; 0xf5
 800a402:	fb02 f303 	mul.w	r3, r2, r3
 800a406:	461a      	mov	r2, r3
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	4413      	add	r3, r2
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800a414:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	005a      	lsls	r2, r3, #1
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	4413      	add	r3, r2
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a420:	e002      	b.n	800a428 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a422:	23f8      	movs	r3, #248	; 0xf8
 800a424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 800a428:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d102      	bne.n	800a436 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x146>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a434:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a436:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3730      	adds	r7, #48	; 0x30
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	019b      	lsls	r3, r3, #6
 800a45a:	4a09      	ldr	r2, [pc, #36]	; (800a480 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800a45c:	fba2 2303 	umull	r2, r3, r2, r3
 800a460:	099b      	lsrs	r3, r3, #6
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	4413      	add	r3, r2
 800a466:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fd9d 	bl	800afaa <VL53L1_set_inter_measurement_period_ms>
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800a474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	10624dd3 	.word	0x10624dd3

0800a484 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800a492:	f107 0308 	add.w	r3, r7, #8
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fdaf 	bl	800affc <VL53L1_get_inter_measurement_period_ms>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	019b      	lsls	r3, r3, #6
 800a4a8:	4907      	ldr	r1, [pc, #28]	; (800a4c8 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800a4aa:	fba1 1303 	umull	r1, r3, r1, r3
 800a4ae:	099b      	lsrs	r3, r3, #6
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800a4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	10624dd3 	.word	0x10624dd3

0800a4cc <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a4de:	897b      	ldrh	r3, [r7, #10]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <SetLimitValue+0x1e>
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d009      	beq.n	800a4fc <SetLimitValue+0x30>
 800a4e8:	e011      	b.n	800a50e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	0b9b      	lsrs	r3, r3, #14
 800a4ee:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800a4f0:	8abb      	ldrh	r3, [r7, #20]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f001 f931 	bl	800b75c <VL53L1_set_lite_sigma_threshold>
		break;
 800a4fa:	e00a      	b.n	800a512 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	0a5b      	lsrs	r3, r3, #9
 800a500:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800a502:	8abb      	ldrh	r3, [r7, #20]
 800a504:	4619      	mov	r1, r3
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f001 f954 	bl	800b7b4 <VL53L1_set_lite_min_count_rate>
		break;
 800a50c:	e001      	b.n	800a512 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a50e:	23fc      	movs	r3, #252	; 0xfc
 800a510:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	460b      	mov	r3, r1
 800a528:	807b      	strh	r3, [r7, #2]
 800a52a:	4613      	mov	r3, r2
 800a52c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a536:	887b      	ldrh	r3, [r7, #2]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d902      	bls.n	800a542 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a53c:	23fc      	movs	r3, #252	; 0xfc
 800a53e:	73fb      	strb	r3, [r7, #15]
 800a540:	e014      	b.n	800a56c <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800a542:	787b      	ldrb	r3, [r7, #1]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	60bb      	str	r3, [r7, #8]
 800a54c:	e006      	b.n	800a55c <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a54e:	887b      	ldrh	r3, [r7, #2]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	33e0      	adds	r3, #224	; 0xe0
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800a55c:	887b      	ldrh	r3, [r7, #2]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7ff ffb2 	bl	800a4cc <SetLimitValue>
 800a568:	4603      	mov	r3, r0
 800a56a:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800a56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10c      	bne.n	800a58e <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a574:	887b      	ldrh	r3, [r7, #2]
 800a576:	787a      	ldrb	r2, [r7, #1]
 800a578:	2a00      	cmp	r2, #0
 800a57a:	bf14      	ite	ne
 800a57c:	2201      	movne	r2, #1
 800a57e:	2200      	moveq	r2, #0
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	4611      	mov	r1, r2
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	4413      	add	r3, r2
 800a588:	460a      	mov	r2, r1
 800a58a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800a58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b087      	sub	sp, #28
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a5ac:	897b      	ldrh	r3, [r7, #10]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d905      	bls.n	800a5be <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a5b2:	23fc      	movs	r3, #252	; 0xfc
 800a5b4:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	e008      	b.n	800a5d0 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a5be:	897b      	ldrh	r3, [r7, #10]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800a5c8:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7dba      	ldrb	r2, [r7, #22]
 800a5ce:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a5d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	371c      	adds	r7, #28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a5f2:	897b      	ldrh	r3, [r7, #10]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d902      	bls.n	800a5fe <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a5f8:	23fc      	movs	r3, #252	; 0xfc
 800a5fa:	75fb      	strb	r3, [r7, #23]
 800a5fc:	e023      	b.n	800a646 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a5fe:	897b      	ldrh	r3, [r7, #10]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800a608:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 800a60a:	7dbb      	ldrb	r3, [r7, #22]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d107      	bne.n	800a620 <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a610:	897b      	ldrh	r3, [r7, #10]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	33e0      	adds	r3, #224	; 0xe0
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	609a      	str	r2, [r3, #8]
 800a61e:	e012      	b.n	800a646 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800a620:	897b      	ldrh	r3, [r7, #10]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	4619      	mov	r1, r3
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7ff ff50 	bl	800a4cc <SetLimitValue>
 800a62c:	4603      	mov	r3, r0
 800a62e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800a630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d106      	bne.n	800a646 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a638:	897b      	ldrh	r3, [r7, #10]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	33e0      	adds	r3, #224	; 0xe0
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b088      	sub	sp, #32
 800a656:	af00      	add	r7, sp, #0
 800a658:	60f8      	str	r0, [r7, #12]
 800a65a:	460b      	mov	r3, r1
 800a65c:	607a      	str	r2, [r7, #4]
 800a65e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a660:	2300      	movs	r3, #0
 800a662:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a664:	897b      	ldrh	r3, [r7, #10]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <VL53L1_GetLimitCheckValue+0x1e>
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d00c      	beq.n	800a688 <VL53L1_GetLimitCheckValue+0x36>
 800a66e:	e017      	b.n	800a6a0 <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800a670:	f107 0314 	add.w	r3, r7, #20
 800a674:	4619      	mov	r1, r3
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f001 f85a 	bl	800b730 <VL53L1_get_lite_sigma_threshold>
 800a67c:	4603      	mov	r3, r0
 800a67e:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800a680:	8abb      	ldrh	r3, [r7, #20]
 800a682:	039b      	lsls	r3, r3, #14
 800a684:	61bb      	str	r3, [r7, #24]
		break;
 800a686:	e00d      	b.n	800a6a4 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800a688:	f107 0316 	add.w	r3, r7, #22
 800a68c:	4619      	mov	r1, r3
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f001 f87a 	bl	800b788 <VL53L1_get_lite_min_count_rate>
 800a694:	4603      	mov	r3, r0
 800a696:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800a698:	8afb      	ldrh	r3, [r7, #22]
 800a69a:	025b      	lsls	r3, r3, #9
 800a69c:	61bb      	str	r3, [r7, #24]
		break;
 800a69e:	e001      	b.n	800a6a4 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a6a0:	23fc      	movs	r3, #252	; 0xfc
 800a6a2:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a6a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d123      	bne.n	800a6f4 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d110      	bne.n	800a6d4 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800a6b2:	897b      	ldrh	r3, [r7, #10]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	33e0      	adds	r3, #224	; 0xe0
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a6c6:	897b      	ldrh	r3, [r7, #10]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800a6d2:	e00f      	b.n	800a6f4 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a6da:	897b      	ldrh	r3, [r7, #10]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	33e0      	adds	r3, #224	; 0xe0
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	69ba      	ldr	r2, [r7, #24]
 800a6e6:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a6e8:	897b      	ldrh	r3, [r7, #10]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800a6f4:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3720      	adds	r7, #32
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	460b      	mov	r3, r1
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a70e:	2300      	movs	r3, #0
 800a710:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800a712:	7afb      	ldrb	r3, [r7, #11]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fd38 	bl	800b18e <VL53L1_get_sequence_config_bit>
 800a71e:	4603      	mov	r3, r0
 800a720:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800a722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a738:	2300      	movs	r3, #0
 800a73a:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800a742:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 800a744:	7dbb      	ldrb	r3, [r7, #22]
 800a746:	2b05      	cmp	r3, #5
 800a748:	dc06      	bgt.n	800a758 <VL53L1_StartMeasurement+0x28>
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	da0b      	bge.n	800a766 <VL53L1_StartMeasurement+0x36>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	db0c      	blt.n	800a76c <VL53L1_StartMeasurement+0x3c>
 800a752:	2b02      	cmp	r3, #2
 800a754:	dd07      	ble.n	800a766 <VL53L1_StartMeasurement+0x36>
 800a756:	e003      	b.n	800a760 <VL53L1_StartMeasurement+0x30>
 800a758:	3b62      	subs	r3, #98	; 0x62
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d806      	bhi.n	800a76c <VL53L1_StartMeasurement+0x3c>
 800a75e:	e002      	b.n	800a766 <VL53L1_StartMeasurement+0x36>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800a760:	2300      	movs	r3, #0
 800a762:	75fb      	strb	r3, [r7, #23]
		break;
 800a764:	e004      	b.n	800a770 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800a766:	23f2      	movs	r3, #242	; 0xf2
 800a768:	75fb      	strb	r3, [r7, #23]
		break;
 800a76a:	e001      	b.n	800a770 <VL53L1_StartMeasurement+0x40>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800a76c:	23fd      	movs	r3, #253	; 0xfd
 800a76e:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	789b      	ldrb	r3, [r3, #2]
 800a774:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800a776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d11f      	bne.n	800a7be <VL53L1_StartMeasurement+0x8e>
 800a77e:	7d7b      	ldrb	r3, [r7, #21]
 800a780:	2b40      	cmp	r3, #64	; 0x40
 800a782:	d11c      	bne.n	800a7be <VL53L1_StartMeasurement+0x8e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a784:	f107 0310 	add.w	r3, r7, #16
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fdb0 	bl	800a2f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800a790:	4603      	mov	r3, r0
 800a792:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4a17      	ldr	r2, [pc, #92]	; (800a7f4 <VL53L1_StartMeasurement+0xc4>)
 800a798:	fba2 2303 	umull	r2, r3, r2, r3
 800a79c:	099b      	lsrs	r3, r3, #6
 800a79e:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a7a0:	f107 030c 	add.w	r3, r7, #12
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fe6c 	bl	800a484 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	1d1a      	adds	r2, r3, #4
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d901      	bls.n	800a7be <VL53L1_StartMeasurement+0x8e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800a7ba:	23fc      	movs	r3, #252	; 0xfc
 800a7bc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800a7be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d107      	bne.n	800a7d6 <VL53L1_StartMeasurement+0xa6>
		Status = VL53L1_init_and_start_range(
 800a7c6:	7d7b      	ldrb	r3, [r7, #21]
 800a7c8:	2206      	movs	r2, #6
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 f827 	bl	800b820 <VL53L1_init_and_start_range>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800a7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d103      	bne.n	800a7e6 <VL53L1_StartMeasurement+0xb6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2204      	movs	r2, #4
 800a7e2:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800a7e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	10624dd3 	.word	0x10624dd3

0800a7f8 <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08a      	sub	sp, #40	; 0x28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a800:	2300      	movs	r3, #0
 800a802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 800a806:	f107 0318 	add.w	r3, r7, #24
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fd18 	bl	800b242 <VL53L1_get_user_zone>
 800a812:	4603      	mov	r3, r0
 800a814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a81e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800a828:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 800a82c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10b      	bne.n	800a84c <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800a834:	f107 0314 	add.w	r3, r7, #20
 800a838:	f107 0210 	add.w	r2, r7, #16
 800a83c:	f107 010c 	add.w	r1, r7, #12
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fc39 	bl	800b0b8 <VL53L1_get_timeouts_us>
 800a846:	4603      	mov	r3, r0
 800a848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800a84c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 fa0d 	bl	800bc74 <VL53L1_stop_range>
 800a85a:	4603      	mov	r3, r0
 800a85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE)
 800a860:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a864:	2b00      	cmp	r3, #0
 800a866:	d107      	bne.n	800a878 <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 800a868:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f003 fbcd 	bl	800e00c <VL53L1_WaitUs>
 800a872:	4603      	mov	r3, r0
 800a874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800a878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10d      	bne.n	800a89c <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 800a886:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a88a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fb23 	bl	8009edc <SetPresetMode>
 800a896:	4603      	mov	r3, r0
 800a898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a89c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10f      	bne.n	800a8c4 <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800a8a4:	68f9      	ldr	r1, [r7, #12]
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fbcc 	bl	800b048 <VL53L1_set_timeouts_us>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800a8b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d102      	bne.n	800a8c4 <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a8c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d108      	bne.n	800a8de <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800a8cc:	f107 0318 	add.w	r3, r7, #24
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fc92 	bl	800b1fc <VL53L1_set_user_zone>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800a8de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	789b      	ldrb	r3, [r3, #2]
 800a8ea:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 800a8ec:	7ffb      	ldrb	r3, [r7, #31]
 800a8ee:	2206      	movs	r2, #6
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 ff94 	bl	800b820 <VL53L1_init_and_start_range>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a8fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a902:	2b00      	cmp	r3, #0
 800a904:	d104      	bne.n	800a910 <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a90c:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800a910:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a914:	4618      	mov	r0, r3
 800a916:	3728      	adds	r7, #40	; 0x28
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	789b      	ldrb	r3, [r3, #2]
 800a92c:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800a934:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800a93c:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 800a93e:	7b3a      	ldrb	r2, [r7, #12]
 800a940:	7b7b      	ldrb	r3, [r7, #13]
 800a942:	429a      	cmp	r2, r3
 800a944:	d005      	beq.n	800a952 <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff ff56 	bl	800a7f8 <ChangePresetMode>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
 800a950:	e006      	b.n	800a960 <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 800a952:	7bbb      	ldrb	r3, [r7, #14]
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 faeb 	bl	800bf32 <VL53L1_clear_interrupt_and_enable_next_range>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800a960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b08d      	sub	sp, #52	; 0x34
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	603a      	str	r2, [r7, #0]
 800a976:	71fb      	strb	r3, [r7, #7]
 800a978:	460b      	mov	r3, r1
 800a97a:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800a97c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800a980:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800a982:	231e      	movs	r3, #30
 800a984:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800a986:	4b34      	ldr	r3, [pc, #208]	; (800aa58 <ComputeRQL+0xec>)
 800a988:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800a98a:	4b34      	ldr	r3, [pc, #208]	; (800aa5c <ComputeRQL+0xf0>)
 800a98c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800a98e:	f641 139a 	movw	r3, #6554	; 0x199a
 800a992:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d103      	bne.n	800a9a2 <ComputeRQL+0x36>
		returnvalue = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9a0:	e052      	b.n	800aa48 <ComputeRQL+0xdc>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800a9a2:	79bb      	ldrb	r3, [r7, #6]
 800a9a4:	2b07      	cmp	r3, #7
 800a9a6:	d103      	bne.n	800a9b0 <ComputeRQL+0x44>
		returnvalue = 50;
 800a9a8:	2332      	movs	r3, #50	; 0x32
 800a9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9ae:	e04b      	b.n	800aa48 <ComputeRQL+0xdc>
	else {
		if (presults_data->median_range_mm < SRL)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a9b6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	dd03      	ble.n	800a9c6 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800a9be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9c0:	041b      	lsls	r3, r3, #16
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9c4:	e007      	b.n	800a9d6 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	fb03 f302 	mul.w	r3, r3, r2
 800a9d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d020      	beq.n	800aa1e <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	fb03 f302 	mul.w	r3, r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	085b      	lsrs	r3, r3, #1
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fc:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d804      	bhi.n	800aa16 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa14:	e006      	b.n	800aa24 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800aa16:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800aa1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa1c:	e002      	b.n	800aa24 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800aa1e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800aa22:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	0c1b      	lsrs	r3, r3, #16
 800aa28:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	2b64      	cmp	r3, #100	; 0x64
 800aa2e:	d802      	bhi.n	800aa36 <ComputeRQL+0xca>
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b32      	cmp	r3, #50	; 0x32
 800aa34:	dd05      	ble.n	800aa42 <ComputeRQL+0xd6>
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	2b64      	cmp	r3, #100	; 0x64
 800aa3a:	bf28      	it	cs
 800aa3c:	2364      	movcs	r3, #100	; 0x64
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	e000      	b.n	800aa44 <ComputeRQL+0xd8>
 800aa42:	2332      	movs	r3, #50	; 0x32
 800aa44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800aa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3734      	adds	r7, #52	; 0x34
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	0075b333 	.word	0x0075b333
 800aa5c:	0030cccd 	.word	0x0030cccd

0800aa60 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	3b04      	subs	r3, #4
 800aa6e:	2b0f      	cmp	r3, #15
 800aa70:	d83d      	bhi.n	800aaee <ConvertStatusLite+0x8e>
 800aa72:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <ConvertStatusLite+0x18>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800aacb 	.word	0x0800aacb
 800aa7c:	0800aac5 	.word	0x0800aac5
 800aa80:	0800aad1 	.word	0x0800aad1
 800aa84:	0800aad7 	.word	0x0800aad7
 800aa88:	0800aae3 	.word	0x0800aae3
 800aa8c:	0800aae9 	.word	0x0800aae9
 800aa90:	0800aaef 	.word	0x0800aaef
 800aa94:	0800aaef 	.word	0x0800aaef
 800aa98:	0800aadd 	.word	0x0800aadd
 800aa9c:	0800aaef 	.word	0x0800aaef
 800aaa0:	0800aaef 	.word	0x0800aaef
 800aaa4:	0800aaef 	.word	0x0800aaef
 800aaa8:	0800aaef 	.word	0x0800aaef
 800aaac:	0800aaef 	.word	0x0800aaef
 800aab0:	0800aab9 	.word	0x0800aab9
 800aab4:	0800aabf 	.word	0x0800aabf
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800aab8:	230a      	movs	r3, #10
 800aaba:	73fb      	strb	r3, [r7, #15]
		break;
 800aabc:	e019      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800aabe:	2306      	movs	r3, #6
 800aac0:	73fb      	strb	r3, [r7, #15]
		break;
 800aac2:	e016      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800aac4:	2304      	movs	r3, #4
 800aac6:	73fb      	strb	r3, [r7, #15]
		break;
 800aac8:	e013      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800aaca:	2302      	movs	r3, #2
 800aacc:	73fb      	strb	r3, [r7, #15]
		break;
 800aace:	e010      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800aad0:	2301      	movs	r3, #1
 800aad2:	73fb      	strb	r3, [r7, #15]
		break;
 800aad4:	e00d      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800aad6:	2307      	movs	r3, #7
 800aad8:	73fb      	strb	r3, [r7, #15]
		break;
 800aada:	e00a      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800aadc:	2309      	movs	r3, #9
 800aade:	73fb      	strb	r3, [r7, #15]
		break;
 800aae0:	e007      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800aae2:	2303      	movs	r3, #3
 800aae4:	73fb      	strb	r3, [r7, #15]
		break;
 800aae6:	e004      	b.n	800aaf2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
		break;
 800aaec:	e001      	b.n	800aaf2 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800aaee:	23ff      	movs	r3, #255	; 0xff
 800aaf0:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b08c      	sub	sp, #48	; 0x30
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	607b      	str	r3, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	72fb      	strb	r3, [r7, #11]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ab12:	2300      	movs	r3, #0
 800ab14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab26:	f003 031f 	and.w	r3, r3, #31
 800ab2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800ab2e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800ab32:	7afb      	ldrb	r3, [r7, #11]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff ff18 	bl	800a96c <ComputeRQL>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab48:	025b      	lsls	r3, r3, #9
 800ab4a:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab50:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ab56:	025b      	lsls	r3, r3, #9
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5e:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ab6c:	025b      	lsls	r3, r3, #9
 800ab6e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800ab70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab72:	6a3a      	ldr	r2, [r7, #32]
 800ab74:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800ab80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab82:	2200      	movs	r2, #0
 800ab84:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800ab86:	7abb      	ldrb	r3, [r7, #10]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	2b10      	cmp	r3, #16
 800ab8c:	d82c      	bhi.n	800abe8 <SetSimpleData+0xe8>
 800ab8e:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <SetSimpleData+0x94>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800abd9 	.word	0x0800abd9
 800ab98:	0800abd9 	.word	0x0800abd9
 800ab9c:	0800abd9 	.word	0x0800abd9
 800aba0:	0800abe9 	.word	0x0800abe9
 800aba4:	0800abe9 	.word	0x0800abe9
 800aba8:	0800abe9 	.word	0x0800abe9
 800abac:	0800abe9 	.word	0x0800abe9
 800abb0:	0800abe9 	.word	0x0800abe9
 800abb4:	0800abe9 	.word	0x0800abe9
 800abb8:	0800abe9 	.word	0x0800abe9
 800abbc:	0800abe9 	.word	0x0800abe9
 800abc0:	0800abe9 	.word	0x0800abe9
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abe9 	.word	0x0800abe9
 800abcc:	0800abe9 	.word	0x0800abe9
 800abd0:	0800abe9 	.word	0x0800abe9
 800abd4:	0800abd9 	.word	0x0800abd9
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800abd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abda:	2205      	movs	r2, #5
 800abdc:	76da      	strb	r2, [r3, #27]
		break;
 800abde:	e006      	b.n	800abee <SetSimpleData+0xee>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe2:	220d      	movs	r2, #13
 800abe4:	76da      	strb	r2, [r3, #27]
		break;
 800abe6:	e002      	b.n	800abee <SetSimpleData+0xee>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	2200      	movs	r2, #0
 800abec:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	7edb      	ldrb	r3, [r3, #27]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d108      	bne.n	800ac08 <SetSimpleData+0x108>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800abf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff ff30 	bl	800aa60 <ConvertStatusLite>
 800ac00:	4603      	mov	r3, r0
 800ac02:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ac0c:	025b      	lsls	r3, r3, #9
 800ac0e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a3a      	ldr	r2, [r7, #32]
 800ac14:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac1c:	025b      	lsls	r3, r3, #9
 800ac1e:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a3a      	ldr	r2, [r7, #32]
 800ac24:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800ac28:	f107 0314 	add.w	r3, r7, #20
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	2100      	movs	r1, #0
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff fd0e 	bl	800a652 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800ac36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac3a:	2b06      	cmp	r3, #6
 800ac3c:	bf0c      	ite	eq
 800ac3e:	2301      	moveq	r3, #1
 800ac40:	2300      	movne	r3, #0
 800ac42:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800ac44:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800ac46:	f107 0319 	add.w	r3, r7, #25
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7ff fca3 	bl	800a59a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800ac54:	7e7b      	ldrb	r3, [r7, #25]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d104      	bne.n	800ac64 <SetSimpleData+0x164>
 800ac5a:	7ffb      	ldrb	r3, [r7, #31]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d101      	bne.n	800ac64 <SetSimpleData+0x164>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <SetSimpleData+0x166>
 800ac64:	2300      	movs	r3, #0
 800ac66:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7fba      	ldrb	r2, [r7, #30]
 800ac6c:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800ac70:	f107 0314 	add.w	r3, r7, #20
 800ac74:	461a      	mov	r2, r3
 800ac76:	2101      	movs	r1, #1
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7ff fcea 	bl	800a652 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800ac7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	bf0c      	ite	eq
 800ac86:	2301      	moveq	r3, #1
 800ac88:	2300      	movne	r3, #0
 800ac8a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800ac8c:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800ac8e:	f107 0319 	add.w	r3, r7, #25
 800ac92:	461a      	mov	r2, r3
 800ac94:	2101      	movs	r1, #1
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7ff fc7f 	bl	800a59a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800ac9c:	7e7b      	ldrb	r3, [r7, #25]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d104      	bne.n	800acac <SetSimpleData+0x1ac>
 800aca2:	7f7b      	ldrb	r3, [r7, #29]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d101      	bne.n	800acac <SetSimpleData+0x1ac>
 800aca8:	2301      	movs	r3, #1
 800acaa:	e000      	b.n	800acae <SetSimpleData+0x1ae>
 800acac:	2300      	movs	r3, #0
 800acae:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	7fba      	ldrb	r2, [r7, #30]
 800acb4:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	8b1b      	ldrh	r3, [r3, #24]
 800acbc:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	7edb      	ldrb	r3, [r3, #27]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d110      	bne.n	800ace8 <SetSimpleData+0x1e8>
 800acc6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800acca:	2b00      	cmp	r3, #0
 800accc:	da0c      	bge.n	800ace8 <SetSimpleData+0x1e8>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800acce:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800acd2:	4b08      	ldr	r3, [pc, #32]	; (800acf4 <SetSimpleData+0x1f4>)
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	da03      	bge.n	800ace2 <SetSimpleData+0x1e2>
			pRangeData->RangeStatus =
 800acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acdc:	220e      	movs	r2, #14
 800acde:	76da      	strb	r2, [r3, #27]
 800ace0:	e002      	b.n	800ace8 <SetSimpleData+0x1e8>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	2200      	movs	r2, #0
 800ace6:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800ace8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800acec:	4618      	mov	r0, r3
 800acee:	3730      	adds	r7, #48	; 0x30
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	200002d4 	.word	0x200002d4

0800acf8 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b0a8      	sub	sp, #160	; 0xa0
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 800ad08:	f107 0308 	add.w	r3, r7, #8
 800ad0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800ad10:	221c      	movs	r2, #28
 800ad12:	21ff      	movs	r1, #255	; 0xff
 800ad14:	6838      	ldr	r0, [r7, #0]
 800ad16:	f004 fd94 	bl	800f842 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800ad1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ad1e:	2102      	movs	r1, #2
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f001 f888 	bl	800be36 <VL53L1_get_device_results>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800ad2c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d117      	bne.n	800ad64 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800ad34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad38:	789a      	ldrb	r2, [r3, #2]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800ad3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad42:	3304      	adds	r3, #4
 800ad44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800ad48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad4c:	78da      	ldrb	r2, [r3, #3]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad56:	2101      	movs	r1, #1
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff fed1 	bl	800ab00 <SetSimpleData>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad64:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3798      	adds	r7, #152	; 0x98
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800ad70:	b5b0      	push	{r4, r5, r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800ad84:	2162      	movs	r1, #98	; 0x62
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f002 f91a 	bl	800cfc0 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2201      	movs	r2, #1
 800ad96:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2201      	movs	r2, #1
 800ada2:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2201      	movs	r2, #1
 800ada8:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800adb0:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800adb8:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800adc0:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2264      	movs	r2, #100	; 0x64
 800adc6:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800adce:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f240 72db 	movw	r2, #2011	; 0x7db
 800adde:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f002 f8d0 	bl	800cf88 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d008      	beq.n	800ae00 <VL53L1_data_init+0x90>
 800adee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d104      	bne.n	800ae00 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f857 	bl	800aeaa <VL53L1_read_p2p_data>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f503 7388 	add.w	r3, r3, #272	; 0x110
	status =
 800ae06:	4618      	mov	r0, r3
 800ae08:	f001 fc00 	bl	800c60c <VL53L1_init_refspadchar_config_struct>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f503 7390 	add.w	r3, r3, #288	; 0x120
	status =
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 fc1c 	bl	800c654 <VL53L1_init_ssc_config_struct>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	status =
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f001 fc31 	bl	800c696 <VL53L1_init_xtalk_config_struct>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
	status =
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f001 fc8b 	bl	800c75a <VL53L1_init_offset_cal_config_struct>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	33a4      	adds	r3, #164	; 0xa4
	status =
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 fcab 	bl	800c7a8 <VL53L1_init_tuning_parm_storage_struct>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800ae56:	2120      	movs	r1, #32
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fcc1 	bl	800b7e0 <VL53L1_set_vhv_loopbound>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800ae62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d116      	bne.n	800ae98 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	7858      	ldrb	r0, [r3, #1]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	8b1c      	ldrh	r4, [r3, #24]
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	689d      	ldr	r5, [r3, #8]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	6912      	ldr	r2, [r2, #16]
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	6949      	ldr	r1, [r1, #20]
 800ae82:	9102      	str	r1, [sp, #8]
 800ae84:	9201      	str	r2, [sp, #4]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	462b      	mov	r3, r5
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fad8 	bl	800b444 <VL53L1_set_preset_mode>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f002 fdda 	bl	800da52 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800ae9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bdb0      	pop	{r4, r5, r7, pc}

0800aeaa <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800aeba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d108      	bne.n	800aed4 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f003 f9fd 	bl	800e2ca <VL53L1_get_static_nvm_managed>
 800aed0:	4603      	mov	r3, r0
 800aed2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800aed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d107      	bne.n	800aeec <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	3342      	adds	r3, #66	; 0x42
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f003 fb2f 	bl	800e546 <VL53L1_get_customer_nvm_managed>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800aeec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d115      	bne.n	800af20 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f004 fa08 	bl	800f312 <VL53L1_get_nvm_copy_data>
 800af02:	4603      	mov	r3, r0
 800af04:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800af06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d108      	bne.n	800af20 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	33f0      	adds	r3, #240	; 0xf0
 800af18:	4619      	mov	r1, r3
 800af1a:	4610      	mov	r0, r2
 800af1c:	f002 f9b3 	bl	800d286 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800af20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
		status =
 800af2e:	461a      	mov	r2, r3
 800af30:	21de      	movs	r1, #222	; 0xde
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f003 f80a 	bl	800df4c <VL53L1_RdWord>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800af42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af46:	d204      	bcs.n	800af52 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800af4e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800af52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d107      	bne.n	800af6a <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	339e      	adds	r3, #158	; 0x9e
		status =
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f990 	bl	800b286 <VL53L1_get_mode_mitigation_roi>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d114      	bne.n	800af9e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10f      	bne.n	800af9e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800af94:	011b      	lsls	r3, r3, #4
 800af96:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800af9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800afaa:	b480      	push	{r7}
 800afac:	b085      	sub	sp, #20
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800afc6:	23f1      	movs	r3, #241	; 0xf1
 800afc8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800afca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10c      	bne.n	800afec <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800afde:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800afec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b018:	23f1      	movs	r3, #241	; 0xf1
 800b01a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800b01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d109      	bne.n	800b038 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800b030:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800b038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b056:	2300      	movs	r3, #0
 800b058:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b068:	23f1      	movs	r3, #241	; 0xf1
 800b06a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800b06c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d11b      	bne.n	800b0ac <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
		status =
 800b098:	9201      	str	r2, [sp, #4]
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	460b      	mov	r3, r1
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	68b8      	ldr	r0, [r7, #8]
 800b0a4:	f002 fc07 	bl	800d8b6 <VL53L1_calc_timeout_register_values>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800b0ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b0e0:	23f1      	movs	r3, #241	; 0xf1
 800b0e2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800b0e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d14a      	bne.n	800b182 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
		macro_period_us =
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f002 fa86 	bl	800d60c <VL53L1_calc_macro_period_us>
 800b100:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800b108:	6979      	ldr	r1, [r7, #20]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f002 fb3f 	bl	800d78e <VL53L1_calc_timeout_us>
 800b110:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800b11c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800b11e:	8a7b      	ldrh	r3, [r7, #18]
 800b120:	021b      	lsls	r3, r3, #8
 800b122:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800b12a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800b12c:	4413      	add	r3, r2
 800b12e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800b130:	8a7b      	ldrh	r3, [r7, #18]
 800b132:	6979      	ldr	r1, [r7, #20]
 800b134:	4618      	mov	r0, r3
 800b136:	f002 fb63 	bl	800d800 <VL53L1_calc_decoded_timeout_us>
 800b13a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800b146:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800b148:	8a7b      	ldrh	r3, [r7, #18]
 800b14a:	021b      	lsls	r3, r3, #8
 800b14c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800b154:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800b156:	4413      	add	r3, r2
 800b158:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800b15a:	8a7b      	ldrh	r3, [r7, #18]
 800b15c:	6979      	ldr	r1, [r7, #20]
 800b15e:	4618      	mov	r0, r3
 800b160:	f002 fb4e 	bl	800d800 <VL53L1_calc_decoded_timeout_us>
 800b164:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800b182:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3720      	adds	r7, #32
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800b18e:	b480      	push	{r7}
 800b190:	b087      	sub	sp, #28
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	460b      	mov	r3, r1
 800b198:	607a      	str	r2, [r7, #4]
 800b19a:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	2b07      	cmp	r3, #7
 800b1ac:	d81c      	bhi.n	800b1e8 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800b1ae:	7afb      	ldrb	r3, [r7, #11]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d004      	beq.n	800b1be <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800b1b4:	7afb      	ldrb	r3, [r7, #11]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1bc:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800b1c4:	7dbb      	ldrb	r3, [r7, #22]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800b1ce:	7afb      	ldrb	r3, [r7, #11]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00b      	beq.n	800b1ec <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	7afb      	ldrb	r3, [r7, #11]
 800b1dc:	fa42 f303 	asr.w	r3, r2, r3
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	e001      	b.n	800b1ec <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b1e8:	23fc      	movs	r3, #252	; 0xfc
 800b1ea:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800b1ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b206:	2300      	movs	r3, #0
 800b208:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	7858      	ldrb	r0, [r3, #1]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	7819      	ldrb	r1, [r3, #0]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800b21c:	461a      	mov	r2, r3
 800b21e:	f002 fbc3 	bl	800d9a8 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	7898      	ldrb	r0, [r3, #2]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	78d9      	ldrb	r1, [r3, #3]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800b230:	461a      	mov	r2, r3
 800b232:	f002 fbf8 	bl	800da26 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800b236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	3301      	adds	r3, #1
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	4619      	mov	r1, r3
 800b262:	f002 fd67 	bl	800dd34 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	1c99      	adds	r1, r3, #2
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	3303      	adds	r3, #3
 800b274:	461a      	mov	r2, r3
 800b276:	f002 fbbe 	bl	800d9f6 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800b27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b086      	sub	sp, #24
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b290:	2300      	movs	r3, #0
 800b292:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800b2aa:	f107 020e 	add.w	r2, r7, #14
 800b2ae:	f107 010d 	add.w	r1, r7, #13
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f002 fd3e 	bl	800dd34 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800b2b8:	7bba      	ldrb	r2, [r7, #14]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800b2be:	7b7a      	ldrb	r2, [r7, #13]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800b2ca:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	091b      	lsrs	r3, r3, #4
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	f003 030f 	and.w	r3, r3, #15
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800b2e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	607a      	str	r2, [r7, #4]
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3b01      	subs	r3, #1
 800b30c:	2b25      	cmp	r3, #37	; 0x25
 800b30e:	f200 808e 	bhi.w	800b42e <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800b312:	a201      	add	r2, pc, #4	; (adr r2, 800b318 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b3b1 	.word	0x0800b3b1
 800b31c:	0800b3b1 	.word	0x0800b3b1
 800b320:	0800b3b1 	.word	0x0800b3b1
 800b324:	0800b3b1 	.word	0x0800b3b1
 800b328:	0800b3b1 	.word	0x0800b3b1
 800b32c:	0800b3db 	.word	0x0800b3db
 800b330:	0800b3db 	.word	0x0800b3db
 800b334:	0800b3db 	.word	0x0800b3db
 800b338:	0800b42f 	.word	0x0800b42f
 800b33c:	0800b42f 	.word	0x0800b42f
 800b340:	0800b42f 	.word	0x0800b42f
 800b344:	0800b42f 	.word	0x0800b42f
 800b348:	0800b42f 	.word	0x0800b42f
 800b34c:	0800b42f 	.word	0x0800b42f
 800b350:	0800b42f 	.word	0x0800b42f
 800b354:	0800b42f 	.word	0x0800b42f
 800b358:	0800b3b1 	.word	0x0800b3b1
 800b35c:	0800b3db 	.word	0x0800b3db
 800b360:	0800b42f 	.word	0x0800b42f
 800b364:	0800b42f 	.word	0x0800b42f
 800b368:	0800b42f 	.word	0x0800b42f
 800b36c:	0800b42f 	.word	0x0800b42f
 800b370:	0800b42f 	.word	0x0800b42f
 800b374:	0800b42f 	.word	0x0800b42f
 800b378:	0800b42f 	.word	0x0800b42f
 800b37c:	0800b42f 	.word	0x0800b42f
 800b380:	0800b42f 	.word	0x0800b42f
 800b384:	0800b42f 	.word	0x0800b42f
 800b388:	0800b42f 	.word	0x0800b42f
 800b38c:	0800b42f 	.word	0x0800b42f
 800b390:	0800b42f 	.word	0x0800b42f
 800b394:	0800b42f 	.word	0x0800b42f
 800b398:	0800b42f 	.word	0x0800b42f
 800b39c:	0800b42f 	.word	0x0800b42f
 800b3a0:	0800b42f 	.word	0x0800b42f
 800b3a4:	0800b405 	.word	0x0800b405
 800b3a8:	0800b405 	.word	0x0800b405
 800b3ac:	0800b405 	.word	0x0800b405
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	601a      	str	r2, [r3, #0]
	break;
 800b3d8:	e02c      	b.n	800b434 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	601a      	str	r2, [r3, #0]
	break;
 800b402:	e017      	b.n	800b434 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	601a      	str	r2, [r3, #0]
	break;
 800b42c:	e002      	b.n	800b434 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b42e:	23fc      	movs	r3, #252	; 0xfc
 800b430:	75fb      	strb	r3, [r7, #23]
		break;
 800b432:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b092      	sub	sp, #72	; 0x48
 800b448:	af04      	add	r7, sp, #16
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	607b      	str	r3, [r7, #4]
 800b44e:	460b      	mov	r3, r1
 800b450:	72fb      	strb	r3, [r7, #11]
 800b452:	4613      	mov	r3, r2
 800b454:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b456:	2300      	movs	r3, #0
 800b458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b466:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b46e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800b476:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800b47e:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b486:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	33a4      	adds	r3, #164	; 0xa4
 800b48c:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800b494:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	7afa      	ldrb	r2, [r7, #11]
 800b49a:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4a0:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4a6:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4ac:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800b4ae:	2103      	movs	r1, #3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f001 fd85 	bl	800cfc0 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800b4b6:	7afb      	ldrb	r3, [r7, #11]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	2b25      	cmp	r3, #37	; 0x25
 800b4bc:	f200 810c 	bhi.w	800b6d8 <VL53L1_set_preset_mode+0x294>
 800b4c0:	a201      	add	r2, pc, #4	; (adr r2, 800b4c8 <VL53L1_set_preset_mode+0x84>)
 800b4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c6:	bf00      	nop
 800b4c8:	0800b561 	.word	0x0800b561
 800b4cc:	0800b57d 	.word	0x0800b57d
 800b4d0:	0800b599 	.word	0x0800b599
 800b4d4:	0800b5b5 	.word	0x0800b5b5
 800b4d8:	0800b5d1 	.word	0x0800b5d1
 800b4dc:	0800b5ed 	.word	0x0800b5ed
 800b4e0:	0800b609 	.word	0x0800b609
 800b4e4:	0800b625 	.word	0x0800b625
 800b4e8:	0800b6d9 	.word	0x0800b6d9
 800b4ec:	0800b6d9 	.word	0x0800b6d9
 800b4f0:	0800b6d9 	.word	0x0800b6d9
 800b4f4:	0800b6d9 	.word	0x0800b6d9
 800b4f8:	0800b6d9 	.word	0x0800b6d9
 800b4fc:	0800b6d9 	.word	0x0800b6d9
 800b500:	0800b6d9 	.word	0x0800b6d9
 800b504:	0800b6d9 	.word	0x0800b6d9
 800b508:	0800b641 	.word	0x0800b641
 800b50c:	0800b65d 	.word	0x0800b65d
 800b510:	0800b6d9 	.word	0x0800b6d9
 800b514:	0800b6d9 	.word	0x0800b6d9
 800b518:	0800b6d9 	.word	0x0800b6d9
 800b51c:	0800b6d9 	.word	0x0800b6d9
 800b520:	0800b6d9 	.word	0x0800b6d9
 800b524:	0800b6d9 	.word	0x0800b6d9
 800b528:	0800b6d9 	.word	0x0800b6d9
 800b52c:	0800b6d9 	.word	0x0800b6d9
 800b530:	0800b6d9 	.word	0x0800b6d9
 800b534:	0800b6d9 	.word	0x0800b6d9
 800b538:	0800b6d9 	.word	0x0800b6d9
 800b53c:	0800b6d9 	.word	0x0800b6d9
 800b540:	0800b6d9 	.word	0x0800b6d9
 800b544:	0800b6d9 	.word	0x0800b6d9
 800b548:	0800b6d9 	.word	0x0800b6d9
 800b54c:	0800b6d9 	.word	0x0800b6d9
 800b550:	0800b6d9 	.word	0x0800b6d9
 800b554:	0800b679 	.word	0x0800b679
 800b558:	0800b699 	.word	0x0800b699
 800b55c:	0800b6b9 	.word	0x0800b6b9

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b56e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b570:	f001 f9a8 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b57a:	e0b1      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	9301      	str	r3, [sp, #4]
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b58a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b58c:	f001 fab8 	bl	800cb00 <VL53L1_preset_mode_standard_ranging_short_range>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b596:	e0a3      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	9301      	str	r3, [sp, #4]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5a8:	f001 faeb 	bl	800cb82 <VL53L1_preset_mode_standard_ranging_long_range>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b5b2:	e095      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5c4:	f001 fb1e 	bl	800cc04 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b5ce:	e087      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5e0:	f001 fb35 	bl	800cc4e <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b5ea:	e079      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5fc:	f001 fb4c 	bl	800cc98 <VL53L1_preset_mode_timed_ranging>
 800b600:	4603      	mov	r3, r0
 800b602:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b606:	e06b      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b618:	f001 fb78 	bl	800cd0c <VL53L1_preset_mode_timed_ranging_short_range>
 800b61c:	4603      	mov	r3, r0
 800b61e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b622:	e05d      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b634:	f001 fba4 	bl	800cd80 <VL53L1_preset_mode_timed_ranging_long_range>
 800b638:	4603      	mov	r3, r0
 800b63a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b63e:	e04f      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b64c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b64e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b650:	f001 fc78 	bl	800cf44 <VL53L1_preset_mode_olt>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b65a:	e041      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	9301      	str	r3, [sp, #4]
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b66a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b66c:	f001 fc34 	bl	800ced8 <VL53L1_preset_mode_singleshot_ranging>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b676:	e033      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b68a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b68c:	f001 fbd8 	bl	800ce40 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800b690:	4603      	mov	r3, r0
 800b692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800b696:	e023      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	9302      	str	r3, [sp, #8]
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6ac:	f001 fba2 	bl	800cdf4 <VL53L1_preset_mode_low_power_auto_ranging>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800b6b6:	e013      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	9302      	str	r3, [sp, #8]
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6cc:	f001 fbde 	bl	800ce8c <VL53L1_preset_mode_low_power_auto_long_ranging>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800b6d6:	e003      	b.n	800b6e0 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b6d8:	23fc      	movs	r3, #252	; 0xfc
 800b6da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800b6de:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800b6e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d105      	bne.n	800b6f4 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ea:	893a      	ldrh	r2, [r7, #8]
 800b6ec:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	893a      	ldrh	r2, [r7, #8]
 800b6f2:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800b6f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d108      	bne.n	800b70e <VL53L1_set_preset_mode+0x2ca>
		status =
 800b6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b700:	6879      	ldr	r1, [r7, #4]
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7ff fca0 	bl	800b048 <VL53L1_set_timeouts_us>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800b70e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b712:	2b00      	cmp	r3, #0
 800b714:	d106      	bne.n	800b724 <VL53L1_set_preset_mode+0x2e0>
		status =
 800b716:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f7ff fc46 	bl	800afaa <VL53L1_set_inter_measurement_period_ms>
 800b71e:	4603      	mov	r3, r0
 800b720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800b724:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3738      	adds	r7, #56	; 0x38
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b74c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	887a      	ldrh	r2, [r7, #2]
 800b774:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800b778:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b792:	2300      	movs	r3, #0
 800b794:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b7a4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	887a      	ldrh	r2, [r7, #2]
 800b7cc:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800b7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b7fa:	f003 0303 	and.w	r3, r3, #3
 800b7fe:	b2da      	uxtb	r2, r3
			(vhv_loopbound * 4);
 800b800:	78fb      	ldrb	r3, [r7, #3]
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	b2db      	uxtb	r3, r3
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b806:	4413      	add	r3, r2
 800b808:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	LOG_FUNCTION_END(status);

	return status;
 800b810:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b814:	4618      	mov	r0, r3
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b0d0      	sub	sp, #320	; 0x140
 800b824:	af00      	add	r7, sp, #0
 800b826:	1d3b      	adds	r3, r7, #4
 800b828:	6018      	str	r0, [r3, #0]
 800b82a:	4608      	mov	r0, r1
 800b82c:	4611      	mov	r1, r2
 800b82e:	1cfb      	adds	r3, r7, #3
 800b830:	4602      	mov	r2, r0
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	1cbb      	adds	r3, r7, #2
 800b836:	460a      	mov	r2, r1
 800b838:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b83a:	2300      	movs	r3, #0
 800b83c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b840:	1d3b      	adds	r3, r7, #4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800b848:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b84c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b850:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800b854:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b858:	3342      	adds	r3, #66	; 0x42
 800b85a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800b85e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b862:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b866:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800b86a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b86e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b872:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800b876:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b87a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800b87e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800b882:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b886:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800b88a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800b88e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b892:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b896:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800b89a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b89e:	332c      	adds	r3, #44	; 0x2c
 800b8a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800b8a4:	f107 030c 	add.w	r3, r7, #12
 800b8a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800b8c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8c8:	1cfa      	adds	r2, r7, #3
 800b8ca:	7812      	ldrb	r2, [r2, #0]
 800b8cc:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800b8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d2:	791b      	ldrb	r3, [r3, #4]
 800b8d4:	b25b      	sxtb	r3, r3
 800b8d6:	f003 030f 	and.w	r3, r3, #15
 800b8da:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800b8dc:	1cfb      	adds	r3, r7, #3
 800b8de:	f993 3000 	ldrsb.w	r3, [r3]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	b25b      	sxtb	r3, r3
 800b8e6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800b8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ec:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800b8ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8f2:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800b8f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8fa:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800b8fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b902:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800b906:	2bff      	cmp	r3, #255	; 0xff
 800b908:	d104      	bne.n	800b914 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800b90a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b914:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b918:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d133      	bne.n	800b988 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800b920:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b924:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d12d      	bne.n	800b988 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800b92c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b930:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800b934:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b938:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800b93c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b940:	2220      	movs	r2, #32
 800b942:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800b946:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b94a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800b94e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10c      	bne.n	800b970 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800b956:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b95a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800b95e:	b29b      	uxth	r3, r3
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	b29b      	uxth	r3, r3
 800b964:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800b966:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b96a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800b96e:	e004      	b.n	800b97a <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800b970:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b974:	2200      	movs	r2, #0
 800b976:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800b97a:	1cbb      	adds	r3, r7, #2
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b04      	cmp	r3, #4
 800b980:	d802      	bhi.n	800b988 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800b982:	1cbb      	adds	r3, r7, #2
 800b984:	2205      	movs	r2, #5
 800b986:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b988:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b98c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800b990:	2b01      	cmp	r3, #1
 800b992:	d110      	bne.n	800b9b6 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800b994:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b998:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d10a      	bne.n	800b9b6 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800b9a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9a4:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800b9a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9ac:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800b9b0:	1cbb      	adds	r3, r7, #2
 800b9b2:	2206      	movs	r2, #6
 800b9b4:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800b9b6:	1cbb      	adds	r3, r7, #2
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	d827      	bhi.n	800ba10 <VL53L1_init_and_start_range+0x1f0>
 800b9c0:	a201      	add	r2, pc, #4	; (adr r2, 800b9c8 <VL53L1_init_and_start_range+0x1a8>)
 800b9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c6:	bf00      	nop
 800b9c8:	0800ba09 	.word	0x0800ba09
 800b9cc:	0800ba01 	.word	0x0800ba01
 800b9d0:	0800b9f9 	.word	0x0800b9f9
 800b9d4:	0800b9f1 	.word	0x0800b9f1
 800b9d8:	0800b9e9 	.word	0x0800b9e9
 800b9dc:	0800b9e1 	.word	0x0800b9e1
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b9e6:	e017      	b.n	800ba18 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800b9e8:	230d      	movs	r3, #13
 800b9ea:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b9ee:	e013      	b.n	800ba18 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800b9f0:	2324      	movs	r3, #36	; 0x24
 800b9f2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b9f6:	e00f      	b.n	800ba18 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800b9f8:	2344      	movs	r3, #68	; 0x44
 800b9fa:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b9fe:	e00b      	b.n	800ba18 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800ba00:	235a      	movs	r3, #90	; 0x5a
 800ba02:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ba06:	e007      	b.n	800ba18 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800ba08:	2371      	movs	r3, #113	; 0x71
 800ba0a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ba0e:	e003      	b.n	800ba18 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800ba10:	2383      	movs	r3, #131	; 0x83
 800ba12:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ba16:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800ba18:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ba1c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800ba20:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800ba24:	f107 030c 	add.w	r3, r7, #12
 800ba28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800ba32:	e00b      	b.n	800ba4c <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800ba34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800ba3e:	2200      	movs	r2, #0
 800ba40:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800ba42:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800ba46:	3301      	adds	r3, #1
 800ba48:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800ba4c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800ba50:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d3ed      	bcc.n	800ba34 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800ba58:	1cbb      	adds	r3, r7, #2
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	2b05      	cmp	r3, #5
 800ba5e:	d917      	bls.n	800ba90 <VL53L1_init_and_start_range+0x270>
 800ba60:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d113      	bne.n	800ba90 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ba68:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ba6c:	f1c3 0301 	rsb	r3, r3, #1
 800ba70:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ba74:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800ba78:	f107 020c 	add.w	r2, r7, #12
 800ba7c:	4413      	add	r3, r2
		status =
 800ba7e:	461a      	mov	r2, r3
 800ba80:	210b      	movs	r1, #11
 800ba82:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800ba86:	f002 fb6b 	bl	800e160 <VL53L1_i2c_encode_static_nvm_managed>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800ba90:	1cbb      	adds	r3, r7, #2
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d917      	bls.n	800bac8 <VL53L1_init_and_start_range+0x2a8>
 800ba98:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d113      	bne.n	800bac8 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800baa0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800baa4:	f1c3 030d 	rsb	r3, r3, #13
 800baa8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800baac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800bab0:	f107 020c 	add.w	r2, r7, #12
 800bab4:	4413      	add	r3, r2
		status =
 800bab6:	461a      	mov	r2, r3
 800bab8:	2117      	movs	r1, #23
 800baba:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800babe:	f002 fc2b 	bl	800e318 <VL53L1_i2c_encode_customer_nvm_managed>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800bac8:	1cbb      	adds	r3, r7, #2
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d917      	bls.n	800bb00 <VL53L1_init_and_start_range+0x2e0>
 800bad0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d113      	bne.n	800bb00 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800bad8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800badc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800bae0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bae4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800bae8:	f107 020c 	add.w	r2, r7, #12
 800baec:	4413      	add	r3, r2
		status =
 800baee:	461a      	mov	r2, r3
 800baf0:	2120      	movs	r1, #32
 800baf2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800baf6:	f002 fd4d 	bl	800e594 <VL53L1_i2c_encode_static_config>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800bb00:	1cbb      	adds	r3, r7, #2
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d917      	bls.n	800bb38 <VL53L1_init_and_start_range+0x318>
 800bb08:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d113      	bne.n	800bb38 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800bb10:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bb14:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800bb18:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bb1c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800bb20:	f107 020c 	add.w	r2, r7, #12
 800bb24:	4413      	add	r3, r2
		status =
 800bb26:	461a      	mov	r2, r3
 800bb28:	2116      	movs	r1, #22
 800bb2a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800bb2e:	f002 fe14 	bl	800e75a <VL53L1_i2c_encode_general_config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800bb38:	1cbb      	adds	r3, r7, #2
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d917      	bls.n	800bb70 <VL53L1_init_and_start_range+0x350>
 800bb40:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d113      	bne.n	800bb70 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800bb48:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bb4c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800bb50:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bb54:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800bb58:	f107 020c 	add.w	r2, r7, #12
 800bb5c:	4413      	add	r3, r2
		status =
 800bb5e:	461a      	mov	r2, r3
 800bb60:	2117      	movs	r1, #23
 800bb62:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bb66:	f002 fe7c 	bl	800e862 <VL53L1_i2c_encode_timing_config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800bb70:	1cbb      	adds	r3, r7, #2
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d036      	beq.n	800bbe6 <VL53L1_init_and_start_range+0x3c6>
 800bb78:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d132      	bne.n	800bbe6 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800bb80:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bb84:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800bb88:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800bb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb90:	791b      	ldrb	r3, [r3, #4]
 800bb92:	f003 0320 	and.w	r3, r3, #32
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d017      	beq.n	800bbca <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800bb9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bb9e:	789b      	ldrb	r3, [r3, #2]
 800bba0:	f043 0301 	orr.w	r3, r3, #1
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bbaa:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800bbac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bbb0:	789b      	ldrb	r3, [r3, #2]
 800bbb2:	f043 0301 	orr.w	r3, r3, #1
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bbbc:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800bbbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bbc2:	789a      	ldrb	r2, [r3, #2]
 800bbc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bbc8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bbca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800bbce:	f107 020c 	add.w	r2, r7, #12
 800bbd2:	4413      	add	r3, r2
		status =
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	2112      	movs	r1, #18
 800bbd8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800bbdc:	f002 fec3 	bl	800e966 <VL53L1_i2c_encode_dynamic_config>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800bbe6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d113      	bne.n	800bc16 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800bbee:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bbf2:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800bbf6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bbfa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800bbfe:	f107 020c 	add.w	r2, r7, #12
 800bc02:	4413      	add	r3, r2
		status =
 800bc04:	461a      	mov	r2, r3
 800bc06:	2105      	movs	r1, #5
 800bc08:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800bc0c:	f002 ff30 	bl	800ea70 <VL53L1_i2c_encode_system_control>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800bc16:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10c      	bne.n	800bc38 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800bc1e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
		status =
 800bc22:	f107 020c 	add.w	r2, r7, #12
 800bc26:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800bc2a:	1d38      	adds	r0, r7, #4
 800bc2c:	6800      	ldr	r0, [r0, #0]
 800bc2e:	f002 f8f1 	bl	800de14 <VL53L1_WriteMulti>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800bc38:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d106      	bne.n	800bc4e <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800bc40:	1d3b      	adds	r3, r7, #4
 800bc42:	6818      	ldr	r0, [r3, #0]
 800bc44:	f001 f9e6 	bl	800d014 <VL53L1_update_ll_driver_rd_state>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800bc4e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800bc56:	1d3b      	adds	r3, r7, #4
 800bc58:	6818      	ldr	r0, [r3, #0]
 800bc5a:	f001 faae 	bl	800d1ba <VL53L1_update_ll_driver_cfg_state>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800bc64:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop

0800bc74 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bc8a:	b25b      	sxtb	r3, r3
 800bc8c:	f003 030f 	and.w	r3, r3, #15
 800bc90:	b25b      	sxtb	r3, r3
 800bc92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc96:	b25b      	sxtb	r3, r3
 800bc98:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f002 ff1c 	bl	800eae6 <VL53L1_set_system_control>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bcb8:	f003 030f 	and.w	r3, r3, #15
 800bcbc:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800bcc4:	2103      	movs	r1, #3
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 f97a 	bl	800cfc0 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d102      	bne.n	800bcdc <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f001 feef 	bl	800daba <VL53L1_low_power_auto_data_stop_range>

	return status;
 800bcdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b0c8      	sub	sp, #288	; 0x120
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	1d3b      	adds	r3, r7, #4
 800bcf0:	6018      	str	r0, [r3, #0]
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	1cfb      	adds	r3, r7, #3
 800bcf6:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bcfe:	1d3b      	adds	r3, r7, #4
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800bd06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd0a:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800bd0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800bd12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bd1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800bd1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd22:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800bd26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800bd2a:	2388      	movs	r3, #136	; 0x88
 800bd2c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800bd3c:	1cfb      	adds	r3, r7, #3
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d008      	beq.n	800bd56 <VL53L1_get_measurement_results+0x6e>
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d10d      	bne.n	800bd64 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800bd48:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bd4c:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800bd50:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800bd54:	e00a      	b.n	800bd6c <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800bd56:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bd5a:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800bd5e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800bd62:	e003      	b.n	800bd6c <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800bd64:	232c      	movs	r3, #44	; 0x2c
 800bd66:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800bd6a:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bd6c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10c      	bne.n	800bd8e <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800bd74:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
		status =
 800bd78:	f107 0208 	add.w	r2, r7, #8
 800bd7c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800bd80:	1d38      	adds	r0, r7, #4
 800bd82:	6800      	ldr	r0, [r0, #0]
 800bd84:	f002 f87c 	bl	800de80 <VL53L1_ReadMulti>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800bd8e:	1cfb      	adds	r3, r7, #3
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d917      	bls.n	800bdc6 <VL53L1_get_measurement_results+0xde>
 800bd96:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d113      	bne.n	800bdc6 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800bd9e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bda2:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800bda6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800bdaa:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800bdae:	f107 0208 	add.w	r2, r7, #8
 800bdb2:	4413      	add	r3, r2
		status =
 800bdb4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800bdb8:	4619      	mov	r1, r3
 800bdba:	2038      	movs	r0, #56	; 0x38
 800bdbc:	f003 f811 	bl	800ede2 <VL53L1_i2c_decode_debug_results>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800bdc6:	1cfb      	adds	r3, r7, #3
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d017      	beq.n	800bdfe <VL53L1_get_measurement_results+0x116>
 800bdce:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d113      	bne.n	800bdfe <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800bdd6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bdda:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800bdde:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800bde2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800bde6:	f107 0208 	add.w	r2, r7, #8
 800bdea:	4413      	add	r3, r2
		status =
 800bdec:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	2021      	movs	r0, #33	; 0x21
 800bdf4:	f002 ff94 	bl	800ed20 <VL53L1_i2c_decode_core_results>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800bdfe:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800be02:	2b00      	cmp	r3, #0
 800be04:	d110      	bne.n	800be28 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800be0c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800be10:	f107 0208 	add.w	r2, r7, #8
 800be14:	4413      	add	r3, r2
		status =
 800be16:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800be1a:	4619      	mov	r1, r3
 800be1c:	202c      	movs	r0, #44	; 0x2c
 800be1e:	f002 fe89 	bl	800eb34 <VL53L1_i2c_decode_system_results>
 800be22:	4603      	mov	r3, r0
 800be24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800be28:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b088      	sub	sp, #32
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	60f8      	str	r0, [r7, #12]
 800be3e:	460b      	mov	r3, r1
 800be40:	607a      	str	r2, [r7, #4]
 800be42:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800be44:	2300      	movs	r3, #0
 800be46:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800be52:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800be58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d106      	bne.n	800be6e <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	4619      	mov	r1, r3
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f7ff ff3f 	bl	800bce8 <VL53L1_get_measurement_results>
 800be6a:	4603      	mov	r3, r0
 800be6c:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800be6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10c      	bne.n	800be90 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800be7c:	4618      	mov	r0, r3
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f000 f86c 	bl	800bf68 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800be96:	2b01      	cmp	r3, #1
 800be98:	d12d      	bne.n	800bef6 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800be9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10e      	bne.n	800bec0 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d109      	bne.n	800bec0 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f001 fe5e 	bl	800db6e <VL53L1_low_power_auto_setup_manual_calibration>
 800beb2:	4603      	mov	r3, r0
 800beb4:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800bebe:	e00c      	b.n	800beda <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800bec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d108      	bne.n	800beda <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d103      	bne.n	800beda <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2202      	movs	r2, #2
 800bed6:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800bee0:	2bff      	cmp	r3, #255	; 0xff
 800bee2:	d008      	beq.n	800bef6 <VL53L1_get_device_results+0xc0>
 800bee4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d104      	bne.n	800bef6 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f001 fe83 	bl	800dbf8 <VL53L1_low_power_auto_update_DSS>
 800bef2:	4603      	mov	r3, r0
 800bef4:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800bf0a:	2284      	movs	r2, #132	; 0x84
 800bf0c:	6939      	ldr	r1, [r7, #16]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f003 fc8c 	bl	800f82c <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800bf14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d104      	bne.n	800bf26 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f001 f901 	bl	800d124 <VL53L1_check_ll_driver_rd_state>
 800bf22:	4603      	mov	r3, r0
 800bf24:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800bf26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3720      	adds	r7, #32
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bf42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d107      	bne.n	800bf5a <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800bf4a:	78fb      	ldrb	r3, [r7, #3]
 800bf4c:	2203      	movs	r2, #3
 800bf4e:	4619      	mov	r1, r3
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff fc65 	bl	800b820 <VL53L1_init_and_start_range>
 800bf56:	4603      	mov	r3, r0
 800bf58:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800bf5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
	...

0800bf68 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b089      	sub	sp, #36	; 0x24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	78da      	ldrb	r2, [r3, #3]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800bf90:	2300      	movs	r3, #0
 800bf92:	77fb      	strb	r3, [r7, #31]
 800bf94:	e0d0      	b.n	800c138 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	7ffa      	ldrb	r2, [r7, #31]
 800bf9a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	78db      	ldrb	r3, [r3, #3]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	785b      	ldrb	r3, [r3, #1]
 800bfae:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d104      	bne.n	800bfc0 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	2213      	movs	r2, #19
 800bfba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfbe:	e007      	b.n	800bfd0 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	785b      	ldrb	r3, [r3, #1]
 800bfc4:	f003 031f 	and.w	r3, r3, #31
 800bfc8:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800bfd0:	7ffb      	ldrb	r3, [r7, #31]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d05d      	beq.n	800c096 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800bfda:	e0a7      	b.n	800c12c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	789b      	ldrb	r3, [r3, #2]
 800bfe0:	2b07      	cmp	r3, #7
 800bfe2:	d104      	bne.n	800bfee <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	821a      	strh	r2, [r3, #16]
 800bfec:	e00c      	b.n	800c008 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	789b      	ldrb	r3, [r3, #2]
 800bff2:	2b08      	cmp	r3, #8
 800bff4:	d104      	bne.n	800c000 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	821a      	strh	r2, [r3, #16]
 800bffe:	e003      	b.n	800c008 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	895b      	ldrh	r3, [r3, #10]
 800c024:	015b      	lsls	r3, r3, #5
 800c026:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c02e:	d302      	bcc.n	800c036 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800c030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c034:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	b29a      	uxth	r2, r3
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800c04a:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	fb02 f303 	mul.w	r3, r2, r3
 800c054:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c05c:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	da01      	bge.n	800c068 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800c064:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c068:	12db      	asrs	r3, r3, #11
 800c06a:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	b21a      	sxth	r2, r3
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	621a      	str	r2, [r3, #32]

			break;
 800c094:	e04a      	b.n	800c12c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ac:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	8bdb      	ldrh	r3, [r3, #30]
 800c0ba:	015b      	lsls	r3, r3, #5
 800c0bc:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0c4:	d302      	bcc.n	800c0cc <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800c0c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0ca:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800c0e0:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ea:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0f2:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	da01      	bge.n	800c0fe <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800c0fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c0fe:	12db      	asrs	r3, r3, #11
 800c100:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	b21a      	sxth	r2, r3
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	621a      	str	r2, [r3, #32]

			break;
 800c12a:	bf00      	nop
		}

		pdata++;
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	3340      	adds	r3, #64	; 0x40
 800c130:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800c132:	7ffb      	ldrb	r3, [r7, #31]
 800c134:	3301      	adds	r3, #1
 800c136:	77fb      	strb	r3, [r7, #31]
 800c138:	7ffb      	ldrb	r3, [r7, #31]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	f67f af2b 	bls.w	800bf96 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2200      	movs	r2, #0
 800c144:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	785b      	ldrb	r3, [r3, #1]
 800c14a:	f003 031f 	and.w	r3, r3, #31
 800c14e:	3b01      	subs	r3, #1
 800c150:	2b10      	cmp	r3, #16
 800c152:	d831      	bhi.n	800c1b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x250>
 800c154:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <VL53L1_copy_sys_and_core_results_to_range_results+0x1f4>)
 800c156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15a:	bf00      	nop
 800c15c:	0800c1a1 	.word	0x0800c1a1
 800c160:	0800c1a1 	.word	0x0800c1a1
 800c164:	0800c1a1 	.word	0x0800c1a1
 800c168:	0800c1b9 	.word	0x0800c1b9
 800c16c:	0800c1b9 	.word	0x0800c1b9
 800c170:	0800c1b9 	.word	0x0800c1b9
 800c174:	0800c1b9 	.word	0x0800c1b9
 800c178:	0800c1b9 	.word	0x0800c1b9
 800c17c:	0800c1b9 	.word	0x0800c1b9
 800c180:	0800c1b9 	.word	0x0800c1b9
 800c184:	0800c1b9 	.word	0x0800c1b9
 800c188:	0800c1b9 	.word	0x0800c1b9
 800c18c:	0800c1a1 	.word	0x0800c1a1
 800c190:	0800c1b9 	.word	0x0800c1b9
 800c194:	0800c1b9 	.word	0x0800c1b9
 800c198:	0800c1b9 	.word	0x0800c1b9
 800c19c:	0800c1a1 	.word	0x0800c1a1
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	785b      	ldrb	r3, [r3, #1]
 800c1a4:	f003 031f 	and.w	r3, r3, #31
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800c1b6:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800c1b8:	bf00      	nop
 800c1ba:	3724      	adds	r7, #36	; 0x24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800c1da:	897b      	ldrh	r3, [r7, #10]
 800c1dc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800c1e0:	2b38      	cmp	r3, #56	; 0x38
 800c1e2:	f200 8204 	bhi.w	800c5ee <VL53L1_get_tuning_parm+0x42a>
 800c1e6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <VL53L1_get_tuning_parm+0x28>)
 800c1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ec:	0800c2d1 	.word	0x0800c2d1
 800c1f0:	0800c2df 	.word	0x0800c2df
 800c1f4:	0800c2ed 	.word	0x0800c2ed
 800c1f8:	0800c2fb 	.word	0x0800c2fb
 800c1fc:	0800c309 	.word	0x0800c309
 800c200:	0800c317 	.word	0x0800c317
 800c204:	0800c325 	.word	0x0800c325
 800c208:	0800c333 	.word	0x0800c333
 800c20c:	0800c341 	.word	0x0800c341
 800c210:	0800c34f 	.word	0x0800c34f
 800c214:	0800c35d 	.word	0x0800c35d
 800c218:	0800c36b 	.word	0x0800c36b
 800c21c:	0800c379 	.word	0x0800c379
 800c220:	0800c387 	.word	0x0800c387
 800c224:	0800c395 	.word	0x0800c395
 800c228:	0800c3a3 	.word	0x0800c3a3
 800c22c:	0800c3b1 	.word	0x0800c3b1
 800c230:	0800c3bf 	.word	0x0800c3bf
 800c234:	0800c3cd 	.word	0x0800c3cd
 800c238:	0800c3db 	.word	0x0800c3db
 800c23c:	0800c3e9 	.word	0x0800c3e9
 800c240:	0800c3f7 	.word	0x0800c3f7
 800c244:	0800c405 	.word	0x0800c405
 800c248:	0800c413 	.word	0x0800c413
 800c24c:	0800c421 	.word	0x0800c421
 800c250:	0800c42f 	.word	0x0800c42f
 800c254:	0800c43d 	.word	0x0800c43d
 800c258:	0800c44b 	.word	0x0800c44b
 800c25c:	0800c459 	.word	0x0800c459
 800c260:	0800c467 	.word	0x0800c467
 800c264:	0800c475 	.word	0x0800c475
 800c268:	0800c483 	.word	0x0800c483
 800c26c:	0800c491 	.word	0x0800c491
 800c270:	0800c49f 	.word	0x0800c49f
 800c274:	0800c4ad 	.word	0x0800c4ad
 800c278:	0800c4bb 	.word	0x0800c4bb
 800c27c:	0800c4c9 	.word	0x0800c4c9
 800c280:	0800c4d7 	.word	0x0800c4d7
 800c284:	0800c4e5 	.word	0x0800c4e5
 800c288:	0800c4f3 	.word	0x0800c4f3
 800c28c:	0800c501 	.word	0x0800c501
 800c290:	0800c50f 	.word	0x0800c50f
 800c294:	0800c51d 	.word	0x0800c51d
 800c298:	0800c52b 	.word	0x0800c52b
 800c29c:	0800c539 	.word	0x0800c539
 800c2a0:	0800c547 	.word	0x0800c547
 800c2a4:	0800c555 	.word	0x0800c555
 800c2a8:	0800c563 	.word	0x0800c563
 800c2ac:	0800c571 	.word	0x0800c571
 800c2b0:	0800c57f 	.word	0x0800c57f
 800c2b4:	0800c58d 	.word	0x0800c58d
 800c2b8:	0800c59b 	.word	0x0800c59b
 800c2bc:	0800c5a9 	.word	0x0800c5a9
 800c2c0:	0800c5b7 	.word	0x0800c5b7
 800c2c4:	0800c5c5 	.word	0x0800c5c5
 800c2c8:	0800c5d3 	.word	0x0800c5d3
 800c2cc:	0800c5e1 	.word	0x0800c5e1

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800c2d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	601a      	str	r2, [r3, #0]
	break;
 800c2dc:	e18e      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800c2e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	601a      	str	r2, [r3, #0]
	break;
 800c2ea:	e187      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c2f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]
	break;
 800c2f8:	e180      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c300:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	break;
 800c306:	e179      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c30e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]
	break;
 800c314:	e172      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800c31c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	601a      	str	r2, [r3, #0]
	break;
 800c322:	e16b      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c32a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	601a      	str	r2, [r3, #0]
	break;
 800c330:	e164      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800c338:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
	break;
 800c33e:	e15d      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800c346:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	601a      	str	r2, [r3, #0]
	break;
 800c34c:	e156      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800c354:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	601a      	str	r2, [r3, #0]
	break;
 800c35a:	e14f      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800c362:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	601a      	str	r2, [r3, #0]
	break;
 800c368:	e148      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800c370:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
	break;
 800c376:	e141      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c37e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	601a      	str	r2, [r3, #0]
	break;
 800c384:	e13a      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800c38c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	601a      	str	r2, [r3, #0]
	break;
 800c392:	e133      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800c39a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	601a      	str	r2, [r3, #0]
	break;
 800c3a0:	e12c      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800c3a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	601a      	str	r2, [r3, #0]
	break;
 800c3ae:	e125      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800c3b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	601a      	str	r2, [r3, #0]
	break;
 800c3bc:	e11e      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800c3c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	601a      	str	r2, [r3, #0]
	break;
 800c3ca:	e117      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800c3d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	601a      	str	r2, [r3, #0]
	break;
 800c3d8:	e110      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800c3e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]
	break;
 800c3e6:	e109      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c3ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	601a      	str	r2, [r3, #0]
	break;
 800c3f4:	e102      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800c3fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	601a      	str	r2, [r3, #0]
	break;
 800c402:	e0fb      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800c40a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	601a      	str	r2, [r3, #0]
	break;
 800c410:	e0f4      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800c418:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	601a      	str	r2, [r3, #0]
	break;
 800c41e:	e0ed      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800c426:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	601a      	str	r2, [r3, #0]
	break;
 800c42c:	e0e6      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c434:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	601a      	str	r2, [r3, #0]
	break;
 800c43a:	e0df      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800c442:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	601a      	str	r2, [r3, #0]
	break;
 800c448:	e0d8      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800c450:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	601a      	str	r2, [r3, #0]
	break;
 800c456:	e0d1      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800c45e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	601a      	str	r2, [r3, #0]
	break;
 800c464:	e0ca      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c46c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	601a      	str	r2, [r3, #0]
	break;
 800c472:	e0c3      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c47a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	601a      	str	r2, [r3, #0]
	break;
 800c480:	e0bc      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800c488:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
	break;
 800c48e:	e0b5      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c496:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	601a      	str	r2, [r3, #0]
	break;
 800c49c:	e0ae      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800c4a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	601a      	str	r2, [r3, #0]
	break;
 800c4aa:	e0a7      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800c4b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	601a      	str	r2, [r3, #0]
	break;
 800c4b8:	e0a0      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800c4c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	601a      	str	r2, [r3, #0]
	break;
 800c4c6:	e099      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c4ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	601a      	str	r2, [r3, #0]
	break;
 800c4d4:	e092      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c4dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	601a      	str	r2, [r3, #0]
	break;
 800c4e2:	e08b      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800c4ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	601a      	str	r2, [r3, #0]
	break;
 800c4f0:	e084      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c4f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	601a      	str	r2, [r3, #0]
	break;
 800c4fe:	e07d      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800c506:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	601a      	str	r2, [r3, #0]
	break;
 800c50c:	e076      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800c514:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	601a      	str	r2, [r3, #0]
	break;
 800c51a:	e06f      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800c522:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	601a      	str	r2, [r3, #0]
	break;
 800c528:	e068      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800c530:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	601a      	str	r2, [r3, #0]
	break;
 800c536:	e061      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800c53e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	601a      	str	r2, [r3, #0]
	break;
 800c544:	e05a      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800c54c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	601a      	str	r2, [r3, #0]
	break;
 800c552:	e053      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800c55a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	601a      	str	r2, [r3, #0]
	break;
 800c560:	e04c      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800c568:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	601a      	str	r2, [r3, #0]
	break;
 800c56e:	e045      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c576:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	601a      	str	r2, [r3, #0]
	break;
 800c57c:	e03e      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c584:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	601a      	str	r2, [r3, #0]
	break;
 800c58a:	e037      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c592:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	601a      	str	r2, [r3, #0]
	break;
 800c598:	e030      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c5a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	601a      	str	r2, [r3, #0]
	break;
 800c5a6:	e029      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c5ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	601a      	str	r2, [r3, #0]
	break;
 800c5b4:	e022      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	601a      	str	r2, [r3, #0]
	break;
 800c5c2:	e01b      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800c5ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	601a      	str	r2, [r3, #0]
	break;
 800c5d0:	e014      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	601a      	str	r2, [r3, #0]
	break;
 800c5de:	e00d      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c5e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]
	break;
 800c5ec:	e006      	b.n	800c5fc <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c5f4:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c5f6:	23fc      	movs	r3, #252	; 0xfc
 800c5f8:	75fb      	strb	r3, [r7, #23]
	break;
 800c5fa:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c5fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c600:	4618      	mov	r0, r3
 800c602:	371c      	adds	r7, #28
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2208      	movs	r2, #8
 800c61c:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	220b      	movs	r2, #11
 800c622:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c62a:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c632:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c63a:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c642:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c65c:	2300      	movs	r3, #0
 800c65e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2212      	movs	r2, #18
 800c66a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	220f      	movs	r2, #15
 800c670:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2202      	movs	r2, #2
 800c676:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800c67e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	220c      	movs	r2, #12
 800c684:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c686:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	895b      	ldrh	r3, [r3, #10]
 800c6a8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	895b      	ldrh	r3, [r3, #10]
 800c6c6:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2240      	movs	r2, #64	; 0x40
 800c6ea:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10d      	bne.n	800c710 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d108      	bne.n	800c710 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d103      	bne.n	800c710 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	2200      	movs	r2, #0
 800c70c:	741a      	strb	r2, [r3, #16]
 800c70e:	e002      	b.n	800c716 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2201      	movs	r2, #1
 800c714:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800c716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d114      	bne.n	800c748 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800c722:	2b01      	cmp	r3, #1
 800c724:	d110      	bne.n	800c748 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	6818      	ldr	r0, [r3, #0]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	7d1b      	ldrb	r3, [r3, #20]
 800c73a:	f000 ff97 	bl	800d66c <VL53L1_calc_range_ignore_threshold>
 800c73e:	4603      	mov	r3, r0
 800c740:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	82da      	strh	r2, [r3, #22]
 800c746:	e002      	b.n	800c74e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2200      	movs	r2, #0
 800c74c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c74e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b085      	sub	sp, #20
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c76c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c774:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c77c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c784:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2208      	movs	r2, #8
 800c78a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2228      	movs	r2, #40	; 0x28
 800c790:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2209      	movs	r2, #9
 800c796:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f248 0203 	movw	r2, #32771	; 0x8003
 800c7ba:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f248 0201 	movw	r2, #32769	; 0x8001
 800c7c2:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f248 0241 	movw	r2, #32833	; 0x8041
 800c7ca:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	220e      	movs	r2, #14
 800c7d0:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2206      	movs	r2, #6
 800c7dc:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	220e      	movs	r2, #14
 800c7e2:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	220a      	movs	r2, #10
 800c7e8:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2206      	movs	r2, #6
 800c7ee:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2221      	movs	r2, #33	; 0x21
 800c7fa:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c80e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c816:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c81e:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	22c0      	movs	r2, #192	; 0xc0
 800c824:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	22c0      	movs	r2, #192	; 0xc0
 800c82a:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	22c0      	movs	r2, #192	; 0xc0
 800c830:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2208      	movs	r2, #8
 800c836:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2210      	movs	r2, #16
 800c83c:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2202      	movs	r2, #2
 800c84a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2202      	movs	r2, #2
 800c85a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c86c:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c874:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f248 0230 	movw	r2, #32816	; 0x8030
 800c87c:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c884:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c88c:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c894:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f24f 6218 	movw	r2, #63000	; 0xf618
 800c89c:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c8a4:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c8b2:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800c8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c8dc:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2200      	movs	r2, #0
 800c912:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2211      	movs	r2, #17
 800c91e:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2202      	movs	r2, #2
 800c924:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2202      	movs	r2, #2
 800c930:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2208      	movs	r2, #8
 800c936:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800c94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c950:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2201      	movs	r2, #1
 800c95c:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	22ff      	movs	r2, #255	; 0xff
 800c974:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2200      	movs	r2, #0
 800c990:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2200      	movs	r2, #0
 800c996:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	2200      	movs	r2, #0
 800c99c:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	2220      	movs	r2, #32
 800c9a8:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	220b      	movs	r2, #11
 800c9ae:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	220d      	movs	r2, #13
 800c9c2:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800c9ea:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2238      	movs	r2, #56	; 0x38
 800c9f6:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	22ff      	movs	r2, #255	; 0xff
 800c9fc:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	2201      	movs	r2, #1
 800ca02:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	221a      	movs	r2, #26
 800ca0e:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	22cc      	movs	r2, #204	; 0xcc
 800ca26:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	220b      	movs	r2, #11
 800ca2c:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	22f5      	movs	r2, #245	; 0xf5
 800ca38:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2209      	movs	r2, #9
 800ca3e:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2208      	movs	r2, #8
 800ca54:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2278      	movs	r2, #120	; 0x78
 800ca5a:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2200      	movs	r2, #0
 800ca72:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2200      	movs	r2, #0
 800ca78:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	220b      	movs	r2, #11
 800ca8e:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2209      	movs	r2, #9
 800ca94:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2201      	movs	r2, #1
 800caaa:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	22c7      	movs	r2, #199	; 0xc7
 800cac4:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	22ff      	movs	r2, #255	; 0xff
 800caca:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	22db      	movs	r2, #219	; 0xdb
 800cad0:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2202      	movs	r2, #2
 800cad6:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	2200      	movs	r2, #0
 800cadc:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	2201      	movs	r2, #1
 800cae2:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	2201      	movs	r2, #1
 800cae8:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800caea:	6a3b      	ldr	r3, [r7, #32]
 800caec:	2221      	movs	r2, #33	; 0x21
 800caee:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800caf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	371c      	adds	r7, #28
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af02      	add	r7, sp, #8
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f7ff fecf 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800cb26:	4603      	mov	r3, r0
 800cb28:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cb2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d121      	bne.n	800cb76 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2207      	movs	r2, #7
 800cb36:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2205      	movs	r2, #5
 800cb3c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2208      	movs	r2, #8
 800cb52:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2238      	movs	r2, #56	; 0x38
 800cb58:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2207      	movs	r2, #7
 800cb5e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2205      	movs	r2, #5
 800cb64:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cb76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b088      	sub	sp, #32
 800cb86:	af02      	add	r7, sp, #8
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	607a      	str	r2, [r7, #4]
 800cb8e:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb90:	2300      	movs	r3, #0
 800cb92:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	68b9      	ldr	r1, [r7, #8]
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7ff fe8e 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cbac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d121      	bne.n	800cbf8 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	220f      	movs	r2, #15
 800cbb8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	220d      	movs	r2, #13
 800cbbe:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2208      	movs	r2, #8
 800cbd4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	22b8      	movs	r2, #184	; 0xb8
 800cbda:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	220f      	movs	r2, #15
 800cbe0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	220d      	movs	r2, #13
 800cbe6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cbf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af02      	add	r7, sp, #8
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
 800cc10:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc12:	2300      	movs	r3, #0
 800cc14:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	9301      	str	r3, [sp, #4]
 800cc1a:	6a3b      	ldr	r3, [r7, #32]
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff fe4d 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cc2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d105      	bne.n	800cc42 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2202      	movs	r2, #2
 800cc3a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	223b      	movs	r2, #59	; 0x3b
 800cc40:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b088      	sub	sp, #32
 800cc52:	af02      	add	r7, sp, #8
 800cc54:	60f8      	str	r0, [r7, #12]
 800cc56:	60b9      	str	r1, [r7, #8]
 800cc58:	607a      	str	r2, [r7, #4]
 800cc5a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	9301      	str	r3, [sp, #4]
 800cc64:	6a3b      	ldr	r3, [r7, #32]
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7ff fe28 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800cc74:	4603      	mov	r3, r0
 800cc76:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cc78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d105      	bne.n	800cc8c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2202      	movs	r2, #2
 800cc84:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	225b      	movs	r2, #91	; 0x5b
 800cc8a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b088      	sub	sp, #32
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cca6:	2300      	movs	r3, #0
 800cca8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7ff fe03 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ccc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d11a      	bne.n	800cd00 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	2200      	movs	r2, #0
 800ccce:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	22b1      	movs	r2, #177	; 0xb1
 800ccda:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	22d4      	movs	r2, #212	; 0xd4
 800cce6:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ccee:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	2240      	movs	r2, #64	; 0x40
 800ccfe:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af02      	add	r7, sp, #8
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7ff fee7 	bl	800cb00 <VL53L1_preset_mode_standard_ranging_short_range>
 800cd32:	4603      	mov	r3, r0
 800cd34:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cd36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d11a      	bne.n	800cd74 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	2200      	movs	r2, #0
 800cd42:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2284      	movs	r2, #132	; 0x84
 800cd4e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	22b1      	movs	r2, #177	; 0xb1
 800cd5a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800cd62:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800cd6e:	6a3b      	ldr	r3, [r7, #32]
 800cd70:	2240      	movs	r2, #64	; 0x40
 800cd72:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b088      	sub	sp, #32
 800cd84:	af02      	add	r7, sp, #8
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
 800cd8c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff feee 	bl	800cb82 <VL53L1_preset_mode_standard_ranging_long_range>
 800cda6:	4603      	mov	r3, r0
 800cda8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cdaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d11a      	bne.n	800cde8 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2297      	movs	r2, #151	; 0x97
 800cdc2:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	22b1      	movs	r2, #177	; 0xb1
 800cdce:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800cdd6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800cde2:	6a3b      	ldr	r3, [r7, #32]
 800cde4:	2240      	movs	r2, #64	; 0x40
 800cde6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cde8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af02      	add	r7, sp, #8
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce02:	2300      	movs	r3, #0
 800ce04:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800ce06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	6a3b      	ldr	r3, [r7, #32]
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	68b9      	ldr	r1, [r7, #8]
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f7ff ff3f 	bl	800cc98 <VL53L1_preset_mode_timed_ranging>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800ce1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d106      	bne.n	800ce34 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800ce26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	68b8      	ldr	r0, [r7, #8]
 800ce2c:	f000 fe7f 	bl	800db2e <VL53L1_config_low_power_auto_mode>
 800ce30:	4603      	mov	r3, r0
 800ce32:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ce34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af02      	add	r7, sp, #8
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7ff ff53 	bl	800cd0c <VL53L1_preset_mode_timed_ranging_short_range>
 800ce66:	4603      	mov	r3, r0
 800ce68:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800ce6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d106      	bne.n	800ce80 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800ce72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	68b8      	ldr	r0, [r7, #8]
 800ce78:	f000 fe59 	bl	800db2e <VL53L1_config_low_power_auto_mode>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ce80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b088      	sub	sp, #32
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	9301      	str	r3, [sp, #4]
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f7ff ff67 	bl	800cd80 <VL53L1_preset_mode_timed_ranging_long_range>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800ceb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d106      	bne.n	800cecc <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800cebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	68b8      	ldr	r0, [r7, #8]
 800cec4:	f000 fe33 	bl	800db2e <VL53L1_config_low_power_auto_mode>
 800cec8:	4603      	mov	r3, r0
 800ceca:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b088      	sub	sp, #32
 800cedc:	af02      	add	r7, sp, #8
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cee6:	2300      	movs	r3, #0
 800cee8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	68b9      	ldr	r1, [r7, #8]
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f7ff fce3 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800cefe:	4603      	mov	r3, r0
 800cf00:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cf02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d116      	bne.n	800cf38 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	22b1      	movs	r2, #177	; 0xb1
 800cf1a:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	22d4      	movs	r2, #212	; 0xd4
 800cf26:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	2210      	movs	r2, #16
 800cf36:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cf38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b088      	sub	sp, #32
 800cf48:	af02      	add	r7, sp, #8
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cf52:	2300      	movs	r3, #0
 800cf54:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800cf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf58:	9301      	str	r3, [sp, #4]
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	68b9      	ldr	r1, [r7, #8]
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7ff fcad 	bl	800c8c4 <VL53L1_preset_mode_standard_ranging>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cf6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d102      	bne.n	800cf7c <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800cf76:	6a3b      	ldr	r3, [r7, #32]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cf7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3718      	adds	r7, #24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	220a      	movs	r2, #10
 800cfa8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800cfb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cfb4:	bf00      	nop
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	332c      	adds	r3, #44	; 0x2c
 800cfd4:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	78fa      	ldrb	r2, [r7, #3]
 800cfda:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2202      	movs	r2, #2
 800cfe6:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2200      	movs	r2, #0
 800cfec:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	78fa      	ldrb	r2, [r7, #3]
 800cff2:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2200      	movs	r2, #0
 800cff8:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	2202      	movs	r2, #2
 800cffe:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2200      	movs	r2, #0
 800d004:	71da      	strb	r2, [r3, #7]

}
 800d006:	bf00      	nop
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
	...

0800d014 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d014:	b480      	push	{r7}
 800d016:	b087      	sub	sp, #28
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800d01c:	2300      	movs	r3, #0
 800d01e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	332c      	adds	r3, #44	; 0x2c
 800d028:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10c      	bne.n	800d052 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2203      	movs	r2, #3
 800d03c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2202      	movs	r2, #2
 800d048:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	71da      	strb	r2, [r3, #7]
 800d050:	e060      	b.n	800d114 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	795b      	ldrb	r3, [r3, #5]
 800d056:	2bff      	cmp	r3, #255	; 0xff
 800d058:	d103      	bne.n	800d062 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2280      	movs	r2, #128	; 0x80
 800d05e:	715a      	strb	r2, [r3, #5]
 800d060:	e005      	b.n	800d06e <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	795b      	ldrb	r3, [r3, #5]
 800d066:	3301      	adds	r3, #1
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	799b      	ldrb	r3, [r3, #6]
 800d072:	f083 0302 	eor.w	r3, r3, #2
 800d076:	b2da      	uxtb	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	791b      	ldrb	r3, [r3, #4]
 800d080:	3b03      	subs	r3, #3
 800d082:	2b05      	cmp	r3, #5
 800d084:	d839      	bhi.n	800d0fa <VL53L1_update_ll_driver_rd_state+0xe6>
 800d086:	a201      	add	r2, pc, #4	; (adr r2, 800d08c <VL53L1_update_ll_driver_rd_state+0x78>)
 800d088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08c:	0800d0a5 	.word	0x0800d0a5
 800d090:	0800d0fb 	.word	0x0800d0fb
 800d094:	0800d0fb 	.word	0x0800d0fb
 800d098:	0800d0cf 	.word	0x0800d0cf
 800d09c:	0800d0dd 	.word	0x0800d0dd
 800d0a0:	0800d0e5 	.word	0x0800d0e5

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800d0aa:	f003 0302 	and.w	r3, r3, #2
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dd03      	ble.n	800d0ba <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2206      	movs	r2, #6
 800d0b6:	711a      	strb	r2, [r3, #4]
 800d0b8:	e002      	b.n	800d0c0 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2208      	movs	r2, #8
 800d0be:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	71da      	strb	r2, [r3, #7]

		break;
 800d0cc:	e022      	b.n	800d114 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2208      	movs	r2, #8
 800d0d8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d0da:	e01b      	b.n	800d114 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2208      	movs	r2, #8
 800d0e0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d0e2:	e017      	b.n	800d114 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	79db      	ldrb	r3, [r3, #7]
 800d0e8:	f083 0301 	eor.w	r3, r3, #1
 800d0ec:	b2da      	uxtb	r2, r3
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2208      	movs	r2, #8
 800d0f6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d0f8:	e00c      	b.n	800d114 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2203      	movs	r2, #3
 800d0fe:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2202      	movs	r2, #2
 800d10a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	71da      	strb	r2, [r3, #7]

		break;
 800d112:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d114:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	371c      	adds	r7, #28
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d124:	b480      	push	{r7}
 800d126:	b089      	sub	sp, #36	; 0x24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d12c:	2300      	movs	r3, #0
 800d12e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	332c      	adds	r3, #44	; 0x2c
 800d138:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800d140:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800d152:	f003 031f 	and.w	r3, r3, #31
 800d156:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	78db      	ldrb	r3, [r3, #3]
 800d15c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d162:	111b      	asrs	r3, r3, #4
 800d164:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800d166:	f003 0302 	and.w	r3, r3, #2
 800d16a:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b00      	cmp	r3, #0
 800d178:	d017      	beq.n	800d1aa <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	791b      	ldrb	r3, [r3, #4]
 800d17e:	2b06      	cmp	r3, #6
 800d180:	d105      	bne.n	800d18e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800d182:	7bfb      	ldrb	r3, [r7, #15]
 800d184:	2b12      	cmp	r3, #18
 800d186:	d010      	beq.n	800d1aa <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800d188:	23ef      	movs	r3, #239	; 0xef
 800d18a:	77fb      	strb	r3, [r7, #31]
 800d18c:	e00d      	b.n	800d1aa <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	795b      	ldrb	r3, [r3, #5]
 800d192:	7bba      	ldrb	r2, [r7, #14]
 800d194:	429a      	cmp	r2, r3
 800d196:	d001      	beq.n	800d19c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800d198:	23ee      	movs	r3, #238	; 0xee
 800d19a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	799b      	ldrb	r3, [r3, #6]
 800d1a0:	7b7a      	ldrb	r2, [r7, #13]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d001      	beq.n	800d1aa <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800d1a6:	23ed      	movs	r3, #237	; 0xed
 800d1a8:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800d1aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3724      	adds	r7, #36	; 0x24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b087      	sub	sp, #28
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	332c      	adds	r3, #44	; 0x2c
 800d1ce:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d1d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10c      	bne.n	800d1f8 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2203      	movs	r2, #3
 800d1e2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	70da      	strb	r2, [r3, #3]
 800d1f6:	e03e      	b.n	800d276 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	785b      	ldrb	r3, [r3, #1]
 800d1fc:	2bff      	cmp	r3, #255	; 0xff
 800d1fe:	d103      	bne.n	800d208 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2280      	movs	r2, #128	; 0x80
 800d204:	705a      	strb	r2, [r3, #1]
 800d206:	e005      	b.n	800d214 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	785b      	ldrb	r3, [r3, #1]
 800d20c:	3301      	adds	r3, #1
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	789b      	ldrb	r3, [r3, #2]
 800d218:	f083 0302 	eor.w	r3, r3, #2
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b03      	cmp	r3, #3
 800d228:	d002      	beq.n	800d230 <VL53L1_update_ll_driver_cfg_state+0x76>
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	d00e      	beq.n	800d24c <VL53L1_update_ll_driver_cfg_state+0x92>
 800d22e:	e015      	b.n	800d25c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	78db      	ldrb	r3, [r3, #3]
 800d234:	f083 0301 	eor.w	r3, r3, #1
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2201      	movs	r2, #1
 800d242:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2204      	movs	r2, #4
 800d248:	701a      	strb	r2, [r3, #0]
		break;
 800d24a:	e014      	b.n	800d276 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	78db      	ldrb	r3, [r3, #3]
 800d250:	f083 0301 	eor.w	r3, r3, #1
 800d254:	b2da      	uxtb	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	70da      	strb	r2, [r3, #3]

		break;
 800d25a:	e00c      	b.n	800d276 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2203      	movs	r2, #3
 800d260:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2202      	movs	r2, #2
 800d26c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	70da      	strb	r2, [r3, #3]

		break;
 800d274:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	371c      	adds	r7, #28
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800d286:	b480      	push	{r7}
 800d288:	b083      	sub	sp, #12
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	7c1a      	ldrb	r2, [r3, #16]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	3301      	adds	r3, #1
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	7c52      	ldrb	r2, [r2, #17]
 800d2a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	3302      	adds	r3, #2
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	7c92      	ldrb	r2, [r2, #18]
 800d2aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	3303      	adds	r3, #3
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	7cd2      	ldrb	r2, [r2, #19]
 800d2b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	3304      	adds	r3, #4
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	7d12      	ldrb	r2, [r2, #20]
 800d2be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	3305      	adds	r3, #5
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	7d52      	ldrb	r2, [r2, #21]
 800d2c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	3306      	adds	r3, #6
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	7d92      	ldrb	r2, [r2, #22]
 800d2d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	3307      	adds	r3, #7
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	7dd2      	ldrb	r2, [r2, #23]
 800d2dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	7e12      	ldrb	r2, [r2, #24]
 800d2e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	3309      	adds	r3, #9
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	7e52      	ldrb	r2, [r2, #25]
 800d2f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	330a      	adds	r3, #10
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	7e92      	ldrb	r2, [r2, #26]
 800d2fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	330b      	adds	r3, #11
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	7ed2      	ldrb	r2, [r2, #27]
 800d304:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	330c      	adds	r3, #12
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	7f12      	ldrb	r2, [r2, #28]
 800d30e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	330d      	adds	r3, #13
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	7f52      	ldrb	r2, [r2, #29]
 800d318:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	330e      	adds	r3, #14
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	7f92      	ldrb	r2, [r2, #30]
 800d322:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	330f      	adds	r3, #15
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	7fd2      	ldrb	r2, [r2, #31]
 800d32c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	3310      	adds	r3, #16
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d338:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	3311      	adds	r3, #17
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d344:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	3312      	adds	r3, #18
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800d350:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	3313      	adds	r3, #19
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800d35c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	3314      	adds	r3, #20
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d368:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	3315      	adds	r3, #21
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d374:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	3316      	adds	r3, #22
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d380:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	3317      	adds	r3, #23
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800d38c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	3318      	adds	r3, #24
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d398:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	3319      	adds	r3, #25
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800d3a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	331a      	adds	r3, #26
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800d3b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	331b      	adds	r3, #27
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d3bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	331c      	adds	r3, #28
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d3c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	331d      	adds	r3, #29
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d3d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	331e      	adds	r3, #30
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800d3e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	331f      	adds	r3, #31
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800d3ec:	701a      	strb	r2, [r3, #0]
}
 800d3ee:	bf00      	nop
 800d3f0:	370c      	adds	r7, #12
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	b085      	sub	sp, #20
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	4603      	mov	r3, r0
 800d402:	603a      	str	r2, [r7, #0]
 800d404:	80fb      	strh	r3, [r7, #6]
 800d406:	460b      	mov	r3, r1
 800d408:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800d412:	88fb      	ldrh	r3, [r7, #6]
 800d414:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800d416:	2300      	movs	r3, #0
 800d418:	81fb      	strh	r3, [r7, #14]
 800d41a:	e00e      	b.n	800d43a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d41c:	88ba      	ldrh	r2, [r7, #4]
 800d41e:	89fb      	ldrh	r3, [r7, #14]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	3b01      	subs	r3, #1
 800d424:	683a      	ldr	r2, [r7, #0]
 800d426:	4413      	add	r3, r2
 800d428:	89ba      	ldrh	r2, [r7, #12]
 800d42a:	b2d2      	uxtb	r2, r2
 800d42c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d42e:	89bb      	ldrh	r3, [r7, #12]
 800d430:	0a1b      	lsrs	r3, r3, #8
 800d432:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800d434:	89fb      	ldrh	r3, [r7, #14]
 800d436:	3301      	adds	r3, #1
 800d438:	81fb      	strh	r3, [r7, #14]
 800d43a:	89fa      	ldrh	r2, [r7, #14]
 800d43c:	88bb      	ldrh	r3, [r7, #4]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d3ec      	bcc.n	800d41c <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800d442:	bf00      	nop
 800d444:	3714      	adds	r7, #20
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d44e:	b480      	push	{r7}
 800d450:	b085      	sub	sp, #20
 800d452:	af00      	add	r7, sp, #0
 800d454:	4603      	mov	r3, r0
 800d456:	6039      	str	r1, [r7, #0]
 800d458:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800d45a:	2300      	movs	r3, #0
 800d45c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800d45e:	e00a      	b.n	800d476 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800d460:	89fb      	ldrh	r3, [r7, #14]
 800d462:	021b      	lsls	r3, r3, #8
 800d464:	b21a      	sxth	r2, r3
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	1c59      	adds	r1, r3, #1
 800d46a:	6039      	str	r1, [r7, #0]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	b21b      	sxth	r3, r3
 800d470:	4313      	orrs	r3, r2
 800d472:	b21b      	sxth	r3, r3
 800d474:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800d476:	88fb      	ldrh	r3, [r7, #6]
 800d478:	1e5a      	subs	r2, r3, #1
 800d47a:	80fa      	strh	r2, [r7, #6]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1ef      	bne.n	800d460 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800d480:	89fb      	ldrh	r3, [r7, #14]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d48e:	b480      	push	{r7}
 800d490:	b085      	sub	sp, #20
 800d492:	af00      	add	r7, sp, #0
 800d494:	4603      	mov	r3, r0
 800d496:	603a      	str	r2, [r7, #0]
 800d498:	80fb      	strh	r3, [r7, #6]
 800d49a:	460b      	mov	r3, r1
 800d49c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800d4a6:	88fb      	ldrh	r3, [r7, #6]
 800d4a8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	81fb      	strh	r3, [r7, #14]
 800d4ae:	e00f      	b.n	800d4d0 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d4b0:	88ba      	ldrh	r2, [r7, #4]
 800d4b2:	89fb      	ldrh	r3, [r7, #14]
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	89ba      	ldrh	r2, [r7, #12]
 800d4be:	b2d2      	uxtb	r2, r2
 800d4c0:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d4c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d4c6:	121b      	asrs	r3, r3, #8
 800d4c8:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800d4ca:	89fb      	ldrh	r3, [r7, #14]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	81fb      	strh	r3, [r7, #14]
 800d4d0:	89fa      	ldrh	r2, [r7, #14]
 800d4d2:	88bb      	ldrh	r3, [r7, #4]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d3eb      	bcc.n	800d4b0 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800d4d8:	bf00      	nop
 800d4da:	3714      	adds	r7, #20
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	6039      	str	r1, [r7, #0]
 800d4ee:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	b25b      	sxtb	r3, r3
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	da0e      	bge.n	800d51c <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800d4fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d502:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800d504:	e00a      	b.n	800d51c <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800d506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d50a:	021b      	lsls	r3, r3, #8
 800d50c:	b21a      	sxth	r2, r3
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	1c59      	adds	r1, r3, #1
 800d512:	6039      	str	r1, [r7, #0]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	b21b      	sxth	r3, r3
 800d518:	4313      	orrs	r3, r2
 800d51a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800d51c:	88fb      	ldrh	r3, [r7, #6]
 800d51e:	1e5a      	subs	r2, r3, #1
 800d520:	80fa      	strh	r2, [r7, #6]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1ef      	bne.n	800d506 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800d526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3714      	adds	r7, #20
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d536:	b480      	push	{r7}
 800d538:	b087      	sub	sp, #28
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	60f8      	str	r0, [r7, #12]
 800d53e:	460b      	mov	r3, r1
 800d540:	607a      	str	r2, [r7, #4]
 800d542:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800d550:	2300      	movs	r3, #0
 800d552:	82fb      	strh	r3, [r7, #22]
 800d554:	e00e      	b.n	800d574 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d556:	897a      	ldrh	r2, [r7, #10]
 800d558:	8afb      	ldrh	r3, [r7, #22]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	3b01      	subs	r3, #1
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	4413      	add	r3, r2
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	b2d2      	uxtb	r2, r2
 800d566:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	0a1b      	lsrs	r3, r3, #8
 800d56c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800d56e:	8afb      	ldrh	r3, [r7, #22]
 800d570:	3301      	adds	r3, #1
 800d572:	82fb      	strh	r3, [r7, #22]
 800d574:	8afa      	ldrh	r2, [r7, #22]
 800d576:	897b      	ldrh	r3, [r7, #10]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d3ec      	bcc.n	800d556 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800d57c:	bf00      	nop
 800d57e:	371c      	adds	r7, #28
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	4603      	mov	r3, r0
 800d590:	6039      	str	r1, [r7, #0]
 800d592:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800d594:	2300      	movs	r3, #0
 800d596:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800d598:	e007      	b.n	800d5aa <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	021a      	lsls	r2, r3, #8
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	1c59      	adds	r1, r3, #1
 800d5a2:	6039      	str	r1, [r7, #0]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800d5aa:	88fb      	ldrh	r3, [r7, #6]
 800d5ac:	1e5a      	subs	r2, r3, #1
 800d5ae:	80fa      	strh	r2, [r7, #6]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1f2      	bne.n	800d59a <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	6039      	str	r1, [r7, #0]
 800d5cc:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	b25b      	sxtb	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	da0b      	bge.n	800d5f4 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800d5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e0:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800d5e2:	e007      	b.n	800d5f4 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	021a      	lsls	r2, r3, #8
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	1c59      	adds	r1, r3, #1
 800d5ec:	6039      	str	r1, [r7, #0]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800d5f4:	88fb      	ldrh	r3, [r7, #6]
 800d5f6:	1e5a      	subs	r2, r3, #1
 800d5f8:	80fa      	strh	r2, [r7, #6]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1f2      	bne.n	800d5e4 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	460a      	mov	r2, r1
 800d616:	80fb      	strh	r3, [r7, #6]
 800d618:	4613      	mov	r3, r2
 800d61a:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fb5b 	bl	800dce6 <VL53L1_calc_pll_period_us>
 800d630:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800d632:	797b      	ldrb	r3, [r7, #5]
 800d634:	4618      	mov	r0, r3
 800d636:	f000 fb6a 	bl	800dd0e <VL53L1_decode_vcsel_period>
 800d63a:	4603      	mov	r3, r0
 800d63c:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	4613      	mov	r3, r2
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	021b      	lsls	r3, r3, #8
 800d648:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	099b      	lsrs	r3, r3, #6
 800d64e:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800d650:	7cfa      	ldrb	r2, [r7, #19]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	fb02 f303 	mul.w	r3, r2, r3
 800d658:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	099b      	lsrs	r3, r3, #6
 800d65e:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800d660:	68fb      	ldr	r3, [r7, #12]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3718      	adds	r7, #24
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b089      	sub	sp, #36	; 0x24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	4608      	mov	r0, r1
 800d676:	4611      	mov	r1, r2
 800d678:	461a      	mov	r2, r3
 800d67a:	4603      	mov	r3, r0
 800d67c:	817b      	strh	r3, [r7, #10]
 800d67e:	460b      	mov	r3, r1
 800d680:	813b      	strh	r3, [r7, #8]
 800d682:	4613      	mov	r3, r2
 800d684:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800d68a:	2300      	movs	r3, #0
 800d68c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800d692:	2300      	movs	r3, #0
 800d694:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	011b      	lsls	r3, r3, #4
 800d69e:	4a23      	ldr	r2, [pc, #140]	; (800d72c <VL53L1_calc_range_ignore_threshold+0xc0>)
 800d6a0:	fb82 1203 	smull	r1, r2, r2, r3
 800d6a4:	1192      	asrs	r2, r2, #6
 800d6a6:	17db      	asrs	r3, r3, #31
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800d6ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	da03      	bge.n	800d6bc <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800d6b4:	897b      	ldrh	r3, [r7, #10]
 800d6b6:	425b      	negs	r3, r3
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800d6bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	da03      	bge.n	800d6cc <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800d6c4:	893b      	ldrh	r3, [r7, #8]
 800d6c6:	425b      	negs	r3, r3
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800d6cc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800d6d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	015b      	lsls	r3, r3, #5
 800d6d8:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	4a13      	ldr	r2, [pc, #76]	; (800d72c <VL53L1_calc_range_ignore_threshold+0xc0>)
 800d6de:	fb82 1203 	smull	r1, r2, r2, r3
 800d6e2:	1192      	asrs	r2, r2, #6
 800d6e4:	17db      	asrs	r3, r3, #31
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800d6ea:	697a      	ldr	r2, [r7, #20]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800d6f2:	79fa      	ldrb	r2, [r7, #7]
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	fb02 f303 	mul.w	r3, r2, r3
 800d6fa:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	3310      	adds	r3, #16
 800d700:	2b00      	cmp	r3, #0
 800d702:	da00      	bge.n	800d706 <VL53L1_calc_range_ignore_threshold+0x9a>
 800d704:	331f      	adds	r3, #31
 800d706:	115b      	asrs	r3, r3, #5
 800d708:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d710:	db03      	blt.n	800d71a <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800d712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d716:	83fb      	strh	r3, [r7, #30]
 800d718:	e001      	b.n	800d71e <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800d71e:	8bfb      	ldrh	r3, [r7, #30]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3724      	adds	r7, #36	; 0x24
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	10624dd3 	.word	0x10624dd3

0800d730 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	031a      	lsls	r2, r3, #12
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	085b      	lsrs	r3, r3, #1
 800d746:	441a      	add	r2, r3
	timeout_mclks   =
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800d750:	68fb      	ldr	r3, [r7, #12]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3714      	adds	r7, #20
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
 800d770:	6839      	ldr	r1, [r7, #0]
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7ff ffdc 	bl	800d730 <VL53L1_calc_timeout_mclks>
 800d778:	60f8      	str	r0, [r7, #12]
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);

	timeout_encoded =
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 f859 	bl	800d832 <VL53L1_encode_timeout>
 800d780:	4603      	mov	r3, r0
 800d782:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800d784:	897b      	ldrh	r3, [r7, #10]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800d78e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d790:	b087      	sub	sp, #28
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800d798:	2200      	movs	r2, #0
 800d79a:	617a      	str	r2, [r7, #20]
	uint64_t tmp            = 0;
 800d79c:	f04f 0100 	mov.w	r1, #0
 800d7a0:	f04f 0200 	mov.w	r2, #0
 800d7a4:	e9c7 1202 	strd	r1, r2, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	4615      	mov	r5, r2
 800d7ac:	f04f 0600 	mov.w	r6, #0
 800d7b0:	683a      	ldr	r2, [r7, #0]
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	fb01 fe06 	mul.w	lr, r1, r6
 800d7bc:	fb05 f002 	mul.w	r0, r5, r2
 800d7c0:	4470      	add	r0, lr
 800d7c2:	fba5 1201 	umull	r1, r2, r5, r1
 800d7c6:	4410      	add	r0, r2
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	e9c7 1202 	strd	r1, r2, [r7, #8]
 800d7ce:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp += 0x00800;
 800d7d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d7d6:	f511 6100 	adds.w	r1, r1, #2048	; 0x800
 800d7da:	f142 0200 	adc.w	r2, r2, #0
 800d7de:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp  = tmp >> 12;
 800d7e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d7e6:	0b0b      	lsrs	r3, r1, #12
 800d7e8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800d7ec:	0b14      	lsrs	r4, r2, #12
 800d7ee:	e9c7 3402 	strd	r3, r4, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800d7f6:	697b      	ldr	r3, [r7, #20]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	371c      	adds	r7, #28
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d800 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	4603      	mov	r3, r0
 800d808:	6039      	str	r1, [r7, #0]
 800d80a:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
 800d814:	88fb      	ldrh	r3, [r7, #6]
 800d816:	4618      	mov	r0, r3
 800d818:	f000 f837 	bl	800d88a <VL53L1_decode_timeout>
 800d81c:	60f8      	str	r0, [r7, #12]
		VL53L1_decode_timeout(timeout_encoded);

	timeout_us    =
 800d81e:	6839      	ldr	r1, [r7, #0]
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f7ff ffb4 	bl	800d78e <VL53L1_calc_timeout_us>
 800d826:	60b8      	str	r0, [r7, #8]
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);

	LOG_FUNCTION_END(0);

	return timeout_us;
 800d828:	68bb      	ldr	r3, [r7, #8]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800d832:	b480      	push	{r7}
 800d834:	b087      	sub	sp, #28
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d83a:	2300      	movs	r3, #0
 800d83c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d017      	beq.n	800d87c <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3b01      	subs	r3, #1
 800d850:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d852:	e005      	b.n	800d860 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	085b      	lsrs	r3, r3, #1
 800d858:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d85a:	89fb      	ldrh	r3, [r7, #14]
 800d85c:	3301      	adds	r3, #1
 800d85e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1f4      	bne.n	800d854 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d86a:	89fb      	ldrh	r3, [r7, #14]
 800d86c:	021b      	lsls	r3, r3, #8
 800d86e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	b29b      	uxth	r3, r3
 800d874:	b2db      	uxtb	r3, r3
 800d876:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d878:	4413      	add	r3, r2
 800d87a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d87c:	8afb      	ldrh	r3, [r7, #22]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	371c      	adds	r7, #28
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800d88a:	b480      	push	{r7}
 800d88c:	b085      	sub	sp, #20
 800d88e:	af00      	add	r7, sp, #0
 800d890:	4603      	mov	r3, r0
 800d892:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d898:	88fb      	ldrh	r3, [r7, #6]
 800d89a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d89c:	88fa      	ldrh	r2, [r7, #6]
 800d89e:	0a12      	lsrs	r2, r2, #8
 800d8a0:	b292      	uxth	r2, r2
 800d8a2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr

0800d8b6 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b088      	sub	sp, #32
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	60f8      	str	r0, [r7, #12]
 800d8be:	60b9      	str	r1, [r7, #8]
 800d8c0:	607a      	str	r2, [r7, #4]
 800d8c2:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800d8d4:	887b      	ldrh	r3, [r7, #2]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d102      	bne.n	800d8e0 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800d8da:	23f1      	movs	r3, #241	; 0xf1
 800d8dc:	77fb      	strb	r3, [r7, #31]
 800d8de:	e05d      	b.n	800d99c <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	799a      	ldrb	r2, [r3, #6]
		macro_period_us =
 800d8e4:	887b      	ldrh	r3, [r7, #2]
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff fe8f 	bl	800d60c <VL53L1_calc_macro_period_us>
 800d8ee:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 800d8f0:	6979      	ldr	r1, [r7, #20]
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f7ff ff1c 	bl	800d730 <VL53L1_calc_timeout_mclks>
 800d8f8:	61b8      	str	r0, [r7, #24]
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	2bff      	cmp	r3, #255	; 0xff
 800d8fe:	d901      	bls.n	800d904 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800d900:	23ff      	movs	r3, #255	; 0xff
 800d902:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90a:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 800d90c:	6979      	ldr	r1, [r7, #20]
 800d90e:	68b8      	ldr	r0, [r7, #8]
 800d910:	f7ff ff25 	bl	800d75e <VL53L1_calc_encoded_timeout>
 800d914:	4603      	mov	r3, r0
 800d916:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d918:	8a7b      	ldrh	r3, [r7, #18]
 800d91a:	0a1b      	lsrs	r3, r3, #8
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d924:	8a7b      	ldrh	r3, [r7, #18]
 800d926:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 800d92c:	6979      	ldr	r1, [r7, #20]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff ff15 	bl	800d75e <VL53L1_calc_encoded_timeout>
 800d934:	4603      	mov	r3, r0
 800d936:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d938:	8a7b      	ldrh	r3, [r7, #18]
 800d93a:	0a1b      	lsrs	r3, r3, #8
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d944:	8a7b      	ldrh	r3, [r7, #18]
 800d946:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	7a5a      	ldrb	r2, [r3, #9]
		macro_period_us =
 800d950:	887b      	ldrh	r3, [r7, #2]
 800d952:	4611      	mov	r1, r2
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fe59 	bl	800d60c <VL53L1_calc_macro_period_us>
 800d95a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 800d95c:	6979      	ldr	r1, [r7, #20]
 800d95e:	68b8      	ldr	r0, [r7, #8]
 800d960:	f7ff fefd 	bl	800d75e <VL53L1_calc_encoded_timeout>
 800d964:	4603      	mov	r3, r0
 800d966:	827b      	strh	r3, [r7, #18]
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d968:	8a7b      	ldrh	r3, [r7, #18]
 800d96a:	0a1b      	lsrs	r3, r3, #8
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d974:	8a7b      	ldrh	r3, [r7, #18]
 800d976:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800d97c:	6979      	ldr	r1, [r7, #20]
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff feed 	bl	800d75e <VL53L1_calc_encoded_timeout>
 800d984:	4603      	mov	r3, r0
 800d986:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d988:	8a7b      	ldrh	r3, [r7, #18]
 800d98a:	0a1b      	lsrs	r3, r3, #8
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800d990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d992:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d994:	8a7b      	ldrh	r3, [r7, #18]
 800d996:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800d99c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3720      	adds	r7, #32
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	603a      	str	r2, [r7, #0]
 800d9b2:	71fb      	strb	r3, [r7, #7]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800d9b8:	79fb      	ldrb	r3, [r7, #7]
 800d9ba:	2b07      	cmp	r3, #7
 800d9bc:	d90a      	bls.n	800d9d4 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800d9be:	79bb      	ldrb	r3, [r7, #6]
 800d9c0:	00db      	lsls	r3, r3, #3
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	3b71      	subs	r3, #113	; 0x71
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800d9d2:	e00a      	b.n	800d9ea <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800d9d4:	79bb      	ldrb	r3, [r7, #6]
 800d9d6:	f1c3 030f 	rsb	r3, r3, #15
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	701a      	strb	r2, [r3, #0]
}
 800d9ea:	bf00      	nop
 800d9ec:	370c      	adds	r7, #12
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	b085      	sub	sp, #20
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	60b9      	str	r1, [r7, #8]
 800da00:	607a      	str	r2, [r7, #4]
 800da02:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	091b      	lsrs	r3, r3, #4
 800da08:	b2da      	uxtb	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	f003 030f 	and.w	r3, r3, #15
 800da14:	b2da      	uxtb	r2, r3
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	701a      	strb	r2, [r3, #0]

}
 800da1a:	bf00      	nop
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	4603      	mov	r3, r0
 800da2e:	603a      	str	r2, [r7, #0]
 800da30:	71fb      	strb	r3, [r7, #7]
 800da32:	460b      	mov	r3, r1
 800da34:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800da36:	79bb      	ldrb	r3, [r7, #6]
 800da38:	011b      	lsls	r3, r3, #4
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	79fb      	ldrb	r3, [r7, #7]
 800da3e:	4413      	add	r3, r2
 800da40:	b2da      	uxtb	r2, r3
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	701a      	strb	r2, [r3, #0]

}
 800da46:	bf00      	nop
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2203      	movs	r2, #3
 800da66:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	2200      	movs	r2, #0
 800da76:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800daaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3714      	adds	r7, #20
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr

0800daba <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800daba:	b480      	push	{r7}
 800dabc:	b085      	sub	sp, #20
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	22ff      	movs	r2, #255	; 0xff
 800dace:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2200      	movs	r2, #0
 800dade:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 800db06:	2b00      	cmp	r3, #0
 800db08:	d005      	beq.n	800db16 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 800db1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800db2e:	b480      	push	{r7}
 800db30:	b087      	sub	sp, #28
 800db32:	af00      	add	r7, sp, #0
 800db34:	60f8      	str	r0, [r7, #12]
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db3a:	2300      	movs	r3, #0
 800db3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2201      	movs	r2, #1
 800db42:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	228b      	movs	r2, #139	; 0x8b
 800db4e:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800db56:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2202      	movs	r2, #2
 800db5c:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 800db5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db62:	4618      	mov	r0, r3
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800db6e:	b480      	push	{r7}
 800db70:	b085      	sub	sp, #20
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db7a:	2300      	movs	r3, #0
 800db7c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800db9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800dbae:	f003 0303 	and.w	r3, r3, #3
 800dbb2:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800dbbe:	4413      	add	r3, r2
 800dbc0:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800dbe8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b087      	sub	sp, #28
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8b3 31de 	ldrh.w	r3, [r3, #478]	; 0x1de
 800dc0e:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800dc16:	4413      	add	r3, r2
 800dc18:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc20:	d302      	bcc.n	800dc28 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 800dc22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc26:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	041b      	lsls	r3, r3, #16
 800dc2c:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d102      	bne.n	800dc3e <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800dc38:	23f1      	movs	r3, #241	; 0xf1
 800dc3a:	75fb      	strb	r3, [r7, #23]
 800dc3c:	e035      	b.n	800dcaa <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800dc44:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc4c:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800dc5c:	041b      	lsls	r3, r3, #16
 800dc5e:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d102      	bne.n	800dc70 <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800dc6a:	23f1      	movs	r3, #241	; 0xf1
 800dc6c:	75fb      	strb	r3, [r7, #23]
 800dc6e:	e01c      	b.n	800dcaa <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
			utemp32a = utemp32a /
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc7c:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc84:	d302      	bcc.n	800dc8c <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 800dc86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc8a:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2202      	movs	r2, #2
 800dca6:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 800dcaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcae:	f113 0f0f 	cmn.w	r3, #15
 800dcb2:	d110      	bne.n	800dcd6 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dcba:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2202      	movs	r2, #2
 800dcce:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800dcd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	371c      	adds	r7, #28
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800dce6:	b480      	push	{r7}
 800dce8:	b085      	sub	sp, #20
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	4603      	mov	r3, r0
 800dcee:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800dcf4:	88fb      	ldrh	r3, [r7, #6]
 800dcf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dcfa:	fb92 f3f3 	sdiv	r3, r2, r3
 800dcfe:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800dd00:	68fb      	ldr	r3, [r7, #12]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b085      	sub	sp, #20
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	4603      	mov	r3, r0
 800dd16:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800dd1c:	79fb      	ldrb	r3, [r7, #7]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	005b      	lsls	r3, r3, #1
 800dd24:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
 800dd40:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800dd42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	da10      	bge.n	800dd6c <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
 800dd4c:	43db      	mvns	r3, r3
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 0307 	and.w	r3, r3, #7
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	3308      	adds	r3, #8
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
 800dd60:	3b80      	subs	r3, #128	; 0x80
 800dd62:	10db      	asrs	r3, r3, #3
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800dd6a:	e00c      	b.n	800dd86 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	f003 0307 	and.w	r3, r3, #7
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
 800dd7a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800dd7e:	10db      	asrs	r3, r3, #3
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	701a      	strb	r2, [r3, #0]
}
 800dd86:	bf00      	nop
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b088      	sub	sp, #32
 800dd96:	af02      	add	r7, sp, #8
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	330a      	adds	r3, #10
 800dda2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800ddb0:	b299      	uxth	r1, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	f7f4 f93f 	bl	8002040 <HAL_I2C_Master_Transmit>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ddc6:	693b      	ldr	r3, [r7, #16]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3718      	adds	r7, #24
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b088      	sub	sp, #32
 800ddd4:	af02      	add	r7, sp, #8
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	330a      	adds	r3, #10
 800dde0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800ddee:	f043 0301 	orr.w	r3, r3, #1
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	b299      	uxth	r1, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	4613      	mov	r3, r2
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	f7f4 fa2b 	bl	800225c <HAL_I2C_Master_Receive>
 800de06:	4603      	mov	r3, r0
 800de08:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800de0a:	693b      	ldr	r3, [r7, #16]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3718      	adds	r7, #24
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	607a      	str	r2, [r7, #4]
 800de1e:	603b      	str	r3, [r7, #0]
 800de20:	460b      	mov	r3, r1
 800de22:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800de24:	2300      	movs	r3, #0
 800de26:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	2bff      	cmp	r3, #255	; 0xff
 800de2c:	d902      	bls.n	800de34 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800de2e:	f06f 0303 	mvn.w	r3, #3
 800de32:	e01d      	b.n	800de70 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800de34:	897b      	ldrh	r3, [r7, #10]
 800de36:	0a1b      	lsrs	r3, r3, #8
 800de38:	b29b      	uxth	r3, r3
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	4b0e      	ldr	r3, [pc, #56]	; (800de78 <VL53L1_WriteMulti+0x64>)
 800de3e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800de40:	897b      	ldrh	r3, [r7, #10]
 800de42:	b2da      	uxtb	r2, r3
 800de44:	4b0c      	ldr	r3, [pc, #48]	; (800de78 <VL53L1_WriteMulti+0x64>)
 800de46:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	6879      	ldr	r1, [r7, #4]
 800de4c:	480b      	ldr	r0, [pc, #44]	; (800de7c <VL53L1_WriteMulti+0x68>)
 800de4e:	f001 fced 	bl	800f82c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	3302      	adds	r3, #2
 800de56:	461a      	mov	r2, r3
 800de58:	4907      	ldr	r1, [pc, #28]	; (800de78 <VL53L1_WriteMulti+0x64>)
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f7ff ff99 	bl	800dd92 <_I2CWrite>
 800de60:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800de68:	23f3      	movs	r3, #243	; 0xf3
 800de6a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800de6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3718      	adds	r7, #24
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20000b64 	.word	0x20000b64
 800de7c:	20000b66 	.word	0x20000b66

0800de80 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	607a      	str	r2, [r7, #4]
 800de8a:	603b      	str	r3, [r7, #0]
 800de8c:	460b      	mov	r3, r1
 800de8e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800de90:	2300      	movs	r3, #0
 800de92:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800de94:	897b      	ldrh	r3, [r7, #10]
 800de96:	0a1b      	lsrs	r3, r3, #8
 800de98:	b29b      	uxth	r3, r3
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	4b11      	ldr	r3, [pc, #68]	; (800dee4 <VL53L1_ReadMulti+0x64>)
 800de9e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800dea0:	897b      	ldrh	r3, [r7, #10]
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	4b0f      	ldr	r3, [pc, #60]	; (800dee4 <VL53L1_ReadMulti+0x64>)
 800dea6:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800dea8:	2202      	movs	r2, #2
 800deaa:	490e      	ldr	r1, [pc, #56]	; (800dee4 <VL53L1_ReadMulti+0x64>)
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f7ff ff70 	bl	800dd92 <_I2CWrite>
 800deb2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d002      	beq.n	800dec0 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800deba:	23f3      	movs	r3, #243	; 0xf3
 800debc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800debe:	e00a      	b.n	800ded6 <VL53L1_ReadMulti+0x56>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	6879      	ldr	r1, [r7, #4]
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7ff ff83 	bl	800ddd0 <_I2CRead>
 800deca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <VL53L1_ReadMulti+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ded2:	23f3      	movs	r3, #243	; 0xf3
 800ded4:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800ded6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	20000b64 	.word	0x20000b64

0800dee8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	460b      	mov	r3, r1
 800def2:	607a      	str	r2, [r7, #4]
 800def4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800def6:	2300      	movs	r3, #0
 800def8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800defa:	897b      	ldrh	r3, [r7, #10]
 800defc:	0a1b      	lsrs	r3, r3, #8
 800defe:	b29b      	uxth	r3, r3
 800df00:	b2da      	uxtb	r2, r3
 800df02:	4b11      	ldr	r3, [pc, #68]	; (800df48 <VL53L1_RdByte+0x60>)
 800df04:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800df06:	897b      	ldrh	r3, [r7, #10]
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <VL53L1_RdByte+0x60>)
 800df0c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800df0e:	2202      	movs	r2, #2
 800df10:	490d      	ldr	r1, [pc, #52]	; (800df48 <VL53L1_RdByte+0x60>)
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f7ff ff3d 	bl	800dd92 <_I2CWrite>
 800df18:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800df20:	23f3      	movs	r3, #243	; 0xf3
 800df22:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df24:	e00a      	b.n	800df3c <VL53L1_RdByte+0x54>
    }
    status_int = _I2CRead(Dev, data, 1);
 800df26:	2201      	movs	r2, #1
 800df28:	6879      	ldr	r1, [r7, #4]
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7ff ff50 	bl	800ddd0 <_I2CRead>
 800df30:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800df38:	23f3      	movs	r3, #243	; 0xf3
 800df3a:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800df3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	20000b64 	.word	0x20000b64

0800df4c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	460b      	mov	r3, r1
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800df5e:	897b      	ldrh	r3, [r7, #10]
 800df60:	0a1b      	lsrs	r3, r3, #8
 800df62:	b29b      	uxth	r3, r3
 800df64:	b2da      	uxtb	r2, r3
 800df66:	4b18      	ldr	r3, [pc, #96]	; (800dfc8 <VL53L1_RdWord+0x7c>)
 800df68:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800df6a:	897b      	ldrh	r3, [r7, #10]
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	4b16      	ldr	r3, [pc, #88]	; (800dfc8 <VL53L1_RdWord+0x7c>)
 800df70:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800df72:	2202      	movs	r2, #2
 800df74:	4914      	ldr	r1, [pc, #80]	; (800dfc8 <VL53L1_RdWord+0x7c>)
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f7ff ff0b 	bl	800dd92 <_I2CWrite>
 800df7c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800df84:	23f3      	movs	r3, #243	; 0xf3
 800df86:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df88:	e017      	b.n	800dfba <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800df8a:	2202      	movs	r2, #2
 800df8c:	490e      	ldr	r1, [pc, #56]	; (800dfc8 <VL53L1_RdWord+0x7c>)
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7ff ff1e 	bl	800ddd0 <_I2CRead>
 800df94:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800df9c:	23f3      	movs	r3, #243	; 0xf3
 800df9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dfa0:	e00b      	b.n	800dfba <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800dfa2:	4b09      	ldr	r3, [pc, #36]	; (800dfc8 <VL53L1_RdWord+0x7c>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	021b      	lsls	r3, r3, #8
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <VL53L1_RdWord+0x7c>)
 800dfae:	785b      	ldrb	r3, [r3, #1]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	4413      	add	r3, r2
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800dfba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3718      	adds	r7, #24
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	20000b64 	.word	0x20000b64

0800dfcc <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800dfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b082      	sub	sp, #8
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7f2 ff04 	bl	8000e08 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3708      	adds	r7, #8
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	4a06      	ldr	r2, [pc, #24]	; (800e034 <VL53L1_WaitUs+0x28>)
 800e01a:	fb82 1203 	smull	r1, r2, r2, r3
 800e01e:	1192      	asrs	r2, r2, #6
 800e020:	17db      	asrs	r3, r3, #31
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	4618      	mov	r0, r3
 800e026:	f7f2 feef 	bl	8000e08 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e02a:	2300      	movs	r3, #0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	10624dd3 	.word	0x10624dd3

0800e038 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800e038:	b590      	push	{r4, r7, lr}
 800e03a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800e03e:	af00      	add	r7, sp, #0
 800e040:	f107 040c 	add.w	r4, r7, #12
 800e044:	6020      	str	r0, [r4, #0]
 800e046:	f107 0008 	add.w	r0, r7, #8
 800e04a:	6001      	str	r1, [r0, #0]
 800e04c:	4619      	mov	r1, r3
 800e04e:	1dbb      	adds	r3, r7, #6
 800e050:	801a      	strh	r2, [r3, #0]
 800e052:	1d7b      	adds	r3, r7, #5
 800e054:	460a      	mov	r2, r1
 800e056:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800e058:	2300      	movs	r3, #0
 800e05a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800e076:	2300      	movs	r3, #0
 800e078:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800e07c:	f107 0310 	add.w	r3, r7, #16
 800e080:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e084:	4935      	ldr	r1, [pc, #212]	; (800e15c <VL53L1_WaitValueMaskEx+0x124>)
 800e086:	4618      	mov	r0, r3
 800e088:	f002 f83d 	bl	8010106 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800e08c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff ff9b 	bl	800dfcc <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800e096:	e03f      	b.n	800e118 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800e098:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10b      	bne.n	800e0b8 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800e0a0:	f207 2213 	addw	r2, r7, #531	; 0x213
 800e0a4:	1dbb      	adds	r3, r7, #6
 800e0a6:	8819      	ldrh	r1, [r3, #0]
 800e0a8:	f107 030c 	add.w	r3, r7, #12
 800e0ac:	6818      	ldr	r0, [r3, #0]
 800e0ae:	f7ff ff1b 	bl	800dee8 <VL53L1_RdByte>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800e0b8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800e0bc:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	1d7a      	adds	r2, r7, #5
 800e0c6:	7812      	ldrb	r2, [r2, #0]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d102      	bne.n	800e0d2 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800e0d2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d112      	bne.n	800e100 <VL53L1_WaitValueMaskEx+0xc8>
 800e0da:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d10e      	bne.n	800e100 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800e0e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00a      	beq.n	800e100 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800e0ea:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800e0ee:	f107 030c 	add.w	r3, r7, #12
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	6818      	ldr	r0, [r3, #0]
 800e0f6:	f7ff ff7a 	bl	800dfee <VL53L1_WaitMs>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800e100:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff ff61 	bl	800dfcc <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800e10a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e10e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800e118:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <VL53L1_WaitValueMaskEx+0xfe>
 800e120:	f107 0308 	add.w	r3, r7, #8
 800e124:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d203      	bcs.n	800e136 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800e12e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e132:	2b00      	cmp	r3, #0
 800e134:	d0b0      	beq.n	800e098 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800e136:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d106      	bne.n	800e14c <VL53L1_WaitValueMaskEx+0x114>
 800e13e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800e146:	23f9      	movs	r3, #249	; 0xf9
 800e148:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800e14c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800e150:	4618      	mov	r0, r3
 800e152:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800e156:	46bd      	mov	sp, r7
 800e158:	bd90      	pop	{r4, r7, pc}
 800e15a:	bf00      	nop
 800e15c:	0801070c 	.word	0x0801070c

0800e160 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	460b      	mov	r3, r1
 800e16a:	607a      	str	r2, [r7, #4]
 800e16c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e16e:	2300      	movs	r3, #0
 800e170:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e172:	897b      	ldrh	r3, [r7, #10]
 800e174:	2b0a      	cmp	r3, #10
 800e176:	d802      	bhi.n	800e17e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e178:	f06f 0309 	mvn.w	r3, #9
 800e17c:	e047      	b.n	800e20e <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e186:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	7852      	ldrb	r2, [r2, #1]
 800e194:	f002 020f 	and.w	r2, r2, #15
 800e198:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e19a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	7892      	ldrb	r2, [r2, #2]
 800e1a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e1aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	78d2      	ldrb	r2, [r2, #3]
 800e1b4:	f002 0203 	and.w	r2, r2, #3
 800e1b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e1ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	7912      	ldrb	r2, [r2, #4]
 800e1c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e1ca:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	88d8      	ldrh	r0, [r3, #6]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3305      	adds	r3, #5
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	2102      	movs	r1, #2
 800e1d8:	f7ff f90f 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e1e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e1ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	7a92      	ldrb	r2, [r2, #10]
 800e1f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e1fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e1fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e208:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e20a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3718      	adds	r7, #24
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b086      	sub	sp, #24
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	4603      	mov	r3, r0
 800e21e:	60b9      	str	r1, [r7, #8]
 800e220:	607a      	str	r2, [r7, #4]
 800e222:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e224:	2300      	movs	r3, #0
 800e226:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e228:	89fb      	ldrh	r3, [r7, #14]
 800e22a:	2b0a      	cmp	r3, #10
 800e22c:	d802      	bhi.n	800e234 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e22e:	f06f 0309 	mvn.w	r3, #9
 800e232:	e046      	b.n	800e2c2 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e23c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	3301      	adds	r3, #1
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	f003 030f 	and.w	r3, r3, #15
 800e24c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	3302      	adds	r3, #2
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e25c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	3303      	adds	r3, #3
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	f003 0303 	and.w	r3, r3, #3
 800e26c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	3304      	adds	r3, #4
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e27c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	3305      	adds	r3, #5
 800e286:	4619      	mov	r1, r3
 800e288:	2002      	movs	r0, #2
 800e28a:	f7ff f8e0 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800e28e:	4603      	mov	r3, r0
 800e290:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	79da      	ldrb	r2, [r3, #7]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	7a1a      	ldrb	r2, [r3, #8]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	3309      	adds	r3, #9
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2b0:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	7a9a      	ldrb	r2, [r3, #10]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e2be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b086      	sub	sp, #24
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e2d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d108      	bne.n	800e2f2 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e2e0:	f107 020c 	add.w	r2, r7, #12
 800e2e4:	230b      	movs	r3, #11
 800e2e6:	2101      	movs	r1, #1
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff fdc9 	bl	800de80 <VL53L1_ReadMulti>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e2f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d108      	bne.n	800e30c <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800e2fa:	f107 030c 	add.w	r3, r7, #12
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	4619      	mov	r1, r3
 800e302:	200b      	movs	r0, #11
 800e304:	f7ff ff87 	bl	800e216 <VL53L1_i2c_decode_static_nvm_managed>
 800e308:	4603      	mov	r3, r0
 800e30a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e30c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3718      	adds	r7, #24
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	460b      	mov	r3, r1
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e326:	2300      	movs	r3, #0
 800e328:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e32a:	897b      	ldrh	r3, [r7, #10]
 800e32c:	2b16      	cmp	r3, #22
 800e32e:	d802      	bhi.n	800e336 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e330:	f06f 0309 	mvn.w	r3, #9
 800e334:	e076      	b.n	800e424 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e346:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e350:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e35a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e364:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	7952      	ldrb	r2, [r2, #5]
 800e36e:	f002 020f 	and.w	r2, r2, #15
 800e372:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e374:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800e37e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	79d2      	ldrb	r2, [r2, #7]
 800e388:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e38c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e38e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	7a12      	ldrb	r2, [r2, #8]
 800e398:	f002 0203 	and.w	r2, r2, #3
 800e39c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e39e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	8958      	ldrh	r0, [r3, #10]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	3309      	adds	r3, #9
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	2102      	movs	r1, #2
 800e3ac:	f7ff f825 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	330b      	adds	r3, #11
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	2102      	movs	r1, #2
 800e3be:	f7ff f866 	bl	800d48e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	330d      	adds	r3, #13
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	2102      	movs	r1, #2
 800e3d0:	f7ff f85d 	bl	800d48e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	8a18      	ldrh	r0, [r3, #16]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	330f      	adds	r3, #15
 800e3dc:	461a      	mov	r2, r3
 800e3de:	2102      	movs	r1, #2
 800e3e0:	f7ff f80b 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800e3ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3ee:	b218      	sxth	r0, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3311      	adds	r3, #17
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	2102      	movs	r1, #2
 800e3f8:	f7ff f849 	bl	800d48e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	3313      	adds	r3, #19
 800e406:	461a      	mov	r2, r3
 800e408:	2102      	movs	r1, #2
 800e40a:	f7ff f840 	bl	800d48e <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	3315      	adds	r3, #21
 800e418:	461a      	mov	r2, r3
 800e41a:	2102      	movs	r1, #2
 800e41c:	f7ff f837 	bl	800d48e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800e420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af00      	add	r7, sp, #0
 800e432:	4603      	mov	r3, r0
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
 800e438:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e43a:	2300      	movs	r3, #0
 800e43c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e43e:	89fb      	ldrh	r3, [r7, #14]
 800e440:	2b16      	cmp	r3, #22
 800e442:	d802      	bhi.n	800e44a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e444:	f06f 0309 	mvn.w	r3, #9
 800e448:	e079      	b.n	800e53e <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	785a      	ldrb	r2, [r3, #1]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	789a      	ldrb	r2, [r3, #2]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	78da      	ldrb	r2, [r3, #3]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	791a      	ldrb	r2, [r3, #4]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	3305      	adds	r3, #5
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	f003 030f 	and.w	r3, r3, #15
 800e47c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	799a      	ldrb	r2, [r3, #6]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	3307      	adds	r3, #7
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e494:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	3308      	adds	r3, #8
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	f003 0303 	and.w	r3, r3, #3
 800e4a4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	3309      	adds	r3, #9
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	2002      	movs	r0, #2
 800e4b2:	f7fe ffcc 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	330b      	adds	r3, #11
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	2002      	movs	r0, #2
 800e4c6:	f7ff f80d 	bl	800d4e4 <VL53L1_i2c_decode_int16_t>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	330d      	adds	r3, #13
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	2002      	movs	r0, #2
 800e4da:	f7ff f803 	bl	800d4e4 <VL53L1_i2c_decode_int16_t>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	330f      	adds	r3, #15
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	2002      	movs	r0, #2
 800e4ee:	f7fe ffae 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	3311      	adds	r3, #17
 800e4fe:	4619      	mov	r1, r3
 800e500:	2002      	movs	r0, #2
 800e502:	f7fe ffef 	bl	800d4e4 <VL53L1_i2c_decode_int16_t>
 800e506:	4603      	mov	r3, r0
 800e508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e50c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	3313      	adds	r3, #19
 800e516:	4619      	mov	r1, r3
 800e518:	2002      	movs	r0, #2
 800e51a:	f7fe ffe3 	bl	800d4e4 <VL53L1_i2c_decode_int16_t>
 800e51e:	4603      	mov	r3, r0
 800e520:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	3315      	adds	r3, #21
 800e52a:	4619      	mov	r1, r3
 800e52c:	2002      	movs	r0, #2
 800e52e:	f7fe ffd9 	bl	800d4e4 <VL53L1_i2c_decode_int16_t>
 800e532:	4603      	mov	r3, r0
 800e534:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800e53a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b088      	sub	sp, #32
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e550:	2300      	movs	r3, #0
 800e552:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e554:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d108      	bne.n	800e56e <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e55c:	f107 0208 	add.w	r2, r7, #8
 800e560:	2317      	movs	r3, #23
 800e562:	210d      	movs	r1, #13
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7ff fc8b 	bl	800de80 <VL53L1_ReadMulti>
 800e56a:	4603      	mov	r3, r0
 800e56c:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e56e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d108      	bne.n	800e588 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800e576:	f107 0308 	add.w	r3, r7, #8
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	4619      	mov	r1, r3
 800e57e:	2017      	movs	r0, #23
 800e580:	f7ff ff54 	bl	800e42c <VL53L1_i2c_decode_customer_nvm_managed>
 800e584:	4603      	mov	r3, r0
 800e586:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e588:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3720      	adds	r7, #32
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	460b      	mov	r3, r1
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e5a6:	897b      	ldrh	r3, [r7, #10]
 800e5a8:	2b1f      	cmp	r3, #31
 800e5aa:	d802      	bhi.n	800e5b2 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e5ac:	f06f 0309 	mvn.w	r3, #9
 800e5b0:	e0cf      	b.n	800e752 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	2102      	movs	r1, #2
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fe ff1d 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	7892      	ldrb	r2, [r2, #2]
 800e5c8:	f002 0201 	and.w	r2, r2, #1
 800e5cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e5ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800e5d4:	68fa      	ldr	r2, [r7, #12]
 800e5d6:	78d2      	ldrb	r2, [r2, #3]
 800e5d8:	f002 020f 	and.w	r2, r2, #15
 800e5dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e5de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	7912      	ldrb	r2, [r2, #4]
 800e5e8:	f002 020f 	and.w	r2, r2, #15
 800e5ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e5ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	7952      	ldrb	r2, [r2, #5]
 800e5f8:	f002 021f 	and.w	r2, r2, #31
 800e5fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e5fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	7992      	ldrb	r2, [r2, #6]
 800e608:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e60c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e60e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	79d2      	ldrb	r2, [r2, #7]
 800e618:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e61c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e61e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	7a12      	ldrb	r2, [r2, #8]
 800e628:	f002 0201 	and.w	r2, r2, #1
 800e62c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e62e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800e638:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	7a92      	ldrb	r2, [r2, #10]
 800e642:	f002 0201 	and.w	r2, r2, #1
 800e646:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800e648:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	7ad2      	ldrb	r2, [r2, #11]
 800e652:	f002 0203 	and.w	r2, r2, #3
 800e656:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e658:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	7b12      	ldrb	r2, [r2, #12]
 800e662:	f002 021f 	and.w	r2, r2, #31
 800e666:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800e668:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	7b52      	ldrb	r2, [r2, #13]
 800e672:	f002 0203 	and.w	r2, r2, #3
 800e676:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800e678:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	7b92      	ldrb	r2, [r2, #14]
 800e682:	f002 0203 	and.w	r2, r2, #3
 800e686:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800e688:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	7bd2      	ldrb	r2, [r2, #15]
 800e692:	f002 0207 	and.w	r2, r2, #7
 800e696:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800e698:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	7c12      	ldrb	r2, [r2, #16]
 800e6a2:	f002 021f 	and.w	r2, r2, #31
 800e6a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800e6a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800e6ae:	68fa      	ldr	r2, [r7, #12]
 800e6b0:	7c52      	ldrb	r2, [r2, #17]
 800e6b2:	f002 0201 	and.w	r2, r2, #1
 800e6b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800e6b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e6c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e6cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e6d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e6e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800e6ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800e6f4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	8b18      	ldrh	r0, [r3, #24]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3318      	adds	r3, #24
 800e6fe:	461a      	mov	r2, r3
 800e700:	2102      	movs	r1, #2
 800e702:	f7fe fe7a 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800e70e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800e718:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	7f12      	ldrb	r2, [r2, #28]
 800e722:	f002 020f 	and.w	r2, r2, #15
 800e726:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800e728:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800e732:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	7f92      	ldrb	r2, [r2, #30]
 800e73c:	f002 020f 	and.w	r2, r2, #15
 800e740:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800e742:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800e748:	68fa      	ldr	r2, [r7, #12]
 800e74a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800e74c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e74e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b086      	sub	sp, #24
 800e75e:	af00      	add	r7, sp, #0
 800e760:	60f8      	str	r0, [r7, #12]
 800e762:	460b      	mov	r3, r1
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e768:	2300      	movs	r3, #0
 800e76a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e76c:	897b      	ldrh	r3, [r7, #10]
 800e76e:	2b15      	cmp	r3, #21
 800e770:	d802      	bhi.n	800e778 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e772:	f06f 0309 	mvn.w	r3, #9
 800e776:	e070      	b.n	800e85a <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e788:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e792:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	78d2      	ldrb	r2, [r2, #3]
 800e79c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e7a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e7a2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800e7a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7ac:	b298      	uxth	r0, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	3304      	adds	r3, #4
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	2102      	movs	r1, #2
 800e7b6:	f7fe fe20 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	7992      	ldrb	r2, [r2, #6]
 800e7c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e7c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e7c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800e7d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e7dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	7a52      	ldrb	r2, [r2, #9]
 800e7e6:	f002 0201 	and.w	r2, r2, #1
 800e7ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e7ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	7a92      	ldrb	r2, [r2, #10]
 800e7f6:	f002 0207 	and.w	r2, r2, #7
 800e7fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e7fc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	8998      	ldrh	r0, [r3, #12]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	330c      	adds	r3, #12
 800e806:	461a      	mov	r2, r3
 800e808:	2102      	movs	r1, #2
 800e80a:	f7fe fdf6 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	89d8      	ldrh	r0, [r3, #14]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	330e      	adds	r3, #14
 800e816:	461a      	mov	r2, r3
 800e818:	2102      	movs	r1, #2
 800e81a:	f7fe fdee 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	8a18      	ldrh	r0, [r3, #16]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	3310      	adds	r3, #16
 800e826:	461a      	mov	r2, r3
 800e828:	2102      	movs	r1, #2
 800e82a:	f7fe fde6 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e836:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e840:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e84a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e854:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b086      	sub	sp, #24
 800e866:	af00      	add	r7, sp, #0
 800e868:	60f8      	str	r0, [r7, #12]
 800e86a:	460b      	mov	r3, r1
 800e86c:	607a      	str	r2, [r7, #4]
 800e86e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e870:	2300      	movs	r3, #0
 800e872:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e874:	897b      	ldrh	r3, [r7, #10]
 800e876:	2b16      	cmp	r3, #22
 800e878:	d802      	bhi.n	800e880 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e87a:	f06f 0309 	mvn.w	r3, #9
 800e87e:	e06e      	b.n	800e95e <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	f003 030f 	and.w	r3, r3, #15
 800e888:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e896:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	7892      	ldrb	r2, [r2, #2]
 800e8a0:	f002 020f 	and.w	r2, r2, #15
 800e8a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e8a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e8b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	7912      	ldrb	r2, [r2, #4]
 800e8ba:	f002 020f 	and.w	r2, r2, #15
 800e8be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e8c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800e8ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	7992      	ldrb	r2, [r2, #6]
 800e8d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e8d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e8da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	79d2      	ldrb	r2, [r2, #7]
 800e8e4:	f002 020f 	and.w	r2, r2, #15
 800e8e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e8ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e8f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	7a52      	ldrb	r2, [r2, #9]
 800e8fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e902:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e904:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	8958      	ldrh	r0, [r3, #10]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	330a      	adds	r3, #10
 800e90e:	461a      	mov	r2, r3
 800e910:	2102      	movs	r1, #2
 800e912:	f7fe fd72 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	8998      	ldrh	r0, [r3, #12]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	330c      	adds	r3, #12
 800e91e:	461a      	mov	r2, r3
 800e920:	2102      	movs	r1, #2
 800e922:	f7fe fd6a 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800e92e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800e938:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6918      	ldr	r0, [r3, #16]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3312      	adds	r3, #18
 800e942:	461a      	mov	r2, r3
 800e944:	2104      	movs	r1, #4
 800e946:	f7fe fdf6 	bl	800d536 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	7d12      	ldrb	r2, [r2, #20]
 800e952:	f002 0201 	and.w	r2, r2, #1
 800e956:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800e958:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b086      	sub	sp, #24
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	60f8      	str	r0, [r7, #12]
 800e96e:	460b      	mov	r3, r1
 800e970:	607a      	str	r2, [r7, #4]
 800e972:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e974:	2300      	movs	r3, #0
 800e976:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e978:	897b      	ldrh	r3, [r7, #10]
 800e97a:	2b11      	cmp	r3, #17
 800e97c:	d802      	bhi.n	800e984 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e97e:	f06f 0309 	mvn.w	r3, #9
 800e982:	e071      	b.n	800ea68 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	f003 0303 	and.w	r3, r3, #3
 800e98c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	8858      	ldrh	r0, [r3, #2]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3301      	adds	r3, #1
 800e99a:	461a      	mov	r2, r3
 800e99c:	2102      	movs	r1, #2
 800e99e:	f7fe fd2c 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	8898      	ldrh	r0, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	3303      	adds	r3, #3
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	2102      	movs	r1, #2
 800e9ae:	f7fe fd24 	bl	800d3fa <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	7992      	ldrb	r2, [r2, #6]
 800e9ba:	f002 0201 	and.w	r2, r2, #1
 800e9be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e9c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	79d2      	ldrb	r2, [r2, #7]
 800e9ca:	f002 0207 	and.w	r2, r2, #7
 800e9ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e9d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e9da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e9e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	7a92      	ldrb	r2, [r2, #10]
 800e9ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e9f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e9f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	7ad2      	ldrb	r2, [r2, #11]
 800e9fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ea02:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ea04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	7b12      	ldrb	r2, [r2, #12]
 800ea0e:	f002 0203 	and.w	r2, r2, #3
 800ea12:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ea14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	7b52      	ldrb	r2, [r2, #13]
 800ea1e:	f002 0203 	and.w	r2, r2, #3
 800ea22:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ea24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	7b92      	ldrb	r2, [r2, #14]
 800ea2e:	f002 020f 	and.w	r2, r2, #15
 800ea32:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ea34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800ea3a:	68fa      	ldr	r2, [r7, #12]
 800ea3c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800ea3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800ea48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800ea52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	7c92      	ldrb	r2, [r2, #18]
 800ea5c:	f002 0203 	and.w	r2, r2, #3
 800ea60:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ea62:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ea64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3718      	adds	r7, #24
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	460b      	mov	r3, r1
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800ea82:	897b      	ldrh	r3, [r7, #10]
 800ea84:	2b04      	cmp	r3, #4
 800ea86:	d802      	bhi.n	800ea8e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ea88:	f06f 0309 	mvn.w	r3, #9
 800ea8c:	e025      	b.n	800eada <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	7852      	ldrb	r2, [r2, #1]
 800eaa4:	f002 0201 	and.w	r2, r2, #1
 800eaa8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800eaaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	7892      	ldrb	r2, [r2, #2]
 800eab4:	f002 0201 	and.w	r2, r2, #1
 800eab8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800eaba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	78d2      	ldrb	r2, [r2, #3]
 800eac4:	f002 0203 	and.w	r2, r2, #3
 800eac8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800eaca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ead4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ead6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	371c      	adds	r7, #28
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b084      	sub	sp, #16
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800eaf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d108      	bne.n	800eb0e <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 800eafc:	f107 0308 	add.w	r3, r7, #8
 800eb00:	461a      	mov	r2, r3
 800eb02:	2105      	movs	r1, #5
 800eb04:	6838      	ldr	r0, [r7, #0]
 800eb06:	f7ff ffb3 	bl	800ea70 <VL53L1_i2c_encode_system_control>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800eb0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d108      	bne.n	800eb28 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 800eb16:	f107 0208 	add.w	r2, r7, #8
 800eb1a:	2305      	movs	r3, #5
 800eb1c:	2183      	movs	r1, #131	; 0x83
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff f978 	bl	800de14 <VL53L1_WriteMulti>
 800eb24:	4603      	mov	r3, r0
 800eb26:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800eb28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eb42:	2300      	movs	r3, #0
 800eb44:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800eb46:	89fb      	ldrh	r3, [r7, #14]
 800eb48:	2b2b      	cmp	r3, #43	; 0x2b
 800eb4a:	d802      	bhi.n	800eb52 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800eb4c:	f06f 0309 	mvn.w	r3, #9
 800eb50:	e0e2      	b.n	800ed18 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb5a:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	785a      	ldrb	r2, [r3, #1]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	3302      	adds	r3, #2
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	f003 030f 	and.w	r3, r3, #15
 800eb72:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	78da      	ldrb	r2, [r3, #3]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	3304      	adds	r3, #4
 800eb84:	4619      	mov	r1, r3
 800eb86:	2002      	movs	r0, #2
 800eb88:	f7fe fc61 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	3306      	adds	r3, #6
 800eb98:	4619      	mov	r1, r3
 800eb9a:	2002      	movs	r0, #2
 800eb9c:	f7fe fc57 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800eba0:	4603      	mov	r3, r0
 800eba2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	4619      	mov	r1, r3
 800ebae:	2002      	movs	r0, #2
 800ebb0:	f7fe fc4d 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	330a      	adds	r3, #10
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	2002      	movs	r0, #2
 800ebc4:	f7fe fc43 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	330c      	adds	r3, #12
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	2002      	movs	r0, #2
 800ebd8:	f7fe fc39 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	330e      	adds	r3, #14
 800ebe8:	4619      	mov	r1, r3
 800ebea:	2002      	movs	r0, #2
 800ebec:	f7fe fc2f 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	3310      	adds	r3, #16
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	2002      	movs	r0, #2
 800ec00:	f7fe fc25 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec04:	4603      	mov	r3, r0
 800ec06:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	3312      	adds	r3, #18
 800ec10:	4619      	mov	r1, r3
 800ec12:	2002      	movs	r0, #2
 800ec14:	f7fe fc1b 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	3314      	adds	r3, #20
 800ec24:	4619      	mov	r1, r3
 800ec26:	2002      	movs	r0, #2
 800ec28:	f7fe fc11 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	3316      	adds	r3, #22
 800ec38:	4619      	mov	r1, r3
 800ec3a:	2002      	movs	r0, #2
 800ec3c:	f7fe fc07 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec40:	4603      	mov	r3, r0
 800ec42:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	3318      	adds	r3, #24
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	2002      	movs	r0, #2
 800ec50:	f7fe fbfd 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec54:	4603      	mov	r3, r0
 800ec56:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	331a      	adds	r3, #26
 800ec60:	4619      	mov	r1, r3
 800ec62:	2002      	movs	r0, #2
 800ec64:	f7fe fbf3 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	331c      	adds	r3, #28
 800ec74:	4619      	mov	r1, r3
 800ec76:	2002      	movs	r0, #2
 800ec78:	f7fe fbe9 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	331e      	adds	r3, #30
 800ec88:	4619      	mov	r1, r3
 800ec8a:	2002      	movs	r0, #2
 800ec8c:	f7fe fbdf 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ec90:	4603      	mov	r3, r0
 800ec92:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	3320      	adds	r3, #32
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	2002      	movs	r0, #2
 800eca0:	f7fe fbd5 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800eca4:	4603      	mov	r3, r0
 800eca6:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	3322      	adds	r3, #34	; 0x22
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	2002      	movs	r0, #2
 800ecb4:	f7fe fbcb 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	3324      	adds	r3, #36	; 0x24
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	2002      	movs	r0, #2
 800ecc8:	f7fe fbc1 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800eccc:	4603      	mov	r3, r0
 800ecce:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	3326      	adds	r3, #38	; 0x26
 800ecd8:	4619      	mov	r1, r3
 800ecda:	2002      	movs	r0, #2
 800ecdc:	f7fe fbb7 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ece0:	4603      	mov	r3, r0
 800ece2:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	3328      	adds	r3, #40	; 0x28
 800ecec:	4619      	mov	r1, r3
 800ecee:	2002      	movs	r0, #2
 800ecf0:	f7fe fbad 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800ed14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	4603      	mov	r3, r0
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ed32:	89fb      	ldrh	r3, [r7, #14]
 800ed34:	2b20      	cmp	r3, #32
 800ed36:	d802      	bhi.n	800ed3e <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed38:	f06f 0309 	mvn.w	r3, #9
 800ed3c:	e04d      	b.n	800edda <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800ed3e:	68b9      	ldr	r1, [r7, #8]
 800ed40:	2004      	movs	r0, #4
 800ed42:	f7fe fc21 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800ed46:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	3304      	adds	r3, #4
 800ed50:	4619      	mov	r1, r3
 800ed52:	2004      	movs	r0, #4
 800ed54:	f7fe fc18 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800ed58:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	3308      	adds	r3, #8
 800ed62:	4619      	mov	r1, r3
 800ed64:	2004      	movs	r0, #4
 800ed66:	f7fe fc2c 	bl	800d5c2 <VL53L1_i2c_decode_int32_t>
 800ed6a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	330c      	adds	r3, #12
 800ed74:	4619      	mov	r1, r3
 800ed76:	2004      	movs	r0, #4
 800ed78:	f7fe fc06 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800ed7c:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	3310      	adds	r3, #16
 800ed86:	4619      	mov	r1, r3
 800ed88:	2004      	movs	r0, #4
 800ed8a:	f7fe fbfd 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800ed8e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	3314      	adds	r3, #20
 800ed98:	4619      	mov	r1, r3
 800ed9a:	2004      	movs	r0, #4
 800ed9c:	f7fe fbf4 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800eda0:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	3318      	adds	r3, #24
 800edaa:	4619      	mov	r1, r3
 800edac:	2004      	movs	r0, #4
 800edae:	f7fe fc08 	bl	800d5c2 <VL53L1_i2c_decode_int32_t>
 800edb2:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	331c      	adds	r3, #28
 800edbc:	4619      	mov	r1, r3
 800edbe:	2004      	movs	r0, #4
 800edc0:	f7fe fbe2 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800edc4:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	f893 2020 	ldrb.w	r2, [r3, #32]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800edd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b086      	sub	sp, #24
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	4603      	mov	r3, r0
 800edea:	60b9      	str	r1, [r7, #8]
 800edec:	607a      	str	r2, [r7, #4]
 800edee:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800edf0:	2300      	movs	r3, #0
 800edf2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800edf4:	89fb      	ldrh	r3, [r7, #14]
 800edf6:	2b37      	cmp	r3, #55	; 0x37
 800edf8:	d802      	bhi.n	800ee00 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800edfa:	f06f 0309 	mvn.w	r3, #9
 800edfe:	e15e      	b.n	800f0be <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800ee00:	68b9      	ldr	r1, [r7, #8]
 800ee02:	2002      	movs	r0, #2
 800ee04:	f7fe fb23 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	3302      	adds	r3, #2
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee1a:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	3303      	adds	r3, #3
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee2a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	3304      	adds	r3, #4
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f003 0303 	and.w	r3, r3, #3
 800ee3a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	3305      	adds	r3, #5
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	3306      	adds	r3, #6
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee5a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	3307      	adds	r3, #7
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee6a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	3308      	adds	r3, #8
 800ee74:	4619      	mov	r1, r3
 800ee76:	2002      	movs	r0, #2
 800ee78:	f7fe fae9 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee82:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	330a      	adds	r3, #10
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	f003 0303 	and.w	r3, r3, #3
 800ee92:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	330b      	adds	r3, #11
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	f003 0303 	and.w	r3, r3, #3
 800eea2:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	330c      	adds	r3, #12
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	f003 030f 	and.w	r3, r3, #15
 800eeb2:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	330d      	adds	r3, #13
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	f003 0307 	and.w	r3, r3, #7
 800eec2:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	330e      	adds	r3, #14
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	330f      	adds	r3, #15
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	f003 0303 	and.w	r3, r3, #3
 800eee2:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	7c1a      	ldrb	r2, [r3, #16]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	7c5a      	ldrb	r2, [r3, #17]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	3312      	adds	r3, #18
 800eefc:	4619      	mov	r1, r3
 800eefe:	2002      	movs	r0, #2
 800ef00:	f7fe faa5 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ef04:	4603      	mov	r3, r0
 800ef06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef0a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	3316      	adds	r3, #22
 800ef14:	4619      	mov	r1, r3
 800ef16:	2002      	movs	r0, #2
 800ef18:	f7fe fa99 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	3318      	adds	r3, #24
 800ef28:	4619      	mov	r1, r3
 800ef2a:	2002      	movs	r0, #2
 800ef2c:	f7fe fa8f 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800ef30:	4603      	mov	r3, r0
 800ef32:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	331a      	adds	r3, #26
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	f003 0301 	and.w	r3, r3, #1
 800ef42:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	331b      	adds	r3, #27
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	f003 0307 	and.w	r3, r3, #7
 800ef52:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	7f1a      	ldrb	r2, [r3, #28]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	7f5a      	ldrb	r2, [r3, #29]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	331e      	adds	r3, #30
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef72:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	331f      	adds	r3, #31
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef82:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	3320      	adds	r3, #32
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	f003 0303 	and.w	r3, r3, #3
 800ef92:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	3321      	adds	r3, #33	; 0x21
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	f003 030f 	and.w	r3, r3, #15
 800efa2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	3325      	adds	r3, #37	; 0x25
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	f003 0301 	and.w	r3, r3, #1
 800efd6:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	3326      	adds	r3, #38	; 0x26
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	f003 0303 	and.w	r3, r3, #3
 800efe8:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	3327      	adds	r3, #39	; 0x27
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	f003 031f 	and.w	r3, r3, #31
 800effa:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	3328      	adds	r3, #40	; 0x28
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	f003 031f 	and.w	r3, r3, #31
 800f00c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	3329      	adds	r3, #41	; 0x29
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	f003 031f 	and.w	r3, r3, #31
 800f01e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	332a      	adds	r3, #42	; 0x2a
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	f003 0301 	and.w	r3, r3, #1
 800f030:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	332b      	adds	r3, #43	; 0x2b
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	f003 0301 	and.w	r3, r3, #1
 800f042:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	332c      	adds	r3, #44	; 0x2c
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	f003 0303 	and.w	r3, r3, #3
 800f054:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	332d      	adds	r3, #45	; 0x2d
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f066:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	332e      	adds	r3, #46	; 0x2e
 800f072:	4619      	mov	r1, r3
 800f074:	2004      	movs	r0, #4
 800f076:	f7fe fa87 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800f07a:	4603      	mov	r3, r0
 800f07c:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	3332      	adds	r3, #50	; 0x32
 800f088:	4619      	mov	r1, r3
 800f08a:	2004      	movs	r0, #4
 800f08c:	f7fe fa7c 	bl	800d588 <VL53L1_i2c_decode_uint32_t>
 800f090:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	3336      	adds	r3, #54	; 0x36
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	f003 0301 	and.w	r3, r3, #1
 800f0a0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	3337      	adds	r3, #55	; 0x37
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	f003 0301 	and.w	r3, r3, #1
 800f0b2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800f0ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b086      	sub	sp, #24
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	60b9      	str	r1, [r7, #8]
 800f0d0:	607a      	str	r2, [r7, #4]
 800f0d2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f0d8:	89fb      	ldrh	r3, [r7, #14]
 800f0da:	2b30      	cmp	r3, #48	; 0x30
 800f0dc:	d802      	bhi.n	800f0e4 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f0de:	f06f 0309 	mvn.w	r3, #9
 800f0e2:	e112      	b.n	800f30a <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	785a      	ldrb	r2, [r3, #1]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	789a      	ldrb	r2, [r3, #2]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	3303      	adds	r3, #3
 800f100:	4619      	mov	r1, r3
 800f102:	2002      	movs	r0, #2
 800f104:	f7fe f9a3 	bl	800d44e <VL53L1_i2c_decode_uint16_t>
 800f108:	4603      	mov	r3, r0
 800f10a:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	3305      	adds	r3, #5
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f11a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	3306      	adds	r3, #6
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	f003 0307 	and.w	r3, r3, #7
 800f12a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	3307      	adds	r3, #7
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	f003 0307 	and.w	r3, r3, #7
 800f13a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	3308      	adds	r3, #8
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f14a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	3309      	adds	r3, #9
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f15a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	330a      	adds	r3, #10
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	330b      	adds	r3, #11
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f17a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	330c      	adds	r3, #12
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	330d      	adds	r3, #13
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f19a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	330e      	adds	r3, #14
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1aa:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	7bda      	ldrb	r2, [r3, #15]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	7c1a      	ldrb	r2, [r3, #16]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	7c5a      	ldrb	r2, [r3, #17]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	7c9a      	ldrb	r2, [r3, #18]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	7cda      	ldrb	r2, [r3, #19]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	7d1a      	ldrb	r2, [r3, #20]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	7d5a      	ldrb	r2, [r3, #21]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	7d9a      	ldrb	r2, [r3, #22]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	7dda      	ldrb	r2, [r3, #23]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	7e1a      	ldrb	r2, [r3, #24]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	7e5a      	ldrb	r2, [r3, #25]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	7e9a      	ldrb	r2, [r3, #26]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	7eda      	ldrb	r2, [r3, #27]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	7f1a      	ldrb	r2, [r3, #28]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	7f5a      	ldrb	r2, [r3, #29]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	7f9a      	ldrb	r2, [r3, #30]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	7fda      	ldrb	r2, [r3, #31]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3718      	adds	r7, #24
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b090      	sub	sp, #64	; 0x40
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f31c:	2300      	movs	r3, #0
 800f31e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f322:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f326:	2b00      	cmp	r3, #0
 800f328:	d10a      	bne.n	800f340 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f32a:	f107 020c 	add.w	r2, r7, #12
 800f32e:	2331      	movs	r3, #49	; 0x31
 800f330:	f240 110f 	movw	r1, #271	; 0x10f
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7fe fda3 	bl	800de80 <VL53L1_ReadMulti>
 800f33a:	4603      	mov	r3, r0
 800f33c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f340:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f344:	2b00      	cmp	r3, #0
 800f346:	d109      	bne.n	800f35c <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800f348:	f107 030c 	add.w	r3, r7, #12
 800f34c:	683a      	ldr	r2, [r7, #0]
 800f34e:	4619      	mov	r1, r3
 800f350:	2031      	movs	r0, #49	; 0x31
 800f352:	f7ff feb8 	bl	800f0c6 <VL53L1_i2c_decode_nvm_copy_data>
 800f356:	4603      	mov	r3, r0
 800f358:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f35c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f360:	4618      	mov	r0, r3
 800f362:	3740      	adds	r7, #64	; 0x40
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af02      	add	r7, sp, #8
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f372:	2300      	movs	r3, #0
 800f374:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800f376:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7fe fe46 	bl	800e00c <VL53L1_WaitUs>
 800f380:	4603      	mov	r3, r0
 800f382:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800f384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10b      	bne.n	800f3a4 <VL53L1_poll_for_boot_completion+0x3c>
		status =
 800f38c:	2301      	movs	r3, #1
 800f38e:	9301      	str	r3, [sp, #4]
 800f390:	2301      	movs	r3, #1
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	2301      	movs	r3, #1
 800f396:	22e5      	movs	r2, #229	; 0xe5
 800f398:	6839      	ldr	r1, [r7, #0]
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7fe fe4c 	bl	800e038 <VL53L1_WaitValueMaskEx>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800f3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d103      	bne.n	800f3b4 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800f3ac:	2103      	movs	r1, #3
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7fd fe06 	bl	800cfc0 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800f3b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3710      	adds	r7, #16
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800f3c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f3f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f3c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f3c6:	e003      	b.n	800f3d0 <LoopCopyDataInit>

0800f3c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f3c8:	4b0c      	ldr	r3, [pc, #48]	; (800f3fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f3ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f3cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f3ce:	3104      	adds	r1, #4

0800f3d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f3d0:	480b      	ldr	r0, [pc, #44]	; (800f400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f3d2:	4b0c      	ldr	r3, [pc, #48]	; (800f404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f3d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f3d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f3d8:	d3f6      	bcc.n	800f3c8 <CopyDataInit>
  ldr  r2, =_sbss
 800f3da:	4a0b      	ldr	r2, [pc, #44]	; (800f408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f3dc:	e002      	b.n	800f3e4 <LoopFillZerobss>

0800f3de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f3de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f3e0:	f842 3b04 	str.w	r3, [r2], #4

0800f3e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f3e4:	4b09      	ldr	r3, [pc, #36]	; (800f40c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f3e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f3e8:	d3f9      	bcc.n	800f3de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f3ea:	f7f5 f9cb 	bl	8004784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f3ee:	f000 f98d 	bl	800f70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f3f2:	f7f4 fffb 	bl	80043ec <main>
  bx  lr    
 800f3f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800f3f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800f3fc:	080107d8 	.word	0x080107d8
  ldr  r0, =_sdata
 800f400:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f404:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 800f408:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 800f40c:	20000c68 	.word	0x20000c68

0800f410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f410:	e7fe      	b.n	800f410 <ADC_IRQHandler>
	...

0800f414 <__sflush_r>:
 800f414:	898a      	ldrh	r2, [r1, #12]
 800f416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41a:	4605      	mov	r5, r0
 800f41c:	0710      	lsls	r0, r2, #28
 800f41e:	460c      	mov	r4, r1
 800f420:	d45a      	bmi.n	800f4d8 <__sflush_r+0xc4>
 800f422:	684b      	ldr	r3, [r1, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	dc05      	bgt.n	800f434 <__sflush_r+0x20>
 800f428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	dc02      	bgt.n	800f434 <__sflush_r+0x20>
 800f42e:	2000      	movs	r0, #0
 800f430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f436:	2e00      	cmp	r6, #0
 800f438:	d0f9      	beq.n	800f42e <__sflush_r+0x1a>
 800f43a:	2300      	movs	r3, #0
 800f43c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f440:	682f      	ldr	r7, [r5, #0]
 800f442:	602b      	str	r3, [r5, #0]
 800f444:	d033      	beq.n	800f4ae <__sflush_r+0x9a>
 800f446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	075a      	lsls	r2, r3, #29
 800f44c:	d505      	bpl.n	800f45a <__sflush_r+0x46>
 800f44e:	6863      	ldr	r3, [r4, #4]
 800f450:	1ac0      	subs	r0, r0, r3
 800f452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f454:	b10b      	cbz	r3, 800f45a <__sflush_r+0x46>
 800f456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f458:	1ac0      	subs	r0, r0, r3
 800f45a:	2300      	movs	r3, #0
 800f45c:	4602      	mov	r2, r0
 800f45e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f460:	6a21      	ldr	r1, [r4, #32]
 800f462:	4628      	mov	r0, r5
 800f464:	47b0      	blx	r6
 800f466:	1c43      	adds	r3, r0, #1
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	d106      	bne.n	800f47a <__sflush_r+0x66>
 800f46c:	6829      	ldr	r1, [r5, #0]
 800f46e:	291d      	cmp	r1, #29
 800f470:	d84b      	bhi.n	800f50a <__sflush_r+0xf6>
 800f472:	4a2b      	ldr	r2, [pc, #172]	; (800f520 <__sflush_r+0x10c>)
 800f474:	40ca      	lsrs	r2, r1
 800f476:	07d6      	lsls	r6, r2, #31
 800f478:	d547      	bpl.n	800f50a <__sflush_r+0xf6>
 800f47a:	2200      	movs	r2, #0
 800f47c:	6062      	str	r2, [r4, #4]
 800f47e:	04d9      	lsls	r1, r3, #19
 800f480:	6922      	ldr	r2, [r4, #16]
 800f482:	6022      	str	r2, [r4, #0]
 800f484:	d504      	bpl.n	800f490 <__sflush_r+0x7c>
 800f486:	1c42      	adds	r2, r0, #1
 800f488:	d101      	bne.n	800f48e <__sflush_r+0x7a>
 800f48a:	682b      	ldr	r3, [r5, #0]
 800f48c:	b903      	cbnz	r3, 800f490 <__sflush_r+0x7c>
 800f48e:	6560      	str	r0, [r4, #84]	; 0x54
 800f490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f492:	602f      	str	r7, [r5, #0]
 800f494:	2900      	cmp	r1, #0
 800f496:	d0ca      	beq.n	800f42e <__sflush_r+0x1a>
 800f498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f49c:	4299      	cmp	r1, r3
 800f49e:	d002      	beq.n	800f4a6 <__sflush_r+0x92>
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f000 f9d7 	bl	800f854 <_free_r>
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	6360      	str	r0, [r4, #52]	; 0x34
 800f4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ae:	6a21      	ldr	r1, [r4, #32]
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	47b0      	blx	r6
 800f4b6:	1c41      	adds	r1, r0, #1
 800f4b8:	d1c6      	bne.n	800f448 <__sflush_r+0x34>
 800f4ba:	682b      	ldr	r3, [r5, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d0c3      	beq.n	800f448 <__sflush_r+0x34>
 800f4c0:	2b1d      	cmp	r3, #29
 800f4c2:	d001      	beq.n	800f4c8 <__sflush_r+0xb4>
 800f4c4:	2b16      	cmp	r3, #22
 800f4c6:	d101      	bne.n	800f4cc <__sflush_r+0xb8>
 800f4c8:	602f      	str	r7, [r5, #0]
 800f4ca:	e7b0      	b.n	800f42e <__sflush_r+0x1a>
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4d2:	81a3      	strh	r3, [r4, #12]
 800f4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d8:	690f      	ldr	r7, [r1, #16]
 800f4da:	2f00      	cmp	r7, #0
 800f4dc:	d0a7      	beq.n	800f42e <__sflush_r+0x1a>
 800f4de:	0793      	lsls	r3, r2, #30
 800f4e0:	680e      	ldr	r6, [r1, #0]
 800f4e2:	bf08      	it	eq
 800f4e4:	694b      	ldreq	r3, [r1, #20]
 800f4e6:	600f      	str	r7, [r1, #0]
 800f4e8:	bf18      	it	ne
 800f4ea:	2300      	movne	r3, #0
 800f4ec:	eba6 0807 	sub.w	r8, r6, r7
 800f4f0:	608b      	str	r3, [r1, #8]
 800f4f2:	f1b8 0f00 	cmp.w	r8, #0
 800f4f6:	dd9a      	ble.n	800f42e <__sflush_r+0x1a>
 800f4f8:	4643      	mov	r3, r8
 800f4fa:	463a      	mov	r2, r7
 800f4fc:	6a21      	ldr	r1, [r4, #32]
 800f4fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f500:	4628      	mov	r0, r5
 800f502:	47b0      	blx	r6
 800f504:	2800      	cmp	r0, #0
 800f506:	dc07      	bgt.n	800f518 <__sflush_r+0x104>
 800f508:	89a3      	ldrh	r3, [r4, #12]
 800f50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f50e:	81a3      	strh	r3, [r4, #12]
 800f510:	f04f 30ff 	mov.w	r0, #4294967295
 800f514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f518:	4407      	add	r7, r0
 800f51a:	eba8 0800 	sub.w	r8, r8, r0
 800f51e:	e7e8      	b.n	800f4f2 <__sflush_r+0xde>
 800f520:	20400001 	.word	0x20400001

0800f524 <_fflush_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	690b      	ldr	r3, [r1, #16]
 800f528:	4605      	mov	r5, r0
 800f52a:	460c      	mov	r4, r1
 800f52c:	b1db      	cbz	r3, 800f566 <_fflush_r+0x42>
 800f52e:	b118      	cbz	r0, 800f538 <_fflush_r+0x14>
 800f530:	6983      	ldr	r3, [r0, #24]
 800f532:	b90b      	cbnz	r3, 800f538 <_fflush_r+0x14>
 800f534:	f000 f860 	bl	800f5f8 <__sinit>
 800f538:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <_fflush_r+0x48>)
 800f53a:	429c      	cmp	r4, r3
 800f53c:	d109      	bne.n	800f552 <_fflush_r+0x2e>
 800f53e:	686c      	ldr	r4, [r5, #4]
 800f540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f544:	b17b      	cbz	r3, 800f566 <_fflush_r+0x42>
 800f546:	4621      	mov	r1, r4
 800f548:	4628      	mov	r0, r5
 800f54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f54e:	f7ff bf61 	b.w	800f414 <__sflush_r>
 800f552:	4b07      	ldr	r3, [pc, #28]	; (800f570 <_fflush_r+0x4c>)
 800f554:	429c      	cmp	r4, r3
 800f556:	d101      	bne.n	800f55c <_fflush_r+0x38>
 800f558:	68ac      	ldr	r4, [r5, #8]
 800f55a:	e7f1      	b.n	800f540 <_fflush_r+0x1c>
 800f55c:	4b05      	ldr	r3, [pc, #20]	; (800f574 <_fflush_r+0x50>)
 800f55e:	429c      	cmp	r4, r3
 800f560:	bf08      	it	eq
 800f562:	68ec      	ldreq	r4, [r5, #12]
 800f564:	e7ec      	b.n	800f540 <_fflush_r+0x1c>
 800f566:	2000      	movs	r0, #0
 800f568:	bd38      	pop	{r3, r4, r5, pc}
 800f56a:	bf00      	nop
 800f56c:	08010750 	.word	0x08010750
 800f570:	08010770 	.word	0x08010770
 800f574:	08010730 	.word	0x08010730

0800f578 <_cleanup_r>:
 800f578:	4901      	ldr	r1, [pc, #4]	; (800f580 <_cleanup_r+0x8>)
 800f57a:	f000 b8a9 	b.w	800f6d0 <_fwalk_reent>
 800f57e:	bf00      	nop
 800f580:	0800f525 	.word	0x0800f525

0800f584 <std.isra.0>:
 800f584:	2300      	movs	r3, #0
 800f586:	b510      	push	{r4, lr}
 800f588:	4604      	mov	r4, r0
 800f58a:	6003      	str	r3, [r0, #0]
 800f58c:	6043      	str	r3, [r0, #4]
 800f58e:	6083      	str	r3, [r0, #8]
 800f590:	8181      	strh	r1, [r0, #12]
 800f592:	6643      	str	r3, [r0, #100]	; 0x64
 800f594:	81c2      	strh	r2, [r0, #14]
 800f596:	6103      	str	r3, [r0, #16]
 800f598:	6143      	str	r3, [r0, #20]
 800f59a:	6183      	str	r3, [r0, #24]
 800f59c:	4619      	mov	r1, r3
 800f59e:	2208      	movs	r2, #8
 800f5a0:	305c      	adds	r0, #92	; 0x5c
 800f5a2:	f000 f94e 	bl	800f842 <memset>
 800f5a6:	4b05      	ldr	r3, [pc, #20]	; (800f5bc <std.isra.0+0x38>)
 800f5a8:	6263      	str	r3, [r4, #36]	; 0x24
 800f5aa:	4b05      	ldr	r3, [pc, #20]	; (800f5c0 <std.isra.0+0x3c>)
 800f5ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5ae:	4b05      	ldr	r3, [pc, #20]	; (800f5c4 <std.isra.0+0x40>)
 800f5b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5b2:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <std.isra.0+0x44>)
 800f5b4:	6224      	str	r4, [r4, #32]
 800f5b6:	6323      	str	r3, [r4, #48]	; 0x30
 800f5b8:	bd10      	pop	{r4, pc}
 800f5ba:	bf00      	nop
 800f5bc:	08010071 	.word	0x08010071
 800f5c0:	08010093 	.word	0x08010093
 800f5c4:	080100cb 	.word	0x080100cb
 800f5c8:	080100ef 	.word	0x080100ef

0800f5cc <__sfmoreglue>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	1e4a      	subs	r2, r1, #1
 800f5d0:	2568      	movs	r5, #104	; 0x68
 800f5d2:	4355      	muls	r5, r2
 800f5d4:	460e      	mov	r6, r1
 800f5d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5da:	f000 f989 	bl	800f8f0 <_malloc_r>
 800f5de:	4604      	mov	r4, r0
 800f5e0:	b140      	cbz	r0, 800f5f4 <__sfmoreglue+0x28>
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	e880 0042 	stmia.w	r0, {r1, r6}
 800f5e8:	300c      	adds	r0, #12
 800f5ea:	60a0      	str	r0, [r4, #8]
 800f5ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f5f0:	f000 f927 	bl	800f842 <memset>
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}

0800f5f8 <__sinit>:
 800f5f8:	6983      	ldr	r3, [r0, #24]
 800f5fa:	b510      	push	{r4, lr}
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	bb33      	cbnz	r3, 800f64e <__sinit+0x56>
 800f600:	6483      	str	r3, [r0, #72]	; 0x48
 800f602:	64c3      	str	r3, [r0, #76]	; 0x4c
 800f604:	6503      	str	r3, [r0, #80]	; 0x50
 800f606:	4b12      	ldr	r3, [pc, #72]	; (800f650 <__sinit+0x58>)
 800f608:	4a12      	ldr	r2, [pc, #72]	; (800f654 <__sinit+0x5c>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	6282      	str	r2, [r0, #40]	; 0x28
 800f60e:	4298      	cmp	r0, r3
 800f610:	bf04      	itt	eq
 800f612:	2301      	moveq	r3, #1
 800f614:	6183      	streq	r3, [r0, #24]
 800f616:	f000 f81f 	bl	800f658 <__sfp>
 800f61a:	6060      	str	r0, [r4, #4]
 800f61c:	4620      	mov	r0, r4
 800f61e:	f000 f81b 	bl	800f658 <__sfp>
 800f622:	60a0      	str	r0, [r4, #8]
 800f624:	4620      	mov	r0, r4
 800f626:	f000 f817 	bl	800f658 <__sfp>
 800f62a:	2200      	movs	r2, #0
 800f62c:	60e0      	str	r0, [r4, #12]
 800f62e:	2104      	movs	r1, #4
 800f630:	6860      	ldr	r0, [r4, #4]
 800f632:	f7ff ffa7 	bl	800f584 <std.isra.0>
 800f636:	2201      	movs	r2, #1
 800f638:	2109      	movs	r1, #9
 800f63a:	68a0      	ldr	r0, [r4, #8]
 800f63c:	f7ff ffa2 	bl	800f584 <std.isra.0>
 800f640:	2202      	movs	r2, #2
 800f642:	2112      	movs	r1, #18
 800f644:	68e0      	ldr	r0, [r4, #12]
 800f646:	f7ff ff9d 	bl	800f584 <std.isra.0>
 800f64a:	2301      	movs	r3, #1
 800f64c:	61a3      	str	r3, [r4, #24]
 800f64e:	bd10      	pop	{r4, pc}
 800f650:	08010790 	.word	0x08010790
 800f654:	0800f579 	.word	0x0800f579

0800f658 <__sfp>:
 800f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65a:	4b1c      	ldr	r3, [pc, #112]	; (800f6cc <__sfp+0x74>)
 800f65c:	681e      	ldr	r6, [r3, #0]
 800f65e:	69b3      	ldr	r3, [r6, #24]
 800f660:	4607      	mov	r7, r0
 800f662:	b913      	cbnz	r3, 800f66a <__sfp+0x12>
 800f664:	4630      	mov	r0, r6
 800f666:	f7ff ffc7 	bl	800f5f8 <__sinit>
 800f66a:	3648      	adds	r6, #72	; 0x48
 800f66c:	68b4      	ldr	r4, [r6, #8]
 800f66e:	6873      	ldr	r3, [r6, #4]
 800f670:	3b01      	subs	r3, #1
 800f672:	d503      	bpl.n	800f67c <__sfp+0x24>
 800f674:	6833      	ldr	r3, [r6, #0]
 800f676:	b133      	cbz	r3, 800f686 <__sfp+0x2e>
 800f678:	6836      	ldr	r6, [r6, #0]
 800f67a:	e7f7      	b.n	800f66c <__sfp+0x14>
 800f67c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f680:	b16d      	cbz	r5, 800f69e <__sfp+0x46>
 800f682:	3468      	adds	r4, #104	; 0x68
 800f684:	e7f4      	b.n	800f670 <__sfp+0x18>
 800f686:	2104      	movs	r1, #4
 800f688:	4638      	mov	r0, r7
 800f68a:	f7ff ff9f 	bl	800f5cc <__sfmoreglue>
 800f68e:	6030      	str	r0, [r6, #0]
 800f690:	2800      	cmp	r0, #0
 800f692:	d1f1      	bne.n	800f678 <__sfp+0x20>
 800f694:	230c      	movs	r3, #12
 800f696:	603b      	str	r3, [r7, #0]
 800f698:	4604      	mov	r4, r0
 800f69a:	4620      	mov	r0, r4
 800f69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f69e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6a2:	81e3      	strh	r3, [r4, #14]
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	81a3      	strh	r3, [r4, #12]
 800f6a8:	6665      	str	r5, [r4, #100]	; 0x64
 800f6aa:	6025      	str	r5, [r4, #0]
 800f6ac:	60a5      	str	r5, [r4, #8]
 800f6ae:	6065      	str	r5, [r4, #4]
 800f6b0:	6125      	str	r5, [r4, #16]
 800f6b2:	6165      	str	r5, [r4, #20]
 800f6b4:	61a5      	str	r5, [r4, #24]
 800f6b6:	2208      	movs	r2, #8
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6be:	f000 f8c0 	bl	800f842 <memset>
 800f6c2:	6365      	str	r5, [r4, #52]	; 0x34
 800f6c4:	63a5      	str	r5, [r4, #56]	; 0x38
 800f6c6:	64a5      	str	r5, [r4, #72]	; 0x48
 800f6c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f6ca:	e7e6      	b.n	800f69a <__sfp+0x42>
 800f6cc:	08010790 	.word	0x08010790

0800f6d0 <_fwalk_reent>:
 800f6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	4689      	mov	r9, r1
 800f6d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6dc:	2600      	movs	r6, #0
 800f6de:	b914      	cbnz	r4, 800f6e6 <_fwalk_reent+0x16>
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e6:	68a5      	ldr	r5, [r4, #8]
 800f6e8:	6867      	ldr	r7, [r4, #4]
 800f6ea:	3f01      	subs	r7, #1
 800f6ec:	d501      	bpl.n	800f6f2 <_fwalk_reent+0x22>
 800f6ee:	6824      	ldr	r4, [r4, #0]
 800f6f0:	e7f5      	b.n	800f6de <_fwalk_reent+0xe>
 800f6f2:	89ab      	ldrh	r3, [r5, #12]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d907      	bls.n	800f708 <_fwalk_reent+0x38>
 800f6f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	d003      	beq.n	800f708 <_fwalk_reent+0x38>
 800f700:	4629      	mov	r1, r5
 800f702:	4640      	mov	r0, r8
 800f704:	47c8      	blx	r9
 800f706:	4306      	orrs	r6, r0
 800f708:	3568      	adds	r5, #104	; 0x68
 800f70a:	e7ee      	b.n	800f6ea <_fwalk_reent+0x1a>

0800f70c <__libc_init_array>:
 800f70c:	b570      	push	{r4, r5, r6, lr}
 800f70e:	4e0d      	ldr	r6, [pc, #52]	; (800f744 <__libc_init_array+0x38>)
 800f710:	4c0d      	ldr	r4, [pc, #52]	; (800f748 <__libc_init_array+0x3c>)
 800f712:	1ba4      	subs	r4, r4, r6
 800f714:	10a4      	asrs	r4, r4, #2
 800f716:	2500      	movs	r5, #0
 800f718:	42a5      	cmp	r5, r4
 800f71a:	d109      	bne.n	800f730 <__libc_init_array+0x24>
 800f71c:	4e0b      	ldr	r6, [pc, #44]	; (800f74c <__libc_init_array+0x40>)
 800f71e:	4c0c      	ldr	r4, [pc, #48]	; (800f750 <__libc_init_array+0x44>)
 800f720:	f000 fe66 	bl	80103f0 <_init>
 800f724:	1ba4      	subs	r4, r4, r6
 800f726:	10a4      	asrs	r4, r4, #2
 800f728:	2500      	movs	r5, #0
 800f72a:	42a5      	cmp	r5, r4
 800f72c:	d105      	bne.n	800f73a <__libc_init_array+0x2e>
 800f72e:	bd70      	pop	{r4, r5, r6, pc}
 800f730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f734:	4798      	blx	r3
 800f736:	3501      	adds	r5, #1
 800f738:	e7ee      	b.n	800f718 <__libc_init_array+0xc>
 800f73a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f73e:	4798      	blx	r3
 800f740:	3501      	adds	r5, #1
 800f742:	e7f2      	b.n	800f72a <__libc_init_array+0x1e>
 800f744:	080107d0 	.word	0x080107d0
 800f748:	080107d0 	.word	0x080107d0
 800f74c:	080107d0 	.word	0x080107d0
 800f750:	080107d4 	.word	0x080107d4

0800f754 <__swhatbuf_r>:
 800f754:	b570      	push	{r4, r5, r6, lr}
 800f756:	460e      	mov	r6, r1
 800f758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f75c:	2900      	cmp	r1, #0
 800f75e:	b090      	sub	sp, #64	; 0x40
 800f760:	4614      	mov	r4, r2
 800f762:	461d      	mov	r5, r3
 800f764:	da07      	bge.n	800f776 <__swhatbuf_r+0x22>
 800f766:	2300      	movs	r3, #0
 800f768:	602b      	str	r3, [r5, #0]
 800f76a:	89b3      	ldrh	r3, [r6, #12]
 800f76c:	061a      	lsls	r2, r3, #24
 800f76e:	d410      	bmi.n	800f792 <__swhatbuf_r+0x3e>
 800f770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f774:	e00e      	b.n	800f794 <__swhatbuf_r+0x40>
 800f776:	aa01      	add	r2, sp, #4
 800f778:	f000 fdbc 	bl	80102f4 <_fstat_r>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	dbf2      	blt.n	800f766 <__swhatbuf_r+0x12>
 800f780:	9a02      	ldr	r2, [sp, #8]
 800f782:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f786:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f78a:	425a      	negs	r2, r3
 800f78c:	415a      	adcs	r2, r3
 800f78e:	602a      	str	r2, [r5, #0]
 800f790:	e7ee      	b.n	800f770 <__swhatbuf_r+0x1c>
 800f792:	2340      	movs	r3, #64	; 0x40
 800f794:	2000      	movs	r0, #0
 800f796:	6023      	str	r3, [r4, #0]
 800f798:	b010      	add	sp, #64	; 0x40
 800f79a:	bd70      	pop	{r4, r5, r6, pc}

0800f79c <__smakebuf_r>:
 800f79c:	898b      	ldrh	r3, [r1, #12]
 800f79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7a0:	079d      	lsls	r5, r3, #30
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	d507      	bpl.n	800f7b8 <__smakebuf_r+0x1c>
 800f7a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	6123      	str	r3, [r4, #16]
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	6163      	str	r3, [r4, #20]
 800f7b4:	b002      	add	sp, #8
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	ab01      	add	r3, sp, #4
 800f7ba:	466a      	mov	r2, sp
 800f7bc:	f7ff ffca 	bl	800f754 <__swhatbuf_r>
 800f7c0:	9900      	ldr	r1, [sp, #0]
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	f000 f893 	bl	800f8f0 <_malloc_r>
 800f7ca:	b948      	cbnz	r0, 800f7e0 <__smakebuf_r+0x44>
 800f7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d0:	059a      	lsls	r2, r3, #22
 800f7d2:	d4ef      	bmi.n	800f7b4 <__smakebuf_r+0x18>
 800f7d4:	f023 0303 	bic.w	r3, r3, #3
 800f7d8:	f043 0302 	orr.w	r3, r3, #2
 800f7dc:	81a3      	strh	r3, [r4, #12]
 800f7de:	e7e3      	b.n	800f7a8 <__smakebuf_r+0xc>
 800f7e0:	4b0d      	ldr	r3, [pc, #52]	; (800f818 <__smakebuf_r+0x7c>)
 800f7e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f7e4:	89a3      	ldrh	r3, [r4, #12]
 800f7e6:	6020      	str	r0, [r4, #0]
 800f7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7ec:	81a3      	strh	r3, [r4, #12]
 800f7ee:	9b00      	ldr	r3, [sp, #0]
 800f7f0:	6163      	str	r3, [r4, #20]
 800f7f2:	9b01      	ldr	r3, [sp, #4]
 800f7f4:	6120      	str	r0, [r4, #16]
 800f7f6:	b15b      	cbz	r3, 800f810 <__smakebuf_r+0x74>
 800f7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f000 fd8b 	bl	8010318 <_isatty_r>
 800f802:	b128      	cbz	r0, 800f810 <__smakebuf_r+0x74>
 800f804:	89a3      	ldrh	r3, [r4, #12]
 800f806:	f023 0303 	bic.w	r3, r3, #3
 800f80a:	f043 0301 	orr.w	r3, r3, #1
 800f80e:	81a3      	strh	r3, [r4, #12]
 800f810:	89a3      	ldrh	r3, [r4, #12]
 800f812:	431d      	orrs	r5, r3
 800f814:	81a5      	strh	r5, [r4, #12]
 800f816:	e7cd      	b.n	800f7b4 <__smakebuf_r+0x18>
 800f818:	0800f579 	.word	0x0800f579

0800f81c <malloc>:
 800f81c:	4b02      	ldr	r3, [pc, #8]	; (800f828 <malloc+0xc>)
 800f81e:	4601      	mov	r1, r0
 800f820:	6818      	ldr	r0, [r3, #0]
 800f822:	f000 b865 	b.w	800f8f0 <_malloc_r>
 800f826:	bf00      	nop
 800f828:	200002f4 	.word	0x200002f4

0800f82c <memcpy>:
 800f82c:	b510      	push	{r4, lr}
 800f82e:	1e43      	subs	r3, r0, #1
 800f830:	440a      	add	r2, r1
 800f832:	4291      	cmp	r1, r2
 800f834:	d100      	bne.n	800f838 <memcpy+0xc>
 800f836:	bd10      	pop	{r4, pc}
 800f838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f840:	e7f7      	b.n	800f832 <memcpy+0x6>

0800f842 <memset>:
 800f842:	4402      	add	r2, r0
 800f844:	4603      	mov	r3, r0
 800f846:	4293      	cmp	r3, r2
 800f848:	d100      	bne.n	800f84c <memset+0xa>
 800f84a:	4770      	bx	lr
 800f84c:	f803 1b01 	strb.w	r1, [r3], #1
 800f850:	e7f9      	b.n	800f846 <memset+0x4>
	...

0800f854 <_free_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4605      	mov	r5, r0
 800f858:	2900      	cmp	r1, #0
 800f85a:	d045      	beq.n	800f8e8 <_free_r+0x94>
 800f85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f860:	1f0c      	subs	r4, r1, #4
 800f862:	2b00      	cmp	r3, #0
 800f864:	bfb8      	it	lt
 800f866:	18e4      	addlt	r4, r4, r3
 800f868:	f000 fd78 	bl	801035c <__malloc_lock>
 800f86c:	4a1f      	ldr	r2, [pc, #124]	; (800f8ec <_free_r+0x98>)
 800f86e:	6813      	ldr	r3, [r2, #0]
 800f870:	4610      	mov	r0, r2
 800f872:	b933      	cbnz	r3, 800f882 <_free_r+0x2e>
 800f874:	6063      	str	r3, [r4, #4]
 800f876:	6014      	str	r4, [r2, #0]
 800f878:	4628      	mov	r0, r5
 800f87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f87e:	f000 bd6e 	b.w	801035e <__malloc_unlock>
 800f882:	42a3      	cmp	r3, r4
 800f884:	d90c      	bls.n	800f8a0 <_free_r+0x4c>
 800f886:	6821      	ldr	r1, [r4, #0]
 800f888:	1862      	adds	r2, r4, r1
 800f88a:	4293      	cmp	r3, r2
 800f88c:	bf04      	itt	eq
 800f88e:	681a      	ldreq	r2, [r3, #0]
 800f890:	685b      	ldreq	r3, [r3, #4]
 800f892:	6063      	str	r3, [r4, #4]
 800f894:	bf04      	itt	eq
 800f896:	1852      	addeq	r2, r2, r1
 800f898:	6022      	streq	r2, [r4, #0]
 800f89a:	6004      	str	r4, [r0, #0]
 800f89c:	e7ec      	b.n	800f878 <_free_r+0x24>
 800f89e:	4613      	mov	r3, r2
 800f8a0:	685a      	ldr	r2, [r3, #4]
 800f8a2:	b10a      	cbz	r2, 800f8a8 <_free_r+0x54>
 800f8a4:	42a2      	cmp	r2, r4
 800f8a6:	d9fa      	bls.n	800f89e <_free_r+0x4a>
 800f8a8:	6819      	ldr	r1, [r3, #0]
 800f8aa:	1858      	adds	r0, r3, r1
 800f8ac:	42a0      	cmp	r0, r4
 800f8ae:	d10b      	bne.n	800f8c8 <_free_r+0x74>
 800f8b0:	6820      	ldr	r0, [r4, #0]
 800f8b2:	4401      	add	r1, r0
 800f8b4:	1858      	adds	r0, r3, r1
 800f8b6:	4282      	cmp	r2, r0
 800f8b8:	6019      	str	r1, [r3, #0]
 800f8ba:	d1dd      	bne.n	800f878 <_free_r+0x24>
 800f8bc:	6810      	ldr	r0, [r2, #0]
 800f8be:	6852      	ldr	r2, [r2, #4]
 800f8c0:	605a      	str	r2, [r3, #4]
 800f8c2:	4401      	add	r1, r0
 800f8c4:	6019      	str	r1, [r3, #0]
 800f8c6:	e7d7      	b.n	800f878 <_free_r+0x24>
 800f8c8:	d902      	bls.n	800f8d0 <_free_r+0x7c>
 800f8ca:	230c      	movs	r3, #12
 800f8cc:	602b      	str	r3, [r5, #0]
 800f8ce:	e7d3      	b.n	800f878 <_free_r+0x24>
 800f8d0:	6820      	ldr	r0, [r4, #0]
 800f8d2:	1821      	adds	r1, r4, r0
 800f8d4:	428a      	cmp	r2, r1
 800f8d6:	bf04      	itt	eq
 800f8d8:	6811      	ldreq	r1, [r2, #0]
 800f8da:	6852      	ldreq	r2, [r2, #4]
 800f8dc:	6062      	str	r2, [r4, #4]
 800f8de:	bf04      	itt	eq
 800f8e0:	1809      	addeq	r1, r1, r0
 800f8e2:	6021      	streq	r1, [r4, #0]
 800f8e4:	605c      	str	r4, [r3, #4]
 800f8e6:	e7c7      	b.n	800f878 <_free_r+0x24>
 800f8e8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ea:	bf00      	nop
 800f8ec:	200003b0 	.word	0x200003b0

0800f8f0 <_malloc_r>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	1ccd      	adds	r5, r1, #3
 800f8f4:	f025 0503 	bic.w	r5, r5, #3
 800f8f8:	3508      	adds	r5, #8
 800f8fa:	2d0c      	cmp	r5, #12
 800f8fc:	bf38      	it	cc
 800f8fe:	250c      	movcc	r5, #12
 800f900:	2d00      	cmp	r5, #0
 800f902:	4606      	mov	r6, r0
 800f904:	db01      	blt.n	800f90a <_malloc_r+0x1a>
 800f906:	42a9      	cmp	r1, r5
 800f908:	d903      	bls.n	800f912 <_malloc_r+0x22>
 800f90a:	230c      	movs	r3, #12
 800f90c:	6033      	str	r3, [r6, #0]
 800f90e:	2000      	movs	r0, #0
 800f910:	bd70      	pop	{r4, r5, r6, pc}
 800f912:	f000 fd23 	bl	801035c <__malloc_lock>
 800f916:	4a23      	ldr	r2, [pc, #140]	; (800f9a4 <_malloc_r+0xb4>)
 800f918:	6814      	ldr	r4, [r2, #0]
 800f91a:	4621      	mov	r1, r4
 800f91c:	b991      	cbnz	r1, 800f944 <_malloc_r+0x54>
 800f91e:	4c22      	ldr	r4, [pc, #136]	; (800f9a8 <_malloc_r+0xb8>)
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	b91b      	cbnz	r3, 800f92c <_malloc_r+0x3c>
 800f924:	4630      	mov	r0, r6
 800f926:	f000 fb93 	bl	8010050 <_sbrk_r>
 800f92a:	6020      	str	r0, [r4, #0]
 800f92c:	4629      	mov	r1, r5
 800f92e:	4630      	mov	r0, r6
 800f930:	f000 fb8e 	bl	8010050 <_sbrk_r>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d126      	bne.n	800f986 <_malloc_r+0x96>
 800f938:	230c      	movs	r3, #12
 800f93a:	6033      	str	r3, [r6, #0]
 800f93c:	4630      	mov	r0, r6
 800f93e:	f000 fd0e 	bl	801035e <__malloc_unlock>
 800f942:	e7e4      	b.n	800f90e <_malloc_r+0x1e>
 800f944:	680b      	ldr	r3, [r1, #0]
 800f946:	1b5b      	subs	r3, r3, r5
 800f948:	d41a      	bmi.n	800f980 <_malloc_r+0x90>
 800f94a:	2b0b      	cmp	r3, #11
 800f94c:	d90f      	bls.n	800f96e <_malloc_r+0x7e>
 800f94e:	600b      	str	r3, [r1, #0]
 800f950:	50cd      	str	r5, [r1, r3]
 800f952:	18cc      	adds	r4, r1, r3
 800f954:	4630      	mov	r0, r6
 800f956:	f000 fd02 	bl	801035e <__malloc_unlock>
 800f95a:	f104 000b 	add.w	r0, r4, #11
 800f95e:	1d23      	adds	r3, r4, #4
 800f960:	f020 0007 	bic.w	r0, r0, #7
 800f964:	1ac3      	subs	r3, r0, r3
 800f966:	d01b      	beq.n	800f9a0 <_malloc_r+0xb0>
 800f968:	425a      	negs	r2, r3
 800f96a:	50e2      	str	r2, [r4, r3]
 800f96c:	bd70      	pop	{r4, r5, r6, pc}
 800f96e:	428c      	cmp	r4, r1
 800f970:	bf0d      	iteet	eq
 800f972:	6863      	ldreq	r3, [r4, #4]
 800f974:	684b      	ldrne	r3, [r1, #4]
 800f976:	6063      	strne	r3, [r4, #4]
 800f978:	6013      	streq	r3, [r2, #0]
 800f97a:	bf18      	it	ne
 800f97c:	460c      	movne	r4, r1
 800f97e:	e7e9      	b.n	800f954 <_malloc_r+0x64>
 800f980:	460c      	mov	r4, r1
 800f982:	6849      	ldr	r1, [r1, #4]
 800f984:	e7ca      	b.n	800f91c <_malloc_r+0x2c>
 800f986:	1cc4      	adds	r4, r0, #3
 800f988:	f024 0403 	bic.w	r4, r4, #3
 800f98c:	42a0      	cmp	r0, r4
 800f98e:	d005      	beq.n	800f99c <_malloc_r+0xac>
 800f990:	1a21      	subs	r1, r4, r0
 800f992:	4630      	mov	r0, r6
 800f994:	f000 fb5c 	bl	8010050 <_sbrk_r>
 800f998:	3001      	adds	r0, #1
 800f99a:	d0cd      	beq.n	800f938 <_malloc_r+0x48>
 800f99c:	6025      	str	r5, [r4, #0]
 800f99e:	e7d9      	b.n	800f954 <_malloc_r+0x64>
 800f9a0:	bd70      	pop	{r4, r5, r6, pc}
 800f9a2:	bf00      	nop
 800f9a4:	200003b0 	.word	0x200003b0
 800f9a8:	200003b4 	.word	0x200003b4

0800f9ac <__sfputc_r>:
 800f9ac:	6893      	ldr	r3, [r2, #8]
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	b410      	push	{r4}
 800f9b4:	6093      	str	r3, [r2, #8]
 800f9b6:	da09      	bge.n	800f9cc <__sfputc_r+0x20>
 800f9b8:	6994      	ldr	r4, [r2, #24]
 800f9ba:	42a3      	cmp	r3, r4
 800f9bc:	db02      	blt.n	800f9c4 <__sfputc_r+0x18>
 800f9be:	b2cb      	uxtb	r3, r1
 800f9c0:	2b0a      	cmp	r3, #10
 800f9c2:	d103      	bne.n	800f9cc <__sfputc_r+0x20>
 800f9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9c8:	f000 bbb2 	b.w	8010130 <__swbuf_r>
 800f9cc:	6813      	ldr	r3, [r2, #0]
 800f9ce:	1c58      	adds	r0, r3, #1
 800f9d0:	6010      	str	r0, [r2, #0]
 800f9d2:	7019      	strb	r1, [r3, #0]
 800f9d4:	b2c8      	uxtb	r0, r1
 800f9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <__sfputs_r>:
 800f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9de:	4606      	mov	r6, r0
 800f9e0:	460f      	mov	r7, r1
 800f9e2:	4614      	mov	r4, r2
 800f9e4:	18d5      	adds	r5, r2, r3
 800f9e6:	42ac      	cmp	r4, r5
 800f9e8:	d101      	bne.n	800f9ee <__sfputs_r+0x12>
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	e007      	b.n	800f9fe <__sfputs_r+0x22>
 800f9ee:	463a      	mov	r2, r7
 800f9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f7ff ffd9 	bl	800f9ac <__sfputc_r>
 800f9fa:	1c43      	adds	r3, r0, #1
 800f9fc:	d1f3      	bne.n	800f9e6 <__sfputs_r+0xa>
 800f9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa00 <_vfiprintf_r>:
 800fa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa04:	b09d      	sub	sp, #116	; 0x74
 800fa06:	460c      	mov	r4, r1
 800fa08:	4617      	mov	r7, r2
 800fa0a:	9303      	str	r3, [sp, #12]
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	b118      	cbz	r0, 800fa18 <_vfiprintf_r+0x18>
 800fa10:	6983      	ldr	r3, [r0, #24]
 800fa12:	b90b      	cbnz	r3, 800fa18 <_vfiprintf_r+0x18>
 800fa14:	f7ff fdf0 	bl	800f5f8 <__sinit>
 800fa18:	4b7c      	ldr	r3, [pc, #496]	; (800fc0c <_vfiprintf_r+0x20c>)
 800fa1a:	429c      	cmp	r4, r3
 800fa1c:	d157      	bne.n	800face <_vfiprintf_r+0xce>
 800fa1e:	6874      	ldr	r4, [r6, #4]
 800fa20:	89a3      	ldrh	r3, [r4, #12]
 800fa22:	0718      	lsls	r0, r3, #28
 800fa24:	d55d      	bpl.n	800fae2 <_vfiprintf_r+0xe2>
 800fa26:	6923      	ldr	r3, [r4, #16]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d05a      	beq.n	800fae2 <_vfiprintf_r+0xe2>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa30:	2320      	movs	r3, #32
 800fa32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa36:	2330      	movs	r3, #48	; 0x30
 800fa38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa3c:	f04f 0b01 	mov.w	fp, #1
 800fa40:	46b8      	mov	r8, r7
 800fa42:	4645      	mov	r5, r8
 800fa44:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d155      	bne.n	800faf8 <_vfiprintf_r+0xf8>
 800fa4c:	ebb8 0a07 	subs.w	sl, r8, r7
 800fa50:	d00b      	beq.n	800fa6a <_vfiprintf_r+0x6a>
 800fa52:	4653      	mov	r3, sl
 800fa54:	463a      	mov	r2, r7
 800fa56:	4621      	mov	r1, r4
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f7ff ffbf 	bl	800f9dc <__sfputs_r>
 800fa5e:	3001      	adds	r0, #1
 800fa60:	f000 80c4 	beq.w	800fbec <_vfiprintf_r+0x1ec>
 800fa64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa66:	4453      	add	r3, sl
 800fa68:	9309      	str	r3, [sp, #36]	; 0x24
 800fa6a:	f898 3000 	ldrb.w	r3, [r8]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 80bc 	beq.w	800fbec <_vfiprintf_r+0x1ec>
 800fa74:	2300      	movs	r3, #0
 800fa76:	f04f 32ff 	mov.w	r2, #4294967295
 800fa7a:	9304      	str	r3, [sp, #16]
 800fa7c:	9307      	str	r3, [sp, #28]
 800fa7e:	9205      	str	r2, [sp, #20]
 800fa80:	9306      	str	r3, [sp, #24]
 800fa82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa86:	931a      	str	r3, [sp, #104]	; 0x68
 800fa88:	2205      	movs	r2, #5
 800fa8a:	7829      	ldrb	r1, [r5, #0]
 800fa8c:	4860      	ldr	r0, [pc, #384]	; (800fc10 <_vfiprintf_r+0x210>)
 800fa8e:	f7f0 fba7 	bl	80001e0 <memchr>
 800fa92:	f105 0801 	add.w	r8, r5, #1
 800fa96:	9b04      	ldr	r3, [sp, #16]
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d131      	bne.n	800fb00 <_vfiprintf_r+0x100>
 800fa9c:	06d9      	lsls	r1, r3, #27
 800fa9e:	bf44      	itt	mi
 800faa0:	2220      	movmi	r2, #32
 800faa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800faa6:	071a      	lsls	r2, r3, #28
 800faa8:	bf44      	itt	mi
 800faaa:	222b      	movmi	r2, #43	; 0x2b
 800faac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fab0:	782a      	ldrb	r2, [r5, #0]
 800fab2:	2a2a      	cmp	r2, #42	; 0x2a
 800fab4:	d02c      	beq.n	800fb10 <_vfiprintf_r+0x110>
 800fab6:	9a07      	ldr	r2, [sp, #28]
 800fab8:	2100      	movs	r1, #0
 800faba:	200a      	movs	r0, #10
 800fabc:	46a8      	mov	r8, r5
 800fabe:	3501      	adds	r5, #1
 800fac0:	f898 3000 	ldrb.w	r3, [r8]
 800fac4:	3b30      	subs	r3, #48	; 0x30
 800fac6:	2b09      	cmp	r3, #9
 800fac8:	d96d      	bls.n	800fba6 <_vfiprintf_r+0x1a6>
 800faca:	b371      	cbz	r1, 800fb2a <_vfiprintf_r+0x12a>
 800facc:	e026      	b.n	800fb1c <_vfiprintf_r+0x11c>
 800face:	4b51      	ldr	r3, [pc, #324]	; (800fc14 <_vfiprintf_r+0x214>)
 800fad0:	429c      	cmp	r4, r3
 800fad2:	d101      	bne.n	800fad8 <_vfiprintf_r+0xd8>
 800fad4:	68b4      	ldr	r4, [r6, #8]
 800fad6:	e7a3      	b.n	800fa20 <_vfiprintf_r+0x20>
 800fad8:	4b4f      	ldr	r3, [pc, #316]	; (800fc18 <_vfiprintf_r+0x218>)
 800fada:	429c      	cmp	r4, r3
 800fadc:	bf08      	it	eq
 800fade:	68f4      	ldreq	r4, [r6, #12]
 800fae0:	e79e      	b.n	800fa20 <_vfiprintf_r+0x20>
 800fae2:	4621      	mov	r1, r4
 800fae4:	4630      	mov	r0, r6
 800fae6:	f000 fb87 	bl	80101f8 <__swsetup_r>
 800faea:	2800      	cmp	r0, #0
 800faec:	d09e      	beq.n	800fa2c <_vfiprintf_r+0x2c>
 800faee:	f04f 30ff 	mov.w	r0, #4294967295
 800faf2:	b01d      	add	sp, #116	; 0x74
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	2b25      	cmp	r3, #37	; 0x25
 800fafa:	d0a7      	beq.n	800fa4c <_vfiprintf_r+0x4c>
 800fafc:	46a8      	mov	r8, r5
 800fafe:	e7a0      	b.n	800fa42 <_vfiprintf_r+0x42>
 800fb00:	4a43      	ldr	r2, [pc, #268]	; (800fc10 <_vfiprintf_r+0x210>)
 800fb02:	1a80      	subs	r0, r0, r2
 800fb04:	fa0b f000 	lsl.w	r0, fp, r0
 800fb08:	4318      	orrs	r0, r3
 800fb0a:	9004      	str	r0, [sp, #16]
 800fb0c:	4645      	mov	r5, r8
 800fb0e:	e7bb      	b.n	800fa88 <_vfiprintf_r+0x88>
 800fb10:	9a03      	ldr	r2, [sp, #12]
 800fb12:	1d11      	adds	r1, r2, #4
 800fb14:	6812      	ldr	r2, [r2, #0]
 800fb16:	9103      	str	r1, [sp, #12]
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	db01      	blt.n	800fb20 <_vfiprintf_r+0x120>
 800fb1c:	9207      	str	r2, [sp, #28]
 800fb1e:	e004      	b.n	800fb2a <_vfiprintf_r+0x12a>
 800fb20:	4252      	negs	r2, r2
 800fb22:	f043 0302 	orr.w	r3, r3, #2
 800fb26:	9207      	str	r2, [sp, #28]
 800fb28:	9304      	str	r3, [sp, #16]
 800fb2a:	f898 3000 	ldrb.w	r3, [r8]
 800fb2e:	2b2e      	cmp	r3, #46	; 0x2e
 800fb30:	d110      	bne.n	800fb54 <_vfiprintf_r+0x154>
 800fb32:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fb36:	2b2a      	cmp	r3, #42	; 0x2a
 800fb38:	f108 0101 	add.w	r1, r8, #1
 800fb3c:	d137      	bne.n	800fbae <_vfiprintf_r+0x1ae>
 800fb3e:	9b03      	ldr	r3, [sp, #12]
 800fb40:	1d1a      	adds	r2, r3, #4
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	9203      	str	r2, [sp, #12]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	bfb8      	it	lt
 800fb4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb4e:	f108 0802 	add.w	r8, r8, #2
 800fb52:	9305      	str	r3, [sp, #20]
 800fb54:	4d31      	ldr	r5, [pc, #196]	; (800fc1c <_vfiprintf_r+0x21c>)
 800fb56:	f898 1000 	ldrb.w	r1, [r8]
 800fb5a:	2203      	movs	r2, #3
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	f7f0 fb3f 	bl	80001e0 <memchr>
 800fb62:	b140      	cbz	r0, 800fb76 <_vfiprintf_r+0x176>
 800fb64:	2340      	movs	r3, #64	; 0x40
 800fb66:	1b40      	subs	r0, r0, r5
 800fb68:	fa03 f000 	lsl.w	r0, r3, r0
 800fb6c:	9b04      	ldr	r3, [sp, #16]
 800fb6e:	4303      	orrs	r3, r0
 800fb70:	9304      	str	r3, [sp, #16]
 800fb72:	f108 0801 	add.w	r8, r8, #1
 800fb76:	f898 1000 	ldrb.w	r1, [r8]
 800fb7a:	4829      	ldr	r0, [pc, #164]	; (800fc20 <_vfiprintf_r+0x220>)
 800fb7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb80:	2206      	movs	r2, #6
 800fb82:	f108 0701 	add.w	r7, r8, #1
 800fb86:	f7f0 fb2b 	bl	80001e0 <memchr>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d034      	beq.n	800fbf8 <_vfiprintf_r+0x1f8>
 800fb8e:	4b25      	ldr	r3, [pc, #148]	; (800fc24 <_vfiprintf_r+0x224>)
 800fb90:	bb03      	cbnz	r3, 800fbd4 <_vfiprintf_r+0x1d4>
 800fb92:	9b03      	ldr	r3, [sp, #12]
 800fb94:	3307      	adds	r3, #7
 800fb96:	f023 0307 	bic.w	r3, r3, #7
 800fb9a:	3308      	adds	r3, #8
 800fb9c:	9303      	str	r3, [sp, #12]
 800fb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fba0:	444b      	add	r3, r9
 800fba2:	9309      	str	r3, [sp, #36]	; 0x24
 800fba4:	e74c      	b.n	800fa40 <_vfiprintf_r+0x40>
 800fba6:	fb00 3202 	mla	r2, r0, r2, r3
 800fbaa:	2101      	movs	r1, #1
 800fbac:	e786      	b.n	800fabc <_vfiprintf_r+0xbc>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	9305      	str	r3, [sp, #20]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	250a      	movs	r5, #10
 800fbb6:	4688      	mov	r8, r1
 800fbb8:	3101      	adds	r1, #1
 800fbba:	f898 2000 	ldrb.w	r2, [r8]
 800fbbe:	3a30      	subs	r2, #48	; 0x30
 800fbc0:	2a09      	cmp	r2, #9
 800fbc2:	d903      	bls.n	800fbcc <_vfiprintf_r+0x1cc>
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d0c5      	beq.n	800fb54 <_vfiprintf_r+0x154>
 800fbc8:	9005      	str	r0, [sp, #20]
 800fbca:	e7c3      	b.n	800fb54 <_vfiprintf_r+0x154>
 800fbcc:	fb05 2000 	mla	r0, r5, r0, r2
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e7f0      	b.n	800fbb6 <_vfiprintf_r+0x1b6>
 800fbd4:	ab03      	add	r3, sp, #12
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	4622      	mov	r2, r4
 800fbda:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <_vfiprintf_r+0x228>)
 800fbdc:	a904      	add	r1, sp, #16
 800fbde:	4630      	mov	r0, r6
 800fbe0:	f3af 8000 	nop.w
 800fbe4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fbe8:	4681      	mov	r9, r0
 800fbea:	d1d8      	bne.n	800fb9e <_vfiprintf_r+0x19e>
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	065b      	lsls	r3, r3, #25
 800fbf0:	f53f af7d 	bmi.w	800faee <_vfiprintf_r+0xee>
 800fbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbf6:	e77c      	b.n	800faf2 <_vfiprintf_r+0xf2>
 800fbf8:	ab03      	add	r3, sp, #12
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	4622      	mov	r2, r4
 800fbfe:	4b0a      	ldr	r3, [pc, #40]	; (800fc28 <_vfiprintf_r+0x228>)
 800fc00:	a904      	add	r1, sp, #16
 800fc02:	4630      	mov	r0, r6
 800fc04:	f000 f888 	bl	800fd18 <_printf_i>
 800fc08:	e7ec      	b.n	800fbe4 <_vfiprintf_r+0x1e4>
 800fc0a:	bf00      	nop
 800fc0c:	08010750 	.word	0x08010750
 800fc10:	08010794 	.word	0x08010794
 800fc14:	08010770 	.word	0x08010770
 800fc18:	08010730 	.word	0x08010730
 800fc1c:	0801079a 	.word	0x0801079a
 800fc20:	0801079e 	.word	0x0801079e
 800fc24:	00000000 	.word	0x00000000
 800fc28:	0800f9dd 	.word	0x0800f9dd

0800fc2c <_printf_common>:
 800fc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc30:	4691      	mov	r9, r2
 800fc32:	461f      	mov	r7, r3
 800fc34:	688a      	ldr	r2, [r1, #8]
 800fc36:	690b      	ldr	r3, [r1, #16]
 800fc38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	bfb8      	it	lt
 800fc40:	4613      	movlt	r3, r2
 800fc42:	f8c9 3000 	str.w	r3, [r9]
 800fc46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	b112      	cbz	r2, 800fc56 <_printf_common+0x2a>
 800fc50:	3301      	adds	r3, #1
 800fc52:	f8c9 3000 	str.w	r3, [r9]
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	0699      	lsls	r1, r3, #26
 800fc5a:	bf42      	ittt	mi
 800fc5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fc60:	3302      	addmi	r3, #2
 800fc62:	f8c9 3000 	strmi.w	r3, [r9]
 800fc66:	6825      	ldr	r5, [r4, #0]
 800fc68:	f015 0506 	ands.w	r5, r5, #6
 800fc6c:	d107      	bne.n	800fc7e <_printf_common+0x52>
 800fc6e:	f104 0a19 	add.w	sl, r4, #25
 800fc72:	68e3      	ldr	r3, [r4, #12]
 800fc74:	f8d9 2000 	ldr.w	r2, [r9]
 800fc78:	1a9b      	subs	r3, r3, r2
 800fc7a:	429d      	cmp	r5, r3
 800fc7c:	db29      	blt.n	800fcd2 <_printf_common+0xa6>
 800fc7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fc82:	6822      	ldr	r2, [r4, #0]
 800fc84:	3300      	adds	r3, #0
 800fc86:	bf18      	it	ne
 800fc88:	2301      	movne	r3, #1
 800fc8a:	0692      	lsls	r2, r2, #26
 800fc8c:	d42e      	bmi.n	800fcec <_printf_common+0xc0>
 800fc8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc92:	4639      	mov	r1, r7
 800fc94:	4630      	mov	r0, r6
 800fc96:	47c0      	blx	r8
 800fc98:	3001      	adds	r0, #1
 800fc9a:	d021      	beq.n	800fce0 <_printf_common+0xb4>
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	68e5      	ldr	r5, [r4, #12]
 800fca0:	f8d9 2000 	ldr.w	r2, [r9]
 800fca4:	f003 0306 	and.w	r3, r3, #6
 800fca8:	2b04      	cmp	r3, #4
 800fcaa:	bf08      	it	eq
 800fcac:	1aad      	subeq	r5, r5, r2
 800fcae:	68a3      	ldr	r3, [r4, #8]
 800fcb0:	6922      	ldr	r2, [r4, #16]
 800fcb2:	bf0c      	ite	eq
 800fcb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcb8:	2500      	movne	r5, #0
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	bfc4      	itt	gt
 800fcbe:	1a9b      	subgt	r3, r3, r2
 800fcc0:	18ed      	addgt	r5, r5, r3
 800fcc2:	f04f 0900 	mov.w	r9, #0
 800fcc6:	341a      	adds	r4, #26
 800fcc8:	454d      	cmp	r5, r9
 800fcca:	d11b      	bne.n	800fd04 <_printf_common+0xd8>
 800fccc:	2000      	movs	r0, #0
 800fcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	4652      	mov	r2, sl
 800fcd6:	4639      	mov	r1, r7
 800fcd8:	4630      	mov	r0, r6
 800fcda:	47c0      	blx	r8
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d103      	bne.n	800fce8 <_printf_common+0xbc>
 800fce0:	f04f 30ff 	mov.w	r0, #4294967295
 800fce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fce8:	3501      	adds	r5, #1
 800fcea:	e7c2      	b.n	800fc72 <_printf_common+0x46>
 800fcec:	18e1      	adds	r1, r4, r3
 800fcee:	1c5a      	adds	r2, r3, #1
 800fcf0:	2030      	movs	r0, #48	; 0x30
 800fcf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcf6:	4422      	add	r2, r4
 800fcf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd00:	3302      	adds	r3, #2
 800fd02:	e7c4      	b.n	800fc8e <_printf_common+0x62>
 800fd04:	2301      	movs	r3, #1
 800fd06:	4622      	mov	r2, r4
 800fd08:	4639      	mov	r1, r7
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	47c0      	blx	r8
 800fd0e:	3001      	adds	r0, #1
 800fd10:	d0e6      	beq.n	800fce0 <_printf_common+0xb4>
 800fd12:	f109 0901 	add.w	r9, r9, #1
 800fd16:	e7d7      	b.n	800fcc8 <_printf_common+0x9c>

0800fd18 <_printf_i>:
 800fd18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd1c:	4617      	mov	r7, r2
 800fd1e:	7e0a      	ldrb	r2, [r1, #24]
 800fd20:	b085      	sub	sp, #20
 800fd22:	2a6e      	cmp	r2, #110	; 0x6e
 800fd24:	4698      	mov	r8, r3
 800fd26:	4606      	mov	r6, r0
 800fd28:	460c      	mov	r4, r1
 800fd2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd2c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800fd30:	f000 80bc 	beq.w	800feac <_printf_i+0x194>
 800fd34:	d81a      	bhi.n	800fd6c <_printf_i+0x54>
 800fd36:	2a63      	cmp	r2, #99	; 0x63
 800fd38:	d02e      	beq.n	800fd98 <_printf_i+0x80>
 800fd3a:	d80a      	bhi.n	800fd52 <_printf_i+0x3a>
 800fd3c:	2a00      	cmp	r2, #0
 800fd3e:	f000 80c8 	beq.w	800fed2 <_printf_i+0x1ba>
 800fd42:	2a58      	cmp	r2, #88	; 0x58
 800fd44:	f000 808a 	beq.w	800fe5c <_printf_i+0x144>
 800fd48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800fd50:	e02a      	b.n	800fda8 <_printf_i+0x90>
 800fd52:	2a64      	cmp	r2, #100	; 0x64
 800fd54:	d001      	beq.n	800fd5a <_printf_i+0x42>
 800fd56:	2a69      	cmp	r2, #105	; 0x69
 800fd58:	d1f6      	bne.n	800fd48 <_printf_i+0x30>
 800fd5a:	6821      	ldr	r1, [r4, #0]
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800fd62:	d023      	beq.n	800fdac <_printf_i+0x94>
 800fd64:	1d11      	adds	r1, r2, #4
 800fd66:	6019      	str	r1, [r3, #0]
 800fd68:	6813      	ldr	r3, [r2, #0]
 800fd6a:	e027      	b.n	800fdbc <_printf_i+0xa4>
 800fd6c:	2a73      	cmp	r2, #115	; 0x73
 800fd6e:	f000 80b4 	beq.w	800feda <_printf_i+0x1c2>
 800fd72:	d808      	bhi.n	800fd86 <_printf_i+0x6e>
 800fd74:	2a6f      	cmp	r2, #111	; 0x6f
 800fd76:	d02a      	beq.n	800fdce <_printf_i+0xb6>
 800fd78:	2a70      	cmp	r2, #112	; 0x70
 800fd7a:	d1e5      	bne.n	800fd48 <_printf_i+0x30>
 800fd7c:	680a      	ldr	r2, [r1, #0]
 800fd7e:	f042 0220 	orr.w	r2, r2, #32
 800fd82:	600a      	str	r2, [r1, #0]
 800fd84:	e003      	b.n	800fd8e <_printf_i+0x76>
 800fd86:	2a75      	cmp	r2, #117	; 0x75
 800fd88:	d021      	beq.n	800fdce <_printf_i+0xb6>
 800fd8a:	2a78      	cmp	r2, #120	; 0x78
 800fd8c:	d1dc      	bne.n	800fd48 <_printf_i+0x30>
 800fd8e:	2278      	movs	r2, #120	; 0x78
 800fd90:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800fd94:	496e      	ldr	r1, [pc, #440]	; (800ff50 <_printf_i+0x238>)
 800fd96:	e064      	b.n	800fe62 <_printf_i+0x14a>
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800fd9e:	1d11      	adds	r1, r2, #4
 800fda0:	6019      	str	r1, [r3, #0]
 800fda2:	6813      	ldr	r3, [r2, #0]
 800fda4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fda8:	2301      	movs	r3, #1
 800fdaa:	e0a3      	b.n	800fef4 <_printf_i+0x1dc>
 800fdac:	f011 0f40 	tst.w	r1, #64	; 0x40
 800fdb0:	f102 0104 	add.w	r1, r2, #4
 800fdb4:	6019      	str	r1, [r3, #0]
 800fdb6:	d0d7      	beq.n	800fd68 <_printf_i+0x50>
 800fdb8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	da03      	bge.n	800fdc8 <_printf_i+0xb0>
 800fdc0:	222d      	movs	r2, #45	; 0x2d
 800fdc2:	425b      	negs	r3, r3
 800fdc4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fdc8:	4962      	ldr	r1, [pc, #392]	; (800ff54 <_printf_i+0x23c>)
 800fdca:	220a      	movs	r2, #10
 800fdcc:	e017      	b.n	800fdfe <_printf_i+0xe6>
 800fdce:	6820      	ldr	r0, [r4, #0]
 800fdd0:	6819      	ldr	r1, [r3, #0]
 800fdd2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800fdd6:	d003      	beq.n	800fde0 <_printf_i+0xc8>
 800fdd8:	1d08      	adds	r0, r1, #4
 800fdda:	6018      	str	r0, [r3, #0]
 800fddc:	680b      	ldr	r3, [r1, #0]
 800fdde:	e006      	b.n	800fdee <_printf_i+0xd6>
 800fde0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fde4:	f101 0004 	add.w	r0, r1, #4
 800fde8:	6018      	str	r0, [r3, #0]
 800fdea:	d0f7      	beq.n	800fddc <_printf_i+0xc4>
 800fdec:	880b      	ldrh	r3, [r1, #0]
 800fdee:	4959      	ldr	r1, [pc, #356]	; (800ff54 <_printf_i+0x23c>)
 800fdf0:	2a6f      	cmp	r2, #111	; 0x6f
 800fdf2:	bf14      	ite	ne
 800fdf4:	220a      	movne	r2, #10
 800fdf6:	2208      	moveq	r2, #8
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800fdfe:	6865      	ldr	r5, [r4, #4]
 800fe00:	60a5      	str	r5, [r4, #8]
 800fe02:	2d00      	cmp	r5, #0
 800fe04:	f2c0 809c 	blt.w	800ff40 <_printf_i+0x228>
 800fe08:	6820      	ldr	r0, [r4, #0]
 800fe0a:	f020 0004 	bic.w	r0, r0, #4
 800fe0e:	6020      	str	r0, [r4, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d13f      	bne.n	800fe94 <_printf_i+0x17c>
 800fe14:	2d00      	cmp	r5, #0
 800fe16:	f040 8095 	bne.w	800ff44 <_printf_i+0x22c>
 800fe1a:	4675      	mov	r5, lr
 800fe1c:	2a08      	cmp	r2, #8
 800fe1e:	d10b      	bne.n	800fe38 <_printf_i+0x120>
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	07da      	lsls	r2, r3, #31
 800fe24:	d508      	bpl.n	800fe38 <_printf_i+0x120>
 800fe26:	6923      	ldr	r3, [r4, #16]
 800fe28:	6862      	ldr	r2, [r4, #4]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	bfde      	ittt	le
 800fe2e:	2330      	movle	r3, #48	; 0x30
 800fe30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe38:	ebae 0305 	sub.w	r3, lr, r5
 800fe3c:	6123      	str	r3, [r4, #16]
 800fe3e:	f8cd 8000 	str.w	r8, [sp]
 800fe42:	463b      	mov	r3, r7
 800fe44:	aa03      	add	r2, sp, #12
 800fe46:	4621      	mov	r1, r4
 800fe48:	4630      	mov	r0, r6
 800fe4a:	f7ff feef 	bl	800fc2c <_printf_common>
 800fe4e:	3001      	adds	r0, #1
 800fe50:	d155      	bne.n	800fefe <_printf_i+0x1e6>
 800fe52:	f04f 30ff 	mov.w	r0, #4294967295
 800fe56:	b005      	add	sp, #20
 800fe58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe5c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800fe60:	493c      	ldr	r1, [pc, #240]	; (800ff54 <_printf_i+0x23c>)
 800fe62:	6822      	ldr	r2, [r4, #0]
 800fe64:	6818      	ldr	r0, [r3, #0]
 800fe66:	f012 0f80 	tst.w	r2, #128	; 0x80
 800fe6a:	f100 0504 	add.w	r5, r0, #4
 800fe6e:	601d      	str	r5, [r3, #0]
 800fe70:	d001      	beq.n	800fe76 <_printf_i+0x15e>
 800fe72:	6803      	ldr	r3, [r0, #0]
 800fe74:	e002      	b.n	800fe7c <_printf_i+0x164>
 800fe76:	0655      	lsls	r5, r2, #25
 800fe78:	d5fb      	bpl.n	800fe72 <_printf_i+0x15a>
 800fe7a:	8803      	ldrh	r3, [r0, #0]
 800fe7c:	07d0      	lsls	r0, r2, #31
 800fe7e:	bf44      	itt	mi
 800fe80:	f042 0220 	orrmi.w	r2, r2, #32
 800fe84:	6022      	strmi	r2, [r4, #0]
 800fe86:	b91b      	cbnz	r3, 800fe90 <_printf_i+0x178>
 800fe88:	6822      	ldr	r2, [r4, #0]
 800fe8a:	f022 0220 	bic.w	r2, r2, #32
 800fe8e:	6022      	str	r2, [r4, #0]
 800fe90:	2210      	movs	r2, #16
 800fe92:	e7b1      	b.n	800fdf8 <_printf_i+0xe0>
 800fe94:	4675      	mov	r5, lr
 800fe96:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe9a:	fb02 3310 	mls	r3, r2, r0, r3
 800fe9e:	5ccb      	ldrb	r3, [r1, r3]
 800fea0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fea4:	4603      	mov	r3, r0
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d1f5      	bne.n	800fe96 <_printf_i+0x17e>
 800feaa:	e7b7      	b.n	800fe1c <_printf_i+0x104>
 800feac:	6808      	ldr	r0, [r1, #0]
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	6949      	ldr	r1, [r1, #20]
 800feb2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800feb6:	d004      	beq.n	800fec2 <_printf_i+0x1aa>
 800feb8:	1d10      	adds	r0, r2, #4
 800feba:	6018      	str	r0, [r3, #0]
 800febc:	6813      	ldr	r3, [r2, #0]
 800febe:	6019      	str	r1, [r3, #0]
 800fec0:	e007      	b.n	800fed2 <_printf_i+0x1ba>
 800fec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fec6:	f102 0004 	add.w	r0, r2, #4
 800feca:	6018      	str	r0, [r3, #0]
 800fecc:	6813      	ldr	r3, [r2, #0]
 800fece:	d0f6      	beq.n	800febe <_printf_i+0x1a6>
 800fed0:	8019      	strh	r1, [r3, #0]
 800fed2:	2300      	movs	r3, #0
 800fed4:	6123      	str	r3, [r4, #16]
 800fed6:	4675      	mov	r5, lr
 800fed8:	e7b1      	b.n	800fe3e <_printf_i+0x126>
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	1d11      	adds	r1, r2, #4
 800fede:	6019      	str	r1, [r3, #0]
 800fee0:	6815      	ldr	r5, [r2, #0]
 800fee2:	6862      	ldr	r2, [r4, #4]
 800fee4:	2100      	movs	r1, #0
 800fee6:	4628      	mov	r0, r5
 800fee8:	f7f0 f97a 	bl	80001e0 <memchr>
 800feec:	b108      	cbz	r0, 800fef2 <_printf_i+0x1da>
 800feee:	1b40      	subs	r0, r0, r5
 800fef0:	6060      	str	r0, [r4, #4]
 800fef2:	6863      	ldr	r3, [r4, #4]
 800fef4:	6123      	str	r3, [r4, #16]
 800fef6:	2300      	movs	r3, #0
 800fef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fefc:	e79f      	b.n	800fe3e <_printf_i+0x126>
 800fefe:	6923      	ldr	r3, [r4, #16]
 800ff00:	462a      	mov	r2, r5
 800ff02:	4639      	mov	r1, r7
 800ff04:	4630      	mov	r0, r6
 800ff06:	47c0      	blx	r8
 800ff08:	3001      	adds	r0, #1
 800ff0a:	d0a2      	beq.n	800fe52 <_printf_i+0x13a>
 800ff0c:	6823      	ldr	r3, [r4, #0]
 800ff0e:	079b      	lsls	r3, r3, #30
 800ff10:	d507      	bpl.n	800ff22 <_printf_i+0x20a>
 800ff12:	2500      	movs	r5, #0
 800ff14:	f104 0919 	add.w	r9, r4, #25
 800ff18:	68e3      	ldr	r3, [r4, #12]
 800ff1a:	9a03      	ldr	r2, [sp, #12]
 800ff1c:	1a9b      	subs	r3, r3, r2
 800ff1e:	429d      	cmp	r5, r3
 800ff20:	db05      	blt.n	800ff2e <_printf_i+0x216>
 800ff22:	68e0      	ldr	r0, [r4, #12]
 800ff24:	9b03      	ldr	r3, [sp, #12]
 800ff26:	4298      	cmp	r0, r3
 800ff28:	bfb8      	it	lt
 800ff2a:	4618      	movlt	r0, r3
 800ff2c:	e793      	b.n	800fe56 <_printf_i+0x13e>
 800ff2e:	2301      	movs	r3, #1
 800ff30:	464a      	mov	r2, r9
 800ff32:	4639      	mov	r1, r7
 800ff34:	4630      	mov	r0, r6
 800ff36:	47c0      	blx	r8
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d08a      	beq.n	800fe52 <_printf_i+0x13a>
 800ff3c:	3501      	adds	r5, #1
 800ff3e:	e7eb      	b.n	800ff18 <_printf_i+0x200>
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d1a7      	bne.n	800fe94 <_printf_i+0x17c>
 800ff44:	780b      	ldrb	r3, [r1, #0]
 800ff46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff4e:	e765      	b.n	800fe1c <_printf_i+0x104>
 800ff50:	080107b6 	.word	0x080107b6
 800ff54:	080107a5 	.word	0x080107a5

0800ff58 <iprintf>:
 800ff58:	b40f      	push	{r0, r1, r2, r3}
 800ff5a:	4b0a      	ldr	r3, [pc, #40]	; (800ff84 <iprintf+0x2c>)
 800ff5c:	b513      	push	{r0, r1, r4, lr}
 800ff5e:	681c      	ldr	r4, [r3, #0]
 800ff60:	b124      	cbz	r4, 800ff6c <iprintf+0x14>
 800ff62:	69a3      	ldr	r3, [r4, #24]
 800ff64:	b913      	cbnz	r3, 800ff6c <iprintf+0x14>
 800ff66:	4620      	mov	r0, r4
 800ff68:	f7ff fb46 	bl	800f5f8 <__sinit>
 800ff6c:	ab05      	add	r3, sp, #20
 800ff6e:	9a04      	ldr	r2, [sp, #16]
 800ff70:	68a1      	ldr	r1, [r4, #8]
 800ff72:	9301      	str	r3, [sp, #4]
 800ff74:	4620      	mov	r0, r4
 800ff76:	f7ff fd43 	bl	800fa00 <_vfiprintf_r>
 800ff7a:	b002      	add	sp, #8
 800ff7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff80:	b004      	add	sp, #16
 800ff82:	4770      	bx	lr
 800ff84:	200002f4 	.word	0x200002f4

0800ff88 <_puts_r>:
 800ff88:	b570      	push	{r4, r5, r6, lr}
 800ff8a:	460e      	mov	r6, r1
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	b118      	cbz	r0, 800ff98 <_puts_r+0x10>
 800ff90:	6983      	ldr	r3, [r0, #24]
 800ff92:	b90b      	cbnz	r3, 800ff98 <_puts_r+0x10>
 800ff94:	f7ff fb30 	bl	800f5f8 <__sinit>
 800ff98:	69ab      	ldr	r3, [r5, #24]
 800ff9a:	68ac      	ldr	r4, [r5, #8]
 800ff9c:	b913      	cbnz	r3, 800ffa4 <_puts_r+0x1c>
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f7ff fb2a 	bl	800f5f8 <__sinit>
 800ffa4:	4b23      	ldr	r3, [pc, #140]	; (8010034 <_puts_r+0xac>)
 800ffa6:	429c      	cmp	r4, r3
 800ffa8:	d117      	bne.n	800ffda <_puts_r+0x52>
 800ffaa:	686c      	ldr	r4, [r5, #4]
 800ffac:	89a3      	ldrh	r3, [r4, #12]
 800ffae:	071b      	lsls	r3, r3, #28
 800ffb0:	d51d      	bpl.n	800ffee <_puts_r+0x66>
 800ffb2:	6923      	ldr	r3, [r4, #16]
 800ffb4:	b1db      	cbz	r3, 800ffee <_puts_r+0x66>
 800ffb6:	3e01      	subs	r6, #1
 800ffb8:	68a3      	ldr	r3, [r4, #8]
 800ffba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	60a3      	str	r3, [r4, #8]
 800ffc2:	b9e9      	cbnz	r1, 8010000 <_puts_r+0x78>
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	da2e      	bge.n	8010026 <_puts_r+0x9e>
 800ffc8:	4622      	mov	r2, r4
 800ffca:	210a      	movs	r1, #10
 800ffcc:	4628      	mov	r0, r5
 800ffce:	f000 f8af 	bl	8010130 <__swbuf_r>
 800ffd2:	3001      	adds	r0, #1
 800ffd4:	d011      	beq.n	800fffa <_puts_r+0x72>
 800ffd6:	200a      	movs	r0, #10
 800ffd8:	bd70      	pop	{r4, r5, r6, pc}
 800ffda:	4b17      	ldr	r3, [pc, #92]	; (8010038 <_puts_r+0xb0>)
 800ffdc:	429c      	cmp	r4, r3
 800ffde:	d101      	bne.n	800ffe4 <_puts_r+0x5c>
 800ffe0:	68ac      	ldr	r4, [r5, #8]
 800ffe2:	e7e3      	b.n	800ffac <_puts_r+0x24>
 800ffe4:	4b15      	ldr	r3, [pc, #84]	; (801003c <_puts_r+0xb4>)
 800ffe6:	429c      	cmp	r4, r3
 800ffe8:	bf08      	it	eq
 800ffea:	68ec      	ldreq	r4, [r5, #12]
 800ffec:	e7de      	b.n	800ffac <_puts_r+0x24>
 800ffee:	4621      	mov	r1, r4
 800fff0:	4628      	mov	r0, r5
 800fff2:	f000 f901 	bl	80101f8 <__swsetup_r>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d0dd      	beq.n	800ffb6 <_puts_r+0x2e>
 800fffa:	f04f 30ff 	mov.w	r0, #4294967295
 800fffe:	bd70      	pop	{r4, r5, r6, pc}
 8010000:	2b00      	cmp	r3, #0
 8010002:	da04      	bge.n	801000e <_puts_r+0x86>
 8010004:	69a2      	ldr	r2, [r4, #24]
 8010006:	4293      	cmp	r3, r2
 8010008:	db06      	blt.n	8010018 <_puts_r+0x90>
 801000a:	290a      	cmp	r1, #10
 801000c:	d004      	beq.n	8010018 <_puts_r+0x90>
 801000e:	6823      	ldr	r3, [r4, #0]
 8010010:	1c5a      	adds	r2, r3, #1
 8010012:	6022      	str	r2, [r4, #0]
 8010014:	7019      	strb	r1, [r3, #0]
 8010016:	e7cf      	b.n	800ffb8 <_puts_r+0x30>
 8010018:	4622      	mov	r2, r4
 801001a:	4628      	mov	r0, r5
 801001c:	f000 f888 	bl	8010130 <__swbuf_r>
 8010020:	3001      	adds	r0, #1
 8010022:	d1c9      	bne.n	800ffb8 <_puts_r+0x30>
 8010024:	e7e9      	b.n	800fffa <_puts_r+0x72>
 8010026:	6823      	ldr	r3, [r4, #0]
 8010028:	200a      	movs	r0, #10
 801002a:	1c5a      	adds	r2, r3, #1
 801002c:	6022      	str	r2, [r4, #0]
 801002e:	7018      	strb	r0, [r3, #0]
 8010030:	bd70      	pop	{r4, r5, r6, pc}
 8010032:	bf00      	nop
 8010034:	08010750 	.word	0x08010750
 8010038:	08010770 	.word	0x08010770
 801003c:	08010730 	.word	0x08010730

08010040 <puts>:
 8010040:	4b02      	ldr	r3, [pc, #8]	; (801004c <puts+0xc>)
 8010042:	4601      	mov	r1, r0
 8010044:	6818      	ldr	r0, [r3, #0]
 8010046:	f7ff bf9f 	b.w	800ff88 <_puts_r>
 801004a:	bf00      	nop
 801004c:	200002f4 	.word	0x200002f4

08010050 <_sbrk_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	4c06      	ldr	r4, [pc, #24]	; (801006c <_sbrk_r+0x1c>)
 8010054:	2300      	movs	r3, #0
 8010056:	4605      	mov	r5, r0
 8010058:	4608      	mov	r0, r1
 801005a:	6023      	str	r3, [r4, #0]
 801005c:	f000 f9ba 	bl	80103d4 <_sbrk>
 8010060:	1c43      	adds	r3, r0, #1
 8010062:	d102      	bne.n	801006a <_sbrk_r+0x1a>
 8010064:	6823      	ldr	r3, [r4, #0]
 8010066:	b103      	cbz	r3, 801006a <_sbrk_r+0x1a>
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	bd38      	pop	{r3, r4, r5, pc}
 801006c:	20000c64 	.word	0x20000c64

08010070 <__sread>:
 8010070:	b510      	push	{r4, lr}
 8010072:	460c      	mov	r4, r1
 8010074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010078:	f000 f972 	bl	8010360 <_read_r>
 801007c:	2800      	cmp	r0, #0
 801007e:	bfab      	itete	ge
 8010080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010082:	89a3      	ldrhlt	r3, [r4, #12]
 8010084:	181b      	addge	r3, r3, r0
 8010086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801008a:	bfac      	ite	ge
 801008c:	6563      	strge	r3, [r4, #84]	; 0x54
 801008e:	81a3      	strhlt	r3, [r4, #12]
 8010090:	bd10      	pop	{r4, pc}

08010092 <__swrite>:
 8010092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010096:	461f      	mov	r7, r3
 8010098:	898b      	ldrh	r3, [r1, #12]
 801009a:	05db      	lsls	r3, r3, #23
 801009c:	4605      	mov	r5, r0
 801009e:	460c      	mov	r4, r1
 80100a0:	4616      	mov	r6, r2
 80100a2:	d505      	bpl.n	80100b0 <__swrite+0x1e>
 80100a4:	2302      	movs	r3, #2
 80100a6:	2200      	movs	r2, #0
 80100a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ac:	f000 f944 	bl	8010338 <_lseek_r>
 80100b0:	89a3      	ldrh	r3, [r4, #12]
 80100b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100ba:	81a3      	strh	r3, [r4, #12]
 80100bc:	4632      	mov	r2, r6
 80100be:	463b      	mov	r3, r7
 80100c0:	4628      	mov	r0, r5
 80100c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100c6:	f000 b885 	b.w	80101d4 <_write_r>

080100ca <__sseek>:
 80100ca:	b510      	push	{r4, lr}
 80100cc:	460c      	mov	r4, r1
 80100ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100d2:	f000 f931 	bl	8010338 <_lseek_r>
 80100d6:	1c43      	adds	r3, r0, #1
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	bf15      	itete	ne
 80100dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80100de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100e6:	81a3      	strheq	r3, [r4, #12]
 80100e8:	bf18      	it	ne
 80100ea:	81a3      	strhne	r3, [r4, #12]
 80100ec:	bd10      	pop	{r4, pc}

080100ee <__sclose>:
 80100ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100f2:	f000 b8ef 	b.w	80102d4 <_close_r>

080100f6 <strcpy>:
 80100f6:	4603      	mov	r3, r0
 80100f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100fc:	f803 2b01 	strb.w	r2, [r3], #1
 8010100:	2a00      	cmp	r2, #0
 8010102:	d1f9      	bne.n	80100f8 <strcpy+0x2>
 8010104:	4770      	bx	lr

08010106 <strncpy>:
 8010106:	b570      	push	{r4, r5, r6, lr}
 8010108:	4604      	mov	r4, r0
 801010a:	b902      	cbnz	r2, 801010e <strncpy+0x8>
 801010c:	bd70      	pop	{r4, r5, r6, pc}
 801010e:	4623      	mov	r3, r4
 8010110:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010114:	f803 5b01 	strb.w	r5, [r3], #1
 8010118:	1e56      	subs	r6, r2, #1
 801011a:	b91d      	cbnz	r5, 8010124 <strncpy+0x1e>
 801011c:	4414      	add	r4, r2
 801011e:	42a3      	cmp	r3, r4
 8010120:	d103      	bne.n	801012a <strncpy+0x24>
 8010122:	bd70      	pop	{r4, r5, r6, pc}
 8010124:	461c      	mov	r4, r3
 8010126:	4632      	mov	r2, r6
 8010128:	e7ef      	b.n	801010a <strncpy+0x4>
 801012a:	f803 5b01 	strb.w	r5, [r3], #1
 801012e:	e7f6      	b.n	801011e <strncpy+0x18>

08010130 <__swbuf_r>:
 8010130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010132:	460e      	mov	r6, r1
 8010134:	4614      	mov	r4, r2
 8010136:	4605      	mov	r5, r0
 8010138:	b118      	cbz	r0, 8010142 <__swbuf_r+0x12>
 801013a:	6983      	ldr	r3, [r0, #24]
 801013c:	b90b      	cbnz	r3, 8010142 <__swbuf_r+0x12>
 801013e:	f7ff fa5b 	bl	800f5f8 <__sinit>
 8010142:	4b21      	ldr	r3, [pc, #132]	; (80101c8 <__swbuf_r+0x98>)
 8010144:	429c      	cmp	r4, r3
 8010146:	d12a      	bne.n	801019e <__swbuf_r+0x6e>
 8010148:	686c      	ldr	r4, [r5, #4]
 801014a:	69a3      	ldr	r3, [r4, #24]
 801014c:	60a3      	str	r3, [r4, #8]
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	071a      	lsls	r2, r3, #28
 8010152:	d52e      	bpl.n	80101b2 <__swbuf_r+0x82>
 8010154:	6923      	ldr	r3, [r4, #16]
 8010156:	b363      	cbz	r3, 80101b2 <__swbuf_r+0x82>
 8010158:	6923      	ldr	r3, [r4, #16]
 801015a:	6820      	ldr	r0, [r4, #0]
 801015c:	1ac0      	subs	r0, r0, r3
 801015e:	6963      	ldr	r3, [r4, #20]
 8010160:	b2f6      	uxtb	r6, r6
 8010162:	4298      	cmp	r0, r3
 8010164:	4637      	mov	r7, r6
 8010166:	db04      	blt.n	8010172 <__swbuf_r+0x42>
 8010168:	4621      	mov	r1, r4
 801016a:	4628      	mov	r0, r5
 801016c:	f7ff f9da 	bl	800f524 <_fflush_r>
 8010170:	bb28      	cbnz	r0, 80101be <__swbuf_r+0x8e>
 8010172:	68a3      	ldr	r3, [r4, #8]
 8010174:	3b01      	subs	r3, #1
 8010176:	60a3      	str	r3, [r4, #8]
 8010178:	6823      	ldr	r3, [r4, #0]
 801017a:	1c5a      	adds	r2, r3, #1
 801017c:	6022      	str	r2, [r4, #0]
 801017e:	701e      	strb	r6, [r3, #0]
 8010180:	6963      	ldr	r3, [r4, #20]
 8010182:	3001      	adds	r0, #1
 8010184:	4298      	cmp	r0, r3
 8010186:	d004      	beq.n	8010192 <__swbuf_r+0x62>
 8010188:	89a3      	ldrh	r3, [r4, #12]
 801018a:	07db      	lsls	r3, r3, #31
 801018c:	d519      	bpl.n	80101c2 <__swbuf_r+0x92>
 801018e:	2e0a      	cmp	r6, #10
 8010190:	d117      	bne.n	80101c2 <__swbuf_r+0x92>
 8010192:	4621      	mov	r1, r4
 8010194:	4628      	mov	r0, r5
 8010196:	f7ff f9c5 	bl	800f524 <_fflush_r>
 801019a:	b190      	cbz	r0, 80101c2 <__swbuf_r+0x92>
 801019c:	e00f      	b.n	80101be <__swbuf_r+0x8e>
 801019e:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <__swbuf_r+0x9c>)
 80101a0:	429c      	cmp	r4, r3
 80101a2:	d101      	bne.n	80101a8 <__swbuf_r+0x78>
 80101a4:	68ac      	ldr	r4, [r5, #8]
 80101a6:	e7d0      	b.n	801014a <__swbuf_r+0x1a>
 80101a8:	4b09      	ldr	r3, [pc, #36]	; (80101d0 <__swbuf_r+0xa0>)
 80101aa:	429c      	cmp	r4, r3
 80101ac:	bf08      	it	eq
 80101ae:	68ec      	ldreq	r4, [r5, #12]
 80101b0:	e7cb      	b.n	801014a <__swbuf_r+0x1a>
 80101b2:	4621      	mov	r1, r4
 80101b4:	4628      	mov	r0, r5
 80101b6:	f000 f81f 	bl	80101f8 <__swsetup_r>
 80101ba:	2800      	cmp	r0, #0
 80101bc:	d0cc      	beq.n	8010158 <__swbuf_r+0x28>
 80101be:	f04f 37ff 	mov.w	r7, #4294967295
 80101c2:	4638      	mov	r0, r7
 80101c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101c6:	bf00      	nop
 80101c8:	08010750 	.word	0x08010750
 80101cc:	08010770 	.word	0x08010770
 80101d0:	08010730 	.word	0x08010730

080101d4 <_write_r>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	4c07      	ldr	r4, [pc, #28]	; (80101f4 <_write_r+0x20>)
 80101d8:	4605      	mov	r5, r0
 80101da:	4608      	mov	r0, r1
 80101dc:	4611      	mov	r1, r2
 80101de:	2200      	movs	r2, #0
 80101e0:	6022      	str	r2, [r4, #0]
 80101e2:	461a      	mov	r2, r3
 80101e4:	f7f3 ff30 	bl	8004048 <_write>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d102      	bne.n	80101f2 <_write_r+0x1e>
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	b103      	cbz	r3, 80101f2 <_write_r+0x1e>
 80101f0:	602b      	str	r3, [r5, #0]
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	20000c64 	.word	0x20000c64

080101f8 <__swsetup_r>:
 80101f8:	4b32      	ldr	r3, [pc, #200]	; (80102c4 <__swsetup_r+0xcc>)
 80101fa:	b570      	push	{r4, r5, r6, lr}
 80101fc:	681d      	ldr	r5, [r3, #0]
 80101fe:	4606      	mov	r6, r0
 8010200:	460c      	mov	r4, r1
 8010202:	b125      	cbz	r5, 801020e <__swsetup_r+0x16>
 8010204:	69ab      	ldr	r3, [r5, #24]
 8010206:	b913      	cbnz	r3, 801020e <__swsetup_r+0x16>
 8010208:	4628      	mov	r0, r5
 801020a:	f7ff f9f5 	bl	800f5f8 <__sinit>
 801020e:	4b2e      	ldr	r3, [pc, #184]	; (80102c8 <__swsetup_r+0xd0>)
 8010210:	429c      	cmp	r4, r3
 8010212:	d10f      	bne.n	8010234 <__swsetup_r+0x3c>
 8010214:	686c      	ldr	r4, [r5, #4]
 8010216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801021a:	b29a      	uxth	r2, r3
 801021c:	0715      	lsls	r5, r2, #28
 801021e:	d42c      	bmi.n	801027a <__swsetup_r+0x82>
 8010220:	06d0      	lsls	r0, r2, #27
 8010222:	d411      	bmi.n	8010248 <__swsetup_r+0x50>
 8010224:	2209      	movs	r2, #9
 8010226:	6032      	str	r2, [r6, #0]
 8010228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801022c:	81a3      	strh	r3, [r4, #12]
 801022e:	f04f 30ff 	mov.w	r0, #4294967295
 8010232:	bd70      	pop	{r4, r5, r6, pc}
 8010234:	4b25      	ldr	r3, [pc, #148]	; (80102cc <__swsetup_r+0xd4>)
 8010236:	429c      	cmp	r4, r3
 8010238:	d101      	bne.n	801023e <__swsetup_r+0x46>
 801023a:	68ac      	ldr	r4, [r5, #8]
 801023c:	e7eb      	b.n	8010216 <__swsetup_r+0x1e>
 801023e:	4b24      	ldr	r3, [pc, #144]	; (80102d0 <__swsetup_r+0xd8>)
 8010240:	429c      	cmp	r4, r3
 8010242:	bf08      	it	eq
 8010244:	68ec      	ldreq	r4, [r5, #12]
 8010246:	e7e6      	b.n	8010216 <__swsetup_r+0x1e>
 8010248:	0751      	lsls	r1, r2, #29
 801024a:	d512      	bpl.n	8010272 <__swsetup_r+0x7a>
 801024c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801024e:	b141      	cbz	r1, 8010262 <__swsetup_r+0x6a>
 8010250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010254:	4299      	cmp	r1, r3
 8010256:	d002      	beq.n	801025e <__swsetup_r+0x66>
 8010258:	4630      	mov	r0, r6
 801025a:	f7ff fafb 	bl	800f854 <_free_r>
 801025e:	2300      	movs	r3, #0
 8010260:	6363      	str	r3, [r4, #52]	; 0x34
 8010262:	89a3      	ldrh	r3, [r4, #12]
 8010264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010268:	81a3      	strh	r3, [r4, #12]
 801026a:	2300      	movs	r3, #0
 801026c:	6063      	str	r3, [r4, #4]
 801026e:	6923      	ldr	r3, [r4, #16]
 8010270:	6023      	str	r3, [r4, #0]
 8010272:	89a3      	ldrh	r3, [r4, #12]
 8010274:	f043 0308 	orr.w	r3, r3, #8
 8010278:	81a3      	strh	r3, [r4, #12]
 801027a:	6923      	ldr	r3, [r4, #16]
 801027c:	b94b      	cbnz	r3, 8010292 <__swsetup_r+0x9a>
 801027e:	89a3      	ldrh	r3, [r4, #12]
 8010280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010288:	d003      	beq.n	8010292 <__swsetup_r+0x9a>
 801028a:	4621      	mov	r1, r4
 801028c:	4630      	mov	r0, r6
 801028e:	f7ff fa85 	bl	800f79c <__smakebuf_r>
 8010292:	89a2      	ldrh	r2, [r4, #12]
 8010294:	f012 0301 	ands.w	r3, r2, #1
 8010298:	d00c      	beq.n	80102b4 <__swsetup_r+0xbc>
 801029a:	2300      	movs	r3, #0
 801029c:	60a3      	str	r3, [r4, #8]
 801029e:	6963      	ldr	r3, [r4, #20]
 80102a0:	425b      	negs	r3, r3
 80102a2:	61a3      	str	r3, [r4, #24]
 80102a4:	6923      	ldr	r3, [r4, #16]
 80102a6:	b953      	cbnz	r3, 80102be <__swsetup_r+0xc6>
 80102a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80102b0:	d1ba      	bne.n	8010228 <__swsetup_r+0x30>
 80102b2:	bd70      	pop	{r4, r5, r6, pc}
 80102b4:	0792      	lsls	r2, r2, #30
 80102b6:	bf58      	it	pl
 80102b8:	6963      	ldrpl	r3, [r4, #20]
 80102ba:	60a3      	str	r3, [r4, #8]
 80102bc:	e7f2      	b.n	80102a4 <__swsetup_r+0xac>
 80102be:	2000      	movs	r0, #0
 80102c0:	e7f7      	b.n	80102b2 <__swsetup_r+0xba>
 80102c2:	bf00      	nop
 80102c4:	200002f4 	.word	0x200002f4
 80102c8:	08010750 	.word	0x08010750
 80102cc:	08010770 	.word	0x08010770
 80102d0:	08010730 	.word	0x08010730

080102d4 <_close_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	4c06      	ldr	r4, [pc, #24]	; (80102f0 <_close_r+0x1c>)
 80102d8:	2300      	movs	r3, #0
 80102da:	4605      	mov	r5, r0
 80102dc:	4608      	mov	r0, r1
 80102de:	6023      	str	r3, [r4, #0]
 80102e0:	f000 f850 	bl	8010384 <_close>
 80102e4:	1c43      	adds	r3, r0, #1
 80102e6:	d102      	bne.n	80102ee <_close_r+0x1a>
 80102e8:	6823      	ldr	r3, [r4, #0]
 80102ea:	b103      	cbz	r3, 80102ee <_close_r+0x1a>
 80102ec:	602b      	str	r3, [r5, #0]
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	20000c64 	.word	0x20000c64

080102f4 <_fstat_r>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	4c07      	ldr	r4, [pc, #28]	; (8010314 <_fstat_r+0x20>)
 80102f8:	2300      	movs	r3, #0
 80102fa:	4605      	mov	r5, r0
 80102fc:	4608      	mov	r0, r1
 80102fe:	4611      	mov	r1, r2
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	f000 f847 	bl	8010394 <_fstat>
 8010306:	1c43      	adds	r3, r0, #1
 8010308:	d102      	bne.n	8010310 <_fstat_r+0x1c>
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	b103      	cbz	r3, 8010310 <_fstat_r+0x1c>
 801030e:	602b      	str	r3, [r5, #0]
 8010310:	bd38      	pop	{r3, r4, r5, pc}
 8010312:	bf00      	nop
 8010314:	20000c64 	.word	0x20000c64

08010318 <_isatty_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4c06      	ldr	r4, [pc, #24]	; (8010334 <_isatty_r+0x1c>)
 801031c:	2300      	movs	r3, #0
 801031e:	4605      	mov	r5, r0
 8010320:	4608      	mov	r0, r1
 8010322:	6023      	str	r3, [r4, #0]
 8010324:	f000 f83e 	bl	80103a4 <_isatty>
 8010328:	1c43      	adds	r3, r0, #1
 801032a:	d102      	bne.n	8010332 <_isatty_r+0x1a>
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	b103      	cbz	r3, 8010332 <_isatty_r+0x1a>
 8010330:	602b      	str	r3, [r5, #0]
 8010332:	bd38      	pop	{r3, r4, r5, pc}
 8010334:	20000c64 	.word	0x20000c64

08010338 <_lseek_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4c07      	ldr	r4, [pc, #28]	; (8010358 <_lseek_r+0x20>)
 801033c:	4605      	mov	r5, r0
 801033e:	4608      	mov	r0, r1
 8010340:	4611      	mov	r1, r2
 8010342:	2200      	movs	r2, #0
 8010344:	6022      	str	r2, [r4, #0]
 8010346:	461a      	mov	r2, r3
 8010348:	f000 f834 	bl	80103b4 <_lseek>
 801034c:	1c43      	adds	r3, r0, #1
 801034e:	d102      	bne.n	8010356 <_lseek_r+0x1e>
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	b103      	cbz	r3, 8010356 <_lseek_r+0x1e>
 8010354:	602b      	str	r3, [r5, #0]
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	20000c64 	.word	0x20000c64

0801035c <__malloc_lock>:
 801035c:	4770      	bx	lr

0801035e <__malloc_unlock>:
 801035e:	4770      	bx	lr

08010360 <_read_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4c07      	ldr	r4, [pc, #28]	; (8010380 <_read_r+0x20>)
 8010364:	4605      	mov	r5, r0
 8010366:	4608      	mov	r0, r1
 8010368:	4611      	mov	r1, r2
 801036a:	2200      	movs	r2, #0
 801036c:	6022      	str	r2, [r4, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	f000 f828 	bl	80103c4 <_read>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d102      	bne.n	801037e <_read_r+0x1e>
 8010378:	6823      	ldr	r3, [r4, #0]
 801037a:	b103      	cbz	r3, 801037e <_read_r+0x1e>
 801037c:	602b      	str	r3, [r5, #0]
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	20000c64 	.word	0x20000c64

08010384 <_close>:
 8010384:	4b02      	ldr	r3, [pc, #8]	; (8010390 <_close+0xc>)
 8010386:	2258      	movs	r2, #88	; 0x58
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	f04f 30ff 	mov.w	r0, #4294967295
 801038e:	4770      	bx	lr
 8010390:	20000c64 	.word	0x20000c64

08010394 <_fstat>:
 8010394:	4b02      	ldr	r3, [pc, #8]	; (80103a0 <_fstat+0xc>)
 8010396:	2258      	movs	r2, #88	; 0x58
 8010398:	601a      	str	r2, [r3, #0]
 801039a:	f04f 30ff 	mov.w	r0, #4294967295
 801039e:	4770      	bx	lr
 80103a0:	20000c64 	.word	0x20000c64

080103a4 <_isatty>:
 80103a4:	4b02      	ldr	r3, [pc, #8]	; (80103b0 <_isatty+0xc>)
 80103a6:	2258      	movs	r2, #88	; 0x58
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	2000      	movs	r0, #0
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	20000c64 	.word	0x20000c64

080103b4 <_lseek>:
 80103b4:	4b02      	ldr	r3, [pc, #8]	; (80103c0 <_lseek+0xc>)
 80103b6:	2258      	movs	r2, #88	; 0x58
 80103b8:	601a      	str	r2, [r3, #0]
 80103ba:	f04f 30ff 	mov.w	r0, #4294967295
 80103be:	4770      	bx	lr
 80103c0:	20000c64 	.word	0x20000c64

080103c4 <_read>:
 80103c4:	4b02      	ldr	r3, [pc, #8]	; (80103d0 <_read+0xc>)
 80103c6:	2258      	movs	r2, #88	; 0x58
 80103c8:	601a      	str	r2, [r3, #0]
 80103ca:	f04f 30ff 	mov.w	r0, #4294967295
 80103ce:	4770      	bx	lr
 80103d0:	20000c64 	.word	0x20000c64

080103d4 <_sbrk>:
 80103d4:	4b04      	ldr	r3, [pc, #16]	; (80103e8 <_sbrk+0x14>)
 80103d6:	6819      	ldr	r1, [r3, #0]
 80103d8:	4602      	mov	r2, r0
 80103da:	b909      	cbnz	r1, 80103e0 <_sbrk+0xc>
 80103dc:	4903      	ldr	r1, [pc, #12]	; (80103ec <_sbrk+0x18>)
 80103de:	6019      	str	r1, [r3, #0]
 80103e0:	6818      	ldr	r0, [r3, #0]
 80103e2:	4402      	add	r2, r0
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	4770      	bx	lr
 80103e8:	200003b8 	.word	0x200003b8
 80103ec:	20000c68 	.word	0x20000c68

080103f0 <_init>:
 80103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f2:	bf00      	nop
 80103f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f6:	bc08      	pop	{r3}
 80103f8:	469e      	mov	lr, r3
 80103fa:	4770      	bx	lr

080103fc <_fini>:
 80103fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fe:	bf00      	nop
 8010400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010402:	bc08      	pop	{r3}
 8010404:	469e      	mov	lr, r3
 8010406:	4770      	bx	lr
