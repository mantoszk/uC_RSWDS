
RSWDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0801227c  0801227c  0002227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012888  08012888  00022888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012890  08012890  00022890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012894  08012894  00022894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000360  20000000  08012898  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b00  20000360  08012bf8  00030360  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e60  08012bf8  00030e60  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 10 .debug_info   000428b5  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000054ea  00000000  00000000  00072c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001cb8  00000000  00000000  00078130  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a60  00000000  00000000  00079de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e6db  00000000  00000000  0007b848  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000c69d  00000000  00000000  00089f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000965c0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008148  00000000  00000000  0009663c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  0009e784  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014b  00000000  00000000  0009e808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000360 	.word	0x20000360
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012264 	.word	0x08012264

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000364 	.word	0x20000364
 80001dc:	08012264 	.word	0x08012264

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fd5b 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f005 fd08 	bl	8005fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd73 	bl	80010de <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 fd3b 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000001c 	.word	0x2000001c
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000900 	.word	0x20000900

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000900 	.word	0x20000900

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f7      	bcc.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e033      	b.n	8000736 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f004 f915 	bl	8004914 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d118      	bne.n	8000728 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006fe:	f023 0302 	bic.w	r3, r3, #2
 8000702:	f043 0202 	orr.w	r2, r3, #2
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 fa76 	bl	8000bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f023 0303 	bic.w	r3, r3, #3
 800071e:	f043 0201 	orr.w	r2, r3, #1
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
 8000726:	e001      	b.n	800072c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000756:	2b01      	cmp	r3, #1
 8000758:	d101      	bne.n	800075e <HAL_ADC_Start_DMA+0x1e>
 800075a:	2302      	movs	r3, #2
 800075c:	e0b0      	b.n	80008c0 <HAL_ADC_Start_DMA+0x180>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2201      	movs	r2, #1
 8000762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b01      	cmp	r3, #1
 8000772:	d018      	beq.n	80007a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	6892      	ldr	r2, [r2, #8]
 800077e:	f042 0201 	orr.w	r2, r2, #1
 8000782:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000784:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <HAL_ADC_Start_DMA+0x188>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a50      	ldr	r2, [pc, #320]	; (80008cc <HAL_ADC_Start_DMA+0x18c>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	0c9a      	lsrs	r2, r3, #18
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000798:	e002      	b.n	80007a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	3b01      	subs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f9      	bne.n	800079a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f000 8084 	beq.w	80008be <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d007      	beq.n	80007e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d006      	beq.n	8000802 <HAL_ADC_Start_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f8:	f023 0206 	bic.w	r2, r3, #6
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	645a      	str	r2, [r3, #68]	; 0x44
 8000800:	e002      	b.n	8000808 <HAL_ADC_Start_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2200      	movs	r2, #0
 8000806:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <HAL_ADC_Start_DMA+0x190>)
 8000812:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <HAL_ADC_Start_DMA+0x194>)
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <HAL_ADC_Start_DMA+0x198>)
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000828:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <HAL_ADC_Start_DMA+0x19c>)
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000834:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000844:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	6892      	ldr	r2, [r2, #8]
 8000850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000854:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	334c      	adds	r3, #76	; 0x4c
 8000860:	4619      	mov	r1, r3
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f000 fd1f 	bl	80012a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10f      	bne.n	8000896 <HAL_ADC_Start_DMA+0x156>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d11c      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	6892      	ldr	r2, [r2, #8]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	e013      	b.n	80008be <HAL_ADC_Start_DMA+0x17e>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_ADC_Start_DMA+0x1a0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10e      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d107      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	6892      	ldr	r2, [r2, #8]
 80008b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000001c 	.word	0x2000001c
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	40012300 	.word	0x40012300
 80008d4:	08000df1 	.word	0x08000df1
 80008d8:	08000e97 	.word	0x08000e97
 80008dc:	08000eb3 	.word	0x08000eb3
 80008e0:	40012000 	.word	0x40012000

080008e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <HAL_ADC_Stop_DMA+0x1a>
 80008fa:	2302      	movs	r3, #2
 80008fc:	e038      	b.n	8000970 <HAL_ADC_Stop_DMA+0x8c>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	6892      	ldr	r2, [r2, #8]
 8000910:	f022 0201 	bic.w	r2, r2, #1
 8000914:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d120      	bne.n	8000966 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	6892      	ldr	r2, [r2, #8]
 800092e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000932:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fd15 	bl	8001368 <HAL_DMA_Abort>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6812      	ldr	r2, [r2, #0]
 800094a:	6852      	ldr	r2, [r2, #4]
 800094c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000950:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800095a:	f023 0301 	bic.w	r3, r3, #1
 800095e:	f043 0201 	orr.w	r2, r3, #1
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009b4:	b490      	push	{r4, r7}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <HAL_ADC_ConfigChannel+0x1c>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e107      	b.n	8000be0 <HAL_ADC_ConfigChannel+0x22c>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d926      	bls.n	8000a2e <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	68d9      	ldr	r1, [r3, #12]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	4603      	mov	r3, r0
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4403      	add	r3, r0
 80009f8:	3b1e      	subs	r3, #30
 80009fa:	2007      	movs	r0, #7
 80009fc:	fa00 f303 	lsl.w	r3, r0, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	400b      	ands	r3, r1
 8000a04:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68d9      	ldr	r1, [r3, #12]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	6898      	ldr	r0, [r3, #8]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4423      	add	r3, r4
 8000a22:	3b1e      	subs	r3, #30
 8000a24:	fa00 f303 	lsl.w	r3, r0, r3
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	60d3      	str	r3, [r2, #12]
 8000a2c:	e023      	b.n	8000a76 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6919      	ldr	r1, [r3, #16]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	4603      	mov	r3, r0
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4403      	add	r3, r0
 8000a46:	2007      	movs	r0, #7
 8000a48:	fa00 f303 	lsl.w	r3, r0, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	400b      	ands	r3, r1
 8000a50:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6919      	ldr	r1, [r3, #16]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6898      	ldr	r0, [r3, #8]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	461c      	mov	r4, r3
 8000a68:	4623      	mov	r3, r4
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4423      	add	r3, r4
 8000a6e:	fa00 f303 	lsl.w	r3, r0, r3
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d824      	bhi.n	8000ac8 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6819      	ldr	r1, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	3b05      	subs	r3, #5
 8000a94:	221f      	movs	r2, #31
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4003      	ands	r3, r0
 8000a9e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6819      	ldr	r1, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	3b05      	subs	r3, #5
 8000abe:	fa04 f303 	lsl.w	r3, r4, r3
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	634b      	str	r3, [r1, #52]	; 0x34
 8000ac6:	e04c      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b0c      	cmp	r3, #12
 8000ace:	d824      	bhi.n	8000b1a <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6819      	ldr	r1, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b23      	subs	r3, #35	; 0x23
 8000ae6:	221f      	movs	r2, #31
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4003      	ands	r3, r0
 8000af0:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	461c      	mov	r4, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3b23      	subs	r3, #35	; 0x23
 8000b10:	fa04 f303 	lsl.w	r3, r4, r3
 8000b14:	4303      	orrs	r3, r0
 8000b16:	630b      	str	r3, [r1, #48]	; 0x30
 8000b18:	e023      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b41      	subs	r3, #65	; 0x41
 8000b30:	221f      	movs	r2, #31
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4003      	ands	r3, r0
 8000b3a:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	3b41      	subs	r3, #65	; 0x41
 8000b5a:	fa04 f303 	lsl.w	r3, r4, r3
 8000b5e:	4303      	orrs	r3, r0
 8000b60:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_ADC_ConfigChannel+0x238>)
 8000b64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d109      	bne.n	8000b84 <HAL_ADC_ConfigChannel+0x1d0>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d105      	bne.n	8000b84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d123      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d003      	beq.n	8000b9e <HAL_ADC_ConfigChannel+0x1ea>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b11      	cmp	r3, #17
 8000b9c:	d11b      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	d111      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_ADC_ConfigChannel+0x240>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_ADC_ConfigChannel+0x244>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9a      	lsrs	r2, r3, #18
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bc8:	e002      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f9      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc90      	pop	{r4, r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40012300 	.word	0x40012300
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	2000001c 	.word	0x2000001c
 8000bf8:	431bde83 	.word	0x431bde83

08000bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c04:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <ADC_Init+0x1ec>)
 8000c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	6852      	ldr	r2, [r2, #4]
 8000c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	6851      	ldr	r1, [r2, #4]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	6912      	ldr	r2, [r2, #16]
 8000c40:	0212      	lsls	r2, r2, #8
 8000c42:	430a      	orrs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	6852      	ldr	r2, [r2, #4]
 8000c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	6851      	ldr	r1, [r2, #4]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6892      	ldr	r2, [r2, #8]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	6892      	ldr	r2, [r2, #8]
 8000c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	6891      	ldr	r1, [r2, #8]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68d2      	ldr	r2, [r2, #12]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8e:	4a57      	ldr	r2, [pc, #348]	; (8000dec <ADC_Init+0x1f0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d022      	beq.n	8000cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	6892      	ldr	r2, [r2, #8]
 8000c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	6891      	ldr	r1, [r2, #8]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	6892      	ldr	r2, [r2, #8]
 8000cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	6891      	ldr	r1, [r2, #8]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	e00f      	b.n	8000cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	6892      	ldr	r2, [r2, #8]
 8000ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	6892      	ldr	r2, [r2, #8]
 8000cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	6892      	ldr	r2, [r2, #8]
 8000d04:	f022 0202 	bic.w	r2, r2, #2
 8000d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	6891      	ldr	r1, [r2, #8]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6992      	ldr	r2, [r2, #24]
 8000d18:	0052      	lsls	r2, r2, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01b      	beq.n	8000d5e <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	6852      	ldr	r2, [r2, #4]
 8000d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d34:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	6852      	ldr	r2, [r2, #4]
 8000d40:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d44:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	6851      	ldr	r1, [r2, #4]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d54:	3a01      	subs	r2, #1
 8000d56:	0352      	lsls	r2, r2, #13
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	e007      	b.n	8000d6e <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	6852      	ldr	r2, [r2, #4]
 8000d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	69d2      	ldr	r2, [r2, #28]
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	0512      	lsls	r2, r2, #20
 8000d90:	430a      	orrs	r2, r1
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	6892      	ldr	r2, [r2, #8]
 8000d9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	6891      	ldr	r1, [r2, #8]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000db2:	0252      	lsls	r2, r2, #9
 8000db4:	430a      	orrs	r2, r1
 8000db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	6892      	ldr	r2, [r2, #8]
 8000dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	6891      	ldr	r1, [r2, #8]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6952      	ldr	r2, [r2, #20]
 8000dd6:	0292      	lsls	r2, r2, #10
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	609a      	str	r2, [r3, #8]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40012300 	.word	0x40012300
 8000dec:	0f000001 	.word	0x0f000001

08000df0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d13c      	bne.n	8000e84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d12b      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d127      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d119      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	6852      	ldr	r2, [r2, #4]
 8000e52:	f022 0220 	bic.w	r2, r2, #32
 8000e56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f043 0201 	orr.w	r2, r3, #1
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f7ff fd7b 	bl	8000978 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000e82:	e004      	b.n	8000e8e <ADC_DMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fd71 	bl	800098c <HAL_ADC_ConvHalfCpltCallback>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2240      	movs	r2, #64	; 0x40
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f043 0204 	orr.w	r2, r3, #4
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fd64 	bl	80009a0 <HAL_ADC_ErrorCallback>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f4e:	4909      	ldr	r1, [pc, #36]	; (8000f74 <NVIC_EnableIRQ+0x30>)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	f002 021f 	and.w	r2, r2, #31
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da0b      	bge.n	8000fa4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <NVIC_SetPriority+0x4c>)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	3b04      	subs	r3, #4
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa2:	e009      	b.n	8000fb8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <NVIC_SetPriority+0x50>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	2201      	movs	r2, #1
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	401a      	ands	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001012:	2101      	movs	r1, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	1e59      	subs	r1, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2f 	bl	8000ee0 <NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff44 	bl	8000f28 <NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff37 	bl	8000f44 <NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d106      	bne.n	8001114 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001112:	e005      	b.n	8001120 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 0304 	bic.w	r3, r3, #4
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001134:	f000 f802 	bl	800113c <HAL_SYSTICK_Callback>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fa80 	bl	800065c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e099      	b.n	800129c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001188:	e00f      	b.n	80011aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800118a:	f7ff fa67 	bl	800065c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b05      	cmp	r3, #5
 8001196:	d908      	bls.n	80011aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2220      	movs	r2, #32
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e078      	b.n	800129c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e8      	bne.n	800118a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <HAL_DMA_Init+0x158>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	2b04      	cmp	r3, #4
 8001202:	d107      	bne.n	8001214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4313      	orrs	r3, r2
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f023 0307 	bic.w	r3, r3, #7
 800122a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2b04      	cmp	r3, #4
 800123c:	d117      	bne.n	800126e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00e      	beq.n	800126e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fb09 	bl	8001868 <DMA_CheckFifoParam>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800126a:	2301      	movs	r3, #1
 800126c:	e016      	b.n	800129c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fac0 	bl	80017fc <DMA_CalcBaseAndBitshift>
 800127c:	4603      	mov	r3, r0
 800127e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	223f      	movs	r2, #63	; 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	f010803f 	.word	0xf010803f

080012a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_DMA_Start_IT+0x26>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e048      	b.n	8001360 <HAL_DMA_Start_IT+0xb8>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d137      	bne.n	8001352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2202      	movs	r2, #2
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 fa52 	bl	80017a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	223f      	movs	r2, #63	; 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	f042 0216 	orr.w	r2, r2, #22
 8001316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	6952      	ldr	r2, [r2, #20]
 8001322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001326:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f042 0208 	orr.w	r2, r2, #8
 800133e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e005      	b.n	800135e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001376:	f7ff f971 	bl	800065c <HAL_GetTick>
 800137a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d008      	beq.n	800139a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e052      	b.n	8001440 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	f022 0216 	bic.w	r2, r2, #22
 80013a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	6952      	ldr	r2, [r2, #20]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <HAL_DMA_Abort+0x62>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f022 0208 	bic.w	r2, r2, #8
 80013d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ea:	e013      	b.n	8001414 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ec:	f7ff f936 	bl	800065c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d90c      	bls.n	8001414 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2220      	movs	r2, #32
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e015      	b.n	8001440 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e4      	bne.n	80013ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	223f      	movs	r2, #63	; 0x3f
 8001428:	409a      	lsls	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d004      	beq.n	8001466 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00c      	b.n	8001480 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2205      	movs	r2, #5
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <HAL_DMA_IRQHandler+0x258>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <HAL_DMA_IRQHandler+0x25c>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0a9b      	lsrs	r3, r3, #10
 80014a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b6:	2208      	movs	r2, #8
 80014b8:	409a      	lsls	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01a      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	f022 0204 	bic.w	r2, r2, #4
 80014de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	2208      	movs	r2, #8
 80014e6:	409a      	lsls	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2201      	movs	r2, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d012      	beq.n	800152e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2201      	movs	r2, #1
 800151c:	409a      	lsls	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	f043 0202 	orr.w	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2204      	movs	r2, #4
 8001534:	409a      	lsls	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d012      	beq.n	8001564 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	2204      	movs	r2, #4
 8001552:	409a      	lsls	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	f043 0204 	orr.w	r2, r3, #4
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2210      	movs	r2, #16
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d043      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03c      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	2210      	movs	r2, #16
 8001588:	409a      	lsls	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d018      	beq.n	80015ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d108      	bne.n	80015bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d024      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	4798      	blx	r3
 80015ba:	e01f      	b.n	80015fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01b      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
 80015cc:	e016      	b.n	80015fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	f022 0208 	bic.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	2220      	movs	r2, #32
 8001602:	409a      	lsls	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 808e 	beq.w	800172a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8086 	beq.w	800172a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2220      	movs	r2, #32
 8001624:	409a      	lsls	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b05      	cmp	r3, #5
 8001634:	d136      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f022 0216 	bic.w	r2, r2, #22
 8001644:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	6952      	ldr	r2, [r2, #20]
 8001650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001654:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <HAL_DMA_IRQHandler+0x1da>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	f022 0208 	bic.w	r2, r2, #8
 8001674:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	223f      	movs	r2, #63	; 0x3f
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001696:	2b00      	cmp	r3, #0
 8001698:	d07d      	beq.n	8001796 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
        }
        return;
 80016a2:	e078      	b.n	8001796 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d01c      	beq.n	80016ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d108      	bne.n	80016d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d030      	beq.n	800172a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
 80016d0:	e02b      	b.n	800172a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d027      	beq.n	800172a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
 80016e2:	e022      	b.n	800172a <HAL_DMA_IRQHandler+0x29e>
 80016e4:	2000001c 	.word	0x2000001c
 80016e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f022 0210 	bic.w	r2, r2, #16
 8001708:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	2b00      	cmp	r3, #0
 8001730:	d032      	beq.n	8001798 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d022      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4293      	cmp	r3, r2
 8001760:	d807      	bhi.n	8001772 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f2      	bne.n	8001756 <HAL_DMA_IRQHandler+0x2ca>
 8001770:	e000      	b.n	8001774 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001772:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e000      	b.n	8001798 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001796:	bf00      	nop
    }
  }
}
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop

080017a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d108      	bne.n	80017e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017de:	e007      	b.n	80017f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3b10      	subs	r3, #16
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <DMA_CalcBaseAndBitshift+0x64>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <DMA_CalcBaseAndBitshift+0x68>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d909      	bls.n	800183e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	1d1a      	adds	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	659a      	str	r2, [r3, #88]	; 0x58
 800183c:	e007      	b.n	800184e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001846:	f023 0303 	bic.w	r3, r3, #3
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	aaaaaaab 	.word	0xaaaaaaab
 8001864:	080127d0 	.word	0x080127d0

08001868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11f      	bne.n	80018c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d855      	bhi.n	8001934 <DMA_CheckFifoParam+0xcc>
 8001888:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <DMA_CheckFifoParam+0x28>)
 800188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188e:	bf00      	nop
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018b3 	.word	0x080018b3
 8001898:	080018a1 	.word	0x080018a1
 800189c:	08001935 	.word	0x08001935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d045      	beq.n	8001938 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b0:	e042      	b.n	8001938 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018ba:	d13f      	bne.n	800193c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c0:	e03c      	b.n	800193c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ca:	d121      	bne.n	8001910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d836      	bhi.n	8001940 <DMA_CheckFifoParam+0xd8>
 80018d2:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <DMA_CheckFifoParam+0x70>)
 80018d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	080018ef 	.word	0x080018ef
 80018e0:	080018e9 	.word	0x080018e9
 80018e4:	08001901 	.word	0x08001901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
      break;
 80018ec:	e02f      	b.n	800194e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d024      	beq.n	8001944 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018fe:	e021      	b.n	8001944 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001908:	d11e      	bne.n	8001948 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800190e:	e01b      	b.n	8001948 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d902      	bls.n	800191c <DMA_CheckFifoParam+0xb4>
 8001916:	2b03      	cmp	r3, #3
 8001918:	d003      	beq.n	8001922 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800191a:	e018      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      break;
 8001920:	e015      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00e      	beq.n	800194c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
      break;
 8001932:	e00b      	b.n	800194c <DMA_CheckFifoParam+0xe4>
      break;
 8001934:	bf00      	nop
 8001936:	e00a      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 8001938:	bf00      	nop
 800193a:	e008      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 800193c:	bf00      	nop
 800193e:	e006      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 8001940:	bf00      	nop
 8001942:	e004      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 8001944:	bf00      	nop
 8001946:	e002      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;   
 8001948:	bf00      	nop
 800194a:	e000      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 800194c:	bf00      	nop
    }
  } 
  
  return status; 
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	e159      	b.n	8001c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8148 	bne.w	8001c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x4a>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d123      	bne.n	80019ee <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	69b9      	ldr	r1, [r7, #24]
 80019ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0203 	and.w	r2, r3, #3
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d00b      	beq.n	8001a42 <HAL_GPIO_Init+0xe6>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a36:	2b11      	cmp	r3, #17
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a2 	beq.w	8001c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afe:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2ec>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x202>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x1fe>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_GPIO_Init+0x2f4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_GPIO_Init+0x2f8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x1f6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <HAL_GPIO_Init+0x2fc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x1f2>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b70:	4934      	ldr	r1, [pc, #208]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bcc:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	f67f aea2 	bls.w	8001978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	3724      	adds	r7, #36	; 0x24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40013c00 	.word	0x40013c00

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	405a      	eors	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	615a      	str	r2, [r3, #20]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 f8a8 	bl	8004e2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0c8      	b.n	8001e94 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f003 f806 	bl	8004d28 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2224      	movs	r2, #36	; 0x24
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d34:	f001 faf6 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8001d38:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_I2C_Init+0x1b4>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0c9b      	lsrs	r3, r3, #18
 8001d44:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4952      	ldr	r1, [pc, #328]	; (8001ea0 <HAL_I2C_Init+0x1b8>)
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d802      	bhi.n	8001d62 <HAL_I2C_Init+0x7a>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	e009      	b.n	8001d76 <HAL_I2C_Init+0x8e>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	494d      	ldr	r1, [pc, #308]	; (8001ea4 <HAL_I2C_Init+0x1bc>)
 8001d6e:	fba1 1303 	umull	r1, r3, r1, r3
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	3301      	adds	r3, #1
 8001d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a47      	ldr	r2, [pc, #284]	; (8001ea0 <HAL_I2C_Init+0x1b8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d812      	bhi.n	8001dac <HAL_I2C_Init+0xc4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d906      	bls.n	8001da8 <HAL_I2C_Init+0xc0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	e045      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e043      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10f      	bne.n	8001dd4 <HAL_I2C_Init+0xec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	e010      	b.n	8001df6 <HAL_I2C_Init+0x10e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009a      	lsls	r2, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x116>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e01a      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10a      	bne.n	8001e1c <HAL_I2C_Init+0x134>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1a:	e00b      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009a      	lsls	r2, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e34:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	69d1      	ldr	r1, [r2, #28]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a12      	ldr	r2, [r2, #32]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6911      	ldr	r1, [r2, #16]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6951      	ldr	r1, [r2, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6992      	ldr	r2, [r2, #24]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	000186a0 	.word	0x000186a0
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	817b      	strh	r3, [r7, #10]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec0:	f7fe fbcc 	bl	800065c <HAL_GetTick>
 8001ec4:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	f040 80ee 	bne.w	80020b0 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2319      	movs	r3, #25
 8001eda:	2201      	movs	r2, #1
 8001edc:	4977      	ldr	r1, [pc, #476]	; (80020bc <HAL_I2C_Master_Transmit+0x214>)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fc6c 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0e1      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2C_Master_Transmit+0x54>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0da      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d007      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2221      	movs	r2, #33	; 0x21
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_I2C_Master_Transmit+0x218>)
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fadc 	bl	8002528 <I2C_MasterRequestWrite>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00f      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d105      	bne.n	8001f8a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e093      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e08d      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001fac:	e066      	b.n	800207c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fcc1 	bl	800293a <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00f      	beq.n	8001fde <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d109      	bne.n	8001fda <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06b      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e069      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	1c58      	adds	r0, r3, #1
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	6248      	str	r0, [r1, #36]	; 0x24
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d119      	bne.n	800204c <HAL_I2C_Master_Transmit+0x1a4>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c58      	adds	r0, r3, #1
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	6248      	str	r0, [r1, #36]	; 0x24
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6a39      	ldr	r1, [r7, #32]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fcaf 	bl	80029b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00f      	beq.n	800207c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b04      	cmp	r3, #4
 8002062:	d109      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002072:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e01c      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e01a      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d194      	bne.n	8001fae <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	00100002 	.word	0x00100002
 80020c0:	ffff0000 	.word	0xffff0000

080020c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	460b      	mov	r3, r1
 80020d2:	817b      	strh	r3, [r7, #10]
 80020d4:	4613      	mov	r3, r2
 80020d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020dc:	f7fe fabe 	bl	800065c <HAL_GetTick>
 80020e0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 8215 	bne.w	800251a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4985      	ldr	r1, [pc, #532]	; (8002310 <HAL_I2C_Master_Receive+0x24c>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fb5e 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e208      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Master_Receive+0x54>
 8002114:	2302      	movs	r3, #2
 8002116:	e201      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2222      	movs	r2, #34	; 0x22
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a68      	ldr	r2, [pc, #416]	; (8002314 <HAL_I2C_Master_Receive+0x250>)
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa50 	bl	800262c <I2C_MasterRequestRead>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00f      	beq.n	80021b2 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b04      	cmp	r3, #4
 8002198:	d105      	bne.n	80021a6 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1ba      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1b4      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	623b      	str	r3, [r7, #32]
 80021ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e188      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d11b      	bne.n	8002222 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e168      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	2b02      	cmp	r3, #2
 8002228:	d11b      	bne.n	8002262 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	e148      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002288:	e134      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	2b03      	cmp	r3, #3
 8002290:	f200 80eb 	bhi.w	800246a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	2b01      	cmp	r3, #1
 800229a:	d127      	bne.n	80022ec <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fbc4 	bl	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e131      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e12f      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	1c59      	adds	r1, r3, #1
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	6251      	str	r1, [r2, #36]	; 0x24
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	6912      	ldr	r2, [r2, #16]
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ea:	e103      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d14a      	bne.n	800238a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	2200      	movs	r2, #0
 80022fc:	4906      	ldr	r1, [pc, #24]	; (8002318 <HAL_I2C_Master_Receive+0x254>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fa5c 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e106      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
 800230e:	bf00      	nop
 8002310:	00100002 	.word	0x00100002
 8002314:	ffff0000 	.word	0xffff0000
 8002318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6251      	str	r1, [r2, #36]	; 0x24
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	6912      	ldr	r2, [r2, #16]
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6251      	str	r1, [r2, #36]	; 0x24
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	6912      	ldr	r2, [r2, #16]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002388:	e0b4      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	2200      	movs	r2, #0
 8002392:	4964      	ldr	r1, [pc, #400]	; (8002524 <HAL_I2C_Master_Receive+0x460>)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fa11 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0bb      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6251      	str	r1, [r2, #36]	; 0x24
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	6912      	ldr	r2, [r2, #16]
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	2200      	movs	r2, #0
 80023ea:	494e      	ldr	r1, [pc, #312]	; (8002524 <HAL_I2C_Master_Receive+0x460>)
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f9e5 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e08f      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c59      	adds	r1, r3, #1
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	6251      	str	r1, [r2, #36]	; 0x24
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	6912      	ldr	r2, [r2, #16]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6251      	str	r1, [r2, #36]	; 0x24
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	6912      	ldr	r2, [r2, #16]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002468:	e044      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fadd 	bl	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b20      	cmp	r3, #32
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04a      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e048      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	6251      	str	r1, [r2, #36]	; 0x24
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	6912      	ldr	r2, [r2, #16]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d116      	bne.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	6251      	str	r1, [r2, #36]	; 0x24
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	6912      	ldr	r2, [r2, #16]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f aec6 	bne.w	800228a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010004 	.word	0x00010004

08002528 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	460b      	mov	r3, r1
 8002536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d006      	beq.n	8002552 <I2C_MasterRequestWrite+0x2a>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d003      	beq.n	8002552 <I2C_MasterRequestWrite+0x2a>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002550:	d108      	bne.n	8002564 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e00b      	b.n	800257c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	2b12      	cmp	r3, #18
 800256a:	d107      	bne.n	800257c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f917 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e040      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a0:	d107      	bne.n	80025b2 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	897a      	ldrh	r2, [r7, #10]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	e021      	b.n	80025f6 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	897a      	ldrh	r2, [r7, #10]
 80025b8:	11d2      	asrs	r2, r2, #7
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f002 0206 	and.w	r2, r2, #6
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f062 020f 	orn	r2, r2, #15
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4915      	ldr	r1, [pc, #84]	; (8002624 <I2C_MasterRequestWrite+0xfc>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f944 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d101      	bne.n	80025e8 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e018      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e016      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	897a      	ldrh	r2, [r7, #10]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	490b      	ldr	r1, [pc, #44]	; (8002628 <I2C_MasterRequestWrite+0x100>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f92e 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b04      	cmp	r3, #4
 800260e:	d101      	bne.n	8002614 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e002      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e000      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	00010008 	.word	0x00010008
 8002628:	00010002 	.word	0x00010002

0800262c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	460b      	mov	r3, r1
 800263a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d006      	beq.n	8002666 <I2C_MasterRequestRead+0x3a>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d003      	beq.n	8002666 <I2C_MasterRequestRead+0x3a>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002664:	d108      	bne.n	8002678 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e00b      	b.n	8002690 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	2b11      	cmp	r3, #17
 800267e:	d107      	bne.n	8002690 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f88d 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e07f      	b.n	80027ac <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b4:	d108      	bne.n	80026c8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	897a      	ldrh	r2, [r7, #10]
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	611a      	str	r2, [r3, #16]
 80026c6:	e05f      	b.n	8002788 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	897a      	ldrh	r2, [r7, #10]
 80026ce:	11d2      	asrs	r2, r2, #7
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 0206 	and.w	r2, r2, #6
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f062 020f 	orn	r2, r2, #15
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4933      	ldr	r1, [pc, #204]	; (80027b4 <I2C_MasterRequestRead+0x188>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f8b9 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d101      	bne.n	80026fe <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e056      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e054      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	897a      	ldrh	r2, [r7, #10]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4929      	ldr	r1, [pc, #164]	; (80027b8 <I2C_MasterRequestRead+0x18c>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8a3 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b04      	cmp	r3, #4
 8002724:	d101      	bne.n	800272a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e040      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e03e      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f82b 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e01d      	b.n	80027ac <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	897a      	ldrh	r2, [r7, #10]
 8002776:	11d2      	asrs	r2, r2, #7
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 0206 	and.w	r2, r2, #6
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f062 020e 	orn	r2, r2, #14
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	490a      	ldr	r1, [pc, #40]	; (80027b8 <I2C_MasterRequestRead+0x18c>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f865 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d101      	bne.n	80027a6 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e002      	b.n	80027ac <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e000      	b.n	80027ac <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	00010008 	.word	0x00010008
 80027b8:	00010002 	.word	0x00010002

080027bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80027cc:	e01f      	b.n	800280e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d01b      	beq.n	800280e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80027dc:	f7fd ff3e 	bl	800065c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad2      	subs	r2, r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d910      	bls.n	800280e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e023      	b.n	8002856 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10d      	bne.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	e00c      	b.n	800284e <I2C_WaitOnFlagUntilTimeout+0x92>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	429a      	cmp	r2, r3
 8002852:	d0bc      	beq.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800286c:	e040      	b.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d11c      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002896:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2204      	movs	r2, #4
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e03c      	b.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d017      	beq.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80028c6:	f7fd fec9 	bl	800065c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90c      	bls.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e020      	b.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10c      	bne.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e00b      	b.n	800292c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4013      	ands	r3, r2
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d19e      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002946:	e029      	b.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f8ba 	bl	8002ac2 <I2C_IsAcknowledgeFailed>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e029      	b.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d01d      	beq.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002966:	f7fd fe79 	bl	800065c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	429a      	cmp	r2, r3
 8002974:	d912      	bls.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e007      	b.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d1ce      	bne.n	8002948 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c0:	e029      	b.n	8002a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f87d 	bl	8002ac2 <I2C_IsAcknowledgeFailed>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e029      	b.n	8002a26 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d01d      	beq.n	8002a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029e0:	f7fd fe3c 	bl	800065c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad2      	subs	r2, r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d912      	bls.n	8002a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e007      	b.n	8002a26 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d1ce      	bne.n	80029c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a3a:	e036      	b.n	8002aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d114      	bne.n	8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0210 	mvn.w	r2, #16
 8002a52:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e022      	b.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002a7a:	f7fd fdef 	bl	800065c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d90f      	bls.n	8002aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e007      	b.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d1c1      	bne.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad8:	d114      	bne.n	8002b04 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae2:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e22d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d075      	beq.n	8002c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b32:	4ba3      	ldr	r3, [pc, #652]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d00c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3e:	4ba0      	ldr	r3, [pc, #640]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d112      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b9d      	ldr	r3, [pc, #628]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b56:	d10b      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	4b99      	ldr	r3, [pc, #612]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d05b      	beq.n	8002c1c <HAL_RCC_OscConfig+0x108>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d157      	bne.n	8002c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e208      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x74>
 8002b7a:	4a91      	ldr	r2, [pc, #580]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	4b90      	ldr	r3, [pc, #576]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e01d      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x98>
 8002b92:	4a8b      	ldr	r2, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	4b8a      	ldr	r3, [pc, #552]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4a88      	ldr	r2, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	4b87      	ldr	r3, [pc, #540]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002bac:	4a84      	ldr	r2, [pc, #528]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	4b84      	ldr	r3, [pc, #528]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4a81      	ldr	r2, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fd fd46 	bl	800065c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fd fd42 	bl	800065c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1cd      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xc0>
 8002bf2:	e014      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd fd32 	bl	800065c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fd fd2e 	bl	800065c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1b9      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0xe8>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d063      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c36:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d11c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e18d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	4956      	ldr	r1, [pc, #344]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	e03a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c84:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCC_OscConfig+0x2b0>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fd fce7 	bl	800065c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c92:	f7fd fce3 	bl	800065c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e16e      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4943      	ldr	r1, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0x2b0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fd fcc6 	bl	800065c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fd fcc2 	bl	800065c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e14d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d030      	beq.n	8002d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d06:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <HAL_RCC_OscConfig+0x2b4>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fd fca6 	bl	800065c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d14:	f7fd fca2 	bl	800065c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e12d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x200>
 8002d32:	e015      	b.n	8002d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCC_OscConfig+0x2b4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7fd fc8f 	bl	800065c <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d42:	f7fd fc8b 	bl	800065c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e116      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a0 	beq.w	8002eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_OscConfig+0x2b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d121      	bne.n	8002dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_RCC_OscConfig+0x2b8>)
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCC_OscConfig+0x2b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fd fc51 	bl	800065c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	e011      	b.n	8002de2 <HAL_RCC_OscConfig+0x2ce>
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	42470000 	.word	0x42470000
 8002dc8:	42470e80 	.word	0x42470e80
 8002dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fd fc44 	bl	800065c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0cf      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b6a      	ldr	r3, [pc, #424]	; (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2f0>
 8002df6:	4a66      	ldr	r2, [pc, #408]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002df8:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	e01c      	b.n	8002e3e <HAL_RCC_OscConfig+0x32a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x312>
 8002e0c:	4a60      	ldr	r2, [pc, #384]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e0e:	4b60      	ldr	r3, [pc, #384]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
 8002e18:	4a5d      	ldr	r2, [pc, #372]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	e00b      	b.n	8002e3e <HAL_RCC_OscConfig+0x32a>
 8002e26:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	4a57      	ldr	r2, [pc, #348]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e34:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fd fc09 	bl	800065c <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fd fc05 	bl	800065c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e08e      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b4a      	ldr	r3, [pc, #296]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCC_OscConfig+0x33a>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fd fbf3 	bl	800065c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fd fbef 	bl	800065c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e078      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4a3b      	ldr	r2, [pc, #236]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002ea4:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d064      	beq.n	8002f80 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb6:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d05c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d141      	bne.n	8002f4e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCC_OscConfig+0x480>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fd fbc4 	bl	800065c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fd fbc0 	bl	800065c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e04b      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef6:	4926      	ldr	r1, [pc, #152]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	019b      	lsls	r3, r3, #6
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_OscConfig+0x480>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fd fb99 	bl	800065c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fd fb95 	bl	800065c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e020      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x41a>
 8002f4c:	e018      	b.n	8002f80 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_OscConfig+0x480>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fd fb82 	bl	800065c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fd fb7e 	bl	800065c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e009      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x448>
 8002f7a:	e001      	b.n	8002f80 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	40023800 	.word	0x40023800
 8002f94:	42470060 	.word	0x42470060

08002f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0ca      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d20c      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b62      	ldr	r3, [pc, #392]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0b6      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fec:	4a58      	ldr	r2, [pc, #352]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8002fee:	4b58      	ldr	r3, [pc, #352]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003004:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003006:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800300e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	494f      	ldr	r1, [pc, #316]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	4b4f      	ldr	r3, [pc, #316]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d044      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d119      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07d      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d003      	beq.n	8003056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003052:	2b03      	cmp	r3, #3
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06d      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e065      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4936      	ldr	r1, [pc, #216]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 0203 	bic.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003088:	f7fd fae8 	bl	800065c <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fd fae4 	bl	800065c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e04d      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d90c      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e030      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4918      	ldr	r1, [pc, #96]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310a:	4911      	ldr	r1, [pc, #68]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800311e:	f000 f81d 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8003122:	4601      	mov	r1, r0
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	fa21 f303 	lsr.w	r3, r1, r3
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800313a:	2000      	movs	r0, #0
 800313c:	f7fd fa4a 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023c00 	.word	0x40023c00
 8003150:	40023800 	.word	0x40023800
 8003154:	080127d8 	.word	0x080127d8
 8003158:	2000001c 	.word	0x2000001c

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	b08f      	sub	sp, #60	; 0x3c
 8003162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
 800316c:	2300      	movs	r3, #0
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b04      	cmp	r3, #4
 800317e:	d007      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 8003180:	2b08      	cmp	r3, #8
 8003182:	d008      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x3a>
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 80b2 	bne.w	80032ee <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800318a:	4b5e      	ldr	r3, [pc, #376]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800318e:	e0b1      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003190:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003194:	e0ae      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003196:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d04e      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ac:	4b54      	ldr	r3, [pc, #336]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	f04f 0400 	mov.w	r4, #0
 80031b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	ea01 0103 	and.w	r1, r1, r3
 80031c2:	ea02 0204 	and.w	r2, r2, r4
 80031c6:	460b      	mov	r3, r1
 80031c8:	4614      	mov	r4, r2
 80031ca:	0160      	lsls	r0, r4, #5
 80031cc:	6278      	str	r0, [r7, #36]	; 0x24
 80031ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80031d4:	6278      	str	r0, [r7, #36]	; 0x24
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80031de:	1a5b      	subs	r3, r3, r1
 80031e0:	eb64 0402 	sbc.w	r4, r4, r2
 80031e4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80031e8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80031ec:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80031f0:	ebb8 0803 	subs.w	r8, r8, r3
 80031f4:	eb69 0904 	sbc.w	r9, r9, r4
 80031f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003210:	eb18 0801 	adds.w	r8, r8, r1
 8003214:	eb49 0902 	adc.w	r9, r9, r2
 8003218:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003230:	4640      	mov	r0, r8
 8003232:	4649      	mov	r1, r9
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	461a      	mov	r2, r3
 800323c:	4623      	mov	r3, r4
 800323e:	f7fd f81f 	bl	8000280 <__aeabi_uldivmod>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
 8003248:	e043      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	ea01 0103 	and.w	r1, r1, r3
 8003260:	ea02 0204 	and.w	r2, r2, r4
 8003264:	460b      	mov	r3, r1
 8003266:	4614      	mov	r4, r2
 8003268:	0160      	lsls	r0, r4, #5
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	015b      	lsls	r3, r3, #5
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800327c:	1a5b      	subs	r3, r3, r1
 800327e:	eb64 0402 	sbc.w	r4, r4, r2
 8003282:	01a6      	lsls	r6, r4, #6
 8003284:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003288:	019d      	lsls	r5, r3, #6
 800328a:	1aed      	subs	r5, r5, r3
 800328c:	eb66 0604 	sbc.w	r6, r6, r4
 8003290:	00f3      	lsls	r3, r6, #3
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80032a4:	186d      	adds	r5, r5, r1
 80032a6:	eb46 0602 	adc.w	r6, r6, r2
 80032aa:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80032ae:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80032b2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80032b6:	4655      	mov	r5, sl
 80032b8:	465e      	mov	r6, fp
 80032ba:	4628      	mov	r0, r5
 80032bc:	4631      	mov	r1, r6
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	f04f 0400 	mov.w	r4, #0
 80032c4:	461a      	mov	r2, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	f7fc ffda 	bl	8000280 <__aeabi_uldivmod>
 80032cc:	4603      	mov	r3, r0
 80032ce:	460c      	mov	r4, r1
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	3301      	adds	r3, #1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80032e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	373c      	adds	r7, #60	; 0x3c
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	00f42400 	.word	0x00f42400
 8003308:	007a1200 	.word	0x007a1200

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	2000001c 	.word	0x2000001c

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4601      	mov	r1, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4a03      	ldr	r2, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	080127e8 	.word	0x080127e8

0800334c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003350:	f7ff ffdc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003354:	4601      	mov	r1, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0b5b      	lsrs	r3, r3, #13
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	080127e8 	.word	0x080127e8

08003374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e055      	b.n	8003432 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f002 fde7 	bl	8005f74 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6851      	ldr	r1, [r2, #4]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68d2      	ldr	r2, [r2, #12]
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6912      	ldr	r2, [r2, #16]
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6952      	ldr	r2, [r2, #20]
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6992      	ldr	r2, [r2, #24]
 80033e2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	69d2      	ldr	r2, [r2, #28]
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6a12      	ldr	r2, [r2, #32]
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6992      	ldr	r2, [r2, #24]
 8003404:	0c12      	lsrs	r2, r2, #16
 8003406:	f002 0104 	and.w	r1, r2, #4
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	69d2      	ldr	r2, [r2, #28]
 800341c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003420:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e03f      	b.n	80034cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f002 ff3b 	bl	80062dc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2224      	movs	r2, #36	; 0x24
 800346a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	68d2      	ldr	r2, [r2, #12]
 8003478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fd4c 	bl	8003f1c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	6912      	ldr	r2, [r2, #16]
 800348e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003492:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	6952      	ldr	r2, [r2, #20]
 800349e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	f040 8082 	bne.w	80035fa <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_Transmit+0x2e>
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07a      	b.n	80035fc <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_UART_Transmit+0x40>
 8003510:	2302      	movs	r3, #2
 8003512:	e073      	b.n	80035fc <HAL_UART_Transmit+0x128>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2221      	movs	r2, #33	; 0x21
 8003526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800352a:	f7fd f897 	bl	800065c <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800353c:	e041      	b.n	80035c2 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d121      	bne.n	800359a <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fb63 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e045      	b.n	80035fc <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003580:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3302      	adds	r3, #2
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	e017      	b.n	80035c2 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	e013      	b.n	80035c2 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fb41 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e023      	b.n	80035fc <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1b8      	bne.n	800353e <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fb28 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00a      	b.n	80035fc <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d130      	bne.n	8003680 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_Transmit_IT+0x26>
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e029      	b.n	8003682 <HAL_UART_Transmit_IT+0x7e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit_IT+0x38>
 8003638:	2302      	movs	r3, #2
 800363a:	e022      	b.n	8003682 <HAL_UART_Transmit_IT+0x7e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2221      	movs	r2, #33	; 0x21
 8003660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	68d2      	ldr	r2, [r2, #12]
 8003676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367a:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;   
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d138      	bne.n	800371a <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Receive_IT+0x26>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e031      	b.n	800371c <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Receive_IT+0x38>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e02a      	b.n	800371c <HAL_UART_Receive_IT+0x8e>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2222      	movs	r2, #34	; 0x22
 80036ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	6952      	ldr	r2, [r2, #20]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	68d2      	ldr	r2, [r2, #12]
 8003710:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003714:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e000      	b.n	800371c <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 800371a:	2302      	movs	r3, #2
  }
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	d166      	bne.n	8003810 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_UART_Receive_DMA+0x26>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e05f      	b.n	8003812 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_UART_Receive_DMA+0x38>
 800375c:	2302      	movs	r3, #2
 800375e:	e058      	b.n	8003812 <HAL_UART_Receive_DMA+0xea>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2222      	movs	r2, #34	; 0x22
 800377e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_UART_Receive_DMA+0xf4>)
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	4a24      	ldr	r2, [pc, #144]	; (8003820 <HAL_UART_Receive_DMA+0xf8>)
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_UART_Receive_DMA+0xfc>)
 8003798:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	2200      	movs	r2, #0
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	f7fd fd75 	bl	80012a8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	6952      	ldr	r2, [r2, #20]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	6952      	ldr	r2, [r2, #20]
 8003806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800380a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	08003b15 	.word	0x08003b15
 8003820:	08003b7d 	.word	0x08003b7d
 8003824:	08003b99 	.word	0x08003b99

08003828 <HAL_UART_DMAStop>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b21      	cmp	r3, #33	; 0x21
 8003854:	d116      	bne.n	8003884 <HAL_UART_DMAStop+0x5c>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6952      	ldr	r2, [r2, #20]
 8003866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fd75 	bl	8001368 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa1e 	bl	8003cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b22      	cmp	r3, #34	; 0x22
 80038a4:	d116      	bne.n	80038d4 <HAL_UART_DMAStop+0xac>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6952      	ldr	r2, [r2, #20]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fd4d 	bl	8001368 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa0c 	bl	8003cec <UART_EndRxTransfer>
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_UART_IRQHandler+0x52>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa7d 	bl	8003e2a <UART_Receive_IT>
      return;
 8003930:	e0cc      	b.n	8003acc <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ab 	beq.w	8003a90 <HAL_UART_IRQHandler+0x1b0>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_UART_IRQHandler+0x70>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80a0 	beq.w	8003a90 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_UART_IRQHandler+0x90>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_UART_IRQHandler+0xb0>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	f043 0202 	orr.w	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_UART_IRQHandler+0xd0>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_UART_IRQHandler+0xf0>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f043 0208 	orr.w	r2, r3, #8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d078      	beq.n	8003aca <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_UART_IRQHandler+0x112>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fa1c 	bl	8003e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf14      	ite	ne
 8003a00:	2301      	movne	r3, #1
 8003a02:	2300      	moveq	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <HAL_UART_IRQHandler+0x13a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d031      	beq.n	8003a7e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f966 	bl	8003cec <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	6952      	ldr	r2, [r2, #20]
 8003a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3c:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d013      	beq.n	8003a6e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_UART_IRQHandler+0x1f4>)
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fcf8 	bl	8001448 <HAL_DMA_Abort_IT>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	e00e      	b.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f846 	bl	8003b00 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	e00a      	b.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f842 	bl	8003b00 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e006      	b.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f83e 	bl	8003b00 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a8a:	e01e      	b.n	8003aca <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	bf00      	nop
    return;
 8003a8e:	e01c      	b.n	8003aca <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_UART_IRQHandler+0x1cc>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f953 	bl	8003d50 <UART_Transmit_IT>
    return;
 8003aaa:	e00f      	b.n	8003acc <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_UART_IRQHandler+0x1ec>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f99a 	bl	8003dfa <UART_EndTransmit_IT>
    return;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_UART_IRQHandler+0x1ec>
    return;
 8003aca:	bf00      	nop
  }
}
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08003d29 	.word	0x08003d29

08003ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11e      	bne.n	8003b6e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	68d2      	ldr	r2, [r2, #12]
 8003b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b44:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	6952      	ldr	r2, [r2, #20]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	6952      	ldr	r2, [r2, #20]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f001 f972 	bl	8004e58 <HAL_UART_RxCpltCallback>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff ffae 	bl	8003aec <HAL_UART_RxHalfCpltCallback>
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b21      	cmp	r3, #33	; 0x21
 8003bca:	d108      	bne.n	8003bde <UART_DMAError+0x46>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003bd8:	68b8      	ldr	r0, [r7, #8]
 8003bda:	f000 f871 	bl	8003cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b22      	cmp	r3, #34	; 0x22
 8003bfe:	d108      	bne.n	8003c12 <UART_DMAError+0x7a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c0c:	68b8      	ldr	r0, [r7, #8]
 8003c0e:	f000 f86d 	bl	8003cec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	f043 0210 	orr.w	r2, r3, #16
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003c1e:	68b8      	ldr	r0, [r7, #8]
 8003c20:	f7ff ff6e 	bl	8003b00 <HAL_UART_ErrorCallback>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003c3c:	e02c      	b.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d028      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4c:	f7fc fd06 	bl	800065c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	1ad2      	subs	r2, r2, r3
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d91d      	bls.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	6952      	ldr	r2, [r2, #20]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e00f      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d0c3      	beq.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cd6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	68d2      	ldr	r2, [r2, #12]
 8003cfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	6952      	ldr	r2, [r2, #20]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff fedc 	bl	8003b00 <HAL_UART_ErrorCallback>
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b21      	cmp	r3, #33	; 0x21
 8003d62:	d143      	bne.n	8003dec <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d119      	bne.n	8003da2 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d80:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]
 8003d94:	e00e      	b.n	8003db4 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]
 8003da0:	e008      	b.n	8003db4 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	1c58      	adds	r0, r3, #1
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6208      	str	r0, [r1, #32]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10f      	bne.n	8003de8 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	68d2      	ldr	r2, [r2, #12]
 8003e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e10:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fe5c 	bl	8003ad8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b22      	cmp	r3, #34	; 0x22
 8003e3c:	d169      	bne.n	8003f12 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d123      	bne.n	8003e90 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10e      	bne.n	8003e74 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	1c9a      	adds	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
 8003e72:	e029      	b.n	8003ec8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e8e:	e01b      	b.n	8003ec8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	1c59      	adds	r1, r3, #1
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6291      	str	r1, [r2, #40]	; 0x28
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	6852      	ldr	r2, [r2, #4]
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e00c      	b.n	8003ec8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	1c59      	adds	r1, r3, #1
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6291      	str	r1, [r2, #40]	; 0x28
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	6852      	ldr	r2, [r2, #4]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d118      	bne.n	8003f0e <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	68d2      	ldr	r2, [r2, #12]
 8003ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	6952      	ldr	r2, [r2, #20]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 ffa7 	bl	8004e58 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e002      	b.n	8003f14 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f58:	f023 030c 	bic.w	r3, r3, #12
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fac:	f040 80e4 	bne.w	8004178 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4aab      	ldr	r2, [pc, #684]	; (8004264 <UART_SetConfig+0x348>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <UART_SetConfig+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4aaa      	ldr	r2, [pc, #680]	; (8004268 <UART_SetConfig+0x34c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d16c      	bne.n	800409e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681c      	ldr	r4, [r3, #0]
 8003fc8:	f7ff f9c0 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	4aa2      	ldr	r2, [pc, #648]	; (800426c <UART_SetConfig+0x350>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	011d      	lsls	r5, r3, #4
 8003fec:	f7ff f9ae 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fbb2 f6f3 	udiv	r6, r2, r3
 8004006:	f7ff f9a1 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 800400a:	4602      	mov	r2, r0
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	4a92      	ldr	r2, [pc, #584]	; (800426c <UART_SetConfig+0x350>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2264      	movs	r2, #100	; 0x64
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	1af3      	subs	r3, r6, r3
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	3332      	adds	r3, #50	; 0x32
 8004034:	4a8d      	ldr	r2, [pc, #564]	; (800426c <UART_SetConfig+0x350>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004042:	441d      	add	r5, r3
 8004044:	f7ff f982 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004048:	4602      	mov	r2, r0
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009a      	lsls	r2, r3, #2
 8004052:	441a      	add	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fbb2 f6f3 	udiv	r6, r2, r3
 800405e:	f7ff f975 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004062:	4602      	mov	r2, r0
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	4a7c      	ldr	r2, [pc, #496]	; (800426c <UART_SetConfig+0x350>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2264      	movs	r2, #100	; 0x64
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	1af3      	subs	r3, r6, r3
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a77      	ldr	r2, [pc, #476]	; (800426c <UART_SetConfig+0x350>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	442b      	add	r3, r5
 800409a:	60a3      	str	r3, [r4, #8]
 800409c:	e154      	b.n	8004348 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681c      	ldr	r4, [r3, #0]
 80040a2:	f7ff f93f 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009a      	lsls	r2, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	4a6b      	ldr	r2, [pc, #428]	; (800426c <UART_SetConfig+0x350>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011d      	lsls	r5, r3, #4
 80040c6:	f7ff f92d 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80040e0:	f7ff f920 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009a      	lsls	r2, r3, #2
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	4a5c      	ldr	r2, [pc, #368]	; (800426c <UART_SetConfig+0x350>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2264      	movs	r2, #100	; 0x64
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	1af3      	subs	r3, r6, r3
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a57      	ldr	r2, [pc, #348]	; (800426c <UART_SetConfig+0x350>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800411c:	441d      	add	r5, r3
 800411e:	f7ff f901 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8004122:	4602      	mov	r2, r0
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009a      	lsls	r2, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb2 f6f3 	udiv	r6, r2, r3
 8004138:	f7ff f8f4 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800413c:	4602      	mov	r2, r0
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009a      	lsls	r2, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	4a46      	ldr	r2, [pc, #280]	; (800426c <UART_SetConfig+0x350>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2264      	movs	r2, #100	; 0x64
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	1af3      	subs	r3, r6, r3
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	3332      	adds	r3, #50	; 0x32
 8004166:	4a41      	ldr	r2, [pc, #260]	; (800426c <UART_SetConfig+0x350>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	442b      	add	r3, r5
 8004174:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004176:	e0e7      	b.n	8004348 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <UART_SetConfig+0x348>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <UART_SetConfig+0x270>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <UART_SetConfig+0x34c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d171      	bne.n	8004270 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681c      	ldr	r4, [r3, #0]
 8004190:	f7ff f8dc 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004194:	4602      	mov	r2, r0
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009a      	lsls	r2, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	4a30      	ldr	r2, [pc, #192]	; (800426c <UART_SetConfig+0x350>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	011d      	lsls	r5, r3, #4
 80041b4:	f7ff f8ca 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009a      	lsls	r2, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80041ce:	f7ff f8bd 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009a      	lsls	r2, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <UART_SetConfig+0x350>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2264      	movs	r2, #100	; 0x64
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	1af3      	subs	r3, r6, r3
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	3332      	adds	r3, #50	; 0x32
 80041fc:	4a1b      	ldr	r2, [pc, #108]	; (800426c <UART_SetConfig+0x350>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004208:	441d      	add	r5, r3
 800420a:	f7ff f89f 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 800420e:	4602      	mov	r2, r0
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009a      	lsls	r2, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	fbb2 f6f3 	udiv	r6, r2, r3
 8004224:	f7ff f892 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004228:	4602      	mov	r2, r0
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009a      	lsls	r2, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	4a0b      	ldr	r2, [pc, #44]	; (800426c <UART_SetConfig+0x350>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	2264      	movs	r2, #100	; 0x64
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	1af3      	subs	r3, r6, r3
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	3332      	adds	r3, #50	; 0x32
 8004252:	4a06      	ldr	r2, [pc, #24]	; (800426c <UART_SetConfig+0x350>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	442b      	add	r3, r5
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	e071      	b.n	8004348 <UART_SetConfig+0x42c>
 8004264:	40011000 	.word	0x40011000
 8004268:	40011400 	.word	0x40011400
 800426c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681c      	ldr	r4, [r3, #0]
 8004274:	f7ff f856 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8004278:	4602      	mov	r2, r0
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009a      	lsls	r2, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	4a30      	ldr	r2, [pc, #192]	; (8004350 <UART_SetConfig+0x434>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	011d      	lsls	r5, r3, #4
 8004298:	f7ff f844 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800429c:	4602      	mov	r2, r0
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009a      	lsls	r2, r3, #2
 80042a6:	441a      	add	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80042b2:	f7ff f837 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009a      	lsls	r2, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <UART_SetConfig+0x434>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2264      	movs	r2, #100	; 0x64
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	1af3      	subs	r3, r6, r3
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	3332      	adds	r3, #50	; 0x32
 80042e0:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <UART_SetConfig+0x434>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ec:	441d      	add	r5, r3
 80042ee:	f7ff f819 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009a      	lsls	r2, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fbb2 f6f3 	udiv	r6, r2, r3
 8004308:	f7ff f80c 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800430c:	4602      	mov	r2, r0
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009a      	lsls	r2, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <UART_SetConfig+0x434>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	2264      	movs	r2, #100	; 0x64
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	1af3      	subs	r3, r6, r3
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	3332      	adds	r3, #50	; 0x32
 8004336:	4a06      	ldr	r2, [pc, #24]	; (8004350 <UART_SetConfig+0x434>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	442b      	add	r3, r5
 8004344:	60a3      	str	r3, [r4, #8]
}
 8004346:	e7ff      	b.n	8004348 <UART_SetConfig+0x42c>
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004350:	51eb851f 	.word	0x51eb851f

08004354 <lidar_init>:
#include "TFMini.h"

bool lidar_init() {
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
	lidar_raw_values = malloc(number_of_characters * sizeof(uint8_t));
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <lidar_init+0x38>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f00c ffd9 	bl	8011314 <malloc>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <lidar_init+0x3c>)
 8004368:	601a      	str	r2, [r3, #0]

	if (lidar_raw_values == NULL) {
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <lidar_init+0x3c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d105      	bne.n	800437e <lidar_init+0x2a>
		trace(CRITICAL_MESSAGE, "Lidar - memory allocation failed");
 8004372:	4908      	ldr	r1, [pc, #32]	; (8004394 <lidar_init+0x40>)
 8004374:	2000      	movs	r0, #0
 8004376:	f000 fb33 	bl	80049e0 <trace>
		return false;
 800437a:	2300      	movs	r3, #0
 800437c:	e004      	b.n	8004388 <lidar_init+0x34>
	}
	trace(POSITIVE_MESSAGE, "Lidar - memory allocation succeeded");
 800437e:	4906      	ldr	r1, [pc, #24]	; (8004398 <lidar_init+0x44>)
 8004380:	2001      	movs	r0, #1
 8004382:	f000 fb2d 	bl	80049e0 <trace>
	return true;
 8004386:	2301      	movs	r3, #1
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000008 	.word	0x20000008
 8004390:	20000904 	.word	0x20000904
 8004394:	0801227c 	.word	0x0801227c
 8004398:	080122a0 	.word	0x080122a0

0800439c <lidar_read>:
	free(lidar_raw_values);
	trace(POSITIVE_MESSAGE, "Lidar - memory freed");
	return true;
}

bool lidar_read() {
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart6, lidar_raw_values, number_of_characters);
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <lidar_read+0xe0>)
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <lidar_read+0xe4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	4835      	ldr	r0, [pc, #212]	; (8004484 <lidar_read+0xe8>)
 80043b0:	f7ff f9ba 	bl	8003728 <HAL_UART_Receive_DMA>
	HAL_Delay(20);
 80043b4:	2014      	movs	r0, #20
 80043b6:	f7fc f95d 	bl	8000674 <HAL_Delay>
	HAL_UART_DMAStop(&huart6);
 80043ba:	4832      	ldr	r0, [pc, #200]	; (8004484 <lidar_read+0xe8>)
 80043bc:	f7ff fa34 	bl	8003828 <HAL_UART_DMAStop>

	if (lidar_raw_values[0] != 0x59 || lidar_raw_values[1] != 0x59 || lidar_raw_values[7] != 0x00) {
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <lidar_read+0xe0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b59      	cmp	r3, #89	; 0x59
 80043c8:	d10b      	bne.n	80043e2 <lidar_read+0x46>
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <lidar_read+0xe0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3301      	adds	r3, #1
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b59      	cmp	r3, #89	; 0x59
 80043d4:	d105      	bne.n	80043e2 <lidar_read+0x46>
 80043d6:	4b29      	ldr	r3, [pc, #164]	; (800447c <lidar_read+0xe0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3307      	adds	r3, #7
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00f      	beq.n	8004402 <lidar_read+0x66>
		trace(CRITICAL_MESSAGE, "Lidar - corrupted data frame");
 80043e2:	4929      	ldr	r1, [pc, #164]	; (8004488 <lidar_read+0xec>)
 80043e4:	2000      	movs	r0, #0
 80043e6:	f000 fafb 	bl	80049e0 <trace>
		lidar_raw_values[2] = 0;
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <lidar_read+0xe0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3302      	adds	r3, #2
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
		lidar_raw_values[3] = 0;
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <lidar_read+0xe0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3303      	adds	r3, #3
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
		return false;
 80043fe:	2300      	movs	r3, #0
 8004400:	e037      	b.n	8004472 <lidar_read+0xd6>
	}

	uint16_t checksum = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	80fb      	strh	r3, [r7, #6]
	uint8_t number_without_checksum = number_of_characters - 1;
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <lidar_read+0xe4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	713b      	strb	r3, [r7, #4]

	for (uint8_t i = 0; i < number_without_checksum; ++i)
 8004410:	2300      	movs	r3, #0
 8004412:	717b      	strb	r3, [r7, #5]
 8004414:	e00b      	b.n	800442e <lidar_read+0x92>
		checksum += lidar_raw_values[i];
 8004416:	4b19      	ldr	r3, [pc, #100]	; (800447c <lidar_read+0xe0>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	797b      	ldrb	r3, [r7, #5]
 800441c:	4413      	add	r3, r2
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b29a      	uxth	r2, r3
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	4413      	add	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < number_without_checksum; ++i)
 8004428:	797b      	ldrb	r3, [r7, #5]
 800442a:	3301      	adds	r3, #1
 800442c:	717b      	strb	r3, [r7, #5]
 800442e:	797a      	ldrb	r2, [r7, #5]
 8004430:	793b      	ldrb	r3, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d3ef      	bcc.n	8004416 <lidar_read+0x7a>

	if ((checksum & 0xFF) != lidar_raw_values[number_without_checksum]) {
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	4a10      	ldr	r2, [pc, #64]	; (800447c <lidar_read+0xe0>)
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	793a      	ldrb	r2, [r7, #4]
 8004440:	440a      	add	r2, r1
 8004442:	7812      	ldrb	r2, [r2, #0]
 8004444:	4293      	cmp	r3, r2
 8004446:	d00f      	beq.n	8004468 <lidar_read+0xcc>
		trace(CRITICAL_MESSAGE, "Lidar - checksum incorrect");
 8004448:	4910      	ldr	r1, [pc, #64]	; (800448c <lidar_read+0xf0>)
 800444a:	2000      	movs	r0, #0
 800444c:	f000 fac8 	bl	80049e0 <trace>
		lidar_raw_values[2] = 0;
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <lidar_read+0xe0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3302      	adds	r3, #2
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
		lidar_raw_values[3] = 0;
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <lidar_read+0xe0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3303      	adds	r3, #3
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
		return false;
 8004464:	2300      	movs	r3, #0
 8004466:	e004      	b.n	8004472 <lidar_read+0xd6>
	}

	trace(POSITIVE_MESSAGE, "Lidar - reading data successful");
 8004468:	4909      	ldr	r1, [pc, #36]	; (8004490 <lidar_read+0xf4>)
 800446a:	2001      	movs	r0, #1
 800446c:	f000 fab8 	bl	80049e0 <trace>
	return true;
 8004470:	2301      	movs	r3, #1
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000904 	.word	0x20000904
 8004480:	20000008 	.word	0x20000008
 8004484:	20000c9c 	.word	0x20000c9c
 8004488:	08012300 	.word	0x08012300
 800448c:	08012320 	.word	0x08012320
 8004490:	0801233c 	.word	0x0801233c

08004494 <lidar_distance_cm>:

uint16_t lidar_distance_cm() {
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
	return lidar_raw_values[3] << 8 | lidar_raw_values[2];
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <lidar_distance_cm+0x2c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3303      	adds	r3, #3
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <lidar_distance_cm+0x2c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3302      	adds	r3, #2
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b21b      	sxth	r3, r3
 80044ae:	4313      	orrs	r3, r2
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	b29b      	uxth	r3, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000904 	.word	0x20000904

080044c4 <my_VL53L0X_init>:
#include "VL53L0X.h"

bool my_VL53L0X_init() {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
	Dev0->I2cDevAddr = 0x52;
 80044ca:	4b50      	ldr	r3, [pc, #320]	; (800460c <my_VL53L0X_init+0x148>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2252      	movs	r2, #82	; 0x52
 80044d0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	Dev0->i2c_handle = &hi2c1;
 80044d4:	4b4d      	ldr	r3, [pc, #308]	; (800460c <my_VL53L0X_init+0x148>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a4d      	ldr	r2, [pc, #308]	; (8004610 <my_VL53L0X_init+0x14c>)
 80044da:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	Dev0->comms_speed_khz = 400;
 80044de:	4b4b      	ldr	r3, [pc, #300]	; (800460c <my_VL53L0X_init+0x148>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80044e6:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	VL53L0X_status = VL53L0X_WaitDeviceBooted(Dev0);
 80044ea:	4b48      	ldr	r3, [pc, #288]	; (800460c <my_VL53L0X_init+0x148>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 faea 	bl	8006ac8 <VL53L0X_WaitDeviceBooted>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b46      	ldr	r3, [pc, #280]	; (8004614 <my_VL53L0X_init+0x150>)
 80044fa:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_DataInit(Dev0);
 80044fc:	4b43      	ldr	r3, [pc, #268]	; (800460c <my_VL53L0X_init+0x148>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fffb 	bl	80064fc <VL53L0X_DataInit>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4b42      	ldr	r3, [pc, #264]	; (8004614 <my_VL53L0X_init+0x150>)
 800450c:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_StaticInit(Dev0);
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <my_VL53L0X_init+0x148>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f002 f956 	bl	80067c4 <VL53L0X_StaticInit>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <my_VL53L0X_init+0x150>)
 800451e:	601a      	str	r2, [r3, #0]
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	VL53L0X_status = VL53L0X_PerformRefCalibration(Dev0, &VhvSettings, &PhaseCal);
 8004520:	4b3a      	ldr	r3, [pc, #232]	; (800460c <my_VL53L0X_init+0x148>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	1c7a      	adds	r2, r7, #1
 8004526:	1cb9      	adds	r1, r7, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f003 f83b 	bl	80075a4 <VL53L0X_PerformRefCalibration>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	4b38      	ldr	r3, [pc, #224]	; (8004614 <my_VL53L0X_init+0x150>)
 8004534:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_PerformRefSpadManagement(Dev0, &refSpadCount, &isApertureSpads);
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <my_VL53L0X_init+0x148>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1cfa      	adds	r2, r7, #3
 800453c:	1d39      	adds	r1, r7, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f003 fcbc 	bl	8007ebc <VL53L0X_PerformRefSpadManagement>
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <my_VL53L0X_init+0x150>)
 800454a:	601a      	str	r2, [r3, #0]

	VL53L0X_status = VL53L0X_SetDeviceMode(Dev0, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800454c:	4b2f      	ldr	r3, [pc, #188]	; (800460c <my_VL53L0X_init+0x148>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f002 fb56 	bl	8006c04 <VL53L0X_SetDeviceMode>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <my_VL53L0X_init+0x150>)
 800455e:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev0, 33000);
 8004560:	4b2a      	ldr	r3, [pc, #168]	; (800460c <my_VL53L0X_init+0x148>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8004568:	4618      	mov	r0, r3
 800456a:	f002 fbc5 	bl	8006cf8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	4b28      	ldr	r3, [pc, #160]	; (8004614 <my_VL53L0X_init+0x150>)
 8004574:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev0, 200);
 8004576:	4b25      	ldr	r3, [pc, #148]	; (800460c <my_VL53L0X_init+0x148>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	21c8      	movs	r1, #200	; 0xc8
 800457c:	4618      	mov	r0, r3
 800457e:	f002 fd5b 	bl	8007038 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	4b23      	ldr	r3, [pc, #140]	; (8004614 <my_VL53L0X_init+0x150>)
 8004588:	601a      	str	r2, [r3, #0]

	FixPoint1616_t signalLimit = (FixPoint1616_t) (0.1 * 65536);
 800458a:	f641 1399 	movw	r3, #6553	; 0x1999
 800458e:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t) (60 * 65536);
 8004590:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004594:	60bb      	str	r3, [r7, #8]
	VL53L0X_status = VL53L0X_SetLimitCheckValue(Dev0, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <my_VL53L0X_init+0x148>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f002 feaa 	bl	80072f8 <VL53L0X_SetLimitCheckValue>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <my_VL53L0X_init+0x150>)
 80045aa:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetLimitCheckValue(Dev0, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80045ac:	4b17      	ldr	r3, [pc, #92]	; (800460c <my_VL53L0X_init+0x148>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f002 fe9f 	bl	80072f8 <VL53L0X_SetLimitCheckValue>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <my_VL53L0X_init+0x150>)
 80045c0:	601a      	str	r2, [r3, #0]

	VL53L0X_status = VL53L0X_SetVcselPulsePeriod(Dev0, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <my_VL53L0X_init+0x148>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2212      	movs	r2, #18
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f002 fbba 	bl	8006d44 <VL53L0X_SetVcselPulsePeriod>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <my_VL53L0X_init+0x150>)
 80045d6:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetVcselPulsePeriod(Dev0, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <my_VL53L0X_init+0x148>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	220e      	movs	r2, #14
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f002 fbaf 	bl	8006d44 <VL53L0X_SetVcselPulsePeriod>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <my_VL53L0X_init+0x150>)
 80045ec:	601a      	str	r2, [r3, #0]

	if (VL53L0X_status != VL53L0X_ERROR_NONE) {
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <my_VL53L0X_init+0x150>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <my_VL53L0X_init+0x13e>
		trace(CRITICAL_MESSAGE, "VL53L0X_StartMeasurement failed");
 80045f6:	4908      	ldr	r1, [pc, #32]	; (8004618 <my_VL53L0X_init+0x154>)
 80045f8:	2000      	movs	r0, #0
 80045fa:	f000 f9f1 	bl	80049e0 <trace>
		return false;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <my_VL53L0X_init+0x140>
	}

	return true;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	2000000c 	.word	0x2000000c
 8004610:	20000a04 	.word	0x20000a04
 8004614:	200004e8 	.word	0x200004e8
 8004618:	0801235c 	.word	0x0801235c

0800461c <my_VL53L0X_read>:

bool my_VL53L0X_read() {
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	VL53L0X_status = VL53L0X_PerformSingleRangingMeasurement(Dev0, &VL53L0X_RangingData);
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <my_VL53L0X_read+0x48>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4910      	ldr	r1, [pc, #64]	; (8004668 <my_VL53L0X_read+0x4c>)
 8004626:	4618      	mov	r0, r3
 8004628:	f003 fa5e 	bl	8007ae8 <VL53L0X_PerformSingleRangingMeasurement>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <my_VL53L0X_read+0x50>)
 8004632:	601a      	str	r2, [r3, #0]
	VL53L0X_ClearInterruptMask(Dev0, 0);
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <my_VL53L0X_read+0x48>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f003 fbdc 	bl	8007df8 <VL53L0X_ClearInterruptMask>

	if (VL53L0X_status == VL53L0X_ERROR_NONE) {
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <my_VL53L0X_read+0x50>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <my_VL53L0X_read+0x38>
		trace(POSITIVE_MESSAGE, "VL53L0X - reading data successful");
 8004648:	4909      	ldr	r1, [pc, #36]	; (8004670 <my_VL53L0X_read+0x54>)
 800464a:	2001      	movs	r0, #1
 800464c:	f000 f9c8 	bl	80049e0 <trace>
		return true;
 8004650:	2301      	movs	r3, #1
 8004652:	e004      	b.n	800465e <my_VL53L0X_read+0x42>
	} else {
		trace(CRITICAL_MESSAGE, "VL53L0X - reading data unsuccessful");
 8004654:	4907      	ldr	r1, [pc, #28]	; (8004674 <my_VL53L0X_read+0x58>)
 8004656:	2000      	movs	r0, #0
 8004658:	f000 f9c2 	bl	80049e0 <trace>
		return false;
 800465c:	2300      	movs	r3, #0
	}
}
 800465e:	4618      	mov	r0, r3
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	2000000c 	.word	0x2000000c
 8004668:	200004ec 	.word	0x200004ec
 800466c:	200004e8 	.word	0x200004e8
 8004670:	0801237c 	.word	0x0801237c
 8004674:	080123a0 	.word	0x080123a0

08004678 <my_VL53L0X_distance_mm>:

uint16_t my_VL53L0X_distance_mm() {
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	if (VL53L0X_RangingData.RangeMilliMeter < 3000)
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <my_VL53L0X_distance_mm+0x24>)
 800467e:	891b      	ldrh	r3, [r3, #8]
 8004680:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004684:	4293      	cmp	r3, r2
 8004686:	d802      	bhi.n	800468e <my_VL53L0X_distance_mm+0x16>
		return VL53L0X_RangingData.RangeMilliMeter;
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <my_VL53L0X_distance_mm+0x24>)
 800468a:	891b      	ldrh	r3, [r3, #8]
 800468c:	e000      	b.n	8004690 <my_VL53L0X_distance_mm+0x18>
	else
		return 0;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	200004ec 	.word	0x200004ec

080046a0 <my_VL53L1_init>:
#include <VL53L1.h>

bool my_VL53L1_init() {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0

	Dev1->I2cDevAddr = 0x52;
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <my_VL53L1_init+0xd8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2252      	movs	r2, #82	; 0x52
 80046aa:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	Dev1->I2cHandle = &hi2c3;
 80046ae:	4b32      	ldr	r3, [pc, #200]	; (8004778 <my_VL53L1_init+0xd8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a32      	ldr	r2, [pc, #200]	; (800477c <my_VL53L1_init+0xdc>)
 80046b4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev1->comms_speed_khz = 400;
 80046b8:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <my_VL53L1_init+0xd8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80046c0:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a

	VL53L1_status = VL53L1_WaitDeviceBooted(Dev1);
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <my_VL53L1_init+0xd8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f007 f8c3 	bl	800b854 <VL53L1_WaitDeviceBooted>
 80046ce:	4603      	mov	r3, r0
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <my_VL53L1_init+0xe0>)
 80046d4:	601a      	str	r2, [r3, #0]
	VL53L1_status = VL53L1_DataInit(Dev1);
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <my_VL53L1_init+0xd8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f007 f83e 	bl	800b75c <VL53L1_DataInit>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	4b26      	ldr	r3, [pc, #152]	; (8004780 <my_VL53L1_init+0xe0>)
 80046e6:	601a      	str	r2, [r3, #0]
	VL53L1_status = VL53L1_StaticInit(Dev1);
 80046e8:	4b23      	ldr	r3, [pc, #140]	; (8004778 <my_VL53L1_init+0xd8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f007 f88a 	bl	800b806 <VL53L1_StaticInit>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <my_VL53L1_init+0xe0>)
 80046f8:	601a      	str	r2, [r3, #0]
	VL53L1_status = VL53L1_SetPresetMode(Dev1, VL53L1_PRESETMODE_AUTONOMOUS);
 80046fa:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <my_VL53L1_init+0xd8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2103      	movs	r1, #3
 8004700:	4618      	mov	r0, r3
 8004702:	f007 f98c 	bl	800ba1e <VL53L1_SetPresetMode>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <my_VL53L1_init+0xe0>)
 800470c:	601a      	str	r2, [r3, #0]
	VL53L1_status = VL53L1_SetDistanceMode(Dev1, VL53L1_DISTANCEMODE_LONG);
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <my_VL53L1_init+0xd8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2103      	movs	r1, #3
 8004714:	4618      	mov	r0, r3
 8004716:	f007 f9ca 	bl	800baae <VL53L1_SetDistanceMode>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <my_VL53L1_init+0xe0>)
 8004720:	601a      	str	r2, [r3, #0]
	VL53L1_status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev1, 70000);
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <my_VL53L1_init+0xd8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4917      	ldr	r1, [pc, #92]	; (8004784 <my_VL53L1_init+0xe4>)
 8004728:	4618      	mov	r0, r3
 800472a:	f007 fa47 	bl	800bbbc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <my_VL53L1_init+0xe0>)
 8004734:	601a      	str	r2, [r3, #0]
	VL53L1_status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev1, 200);
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <my_VL53L1_init+0xd8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	21c8      	movs	r1, #200	; 0xc8
 800473c:	4618      	mov	r0, r3
 800473e:	f007 fbbb 	bl	800beb8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <my_VL53L1_init+0xe0>)
 8004748:	601a      	str	r2, [r3, #0]
	VL53L1_status = VL53L1_StartMeasurement(Dev1);
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <my_VL53L1_init+0xd8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f007 fd28 	bl	800c1a4 <VL53L1_StartMeasurement>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <my_VL53L1_init+0xe0>)
 800475a:	601a      	str	r2, [r3, #0]

	if (VL53L1_status) {
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <my_VL53L1_init+0xe0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <my_VL53L1_init+0xd0>
		trace(CRITICAL_MESSAGE, "VL53L1_StartMeasurement failed");
 8004764:	4908      	ldr	r1, [pc, #32]	; (8004788 <my_VL53L1_init+0xe8>)
 8004766:	2000      	movs	r0, #0
 8004768:	f000 f93a 	bl	80049e0 <trace>
		return false;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <my_VL53L1_init+0xd2>
	}

	return true;
 8004770:	2301      	movs	r3, #1
}
 8004772:	4618      	mov	r0, r3
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000010 	.word	0x20000010
 800477c:	200009b0 	.word	0x200009b0
 8004780:	200008ac 	.word	0x200008ac
 8004784:	00011170 	.word	0x00011170
 8004788:	080123c4 	.word	0x080123c4

0800478c <my_VL53L1_read>:

bool my_VL53L1_read() {
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
			VL53L1_callback_counter = 0;
			VL53L1_status = VL53L1_GetRangingMeasurementData(Dev1, &VL53L1_RangingData);
			VL53L1_status = VL53L1_ClearInterruptAndStartMeasurement(Dev1);
		}
	} else {
		VL53L1_status = VL53L1_WaitMeasurementDataReady(Dev1);
 8004790:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <my_VL53L1_read+0x68>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f007 fe23 	bl	800c3e0 <VL53L1_WaitMeasurementDataReady>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <my_VL53L1_read+0x6c>)
 80047a0:	601a      	str	r2, [r3, #0]
		if (!VL53L1_status) {
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <my_VL53L1_read+0x6c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d112      	bne.n	80047d0 <my_VL53L1_read+0x44>
			VL53L1_status = VL53L1_GetRangingMeasurementData(Dev1, &VL53L1_RangingData);
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <my_VL53L1_read+0x68>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4913      	ldr	r1, [pc, #76]	; (80047fc <my_VL53L1_read+0x70>)
 80047b0:	4618      	mov	r0, r3
 80047b2:	f007 ffef 	bl	800c794 <VL53L1_GetRangingMeasurementData>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461a      	mov	r2, r3
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <my_VL53L1_read+0x6c>)
 80047bc:	601a      	str	r2, [r3, #0]
			VL53L1_status = VL53L1_ClearInterruptAndStartMeasurement(Dev1);
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <my_VL53L1_read+0x68>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f007 fde4 	bl	800c390 <VL53L1_ClearInterruptAndStartMeasurement>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <my_VL53L1_read+0x6c>)
 80047ce:	601a      	str	r2, [r3, #0]
		}
	}

	if (VL53L1_status == VL53L1_ERROR_NONE) {
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <my_VL53L1_read+0x6c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <my_VL53L1_read+0x58>
		trace(POSITIVE_MESSAGE, "VL53L1 - reading data successful");
 80047d8:	4909      	ldr	r1, [pc, #36]	; (8004800 <my_VL53L1_read+0x74>)
 80047da:	2001      	movs	r0, #1
 80047dc:	f000 f900 	bl	80049e0 <trace>
		return true;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e004      	b.n	80047ee <my_VL53L1_read+0x62>
	} else{
		trace(CRITICAL_MESSAGE, "VL53L1 - reading data unsuccessful");
 80047e4:	4907      	ldr	r1, [pc, #28]	; (8004804 <my_VL53L1_read+0x78>)
 80047e6:	2000      	movs	r0, #0
 80047e8:	f000 f8fa 	bl	80049e0 <trace>
		return false;
 80047ec:	2300      	movs	r3, #0
	}
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000010 	.word	0x20000010
 80047f8:	200008ac 	.word	0x200008ac
 80047fc:	200008b0 	.word	0x200008b0
 8004800:	080123e4 	.word	0x080123e4
 8004804:	08012408 	.word	0x08012408

08004808 <my_VL53L1_distance_mm>:

uint16_t my_VL53L1_distance_mm() {
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
	if (VL53L1_RangingData.RangeMilliMeter < 5000)
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <my_VL53L1_distance_mm+0x28>)
 800480e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004812:	f241 3287 	movw	r2, #4999	; 0x1387
 8004816:	4293      	cmp	r3, r2
 8004818:	dc04      	bgt.n	8004824 <my_VL53L1_distance_mm+0x1c>
		return VL53L1_RangingData.RangeMilliMeter;
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <my_VL53L1_distance_mm+0x28>)
 800481c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004820:	b29b      	uxth	r3, r3
 8004822:	e000      	b.n	8004826 <my_VL53L1_distance_mm+0x1e>
	else
		return 0;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	200008b0 	.word	0x200008b0

08004834 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800483a:	4b32      	ldr	r3, [pc, #200]	; (8004904 <MX_ADC1_Init+0xd0>)
 800483c:	4a32      	ldr	r2, [pc, #200]	; (8004908 <MX_ADC1_Init+0xd4>)
 800483e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004840:	4b30      	ldr	r3, [pc, #192]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004842:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004846:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004848:	4b2e      	ldr	r3, [pc, #184]	; (8004904 <MX_ADC1_Init+0xd0>)
 800484a:	2200      	movs	r2, #0
 800484c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800484e:	4b2d      	ldr	r3, [pc, #180]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004850:	2201      	movs	r2, #1
 8004852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004854:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004856:	2201      	movs	r2, #1
 8004858:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <MX_ADC1_Init+0xd0>)
 800485c:	2200      	movs	r2, #0
 800485e:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004860:	4b28      	ldr	r3, [pc, #160]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004862:	2200      	movs	r2, #0
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004866:	4b27      	ldr	r3, [pc, #156]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004868:	4a28      	ldr	r2, [pc, #160]	; (800490c <MX_ADC1_Init+0xd8>)
 800486a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <MX_ADC1_Init+0xd0>)
 800486e:	2200      	movs	r2, #0
 8004870:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004874:	2203      	movs	r2, #3
 8004876:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004878:	4b22      	ldr	r3, [pc, #136]	; (8004904 <MX_ADC1_Init+0xd0>)
 800487a:	2201      	movs	r2, #1
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004880:	2201      	movs	r2, #1
 8004882:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004884:	481f      	ldr	r0, [pc, #124]	; (8004904 <MX_ADC1_Init+0xd0>)
 8004886:	f7fb ff17 	bl	80006b8 <HAL_ADC_Init>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004890:	214a      	movs	r1, #74	; 0x4a
 8004892:	481f      	ldr	r0, [pc, #124]	; (8004910 <MX_ADC1_Init+0xdc>)
 8004894:	f001 fa56 	bl	8005d44 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8004898:	230a      	movs	r3, #10
 800489a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800489c:	2301      	movs	r3, #1
 800489e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80048a0:	2307      	movs	r3, #7
 80048a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048a4:	463b      	mov	r3, r7
 80048a6:	4619      	mov	r1, r3
 80048a8:	4816      	ldr	r0, [pc, #88]	; (8004904 <MX_ADC1_Init+0xd0>)
 80048aa:	f7fc f883 	bl	80009b4 <HAL_ADC_ConfigChannel>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048b4:	2154      	movs	r1, #84	; 0x54
 80048b6:	4816      	ldr	r0, [pc, #88]	; (8004910 <MX_ADC1_Init+0xdc>)
 80048b8:	f001 fa44 	bl	8005d44 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 80048bc:	230b      	movs	r3, #11
 80048be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80048c0:	2302      	movs	r3, #2
 80048c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048c4:	463b      	mov	r3, r7
 80048c6:	4619      	mov	r1, r3
 80048c8:	480e      	ldr	r0, [pc, #56]	; (8004904 <MX_ADC1_Init+0xd0>)
 80048ca:	f7fc f873 	bl	80009b4 <HAL_ADC_ConfigChannel>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <MX_ADC1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048d4:	215d      	movs	r1, #93	; 0x5d
 80048d6:	480e      	ldr	r0, [pc, #56]	; (8004910 <MX_ADC1_Init+0xdc>)
 80048d8:	f001 fa34 	bl	8005d44 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 80048dc:	230c      	movs	r3, #12
 80048de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80048e0:	2303      	movs	r3, #3
 80048e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048e4:	463b      	mov	r3, r7
 80048e6:	4619      	mov	r1, r3
 80048e8:	4806      	ldr	r0, [pc, #24]	; (8004904 <MX_ADC1_Init+0xd0>)
 80048ea:	f7fc f863 	bl	80009b4 <HAL_ADC_ConfigChannel>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <MX_ADC1_Init+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048f4:	2166      	movs	r1, #102	; 0x66
 80048f6:	4806      	ldr	r0, [pc, #24]	; (8004910 <MX_ADC1_Init+0xdc>)
 80048f8:	f001 fa24 	bl	8005d44 <_Error_Handler>
  }

}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000908 	.word	0x20000908
 8004908:	40012000 	.word	0x40012000
 800490c:	0f000001 	.word	0x0f000001
 8004910:	0801242c 	.word	0x0801242c

08004914 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <HAL_ADC_MspInit+0xb4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d14b      	bne.n	80049be <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	4a28      	ldr	r2, [pc, #160]	; (80049cc <HAL_ADC_MspInit+0xb8>)
 800492c:	4b27      	ldr	r3, [pc, #156]	; (80049cc <HAL_ADC_MspInit+0xb8>)
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004934:	6453      	str	r3, [r2, #68]	; 0x44
 8004936:	4b25      	ldr	r3, [pc, #148]	; (80049cc <HAL_ADC_MspInit+0xb8>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = SHARP_SMALL_1_ADC_Pin|SHARP_SMALL_2_ADC_Pin|SHARP_BIG_ADC_Pin;
 8004942:	2307      	movs	r3, #7
 8004944:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004946:	2303      	movs	r3, #3
 8004948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	4619      	mov	r1, r3
 8004954:	481e      	ldr	r0, [pc, #120]	; (80049d0 <HAL_ADC_MspInit+0xbc>)
 8004956:	f7fd f801 	bl	800195c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <HAL_ADC_MspInit+0xc4>)
 800495e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 8004962:	2200      	movs	r2, #0
 8004964:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 8004968:	2200      	movs	r2, #0
 800496a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004972:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 8004974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004978:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 800497c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004980:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 8004984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004988:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 800498c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004990:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 8004994:	2200      	movs	r2, #0
 8004996:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 800499a:	2200      	movs	r2, #0
 800499c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800499e:	480d      	ldr	r0, [pc, #52]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 80049a0:	f7fc fbd4 	bl	800114c <HAL_DMA_Init>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_ADC_MspInit+0x9e>
    {
      _Error_Handler(__FILE__, __LINE__);
 80049aa:	218f      	movs	r1, #143	; 0x8f
 80049ac:	480b      	ldr	r0, [pc, #44]	; (80049dc <HAL_ADC_MspInit+0xc8>)
 80049ae:	f001 f9c9 	bl	8005d44 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
 80049b8:	4a06      	ldr	r2, [pc, #24]	; (80049d4 <HAL_ADC_MspInit+0xc0>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80049be:	bf00      	nop
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40012000 	.word	0x40012000
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40020800 	.word	0x40020800
 80049d4:	20000950 	.word	0x20000950
 80049d8:	40026410 	.word	0x40026410
 80049dc:	0801242c 	.word	0x0801242c

080049e0 <trace>:
#include "debug.h"

void trace(uint8_t message_trace_level, char *message) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	71fb      	strb	r3, [r7, #7]
	if (message_trace_level <= trace_level)
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <trace+0x28>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	79fa      	ldrb	r2, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d803      	bhi.n	80049fe <trace+0x1e>
		printf("%s\r\n", message);
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	4804      	ldr	r0, [pc, #16]	; (8004a0c <trace+0x2c>)
 80049fa:	f00d f829 	bl	8011a50 <iprintf>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000014 	.word	0x20000014
 8004a0c:	0801243c 	.word	0x0801243c

08004a10 <set_trace_level_critical>:

void set_trace_level_critical() {
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
	trace_level = CRITICAL_MESSAGE;
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <set_trace_level_critical+0x14>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20000014 	.word	0x20000014

08004a28 <set_trace_level_positive>:

void set_trace_level_positive() {
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	trace_level = POSITIVE_MESSAGE;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <set_trace_level_positive+0x14>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	20000014 	.word	0x20000014

08004a40 <set_trace_level_output_only>:

void set_trace_level_output_only() {
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
	trace_level = ONLY_OUTPUT;
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <set_trace_level_output_only+0x14>)
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	20000014 	.word	0x20000014

08004a58 <set_output_type_human>:

void set_output_type_human()
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
	output_type = OUTPUT_HUMAN;
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <set_output_type_human+0x14>)
 8004a5e:	220a      	movs	r2, #10
 8004a60:	701a      	strb	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	20000015 	.word	0x20000015

08004a70 <set_output_type_machine>:

void set_output_type_machine()
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
	output_type = OUTPUT_MACHINE;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <set_output_type_machine+0x14>)
 8004a76:	220b      	movs	r2, #11
 8004a78:	701a      	strb	r2, [r3, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	20000015 	.word	0x20000015

08004a88 <set_psd_value_raw>:

void set_psd_value_raw()
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
	psd_output = PSD_RAW;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <set_psd_value_raw+0x14>)
 8004a8e:	2214      	movs	r2, #20
 8004a90:	701a      	strb	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20000016 	.word	0x20000016

08004aa0 <set_psd_value_si>:

void set_psd_value_si()
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
	psd_output = PSD_SI;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <set_psd_value_si+0x14>)
 8004aa6:	2215      	movs	r2, #21
 8004aa8:	701a      	strb	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20000016 	.word	0x20000016

08004ab8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <MX_DMA_Init+0x5c>)
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <MX_DMA_Init+0x5c>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <MX_DMA_Init+0x5c>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	2038      	movs	r0, #56	; 0x38
 8004ae0:	f7fc fad3 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004ae4:	2038      	movs	r0, #56	; 0x38
 8004ae6:	f7fc faec 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	2039      	movs	r0, #57	; 0x39
 8004af0:	f7fc facb 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004af4:	2039      	movs	r0, #57	; 0x39
 8004af6:	f7fc fae4 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2100      	movs	r1, #0
 8004afe:	2045      	movs	r0, #69	; 0x45
 8004b00:	f7fc fac3 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004b04:	2045      	movs	r0, #69	; 0x45
 8004b06:	f7fc fadc 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800

08004b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	4a49      	ldr	r2, [pc, #292]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b24:	4b48      	ldr	r3, [pc, #288]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f043 0304 	orr.w	r3, r3, #4
 8004b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2e:	4b46      	ldr	r3, [pc, #280]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	4a42      	ldr	r2, [pc, #264]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b40:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	4a3b      	ldr	r2, [pc, #236]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b5c:	4b3a      	ldr	r3, [pc, #232]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	4a34      	ldr	r2, [pc, #208]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b78:	4b33      	ldr	r3, [pc, #204]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	6313      	str	r3, [r2, #48]	; 0x30
 8004b82:	4b31      	ldr	r3, [pc, #196]	; (8004c48 <MX_GPIO_Init+0x130>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHARP_BIG_TRIGGER_Pin|SHARP_SMALL_2_TRIGGER_Pin|VL53L0X_TRIGGER_Pin|LASER_TRIGGER_Pin, GPIO_PIN_SET);
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8004b94:	482d      	ldr	r0, [pc, #180]	; (8004c4c <MX_GPIO_Init+0x134>)
 8004b96:	f7fd f863 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VL53L1X_TRIGGER_Pin|SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_SET);
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8004ba0:	482b      	ldr	r0, [pc, #172]	; (8004c50 <MX_GPIO_Init+0x138>)
 8004ba2:	f7fd f85d 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_RESET);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	4829      	ldr	r0, [pc, #164]	; (8004c50 <MX_GPIO_Init+0x138>)
 8004bac:	f7fd f858 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <MX_GPIO_Init+0x13c>)
 8004bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4824      	ldr	r0, [pc, #144]	; (8004c58 <MX_GPIO_Init+0x140>)
 8004bc6:	f7fc fec9 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin|VL53L0X_INT_Pin;
 8004bca:	2330      	movs	r3, #48	; 0x30
 8004bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004bce:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <MX_GPIO_Init+0x144>)
 8004bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	481b      	ldr	r0, [pc, #108]	; (8004c4c <MX_GPIO_Init+0x134>)
 8004bde:	f7fc febd 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SHARP_BIG_TRIGGER_Pin|SHARP_SMALL_2_TRIGGER_Pin|VL53L0X_TRIGGER_Pin|LASER_TRIGGER_Pin;
 8004be2:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 8004be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004be8:	2301      	movs	r3, #1
 8004bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4814      	ldr	r0, [pc, #80]	; (8004c4c <MX_GPIO_Init+0x134>)
 8004bfc:	f7fc feae 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VL53L1X_TRIGGER_Pin|SHARP_SMALL_1_TRIGGER_Pin|TFMini_TRIGGER_Pin;
 8004c00:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8004c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c12:	f107 0314 	add.w	r3, r7, #20
 8004c16:	4619      	mov	r1, r3
 8004c18:	480d      	ldr	r0, [pc, #52]	; (8004c50 <MX_GPIO_Init+0x138>)
 8004c1a:	f7fc fe9f 	bl	800195c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2100      	movs	r1, #0
 8004c22:	200a      	movs	r0, #10
 8004c24:	f7fc fa31 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004c28:	200a      	movs	r0, #10
 8004c2a:	f7fc fa4a 	bl	80010c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2100      	movs	r1, #0
 8004c32:	2017      	movs	r0, #23
 8004c34:	f7fc fa29 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c38:	2017      	movs	r0, #23
 8004c3a:	f7fc fa42 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 8004c3e:	bf00      	nop
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	40020400 	.word	0x40020400
 8004c54:	10110000 	.word	0x10110000
 8004c58:	40020800 	.word	0x40020800
 8004c5c:	10210000 	.word	0x10210000

08004c60 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c66:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <MX_I2C1_Init+0x58>)
 8004c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c6c:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <MX_I2C1_Init+0x5c>)
 8004c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c90:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c96:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c9c:	4805      	ldr	r0, [pc, #20]	; (8004cb4 <MX_I2C1_Init+0x54>)
 8004c9e:	f7fd f823 	bl	8001ce8 <HAL_I2C_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004ca8:	2143      	movs	r1, #67	; 0x43
 8004caa:	4805      	ldr	r0, [pc, #20]	; (8004cc0 <MX_I2C1_Init+0x60>)
 8004cac:	f001 f84a 	bl	8005d44 <_Error_Handler>
  }

}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000a04 	.word	0x20000a04
 8004cb8:	40005400 	.word	0x40005400
 8004cbc:	00061a80 	.word	0x00061a80
 8004cc0:	08012444 	.word	0x08012444

08004cc4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cca:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <MX_I2C3_Init+0x58>)
 8004ccc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <MX_I2C3_Init+0x5c>)
 8004cd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ce6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004d00:	4805      	ldr	r0, [pc, #20]	; (8004d18 <MX_I2C3_Init+0x54>)
 8004d02:	f7fc fff1 	bl	8001ce8 <HAL_I2C_Init>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004d0c:	2156      	movs	r1, #86	; 0x56
 8004d0e:	4805      	ldr	r0, [pc, #20]	; (8004d24 <MX_I2C3_Init+0x60>)
 8004d10:	f001 f818 	bl	8005d44 <_Error_Handler>
  }

}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	200009b0 	.word	0x200009b0
 8004d1c:	40005c00 	.word	0x40005c00
 8004d20:	00061a80 	.word	0x00061a80
 8004d24:	08012444 	.word	0x08012444

08004d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <HAL_I2C_MspInit+0xc4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d11f      	bne.n	8004d7a <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = VL53L0X_SCL_Pin|VL53L0X_SDA_Pin;
 8004d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d40:	2312      	movs	r3, #18
 8004d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d44:	2301      	movs	r3, #1
 8004d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d50:	f107 0314 	add.w	r3, r7, #20
 8004d54:	4619      	mov	r1, r3
 8004d56:	4826      	ldr	r0, [pc, #152]	; (8004df0 <HAL_I2C_MspInit+0xc8>)
 8004d58:	f7fc fe00 	bl	800195c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <HAL_I2C_MspInit+0xcc>)
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <HAL_I2C_MspInit+0xcc>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6c:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <HAL_I2C_MspInit+0xcc>)
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004d78:	e034      	b.n	8004de4 <HAL_I2C_MspInit+0xbc>
  else if(i2cHandle->Instance==I2C3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <HAL_I2C_MspInit+0xd0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d12f      	bne.n	8004de4 <HAL_I2C_MspInit+0xbc>
    GPIO_InitStruct.Pin = VL53L1X_SDA_Pin;
 8004d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d8a:	2312      	movs	r3, #18
 8004d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d92:	2303      	movs	r3, #3
 8004d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d96:	2304      	movs	r3, #4
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VL53L1X_SDA_GPIO_Port, &GPIO_InitStruct);
 8004d9a:	f107 0314 	add.w	r3, r7, #20
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4816      	ldr	r0, [pc, #88]	; (8004dfc <HAL_I2C_MspInit+0xd4>)
 8004da2:	f7fc fddb 	bl	800195c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VL53L1X_SCL_Pin;
 8004da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dac:	2312      	movs	r3, #18
 8004dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004db0:	2301      	movs	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db4:	2303      	movs	r3, #3
 8004db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004db8:	2304      	movs	r3, #4
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VL53L1X_SCL_GPIO_Port, &GPIO_InitStruct);
 8004dbc:	f107 0314 	add.w	r3, r7, #20
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	480f      	ldr	r0, [pc, #60]	; (8004e00 <HAL_I2C_MspInit+0xd8>)
 8004dc4:	f7fc fdca 	bl	800195c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	4a09      	ldr	r2, [pc, #36]	; (8004df4 <HAL_I2C_MspInit+0xcc>)
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_I2C_MspInit+0xcc>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_I2C_MspInit+0xcc>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	3728      	adds	r7, #40	; 0x28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40005400 	.word	0x40005400
 8004df0:	40020400 	.word	0x40020400
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40005c00 	.word	0x40005c00
 8004dfc:	40020800 	.word	0x40020800
 8004e00:	40020000 	.word	0x40020000

08004e04 <_write>:
uint8_t message_size = 0;
int message_buff2[50];
int message_size2 = 0;

int _write(int file, char *ptr, int len)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	2332      	movs	r3, #50	; 0x32
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4803      	ldr	r0, [pc, #12]	; (8004e28 <_write+0x24>)
 8004e1a:	f7fe fb5b 	bl	80034d4 <HAL_UART_Transmit>
	return len;
 8004e1e:	687b      	ldr	r3, [r7, #4]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000cdc 	.word	0x20000cdc

08004e2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == VL53L1X_INT_Pin)
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d104      	bne.n	8004e46 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		++VL53L1_callback_counter;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_GPIO_EXTI_Callback+0x28>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <HAL_GPIO_EXTI_Callback+0x28>)
 8004e44:	6013      	str	r3, [r2, #0]
	}
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	200008cc 	.word	0x200008cc

08004e58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b090      	sub	sp, #64	; 0x40
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a71      	ldr	r2, [pc, #452]	; (8005028 <HAL_UART_RxCpltCallback+0x1d0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	f040 80db 	bne.w	8005020 <HAL_UART_RxCpltCallback+0x1c8>
	{
		uint8_t buffer[50];
		uint16_t size = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	87fb      	strh	r3, [r7, #62]	; 0x3e

		if (trace_mode == 1)
 8004e6e:	4b6f      	ldr	r3, [pc, #444]	; (800502c <HAL_UART_RxCpltCallback+0x1d4>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d113      	bne.n	8004e9e <HAL_UART_RxCpltCallback+0x46>
		{
			switch (received)
 8004e76:	4b6e      	ldr	r3, [pc, #440]	; (8005030 <HAL_UART_RxCpltCallback+0x1d8>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b32      	cmp	r3, #50	; 0x32
 8004e7c:	d007      	beq.n	8004e8e <HAL_UART_RxCpltCallback+0x36>
 8004e7e:	2b33      	cmp	r3, #51	; 0x33
 8004e80:	d009      	beq.n	8004e96 <HAL_UART_RxCpltCallback+0x3e>
 8004e82:	2b31      	cmp	r3, #49	; 0x31
 8004e84:	d10b      	bne.n	8004e9e <HAL_UART_RxCpltCallback+0x46>
			{
			case 49: //1
				trace_mode = 2;
 8004e86:	4b69      	ldr	r3, [pc, #420]	; (800502c <HAL_UART_RxCpltCallback+0x1d4>)
 8004e88:	2202      	movs	r2, #2
 8004e8a:	701a      	strb	r2, [r3, #0]
				break;
 8004e8c:	e007      	b.n	8004e9e <HAL_UART_RxCpltCallback+0x46>
			case 50: //2
				trace_mode = 3;
 8004e8e:	4b67      	ldr	r3, [pc, #412]	; (800502c <HAL_UART_RxCpltCallback+0x1d4>)
 8004e90:	2203      	movs	r2, #3
 8004e92:	701a      	strb	r2, [r3, #0]
				break;
 8004e94:	e003      	b.n	8004e9e <HAL_UART_RxCpltCallback+0x46>
			case 51: //3
				trace_mode = 4;
 8004e96:	4b65      	ldr	r3, [pc, #404]	; (800502c <HAL_UART_RxCpltCallback+0x1d4>)
 8004e98:	2204      	movs	r2, #4
 8004e9a:	701a      	strb	r2, [r3, #0]
				break;
 8004e9c:	bf00      	nop
			}
		}

		if (output_level == 1)
 8004e9e:	4b65      	ldr	r3, [pc, #404]	; (8005034 <HAL_UART_RxCpltCallback+0x1dc>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_UART_RxCpltCallback+0x6c>
		{
			switch (received)
 8004ea6:	4b62      	ldr	r3, [pc, #392]	; (8005030 <HAL_UART_RxCpltCallback+0x1d8>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b31      	cmp	r3, #49	; 0x31
 8004eac:	d002      	beq.n	8004eb4 <HAL_UART_RxCpltCallback+0x5c>
 8004eae:	2b32      	cmp	r3, #50	; 0x32
 8004eb0:	d004      	beq.n	8004ebc <HAL_UART_RxCpltCallback+0x64>
 8004eb2:	e007      	b.n	8004ec4 <HAL_UART_RxCpltCallback+0x6c>
			{
			case 49: //1
				output_level = 2;
 8004eb4:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <HAL_UART_RxCpltCallback+0x1dc>)
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	701a      	strb	r2, [r3, #0]
				break;
 8004eba:	e003      	b.n	8004ec4 <HAL_UART_RxCpltCallback+0x6c>
			case 50: //2
				output_level = 3;
 8004ebc:	4b5d      	ldr	r3, [pc, #372]	; (8005034 <HAL_UART_RxCpltCallback+0x1dc>)
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	701a      	strb	r2, [r3, #0]
				break;
 8004ec2:	bf00      	nop
			}
		}

		if (psd_level == 1)
 8004ec4:	4b5c      	ldr	r3, [pc, #368]	; (8005038 <HAL_UART_RxCpltCallback+0x1e0>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d10e      	bne.n	8004eea <HAL_UART_RxCpltCallback+0x92>
		{
			switch (received)
 8004ecc:	4b58      	ldr	r3, [pc, #352]	; (8005030 <HAL_UART_RxCpltCallback+0x1d8>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b31      	cmp	r3, #49	; 0x31
 8004ed2:	d002      	beq.n	8004eda <HAL_UART_RxCpltCallback+0x82>
 8004ed4:	2b32      	cmp	r3, #50	; 0x32
 8004ed6:	d004      	beq.n	8004ee2 <HAL_UART_RxCpltCallback+0x8a>
 8004ed8:	e007      	b.n	8004eea <HAL_UART_RxCpltCallback+0x92>
			{
			case 49: //1
				psd_level = 2;
 8004eda:	4b57      	ldr	r3, [pc, #348]	; (8005038 <HAL_UART_RxCpltCallback+0x1e0>)
 8004edc:	2202      	movs	r2, #2
 8004ede:	701a      	strb	r2, [r3, #0]
				break;
 8004ee0:	e003      	b.n	8004eea <HAL_UART_RxCpltCallback+0x92>
			case 50: //2
				psd_level = 3;
 8004ee2:	4b55      	ldr	r3, [pc, #340]	; (8005038 <HAL_UART_RxCpltCallback+0x1e0>)
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	701a      	strb	r2, [r3, #0]
				break;
 8004ee8:	bf00      	nop
			}
		}

		if (trace_mode == 0 && output_level == 0 && psd_level == 0)
 8004eea:	4b50      	ldr	r3, [pc, #320]	; (800502c <HAL_UART_RxCpltCallback+0x1d4>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 808a 	bne.w	8005008 <HAL_UART_RxCpltCallback+0x1b0>
 8004ef4:	4b4f      	ldr	r3, [pc, #316]	; (8005034 <HAL_UART_RxCpltCallback+0x1dc>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f040 8085 	bne.w	8005008 <HAL_UART_RxCpltCallback+0x1b0>
 8004efe:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <HAL_UART_RxCpltCallback+0x1e0>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 8080 	bne.w	8005008 <HAL_UART_RxCpltCallback+0x1b0>
		{
			switch (received)
 8004f08:	4b49      	ldr	r3, [pc, #292]	; (8005030 <HAL_UART_RxCpltCallback+0x1d8>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	3b63      	subs	r3, #99	; 0x63
 8004f0e:	2b17      	cmp	r3, #23
 8004f10:	d86e      	bhi.n	8004ff0 <HAL_UART_RxCpltCallback+0x198>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <HAL_UART_RxCpltCallback+0xc0>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f81 	.word	0x08004f81
 8004f1c:	08004ff1 	.word	0x08004ff1
 8004f20:	08004fa7 	.word	0x08004fa7
 8004f24:	08004ff1 	.word	0x08004ff1
 8004f28:	08004ff1 	.word	0x08004ff1
 8004f2c:	08004ff1 	.word	0x08004ff1
 8004f30:	08004ff1 	.word	0x08004ff1
 8004f34:	08004fc7 	.word	0x08004fc7
 8004f38:	08004fd5 	.word	0x08004fd5
 8004f3c:	08004fe3 	.word	0x08004fe3
 8004f40:	08004ff1 	.word	0x08004ff1
 8004f44:	08004ff1 	.word	0x08004ff1
 8004f48:	08004ff1 	.word	0x08004ff1
 8004f4c:	08004ff1 	.word	0x08004ff1
 8004f50:	08004f97 	.word	0x08004f97
 8004f54:	08004faf 	.word	0x08004faf
 8004f58:	08004ff1 	.word	0x08004ff1
 8004f5c:	08004fb7 	.word	0x08004fb7
 8004f60:	08004ff1 	.word	0x08004ff1
 8004f64:	08004ff1 	.word	0x08004ff1
 8004f68:	08004f9f 	.word	0x08004f9f
 8004f6c:	08004f89 	.word	0x08004f89
 8004f70:	08004fbf 	.word	0x08004fbf
 8004f74:	08004f79 	.word	0x08004f79
			{
			case 122: //z
				read_flag = 1;
 8004f78:	4b30      	ldr	r3, [pc, #192]	; (800503c <HAL_UART_RxCpltCallback+0x1e4>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
				break;
 8004f7e:	e043      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 99: //c
				read_flag = 2;
 8004f80:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_UART_RxCpltCallback+0x1e4>)
 8004f82:	2202      	movs	r2, #2
 8004f84:	701a      	strb	r2, [r3, #0]
				break;
 8004f86:	e03f      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 120: //x
				++laser_flag;
 8004f88:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <HAL_UART_RxCpltCallback+0x1e8>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <HAL_UART_RxCpltCallback+0x1e8>)
 8004f92:	701a      	strb	r2, [r3, #0]
				break;
 8004f94:	e038      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 113: //q
				single_sensor = 1;
 8004f96:	4b2b      	ldr	r3, [pc, #172]	; (8005044 <HAL_UART_RxCpltCallback+0x1ec>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
				break;
 8004f9c:	e034      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 119: //w
				single_sensor = 2;
 8004f9e:	4b29      	ldr	r3, [pc, #164]	; (8005044 <HAL_UART_RxCpltCallback+0x1ec>)
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	701a      	strb	r2, [r3, #0]
				break;
 8004fa4:	e030      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 101: //e
				single_sensor = 3;
 8004fa6:	4b27      	ldr	r3, [pc, #156]	; (8005044 <HAL_UART_RxCpltCallback+0x1ec>)
 8004fa8:	2203      	movs	r2, #3
 8004faa:	701a      	strb	r2, [r3, #0]
				break;
 8004fac:	e02c      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 114: //r
				single_sensor = 4;
 8004fae:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_UART_RxCpltCallback+0x1ec>)
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	701a      	strb	r2, [r3, #0]
				break;
 8004fb4:	e028      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 116: //t
				single_sensor = 5;
 8004fb6:	4b23      	ldr	r3, [pc, #140]	; (8005044 <HAL_UART_RxCpltCallback+0x1ec>)
 8004fb8:	2205      	movs	r2, #5
 8004fba:	701a      	strb	r2, [r3, #0]
				break;
 8004fbc:	e024      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 121: //y
				single_sensor = 6;
 8004fbe:	4b21      	ldr	r3, [pc, #132]	; (8005044 <HAL_UART_RxCpltCallback+0x1ec>)
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	701a      	strb	r2, [r3, #0]
				break;
 8004fc4:	e020      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 106: //j
				trace_mode = 1;
 8004fc6:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_UART_RxCpltCallback+0x1d4>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
				printf("TRACE_LEVEL:\r\n1. CRITICAL_MESSAGE\r\n 2. POSITIVE_MESSAGE\r\n 3. ONLY_OUTPUT\r\n");
 8004fcc:	481e      	ldr	r0, [pc, #120]	; (8005048 <HAL_UART_RxCpltCallback+0x1f0>)
 8004fce:	f00c fdb3 	bl	8011b38 <puts>
				break;
 8004fd2:	e019      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 107: //k
				output_level = 1;
 8004fd4:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_UART_RxCpltCallback+0x1dc>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
				printf("OUTPUT_TYPE:\r\n1. OUTPUT_HUMAN\r\n 2. OUTPUT_MACHINE\r\n");
 8004fda:	481c      	ldr	r0, [pc, #112]	; (800504c <HAL_UART_RxCpltCallback+0x1f4>)
 8004fdc:	f00c fdac 	bl	8011b38 <puts>
				break;
 8004fe0:	e012      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			case 108: //l
				psd_level = 1;
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_UART_RxCpltCallback+0x1e0>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
				printf("PSD_OUTPUT:\r\n1. PSD_RAW\r\n 2. PSD_SI\r\n");
 8004fe8:	4819      	ldr	r0, [pc, #100]	; (8005050 <HAL_UART_RxCpltCallback+0x1f8>)
 8004fea:	f00c fda5 	bl	8011b38 <puts>
				break;
 8004fee:	e00b      	b.n	8005008 <HAL_UART_RxCpltCallback+0x1b0>
			default:
				size = sprintf(buffer, "Odebrano nieznany znak: %c\n\r", received);
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <HAL_UART_RxCpltCallback+0x1d8>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f107 030c 	add.w	r3, r7, #12
 8004ffa:	4916      	ldr	r1, [pc, #88]	; (8005054 <HAL_UART_RxCpltCallback+0x1fc>)
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f00c fdb3 	bl	8011b68 <siprintf>
 8005002:	4603      	mov	r3, r0
 8005004:	87fb      	strh	r3, [r7, #62]	; 0x3e
				break;
 8005006:	bf00      	nop
			}
		}
		HAL_UART_Transmit_IT(&huart2, buffer, size);
 8005008:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800500a:	f107 030c 	add.w	r3, r7, #12
 800500e:	4619      	mov	r1, r3
 8005010:	4805      	ldr	r0, [pc, #20]	; (8005028 <HAL_UART_RxCpltCallback+0x1d0>)
 8005012:	f7fe faf7 	bl	8003604 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &received, 1);
 8005016:	2201      	movs	r2, #1
 8005018:	4905      	ldr	r1, [pc, #20]	; (8005030 <HAL_UART_RxCpltCallback+0x1d8>)
 800501a:	4803      	ldr	r0, [pc, #12]	; (8005028 <HAL_UART_RxCpltCallback+0x1d0>)
 800501c:	f7fe fb37 	bl	800368e <HAL_UART_Receive_IT>
	}
}
 8005020:	bf00      	nop
 8005022:	3740      	adds	r7, #64	; 0x40
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000cdc 	.word	0x20000cdc
 800502c:	200008d4 	.word	0x200008d4
 8005030:	200008d0 	.word	0x200008d0
 8005034:	200008d5 	.word	0x200008d5
 8005038:	200008d6 	.word	0x200008d6
 800503c:	200008d1 	.word	0x200008d1
 8005040:	200008d2 	.word	0x200008d2
 8005044:	200008d3 	.word	0x200008d3
 8005048:	08012454 	.word	0x08012454
 800504c:	080124a0 	.word	0x080124a0
 8005050:	080124d4 	.word	0x080124d4
 8005054:	080124fc 	.word	0x080124fc

08005058 <sequential_read>:

void sequential_read(uint8_t samples_amount, uint8_t delay_time_ms)
{
 8005058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505a:	b08d      	sub	sp, #52	; 0x34
 800505c:	af08      	add	r7, sp, #32
 800505e:	4603      	mov	r3, r0
 8005060:	460a      	mov	r2, r1
 8005062:	71fb      	strb	r3, [r7, #7]
 8005064:	4613      	mov	r3, r2
 8005066:	71bb      	strb	r3, [r7, #6]
	int i, j;
	for (j = 0; j < samples_amount; ++j)
 8005068:	2300      	movs	r3, #0
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	e16f      	b.n	800534e <sequential_read+0x2f6>
	{

		HAL_GPIO_WritePin(VL53L0X_TRIGGER_GPIO_Port, VL53L0X_TRIGGER_Pin, GPIO_PIN_RESET);
 800506e:	2200      	movs	r2, #0
 8005070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005074:	4890      	ldr	r0, [pc, #576]	; (80052b8 <sequential_read+0x260>)
 8005076:	f7fc fdf3 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 800507a:	79bb      	ldrb	r3, [r7, #6]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fb faf9 	bl	8000674 <HAL_Delay>
		my_VL53L0X_init();
 8005082:	f7ff fa1f 	bl	80044c4 <my_VL53L0X_init>
		my_VL53L0X_read();
 8005086:	f7ff fac9 	bl	800461c <my_VL53L0X_read>
		temp_data[5] = my_VL53L0X_distance_mm();
 800508a:	f7ff faf5 	bl	8004678 <my_VL53L0X_distance_mm>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	4b8a      	ldr	r3, [pc, #552]	; (80052bc <sequential_read+0x264>)
 8005094:	815a      	strh	r2, [r3, #10]
		HAL_GPIO_WritePin(VL53L0X_TRIGGER_GPIO_Port, VL53L0X_TRIGGER_Pin, GPIO_PIN_SET);
 8005096:	2201      	movs	r2, #1
 8005098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800509c:	4886      	ldr	r0, [pc, #536]	; (80052b8 <sequential_read+0x260>)
 800509e:	f7fc fddf 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 80050a2:	79bb      	ldrb	r3, [r7, #6]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fb fae5 	bl	8000674 <HAL_Delay>

		HAL_GPIO_WritePin(VL53L1X_TRIGGER_GPIO_Port, VL53L1X_TRIGGER_Pin, GPIO_PIN_RESET);
 80050aa:	2200      	movs	r2, #0
 80050ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050b0:	4883      	ldr	r0, [pc, #524]	; (80052c0 <sequential_read+0x268>)
 80050b2:	f7fc fdd5 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 80050b6:	79bb      	ldrb	r3, [r7, #6]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fb fadb 	bl	8000674 <HAL_Delay>
		my_VL53L1_init();
 80050be:	f7ff faef 	bl	80046a0 <my_VL53L1_init>
		my_VL53L1_read();
 80050c2:	f7ff fb63 	bl	800478c <my_VL53L1_read>
		temp_data[6] = my_VL53L1_distance_mm();
 80050c6:	f7ff fb9f 	bl	8004808 <my_VL53L1_distance_mm>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <sequential_read+0x264>)
 80050d0:	819a      	strh	r2, [r3, #12]
		HAL_GPIO_WritePin(VL53L1X_TRIGGER_GPIO_Port, VL53L1X_TRIGGER_Pin, GPIO_PIN_SET);
 80050d2:	2201      	movs	r2, #1
 80050d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050d8:	4879      	ldr	r0, [pc, #484]	; (80052c0 <sequential_read+0x268>)
 80050da:	f7fc fdc1 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 80050de:	79bb      	ldrb	r3, [r7, #6]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb fac7 	bl	8000674 <HAL_Delay>

		HAL_GPIO_WritePin(SHARP_SMALL_1_TRIGGER_GPIO_Port,
 80050e6:	2200      	movs	r2, #0
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	4875      	ldr	r0, [pc, #468]	; (80052c0 <sequential_read+0x268>)
 80050ec:	f7fc fdb8 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_RESET);
		HAL_Delay(delay_time_ms);
 80050f0:	79bb      	ldrb	r3, [r7, #6]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fabe 	bl	8000674 <HAL_Delay>
		PSD_read();
 80050f8:	f000 fe4c 	bl	8005d94 <PSD_read>
		if (psd_output == PSD_RAW)
 80050fc:	4b71      	ldr	r3, [pc, #452]	; (80052c4 <sequential_read+0x26c>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b14      	cmp	r3, #20
 8005102:	d106      	bne.n	8005112 <sequential_read+0xba>
		{
			temp_data[1] = PSD_small_1_value();
 8005104:	f000 fe62 	bl	8005dcc <PSD_small_1_value>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	4b6b      	ldr	r3, [pc, #428]	; (80052bc <sequential_read+0x264>)
 800510e:	805a      	strh	r2, [r3, #2]
 8005110:	e009      	b.n	8005126 <sequential_read+0xce>
		}
		else if (psd_output == PSD_SI)
 8005112:	4b6c      	ldr	r3, [pc, #432]	; (80052c4 <sequential_read+0x26c>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b15      	cmp	r3, #21
 8005118:	d105      	bne.n	8005126 <sequential_read+0xce>
		{
			temp_data[1] = PSD_small_1_distance_cm();
 800511a:	f000 fe7b 	bl	8005e14 <PSD_small_1_distance_cm>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	4b66      	ldr	r3, [pc, #408]	; (80052bc <sequential_read+0x264>)
 8005124:	805a      	strh	r2, [r3, #2]
		}
		HAL_GPIO_WritePin(SHARP_SMALL_1_TRIGGER_GPIO_Port,
 8005126:	2201      	movs	r2, #1
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	4865      	ldr	r0, [pc, #404]	; (80052c0 <sequential_read+0x268>)
 800512c:	f7fc fd98 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_SET);
		HAL_Delay(delay_time_ms);
 8005130:	79bb      	ldrb	r3, [r7, #6]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb fa9e 	bl	8000674 <HAL_Delay>

		HAL_GPIO_WritePin(SHARP_SMALL_2_TRIGGER_GPIO_Port,
 8005138:	2200      	movs	r2, #0
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	485e      	ldr	r0, [pc, #376]	; (80052b8 <sequential_read+0x260>)
 800513e:	f7fc fd8f 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_2_TRIGGER_Pin, GPIO_PIN_RESET);
		HAL_Delay(delay_time_ms);
 8005142:	79bb      	ldrb	r3, [r7, #6]
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb fa95 	bl	8000674 <HAL_Delay>
		PSD_read();
 800514a:	f000 fe23 	bl	8005d94 <PSD_read>
		if (psd_output == PSD_RAW)
 800514e:	4b5d      	ldr	r3, [pc, #372]	; (80052c4 <sequential_read+0x26c>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b14      	cmp	r3, #20
 8005154:	d106      	bne.n	8005164 <sequential_read+0x10c>
		{
			temp_data[2] = PSD_small_2_value();
 8005156:	f000 fe45 	bl	8005de4 <PSD_small_2_value>
 800515a:	4603      	mov	r3, r0
 800515c:	461a      	mov	r2, r3
 800515e:	4b57      	ldr	r3, [pc, #348]	; (80052bc <sequential_read+0x264>)
 8005160:	809a      	strh	r2, [r3, #4]
 8005162:	e009      	b.n	8005178 <sequential_read+0x120>
		}
		else if (psd_output == PSD_SI)
 8005164:	4b57      	ldr	r3, [pc, #348]	; (80052c4 <sequential_read+0x26c>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b15      	cmp	r3, #21
 800516a:	d105      	bne.n	8005178 <sequential_read+0x120>
		{
			temp_data[2] = PSD_small_2_distance_cm();
 800516c:	f000 fe78 	bl	8005e60 <PSD_small_2_distance_cm>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	4b51      	ldr	r3, [pc, #324]	; (80052bc <sequential_read+0x264>)
 8005176:	809a      	strh	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(SHARP_SMALL_2_TRIGGER_GPIO_Port,
 8005178:	2201      	movs	r2, #1
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	484e      	ldr	r0, [pc, #312]	; (80052b8 <sequential_read+0x260>)
 800517e:	f7fc fd6f 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_2_TRIGGER_Pin, GPIO_PIN_SET);
		HAL_Delay(delay_time_ms);
 8005182:	79bb      	ldrb	r3, [r7, #6]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb fa75 	bl	8000674 <HAL_Delay>

		HAL_GPIO_WritePin(SHARP_BIG_TRIGGER_GPIO_Port, SHARP_BIG_TRIGGER_Pin, GPIO_PIN_RESET);
 800518a:	2200      	movs	r2, #0
 800518c:	2140      	movs	r1, #64	; 0x40
 800518e:	484a      	ldr	r0, [pc, #296]	; (80052b8 <sequential_read+0x260>)
 8005190:	f7fc fd66 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms * 2);
 8005194:	79bb      	ldrb	r3, [r7, #6]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4618      	mov	r0, r3
 800519a:	f7fb fa6b 	bl	8000674 <HAL_Delay>
		PSD_read();
 800519e:	f000 fdf9 	bl	8005d94 <PSD_read>
		if (psd_output == PSD_RAW)
 80051a2:	4b48      	ldr	r3, [pc, #288]	; (80052c4 <sequential_read+0x26c>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b14      	cmp	r3, #20
 80051a8:	d106      	bne.n	80051b8 <sequential_read+0x160>
		{
			temp_data[3] = PSD_big_value();
 80051aa:	f000 fe27 	bl	8005dfc <PSD_big_value>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	4b42      	ldr	r3, [pc, #264]	; (80052bc <sequential_read+0x264>)
 80051b4:	80da      	strh	r2, [r3, #6]
 80051b6:	e009      	b.n	80051cc <sequential_read+0x174>
		}
		else if (psd_output == PSD_SI)
 80051b8:	4b42      	ldr	r3, [pc, #264]	; (80052c4 <sequential_read+0x26c>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b15      	cmp	r3, #21
 80051be:	d105      	bne.n	80051cc <sequential_read+0x174>
		{
			temp_data[3] = PSD_big_distance_cm();
 80051c0:	f000 fe76 	bl	8005eb0 <PSD_big_distance_cm>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461a      	mov	r2, r3
 80051c8:	4b3c      	ldr	r3, [pc, #240]	; (80052bc <sequential_read+0x264>)
 80051ca:	80da      	strh	r2, [r3, #6]
		}
		HAL_GPIO_WritePin(SHARP_BIG_TRIGGER_GPIO_Port, SHARP_BIG_TRIGGER_Pin, GPIO_PIN_SET);
 80051cc:	2201      	movs	r2, #1
 80051ce:	2140      	movs	r1, #64	; 0x40
 80051d0:	4839      	ldr	r0, [pc, #228]	; (80052b8 <sequential_read+0x260>)
 80051d2:	f7fc fd45 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms * 2);
 80051d6:	79bb      	ldrb	r3, [r7, #6]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb fa4a 	bl	8000674 <HAL_Delay>

		HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_RESET);
 80051e0:	2200      	movs	r2, #0
 80051e2:	2180      	movs	r1, #128	; 0x80
 80051e4:	4836      	ldr	r0, [pc, #216]	; (80052c0 <sequential_read+0x268>)
 80051e6:	f7fc fd3b 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 80051ea:	79bb      	ldrb	r3, [r7, #6]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb fa41 	bl	8000674 <HAL_Delay>
		lidar_read();
 80051f2:	f7ff f8d3 	bl	800439c <lidar_read>
		temp_data[4] = lidar_distance_cm();
 80051f6:	f7ff f94d 	bl	8004494 <lidar_distance_cm>
 80051fa:	4603      	mov	r3, r0
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <sequential_read+0x264>)
 8005200:	811a      	strh	r2, [r3, #8]
		HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_SET);
 8005202:	2201      	movs	r2, #1
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	482e      	ldr	r0, [pc, #184]	; (80052c0 <sequential_read+0x268>)
 8005208:	f7fc fd2a 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 800520c:	79bb      	ldrb	r3, [r7, #6]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fb fa30 	bl	8000674 <HAL_Delay>

		for (i = 0; i < 8; ++i)
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e00c      	b.n	8005234 <sequential_read+0x1dc>
			temp_data[8] += temp_data[i];
 800521a:	4b28      	ldr	r3, [pc, #160]	; (80052bc <sequential_read+0x264>)
 800521c:	8a1a      	ldrh	r2, [r3, #16]
 800521e:	4927      	ldr	r1, [pc, #156]	; (80052bc <sequential_read+0x264>)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005226:	4413      	add	r3, r2
 8005228:	b29a      	uxth	r2, r3
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <sequential_read+0x264>)
 800522c:	821a      	strh	r2, [r3, #16]
		for (i = 0; i < 8; ++i)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b07      	cmp	r3, #7
 8005238:	ddef      	ble.n	800521a <sequential_read+0x1c2>

		temp_data[8] &= 0xFF;
 800523a:	4b20      	ldr	r3, [pc, #128]	; (80052bc <sequential_read+0x264>)
 800523c:	8a1b      	ldrh	r3, [r3, #16]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	b29a      	uxth	r2, r3
 8005242:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <sequential_read+0x264>)
 8005244:	821a      	strh	r2, [r3, #16]

		if (output_type == OUTPUT_MACHINE)
 8005246:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <sequential_read+0x270>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b0b      	cmp	r3, #11
 800524c:	d146      	bne.n	80052dc <sequential_read+0x284>
		{

			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <sequential_read+0x264>)
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	469e      	mov	lr, r3
 8005254:	4b19      	ldr	r3, [pc, #100]	; (80052bc <sequential_read+0x264>)
 8005256:	885b      	ldrh	r3, [r3, #2]
 8005258:	469c      	mov	ip, r3
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <sequential_read+0x264>)
 800525c:	889b      	ldrh	r3, [r3, #4]
 800525e:	461a      	mov	r2, r3
 8005260:	4b16      	ldr	r3, [pc, #88]	; (80052bc <sequential_read+0x264>)
 8005262:	88db      	ldrh	r3, [r3, #6]
 8005264:	4619      	mov	r1, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <sequential_read+0x264>)
 8005268:	891b      	ldrh	r3, [r3, #8]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 800526a:	4618      	mov	r0, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 800526c:	4b13      	ldr	r3, [pc, #76]	; (80052bc <sequential_read+0x264>)
 800526e:	895b      	ldrh	r3, [r3, #10]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005270:	461c      	mov	r4, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <sequential_read+0x264>)
 8005274:	899b      	ldrh	r3, [r3, #12]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005276:	461d      	mov	r5, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005278:	4b10      	ldr	r3, [pc, #64]	; (80052bc <sequential_read+0x264>)
 800527a:	89db      	ldrh	r3, [r3, #14]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 800527c:	461e      	mov	r6, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <sequential_read+0x264>)
 8005280:	8a1b      	ldrh	r3, [r3, #16]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005282:	9306      	str	r3, [sp, #24]
 8005284:	9605      	str	r6, [sp, #20]
 8005286:	9504      	str	r5, [sp, #16]
 8005288:	9403      	str	r4, [sp, #12]
 800528a:	9002      	str	r0, [sp, #8]
 800528c:	9101      	str	r1, [sp, #4]
 800528e:	9200      	str	r2, [sp, #0]
 8005290:	4663      	mov	r3, ip
 8005292:	4672      	mov	r2, lr
 8005294:	490d      	ldr	r1, [pc, #52]	; (80052cc <sequential_read+0x274>)
 8005296:	480e      	ldr	r0, [pc, #56]	; (80052d0 <sequential_read+0x278>)
 8005298:	f00c fc66 	bl	8011b68 <siprintf>
 800529c:	4603      	mov	r3, r0
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <sequential_read+0x27c>)
 80052a2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_buff, message_size);
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <sequential_read+0x27c>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	4908      	ldr	r1, [pc, #32]	; (80052d0 <sequential_read+0x278>)
 80052ae:	480a      	ldr	r0, [pc, #40]	; (80052d8 <sequential_read+0x280>)
 80052b0:	f7fe f9a8 	bl	8003604 <HAL_UART_Transmit_IT>
 80052b4:	e048      	b.n	8005348 <sequential_read+0x2f0>
 80052b6:	bf00      	nop
 80052b8:	40020000 	.word	0x40020000
 80052bc:	20000a5c 	.word	0x20000a5c
 80052c0:	40020400 	.word	0x40020400
 80052c4:	20000018 	.word	0x20000018
 80052c8:	20000017 	.word	0x20000017
 80052cc:	0801251c 	.word	0x0801251c
 80052d0:	20000a70 	.word	0x20000a70
 80052d4:	200008d7 	.word	0x200008d7
 80052d8:	20000cdc 	.word	0x20000cdc

		}
		else if (output_type == OUTPUT_HUMAN)
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <sequential_read+0x308>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b0a      	cmp	r3, #10
 80052e2:	d131      	bne.n	8005348 <sequential_read+0x2f0>
		{
			message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 80052e4:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <sequential_read+0x30c>)
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	469e      	mov	lr, r3
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <sequential_read+0x30c>)
 80052ec:	885b      	ldrh	r3, [r3, #2]
 80052ee:	469c      	mov	ip, r3
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <sequential_read+0x30c>)
 80052f2:	889b      	ldrh	r3, [r3, #4]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <sequential_read+0x30c>)
 80052f8:	88db      	ldrh	r3, [r3, #6]
 80052fa:	4619      	mov	r1, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <sequential_read+0x30c>)
 80052fe:	891b      	ldrh	r3, [r3, #8]
			message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005300:	4618      	mov	r0, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005302:	4b18      	ldr	r3, [pc, #96]	; (8005364 <sequential_read+0x30c>)
 8005304:	895b      	ldrh	r3, [r3, #10]
			message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005306:	461c      	mov	r4, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005308:	4b16      	ldr	r3, [pc, #88]	; (8005364 <sequential_read+0x30c>)
 800530a:	899b      	ldrh	r3, [r3, #12]
			message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 800530c:	461d      	mov	r5, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 800530e:	4b15      	ldr	r3, [pc, #84]	; (8005364 <sequential_read+0x30c>)
 8005310:	89db      	ldrh	r3, [r3, #14]
			message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005312:	461e      	mov	r6, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <sequential_read+0x30c>)
 8005316:	8a1b      	ldrh	r3, [r3, #16]
			message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005318:	9306      	str	r3, [sp, #24]
 800531a:	9605      	str	r6, [sp, #20]
 800531c:	9504      	str	r5, [sp, #16]
 800531e:	9403      	str	r4, [sp, #12]
 8005320:	9002      	str	r0, [sp, #8]
 8005322:	9101      	str	r1, [sp, #4]
 8005324:	9200      	str	r2, [sp, #0]
 8005326:	4663      	mov	r3, ip
 8005328:	4672      	mov	r2, lr
 800532a:	490f      	ldr	r1, [pc, #60]	; (8005368 <sequential_read+0x310>)
 800532c:	480f      	ldr	r0, [pc, #60]	; (800536c <sequential_read+0x314>)
 800532e:	f00c fc1b 	bl	8011b68 <siprintf>
 8005332:	4602      	mov	r2, r0
 8005334:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <sequential_read+0x318>)
 8005336:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_buff2, message_size2);
 8005338:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <sequential_read+0x318>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	490a      	ldr	r1, [pc, #40]	; (800536c <sequential_read+0x314>)
 8005342:	480c      	ldr	r0, [pc, #48]	; (8005374 <sequential_read+0x31c>)
 8005344:	f7fe f95e 	bl	8003604 <HAL_UART_Transmit_IT>
	for (j = 0; j < samples_amount; ++j)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	3301      	adds	r3, #1
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	79fa      	ldrb	r2, [r7, #7]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	f73f ae8b 	bgt.w	800506e <sequential_read+0x16>
		}
	}
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005360:	20000017 	.word	0x20000017
 8005364:	20000a5c 	.word	0x20000a5c
 8005368:	08012544 	.word	0x08012544
 800536c:	20000a7c 	.word	0x20000a7c
 8005370:	200008d8 	.word	0x200008d8
 8005374:	20000cdc 	.word	0x20000cdc

08005378 <simultaneous_read>:

void simultaneous_read(uint8_t samples_amount, uint8_t delay_time_ms)
{
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	b08d      	sub	sp, #52	; 0x34
 800537c:	af08      	add	r7, sp, #32
 800537e:	4603      	mov	r3, r0
 8005380:	460a      	mov	r2, r1
 8005382:	71fb      	strb	r3, [r7, #7]
 8005384:	4613      	mov	r3, r2
 8005386:	71bb      	strb	r3, [r7, #6]
	int i, j;

	for (j = 0; j < samples_amount; ++j)
 8005388:	2300      	movs	r3, #0
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	e120      	b.n	80055d0 <simultaneous_read+0x258>
	{

		HAL_GPIO_WritePin(VL53L0X_TRIGGER_GPIO_Port, VL53L0X_TRIGGER_Pin, GPIO_PIN_RESET);
 800538e:	2200      	movs	r2, #0
 8005390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005394:	4893      	ldr	r0, [pc, #588]	; (80055e4 <simultaneous_read+0x26c>)
 8005396:	f7fc fc63 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53L1X_TRIGGER_GPIO_Port, VL53L1X_TRIGGER_Pin, GPIO_PIN_RESET);
 800539a:	2200      	movs	r2, #0
 800539c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053a0:	4891      	ldr	r0, [pc, #580]	; (80055e8 <simultaneous_read+0x270>)
 80053a2:	f7fc fc5d 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SHARP_SMALL_1_TRIGGER_GPIO_Port,
 80053a6:	2200      	movs	r2, #0
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	488f      	ldr	r0, [pc, #572]	; (80055e8 <simultaneous_read+0x270>)
 80053ac:	f7fc fc58 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SHARP_SMALL_2_TRIGGER_GPIO_Port,
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	488b      	ldr	r0, [pc, #556]	; (80055e4 <simultaneous_read+0x26c>)
 80053b6:	f7fc fc53 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_2_TRIGGER_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SHARP_BIG_TRIGGER_GPIO_Port, SHARP_BIG_TRIGGER_Pin, GPIO_PIN_RESET);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2140      	movs	r1, #64	; 0x40
 80053be:	4889      	ldr	r0, [pc, #548]	; (80055e4 <simultaneous_read+0x26c>)
 80053c0:	f7fc fc4e 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_RESET);
 80053c4:	2200      	movs	r2, #0
 80053c6:	2180      	movs	r1, #128	; 0x80
 80053c8:	4887      	ldr	r0, [pc, #540]	; (80055e8 <simultaneous_read+0x270>)
 80053ca:	f7fc fc49 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 80053ce:	79bb      	ldrb	r3, [r7, #6]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f94f 	bl	8000674 <HAL_Delay>

		if (j == 0)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <simultaneous_read+0x6c>
		{
			my_VL53L0X_init();
 80053dc:	f7ff f872 	bl	80044c4 <my_VL53L0X_init>
			my_VL53L1_init();
 80053e0:	f7ff f95e 	bl	80046a0 <my_VL53L1_init>
		}

		PSD_read();
 80053e4:	f000 fcd6 	bl	8005d94 <PSD_read>
		lidar_read();
 80053e8:	f7fe ffd8 	bl	800439c <lidar_read>
		my_VL53L0X_read();
 80053ec:	f7ff f916 	bl	800461c <my_VL53L0X_read>
		my_VL53L1_read();
 80053f0:	f7ff f9cc 	bl	800478c <my_VL53L1_read>

		HAL_Delay(delay_time_ms);
 80053f4:	79bb      	ldrb	r3, [r7, #6]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fb f93c 	bl	8000674 <HAL_Delay>
		HAL_GPIO_WritePin(VL53L0X_TRIGGER_GPIO_Port, VL53L0X_TRIGGER_Pin, GPIO_PIN_SET);
 80053fc:	2201      	movs	r2, #1
 80053fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005402:	4878      	ldr	r0, [pc, #480]	; (80055e4 <simultaneous_read+0x26c>)
 8005404:	f7fc fc2c 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53L1X_TRIGGER_GPIO_Port, VL53L1X_TRIGGER_Pin, GPIO_PIN_SET);
 8005408:	2201      	movs	r2, #1
 800540a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800540e:	4876      	ldr	r0, [pc, #472]	; (80055e8 <simultaneous_read+0x270>)
 8005410:	f7fc fc26 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SHARP_SMALL_1_TRIGGER_GPIO_Port,
 8005414:	2201      	movs	r2, #1
 8005416:	2140      	movs	r1, #64	; 0x40
 8005418:	4873      	ldr	r0, [pc, #460]	; (80055e8 <simultaneous_read+0x270>)
 800541a:	f7fc fc21 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(SHARP_SMALL_2_TRIGGER_GPIO_Port,
 800541e:	2201      	movs	r2, #1
 8005420:	2180      	movs	r1, #128	; 0x80
 8005422:	4870      	ldr	r0, [pc, #448]	; (80055e4 <simultaneous_read+0x26c>)
 8005424:	f7fc fc1c 	bl	8001c60 <HAL_GPIO_WritePin>
		SHARP_SMALL_2_TRIGGER_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(SHARP_BIG_TRIGGER_GPIO_Port, SHARP_BIG_TRIGGER_Pin, GPIO_PIN_SET);
 8005428:	2201      	movs	r2, #1
 800542a:	2140      	movs	r1, #64	; 0x40
 800542c:	486d      	ldr	r0, [pc, #436]	; (80055e4 <simultaneous_read+0x26c>)
 800542e:	f7fc fc17 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_SET);
 8005432:	2201      	movs	r2, #1
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	486c      	ldr	r0, [pc, #432]	; (80055e8 <simultaneous_read+0x270>)
 8005438:	f7fc fc12 	bl	8001c60 <HAL_GPIO_WritePin>

		if (psd_output == PSD_RAW)
 800543c:	4b6b      	ldr	r3, [pc, #428]	; (80055ec <simultaneous_read+0x274>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b14      	cmp	r3, #20
 8005442:	d112      	bne.n	800546a <simultaneous_read+0xf2>
		{
			temp_data[1] = PSD_small_1_distance_cm();
 8005444:	f000 fce6 	bl	8005e14 <PSD_small_1_distance_cm>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	4b68      	ldr	r3, [pc, #416]	; (80055f0 <simultaneous_read+0x278>)
 800544e:	805a      	strh	r2, [r3, #2]
			temp_data[2] = PSD_small_2_distance_cm();
 8005450:	f000 fd06 	bl	8005e60 <PSD_small_2_distance_cm>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	4b65      	ldr	r3, [pc, #404]	; (80055f0 <simultaneous_read+0x278>)
 800545a:	809a      	strh	r2, [r3, #4]
			temp_data[3] = PSD_big_distance_cm();
 800545c:	f000 fd28 	bl	8005eb0 <PSD_big_distance_cm>
 8005460:	4603      	mov	r3, r0
 8005462:	461a      	mov	r2, r3
 8005464:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <simultaneous_read+0x278>)
 8005466:	80da      	strh	r2, [r3, #6]
 8005468:	e015      	b.n	8005496 <simultaneous_read+0x11e>
		}
		else if (psd_output == PSD_SI)
 800546a:	4b60      	ldr	r3, [pc, #384]	; (80055ec <simultaneous_read+0x274>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b15      	cmp	r3, #21
 8005470:	d111      	bne.n	8005496 <simultaneous_read+0x11e>
		{
			temp_data[1] = PSD_small_1_value();
 8005472:	f000 fcab 	bl	8005dcc <PSD_small_1_value>
 8005476:	4603      	mov	r3, r0
 8005478:	461a      	mov	r2, r3
 800547a:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <simultaneous_read+0x278>)
 800547c:	805a      	strh	r2, [r3, #2]
			temp_data[2] = PSD_small_2_value();
 800547e:	f000 fcb1 	bl	8005de4 <PSD_small_2_value>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	4b5a      	ldr	r3, [pc, #360]	; (80055f0 <simultaneous_read+0x278>)
 8005488:	809a      	strh	r2, [r3, #4]
			temp_data[3] = PSD_big_value();
 800548a:	f000 fcb7 	bl	8005dfc <PSD_big_value>
 800548e:	4603      	mov	r3, r0
 8005490:	461a      	mov	r2, r3
 8005492:	4b57      	ldr	r3, [pc, #348]	; (80055f0 <simultaneous_read+0x278>)
 8005494:	80da      	strh	r2, [r3, #6]
		}
		temp_data[4] = lidar_distance_cm();
 8005496:	f7fe fffd 	bl	8004494 <lidar_distance_cm>
 800549a:	4603      	mov	r3, r0
 800549c:	461a      	mov	r2, r3
 800549e:	4b54      	ldr	r3, [pc, #336]	; (80055f0 <simultaneous_read+0x278>)
 80054a0:	811a      	strh	r2, [r3, #8]
		temp_data[5] = my_VL53L0X_distance_mm();
 80054a2:	f7ff f8e9 	bl	8004678 <my_VL53L0X_distance_mm>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b51      	ldr	r3, [pc, #324]	; (80055f0 <simultaneous_read+0x278>)
 80054ac:	815a      	strh	r2, [r3, #10]
		temp_data[6] = my_VL53L1_distance_mm();
 80054ae:	f7ff f9ab 	bl	8004808 <my_VL53L1_distance_mm>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b4e      	ldr	r3, [pc, #312]	; (80055f0 <simultaneous_read+0x278>)
 80054b8:	819a      	strh	r2, [r3, #12]

		for (i = 0; i < 8; ++i)
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e00c      	b.n	80054da <simultaneous_read+0x162>
			temp_data[8] += temp_data[i];
 80054c0:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <simultaneous_read+0x278>)
 80054c2:	8a1a      	ldrh	r2, [r3, #16]
 80054c4:	494a      	ldr	r1, [pc, #296]	; (80055f0 <simultaneous_read+0x278>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80054cc:	4413      	add	r3, r2
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <simultaneous_read+0x278>)
 80054d2:	821a      	strh	r2, [r3, #16]
		for (i = 0; i < 8; ++i)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b07      	cmp	r3, #7
 80054de:	ddef      	ble.n	80054c0 <simultaneous_read+0x148>

		temp_data[8] &= 0xFF;
 80054e0:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <simultaneous_read+0x278>)
 80054e2:	8a1b      	ldrh	r3, [r3, #16]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <simultaneous_read+0x278>)
 80054ea:	821a      	strh	r2, [r3, #16]

		if (output_type == OUTPUT_MACHINE)
 80054ec:	4b41      	ldr	r3, [pc, #260]	; (80055f4 <simultaneous_read+0x27c>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b0b      	cmp	r3, #11
 80054f2:	d133      	bne.n	800555c <simultaneous_read+0x1e4>
		{
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 80054f4:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <simultaneous_read+0x278>)
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	469e      	mov	lr, r3
 80054fa:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <simultaneous_read+0x278>)
 80054fc:	885b      	ldrh	r3, [r3, #2]
 80054fe:	469c      	mov	ip, r3
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <simultaneous_read+0x278>)
 8005502:	889b      	ldrh	r3, [r3, #4]
 8005504:	461a      	mov	r2, r3
 8005506:	4b3a      	ldr	r3, [pc, #232]	; (80055f0 <simultaneous_read+0x278>)
 8005508:	88db      	ldrh	r3, [r3, #6]
 800550a:	4619      	mov	r1, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 800550c:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <simultaneous_read+0x278>)
 800550e:	891b      	ldrh	r3, [r3, #8]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005510:	4618      	mov	r0, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <simultaneous_read+0x278>)
 8005514:	895b      	ldrh	r3, [r3, #10]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005516:	461c      	mov	r4, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005518:	4b35      	ldr	r3, [pc, #212]	; (80055f0 <simultaneous_read+0x278>)
 800551a:	899b      	ldrh	r3, [r3, #12]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 800551c:	461d      	mov	r5, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <simultaneous_read+0x278>)
 8005520:	89db      	ldrh	r3, [r3, #14]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005522:	461e      	mov	r6, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <simultaneous_read+0x278>)
 8005526:	8a1b      	ldrh	r3, [r3, #16]
			message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005528:	9306      	str	r3, [sp, #24]
 800552a:	9605      	str	r6, [sp, #20]
 800552c:	9504      	str	r5, [sp, #16]
 800552e:	9403      	str	r4, [sp, #12]
 8005530:	9002      	str	r0, [sp, #8]
 8005532:	9101      	str	r1, [sp, #4]
 8005534:	9200      	str	r2, [sp, #0]
 8005536:	4663      	mov	r3, ip
 8005538:	4672      	mov	r2, lr
 800553a:	492f      	ldr	r1, [pc, #188]	; (80055f8 <simultaneous_read+0x280>)
 800553c:	482f      	ldr	r0, [pc, #188]	; (80055fc <simultaneous_read+0x284>)
 800553e:	f00c fb13 	bl	8011b68 <siprintf>
 8005542:	4603      	mov	r3, r0
 8005544:	b2da      	uxtb	r2, r3
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <simultaneous_read+0x288>)
 8005548:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_buff, message_size);
 800554a:	4b2d      	ldr	r3, [pc, #180]	; (8005600 <simultaneous_read+0x288>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	492a      	ldr	r1, [pc, #168]	; (80055fc <simultaneous_read+0x284>)
 8005554:	482b      	ldr	r0, [pc, #172]	; (8005604 <simultaneous_read+0x28c>)
 8005556:	f7fe f855 	bl	8003604 <HAL_UART_Transmit_IT>
 800555a:	e036      	b.n	80055ca <simultaneous_read+0x252>

		}
		else if (output_type == OUTPUT_HUMAN)
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <simultaneous_read+0x27c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b0a      	cmp	r3, #10
 8005562:	d132      	bne.n	80055ca <simultaneous_read+0x252>
		{
			message_size = sprintf(message_buff, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005564:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <simultaneous_read+0x278>)
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	469e      	mov	lr, r3
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <simultaneous_read+0x278>)
 800556c:	885b      	ldrh	r3, [r3, #2]
 800556e:	469c      	mov	ip, r3
 8005570:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <simultaneous_read+0x278>)
 8005572:	889b      	ldrh	r3, [r3, #4]
 8005574:	461a      	mov	r2, r3
 8005576:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <simultaneous_read+0x278>)
 8005578:	88db      	ldrh	r3, [r3, #6]
 800557a:	4619      	mov	r1, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <simultaneous_read+0x278>)
 800557e:	891b      	ldrh	r3, [r3, #8]
			message_size = sprintf(message_buff, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005580:	4618      	mov	r0, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005582:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <simultaneous_read+0x278>)
 8005584:	895b      	ldrh	r3, [r3, #10]
			message_size = sprintf(message_buff, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005586:	461c      	mov	r4, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <simultaneous_read+0x278>)
 800558a:	899b      	ldrh	r3, [r3, #12]
			message_size = sprintf(message_buff, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 800558c:	461d      	mov	r5, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <simultaneous_read+0x278>)
 8005590:	89db      	ldrh	r3, [r3, #14]
			message_size = sprintf(message_buff, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005592:	461e      	mov	r6, r3
					temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8005594:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <simultaneous_read+0x278>)
 8005596:	8a1b      	ldrh	r3, [r3, #16]
			message_size = sprintf(message_buff, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3],
 8005598:	9306      	str	r3, [sp, #24]
 800559a:	9605      	str	r6, [sp, #20]
 800559c:	9504      	str	r5, [sp, #16]
 800559e:	9403      	str	r4, [sp, #12]
 80055a0:	9002      	str	r0, [sp, #8]
 80055a2:	9101      	str	r1, [sp, #4]
 80055a4:	9200      	str	r2, [sp, #0]
 80055a6:	4663      	mov	r3, ip
 80055a8:	4672      	mov	r2, lr
 80055aa:	4917      	ldr	r1, [pc, #92]	; (8005608 <simultaneous_read+0x290>)
 80055ac:	4813      	ldr	r0, [pc, #76]	; (80055fc <simultaneous_read+0x284>)
 80055ae:	f00c fadb 	bl	8011b68 <siprintf>
 80055b2:	4603      	mov	r3, r0
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <simultaneous_read+0x288>)
 80055b8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_buff2, message_size2);
 80055ba:	4b14      	ldr	r3, [pc, #80]	; (800560c <simultaneous_read+0x294>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	4913      	ldr	r1, [pc, #76]	; (8005610 <simultaneous_read+0x298>)
 80055c4:	480f      	ldr	r0, [pc, #60]	; (8005604 <simultaneous_read+0x28c>)
 80055c6:	f7fe f81d 	bl	8003604 <HAL_UART_Transmit_IT>
	for (j = 0; j < samples_amount; ++j)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	79fa      	ldrb	r2, [r7, #7]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	f73f aeda 	bgt.w	800538e <simultaneous_read+0x16>
		}
	}
}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40020000 	.word	0x40020000
 80055e8:	40020400 	.word	0x40020400
 80055ec:	20000018 	.word	0x20000018
 80055f0:	20000a5c 	.word	0x20000a5c
 80055f4:	20000017 	.word	0x20000017
 80055f8:	0801251c 	.word	0x0801251c
 80055fc:	20000a70 	.word	0x20000a70
 8005600:	200008d7 	.word	0x200008d7
 8005604:	20000cdc 	.word	0x20000cdc
 8005608:	08012544 	.word	0x08012544
 800560c:	200008d8 	.word	0x200008d8
 8005610:	20000a7c 	.word	0x20000a7c

08005614 <measure_psd_small_1>:

void measure_psd_small_1()
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
	uint16_t temp_data;

	HAL_GPIO_WritePin(SHARP_SMALL_1_TRIGGER_GPIO_Port, SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_RESET);
 800561a:	2200      	movs	r2, #0
 800561c:	2140      	movs	r1, #64	; 0x40
 800561e:	481e      	ldr	r0, [pc, #120]	; (8005698 <measure_psd_small_1+0x84>)
 8005620:	f7fc fb1e 	bl	8001c60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005624:	2014      	movs	r0, #20
 8005626:	f7fb f825 	bl	8000674 <HAL_Delay>

	PSD_read();
 800562a:	f000 fbb3 	bl	8005d94 <PSD_read>

	if (psd_output == PSD_RAW)
 800562e:	4b1b      	ldr	r3, [pc, #108]	; (800569c <measure_psd_small_1+0x88>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b14      	cmp	r3, #20
 8005634:	d104      	bne.n	8005640 <measure_psd_small_1+0x2c>
	{
		temp_data = PSD_small_1_value();
 8005636:	f000 fbc9 	bl	8005dcc <PSD_small_1_value>
 800563a:	4603      	mov	r3, r0
 800563c:	83fb      	strh	r3, [r7, #30]
 800563e:	e007      	b.n	8005650 <measure_psd_small_1+0x3c>
	}
	else if (psd_output == PSD_SI)
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <measure_psd_small_1+0x88>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b15      	cmp	r3, #21
 8005646:	d103      	bne.n	8005650 <measure_psd_small_1+0x3c>
	{
		temp_data = PSD_small_1_distance_cm();
 8005648:	f000 fbe4 	bl	8005e14 <PSD_small_1_distance_cm>
 800564c:	4603      	mov	r3, r0
 800564e:	83fb      	strh	r3, [r7, #30]
	}

	HAL_GPIO_WritePin(SHARP_SMALL_1_TRIGGER_GPIO_Port, SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_SET);
 8005650:	2201      	movs	r2, #1
 8005652:	2140      	movs	r1, #64	; 0x40
 8005654:	4810      	ldr	r0, [pc, #64]	; (8005698 <measure_psd_small_1+0x84>)
 8005656:	f7fc fb03 	bl	8001c60 <HAL_GPIO_WritePin>

	if (output_type == OUTPUT_HUMAN)
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <measure_psd_small_1+0x8c>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b0a      	cmp	r3, #10
 8005660:	d108      	bne.n	8005674 <measure_psd_small_1+0x60>
	{
		uint16_t message_buff[10];
		uint16_t message_size = sprintf(message_buff, "%04d\r\n", temp_data);
 8005662:	8bfa      	ldrh	r2, [r7, #30]
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	490f      	ldr	r1, [pc, #60]	; (80056a4 <measure_psd_small_1+0x90>)
 8005668:	4618      	mov	r0, r3
 800566a:	f00c fa7d 	bl	8011b68 <siprintf>
 800566e:	4603      	mov	r3, r0
 8005670:	83bb      	strh	r3, [r7, #28]
	else if (output_type == OUTPUT_MACHINE)
	{
		uint8_t message_buff;
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
	}
}
 8005672:	e00c      	b.n	800568e <measure_psd_small_1+0x7a>
	else if (output_type == OUTPUT_MACHINE)
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <measure_psd_small_1+0x8c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b0b      	cmp	r3, #11
 800567a:	d108      	bne.n	800568e <measure_psd_small_1+0x7a>
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
 800567c:	7efb      	ldrb	r3, [r7, #27]
 800567e:	4618      	mov	r0, r3
 8005680:	8bfb      	ldrh	r3, [r7, #30]
 8005682:	461a      	mov	r2, r3
 8005684:	4908      	ldr	r1, [pc, #32]	; (80056a8 <measure_psd_small_1+0x94>)
 8005686:	f00c fa6f 	bl	8011b68 <siprintf>
 800568a:	4603      	mov	r3, r0
 800568c:	76bb      	strb	r3, [r7, #26]
}
 800568e:	bf00      	nop
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40020400 	.word	0x40020400
 800569c:	20000018 	.word	0x20000018
 80056a0:	20000017 	.word	0x20000017
 80056a4:	08012574 	.word	0x08012574
 80056a8:	0801257c 	.word	0x0801257c

080056ac <measure_psd_small_2>:

void measure_psd_small_2()
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
	uint16_t temp_data;

	HAL_GPIO_WritePin(SHARP_SMALL_2_TRIGGER_GPIO_Port, SHARP_SMALL_2_TRIGGER_Pin, GPIO_PIN_RESET);
 80056b2:	2200      	movs	r2, #0
 80056b4:	2180      	movs	r1, #128	; 0x80
 80056b6:	481e      	ldr	r0, [pc, #120]	; (8005730 <measure_psd_small_2+0x84>)
 80056b8:	f7fc fad2 	bl	8001c60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80056bc:	2014      	movs	r0, #20
 80056be:	f7fa ffd9 	bl	8000674 <HAL_Delay>

	PSD_read();
 80056c2:	f000 fb67 	bl	8005d94 <PSD_read>

	if (psd_output == PSD_RAW)
 80056c6:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <measure_psd_small_2+0x88>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b14      	cmp	r3, #20
 80056cc:	d104      	bne.n	80056d8 <measure_psd_small_2+0x2c>
	{
		temp_data = PSD_small_2_value();
 80056ce:	f000 fb89 	bl	8005de4 <PSD_small_2_value>
 80056d2:	4603      	mov	r3, r0
 80056d4:	83fb      	strh	r3, [r7, #30]
 80056d6:	e007      	b.n	80056e8 <measure_psd_small_2+0x3c>
	}
	else if (psd_output == PSD_SI)
 80056d8:	4b16      	ldr	r3, [pc, #88]	; (8005734 <measure_psd_small_2+0x88>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b15      	cmp	r3, #21
 80056de:	d103      	bne.n	80056e8 <measure_psd_small_2+0x3c>
	{
		temp_data = PSD_small_2_distance_cm();
 80056e0:	f000 fbbe 	bl	8005e60 <PSD_small_2_distance_cm>
 80056e4:	4603      	mov	r3, r0
 80056e6:	83fb      	strh	r3, [r7, #30]
	}

	HAL_GPIO_WritePin(SHARP_SMALL_2_TRIGGER_GPIO_Port, SHARP_SMALL_2_TRIGGER_Pin, GPIO_PIN_SET);
 80056e8:	2201      	movs	r2, #1
 80056ea:	2180      	movs	r1, #128	; 0x80
 80056ec:	4810      	ldr	r0, [pc, #64]	; (8005730 <measure_psd_small_2+0x84>)
 80056ee:	f7fc fab7 	bl	8001c60 <HAL_GPIO_WritePin>

	if (output_type == OUTPUT_HUMAN)
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <measure_psd_small_2+0x8c>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b0a      	cmp	r3, #10
 80056f8:	d108      	bne.n	800570c <measure_psd_small_2+0x60>
	{
		uint16_t message_buff[10];
		uint16_t message_size = sprintf(message_buff, "%04d\r\n", temp_data);
 80056fa:	8bfa      	ldrh	r2, [r7, #30]
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	490f      	ldr	r1, [pc, #60]	; (800573c <measure_psd_small_2+0x90>)
 8005700:	4618      	mov	r0, r3
 8005702:	f00c fa31 	bl	8011b68 <siprintf>
 8005706:	4603      	mov	r3, r0
 8005708:	83bb      	strh	r3, [r7, #28]
	else if (output_type == OUTPUT_MACHINE)
	{
		uint8_t message_buff;
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
	}
}
 800570a:	e00c      	b.n	8005726 <measure_psd_small_2+0x7a>
	else if (output_type == OUTPUT_MACHINE)
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <measure_psd_small_2+0x8c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b0b      	cmp	r3, #11
 8005712:	d108      	bne.n	8005726 <measure_psd_small_2+0x7a>
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
 8005714:	7efb      	ldrb	r3, [r7, #27]
 8005716:	4618      	mov	r0, r3
 8005718:	8bfb      	ldrh	r3, [r7, #30]
 800571a:	461a      	mov	r2, r3
 800571c:	4908      	ldr	r1, [pc, #32]	; (8005740 <measure_psd_small_2+0x94>)
 800571e:	f00c fa23 	bl	8011b68 <siprintf>
 8005722:	4603      	mov	r3, r0
 8005724:	76bb      	strb	r3, [r7, #26]
}
 8005726:	bf00      	nop
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40020000 	.word	0x40020000
 8005734:	20000018 	.word	0x20000018
 8005738:	20000017 	.word	0x20000017
 800573c:	08012574 	.word	0x08012574
 8005740:	0801257c 	.word	0x0801257c

08005744 <measure_psd_big>:

void measure_psd_big()
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
	uint16_t temp_data;

	HAL_GPIO_WritePin(SHARP_BIG_TRIGGER_GPIO_Port, SHARP_BIG_TRIGGER_Pin, GPIO_PIN_RESET);
 800574a:	2200      	movs	r2, #0
 800574c:	2140      	movs	r1, #64	; 0x40
 800574e:	481e      	ldr	r0, [pc, #120]	; (80057c8 <measure_psd_big+0x84>)
 8005750:	f7fc fa86 	bl	8001c60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005754:	2014      	movs	r0, #20
 8005756:	f7fa ff8d 	bl	8000674 <HAL_Delay>

	PSD_read();
 800575a:	f000 fb1b 	bl	8005d94 <PSD_read>

	if (psd_output == PSD_RAW)
 800575e:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <measure_psd_big+0x88>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b14      	cmp	r3, #20
 8005764:	d104      	bne.n	8005770 <measure_psd_big+0x2c>
	{
		temp_data = PSD_big_value();
 8005766:	f000 fb49 	bl	8005dfc <PSD_big_value>
 800576a:	4603      	mov	r3, r0
 800576c:	83fb      	strh	r3, [r7, #30]
 800576e:	e007      	b.n	8005780 <measure_psd_big+0x3c>
	}
	else if (psd_output == PSD_SI)
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <measure_psd_big+0x88>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b15      	cmp	r3, #21
 8005776:	d103      	bne.n	8005780 <measure_psd_big+0x3c>
	{
		temp_data = PSD_big_distance_cm();
 8005778:	f000 fb9a 	bl	8005eb0 <PSD_big_distance_cm>
 800577c:	4603      	mov	r3, r0
 800577e:	83fb      	strh	r3, [r7, #30]
	}

	HAL_GPIO_WritePin(SHARP_BIG_TRIGGER_GPIO_Port, SHARP_BIG_TRIGGER_Pin, GPIO_PIN_SET);
 8005780:	2201      	movs	r2, #1
 8005782:	2140      	movs	r1, #64	; 0x40
 8005784:	4810      	ldr	r0, [pc, #64]	; (80057c8 <measure_psd_big+0x84>)
 8005786:	f7fc fa6b 	bl	8001c60 <HAL_GPIO_WritePin>

	if (output_type == OUTPUT_HUMAN)
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <measure_psd_big+0x8c>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b0a      	cmp	r3, #10
 8005790:	d108      	bne.n	80057a4 <measure_psd_big+0x60>
	{
		uint16_t message_buff[10];
		uint16_t message_size = sprintf(message_buff, "%04d\r\n", temp_data);
 8005792:	8bfa      	ldrh	r2, [r7, #30]
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	490f      	ldr	r1, [pc, #60]	; (80057d4 <measure_psd_big+0x90>)
 8005798:	4618      	mov	r0, r3
 800579a:	f00c f9e5 	bl	8011b68 <siprintf>
 800579e:	4603      	mov	r3, r0
 80057a0:	83bb      	strh	r3, [r7, #28]
	else if (output_type == OUTPUT_MACHINE)
	{
		uint8_t message_buff;
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
	}
}
 80057a2:	e00c      	b.n	80057be <measure_psd_big+0x7a>
	else if (output_type == OUTPUT_MACHINE)
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <measure_psd_big+0x8c>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b0b      	cmp	r3, #11
 80057aa:	d108      	bne.n	80057be <measure_psd_big+0x7a>
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
 80057ac:	7efb      	ldrb	r3, [r7, #27]
 80057ae:	4618      	mov	r0, r3
 80057b0:	8bfb      	ldrh	r3, [r7, #30]
 80057b2:	461a      	mov	r2, r3
 80057b4:	4908      	ldr	r1, [pc, #32]	; (80057d8 <measure_psd_big+0x94>)
 80057b6:	f00c f9d7 	bl	8011b68 <siprintf>
 80057ba:	4603      	mov	r3, r0
 80057bc:	76bb      	strb	r3, [r7, #26]
}
 80057be:	bf00      	nop
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40020000 	.word	0x40020000
 80057cc:	20000018 	.word	0x20000018
 80057d0:	20000017 	.word	0x20000017
 80057d4:	08012574 	.word	0x08012574
 80057d8:	0801257c 	.word	0x0801257c

080057dc <measure_TFMini>:

void measure_TFMini()
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_RESET);
 80057e2:	2200      	movs	r2, #0
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	4817      	ldr	r0, [pc, #92]	; (8005844 <measure_TFMini+0x68>)
 80057e8:	f7fc fa3a 	bl	8001c60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80057ec:	2014      	movs	r0, #20
 80057ee:	f7fa ff41 	bl	8000674 <HAL_Delay>

	lidar_read();
 80057f2:	f7fe fdd3 	bl	800439c <lidar_read>
	uint16_t temp_data = lidar_distance_cm();
 80057f6:	f7fe fe4d 	bl	8004494 <lidar_distance_cm>
 80057fa:	4603      	mov	r3, r0
 80057fc:	83fb      	strh	r3, [r7, #30]

	HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_SET);
 80057fe:	2201      	movs	r2, #1
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	4810      	ldr	r0, [pc, #64]	; (8005844 <measure_TFMini+0x68>)
 8005804:	f7fc fa2c 	bl	8001c60 <HAL_GPIO_WritePin>

	if (output_type == OUTPUT_HUMAN)
 8005808:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <measure_TFMini+0x6c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b0a      	cmp	r3, #10
 800580e:	d108      	bne.n	8005822 <measure_TFMini+0x46>
	{
		uint16_t message_buff[10];
		uint16_t message_size = sprintf(message_buff, "%04d\r\n", temp_data);
 8005810:	8bfa      	ldrh	r2, [r7, #30]
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	490d      	ldr	r1, [pc, #52]	; (800584c <measure_TFMini+0x70>)
 8005816:	4618      	mov	r0, r3
 8005818:	f00c f9a6 	bl	8011b68 <siprintf>
 800581c:	4603      	mov	r3, r0
 800581e:	83bb      	strh	r3, [r7, #28]
	else if (output_type == OUTPUT_MACHINE)
	{
		uint8_t message_buff;
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
	}
}
 8005820:	e00c      	b.n	800583c <measure_TFMini+0x60>
	else if (output_type == OUTPUT_MACHINE)
 8005822:	4b09      	ldr	r3, [pc, #36]	; (8005848 <measure_TFMini+0x6c>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b0b      	cmp	r3, #11
 8005828:	d108      	bne.n	800583c <measure_TFMini+0x60>
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
 800582a:	7efb      	ldrb	r3, [r7, #27]
 800582c:	4618      	mov	r0, r3
 800582e:	8bfb      	ldrh	r3, [r7, #30]
 8005830:	461a      	mov	r2, r3
 8005832:	4907      	ldr	r1, [pc, #28]	; (8005850 <measure_TFMini+0x74>)
 8005834:	f00c f998 	bl	8011b68 <siprintf>
 8005838:	4603      	mov	r3, r0
 800583a:	76bb      	strb	r3, [r7, #26]
}
 800583c:	bf00      	nop
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40020400 	.word	0x40020400
 8005848:	20000017 	.word	0x20000017
 800584c:	08012574 	.word	0x08012574
 8005850:	0801257c 	.word	0x0801257c

08005854 <measure_VL53L0X>:
void measure_VL53L0X()
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VL53L0X_TRIGGER_GPIO_Port, VL53L0X_TRIGGER_Pin, GPIO_PIN_RESET);
 800585a:	2200      	movs	r2, #0
 800585c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005860:	4818      	ldr	r0, [pc, #96]	; (80058c4 <measure_VL53L0X+0x70>)
 8005862:	f7fc f9fd 	bl	8001c60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005866:	2014      	movs	r0, #20
 8005868:	f7fa ff04 	bl	8000674 <HAL_Delay>

	my_VL53L0X_init();
 800586c:	f7fe fe2a 	bl	80044c4 <my_VL53L0X_init>
	my_VL53L0X_read();
 8005870:	f7fe fed4 	bl	800461c <my_VL53L0X_read>
	uint16_t temp_data = my_VL53L0X_distance_mm();
 8005874:	f7fe ff00 	bl	8004678 <my_VL53L0X_distance_mm>
 8005878:	4603      	mov	r3, r0
 800587a:	83fb      	strh	r3, [r7, #30]

	HAL_GPIO_WritePin(VL53L0X_TRIGGER_GPIO_Port, VL53L0X_TRIGGER_Pin, GPIO_PIN_SET);
 800587c:	2201      	movs	r2, #1
 800587e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005882:	4810      	ldr	r0, [pc, #64]	; (80058c4 <measure_VL53L0X+0x70>)
 8005884:	f7fc f9ec 	bl	8001c60 <HAL_GPIO_WritePin>

	if (output_type == OUTPUT_HUMAN)
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <measure_VL53L0X+0x74>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b0a      	cmp	r3, #10
 800588e:	d108      	bne.n	80058a2 <measure_VL53L0X+0x4e>
	{
		uint16_t message_buff[10];
		uint16_t message_size = sprintf(message_buff, "%04d\r\n", temp_data);
 8005890:	8bfa      	ldrh	r2, [r7, #30]
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	490d      	ldr	r1, [pc, #52]	; (80058cc <measure_VL53L0X+0x78>)
 8005896:	4618      	mov	r0, r3
 8005898:	f00c f966 	bl	8011b68 <siprintf>
 800589c:	4603      	mov	r3, r0
 800589e:	83bb      	strh	r3, [r7, #28]
	else if (output_type == OUTPUT_MACHINE)
	{
		uint8_t message_buff;
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
	}
}
 80058a0:	e00c      	b.n	80058bc <measure_VL53L0X+0x68>
	else if (output_type == OUTPUT_MACHINE)
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <measure_VL53L0X+0x74>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b0b      	cmp	r3, #11
 80058a8:	d108      	bne.n	80058bc <measure_VL53L0X+0x68>
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
 80058aa:	7efb      	ldrb	r3, [r7, #27]
 80058ac:	4618      	mov	r0, r3
 80058ae:	8bfb      	ldrh	r3, [r7, #30]
 80058b0:	461a      	mov	r2, r3
 80058b2:	4907      	ldr	r1, [pc, #28]	; (80058d0 <measure_VL53L0X+0x7c>)
 80058b4:	f00c f958 	bl	8011b68 <siprintf>
 80058b8:	4603      	mov	r3, r0
 80058ba:	76bb      	strb	r3, [r7, #26]
}
 80058bc:	bf00      	nop
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40020000 	.word	0x40020000
 80058c8:	20000017 	.word	0x20000017
 80058cc:	08012574 	.word	0x08012574
 80058d0:	0801257c 	.word	0x0801257c

080058d4 <measure_VL53L1>:
void measure_VL53L1()
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VL53L1X_TRIGGER_GPIO_Port, VL53L1X_TRIGGER_Pin, GPIO_PIN_RESET);
 80058da:	2200      	movs	r2, #0
 80058dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058e0:	4818      	ldr	r0, [pc, #96]	; (8005944 <measure_VL53L1+0x70>)
 80058e2:	f7fc f9bd 	bl	8001c60 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80058e6:	2014      	movs	r0, #20
 80058e8:	f7fa fec4 	bl	8000674 <HAL_Delay>

	my_VL53L1_init();
 80058ec:	f7fe fed8 	bl	80046a0 <my_VL53L1_init>
	my_VL53L1_read();
 80058f0:	f7fe ff4c 	bl	800478c <my_VL53L1_read>
	uint16_t temp_data = my_VL53L1_distance_mm();
 80058f4:	f7fe ff88 	bl	8004808 <my_VL53L1_distance_mm>
 80058f8:	4603      	mov	r3, r0
 80058fa:	83fb      	strh	r3, [r7, #30]

	HAL_GPIO_WritePin(VL53L1X_TRIGGER_GPIO_Port, VL53L1X_TRIGGER_Pin, GPIO_PIN_SET);
 80058fc:	2201      	movs	r2, #1
 80058fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005902:	4810      	ldr	r0, [pc, #64]	; (8005944 <measure_VL53L1+0x70>)
 8005904:	f7fc f9ac 	bl	8001c60 <HAL_GPIO_WritePin>
	if (output_type == OUTPUT_HUMAN)
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <measure_VL53L1+0x74>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b0a      	cmp	r3, #10
 800590e:	d108      	bne.n	8005922 <measure_VL53L1+0x4e>
	{
		uint16_t message_buff[10];
		uint16_t message_size = sprintf(message_buff, "%04d\r\n", temp_data);
 8005910:	8bfa      	ldrh	r2, [r7, #30]
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	490d      	ldr	r1, [pc, #52]	; (800594c <measure_VL53L1+0x78>)
 8005916:	4618      	mov	r0, r3
 8005918:	f00c f926 	bl	8011b68 <siprintf>
 800591c:	4603      	mov	r3, r0
 800591e:	83bb      	strh	r3, [r7, #28]
	else if (output_type == OUTPUT_MACHINE)
	{
		uint8_t message_buff;
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
	}
}
 8005920:	e00c      	b.n	800593c <measure_VL53L1+0x68>
	else if (output_type == OUTPUT_MACHINE)
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <measure_VL53L1+0x74>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b0b      	cmp	r3, #11
 8005928:	d108      	bne.n	800593c <measure_VL53L1+0x68>
		uint8_t message_size = sprintf(message_buff, "%02\r\n", temp_data);
 800592a:	7efb      	ldrb	r3, [r7, #27]
 800592c:	4618      	mov	r0, r3
 800592e:	8bfb      	ldrh	r3, [r7, #30]
 8005930:	461a      	mov	r2, r3
 8005932:	4907      	ldr	r1, [pc, #28]	; (8005950 <measure_VL53L1+0x7c>)
 8005934:	f00c f918 	bl	8011b68 <siprintf>
 8005938:	4603      	mov	r3, r0
 800593a:	76bb      	strb	r3, [r7, #26]
}
 800593c:	bf00      	nop
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40020400 	.word	0x40020400
 8005948:	20000017 	.word	0x20000017
 800594c:	08012574 	.word	0x08012574
 8005950:	0801257c 	.word	0x0801257c

08005954 <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 8005954:	b5b0      	push	{r4, r5, r7, lr}
 8005956:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005958:	f7fa fe1a 	bl	8000590 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800595c:	f000 f978 	bl	8005c50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005960:	f7ff f8da 	bl	8004b18 <MX_GPIO_Init>
	MX_DMA_Init();
 8005964:	f7ff f8a8 	bl	8004ab8 <MX_DMA_Init>
	MX_ADC1_Init();
 8005968:	f7fe ff64 	bl	8004834 <MX_ADC1_Init>
	MX_I2C1_Init();
 800596c:	f7ff f978 	bl	8004c60 <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8005970:	f000 fc86 	bl	8006280 <MX_USART6_UART_Init>
	MX_I2C3_Init();
 8005974:	f7ff f9a6 	bl	8004cc4 <MX_I2C3_Init>
	MX_USART2_UART_Init();
 8005978:	f000 fc54 	bl	8006224 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800597c:	f000 fc24 	bl	80061c8 <MX_USART1_UART_Init>
	MX_SPI3_Init();
 8005980:	f000 fabe 	bl	8005f00 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	set_trace_level_output_only();
 8005984:	f7ff f85c 	bl	8004a40 <set_trace_level_output_only>
	set_output_type_human();
 8005988:	f7ff f866 	bl	8004a58 <set_output_type_human>
	set_psd_value_raw();
 800598c:	f7ff f87c 	bl	8004a88 <set_psd_value_raw>

	PSD_init();
 8005990:	f000 f9de 	bl	8005d50 <PSD_init>
	lidar_init();
 8005994:	f7fe fcde 	bl	8004354 <lidar_init>
	HAL_UART_Receive_IT(&huart2, &received, 1);
 8005998:	2201      	movs	r2, #1
 800599a:	4992      	ldr	r1, [pc, #584]	; (8005be4 <main+0x290>)
 800599c:	4892      	ldr	r0, [pc, #584]	; (8005be8 <main+0x294>)
 800599e:	f7fd fe76 	bl	800368e <HAL_UART_Receive_IT>
	trace(POSITIVE_MESSAGE, "Program has been started");
 80059a2:	4992      	ldr	r1, [pc, #584]	; (8005bec <main+0x298>)
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7ff f81b 	bl	80049e0 <trace>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	temp_data[0] = 105; //frame header
 80059aa:	4b91      	ldr	r3, [pc, #580]	; (8005bf0 <main+0x29c>)
 80059ac:	2269      	movs	r2, #105	; 0x69
 80059ae:	801a      	strh	r2, [r3, #0]
	temp_data[7] = 0; //temp sonar val
 80059b0:	4b8f      	ldr	r3, [pc, #572]	; (8005bf0 <main+0x29c>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	81da      	strh	r2, [r3, #14]

	while (1)
	{

		if (read_flag == 1) //z
 80059b6:	4b8f      	ldr	r3, [pc, #572]	; (8005bf4 <main+0x2a0>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d124      	bne.n	8005a08 <main+0xb4>
		{
			sequential_read(10, 50);
 80059be:	2132      	movs	r1, #50	; 0x32
 80059c0:	200a      	movs	r0, #10
 80059c2:	f7ff fb49 	bl	8005058 <sequential_read>

			HAL_Delay(20);
 80059c6:	2014      	movs	r0, #20
 80059c8:	f7fa fe54 	bl	8000674 <HAL_Delay>
			read_flag = 0;
 80059cc:	4b89      	ldr	r3, [pc, #548]	; (8005bf4 <main+0x2a0>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
			message_size2 = sprintf(message_buff2, "--------------------------------------------\r\n");
 80059d2:	4a89      	ldr	r2, [pc, #548]	; (8005bf8 <main+0x2a4>)
 80059d4:	4b89      	ldr	r3, [pc, #548]	; (8005bfc <main+0x2a8>)
 80059d6:	4614      	mov	r4, r2
 80059d8:	461d      	mov	r5, r3
 80059da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80059e6:	c407      	stmia	r4!, {r0, r1, r2}
 80059e8:	8023      	strh	r3, [r4, #0]
 80059ea:	3402      	adds	r4, #2
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	7023      	strb	r3, [r4, #0]
 80059f0:	222e      	movs	r2, #46	; 0x2e
 80059f2:	4b83      	ldr	r3, [pc, #524]	; (8005c00 <main+0x2ac>)
 80059f4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_buff2, message_size2);
 80059f6:	4b82      	ldr	r3, [pc, #520]	; (8005c00 <main+0x2ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	497e      	ldr	r1, [pc, #504]	; (8005bf8 <main+0x2a4>)
 8005a00:	4879      	ldr	r0, [pc, #484]	; (8005be8 <main+0x294>)
 8005a02:	f7fd fdff 	bl	8003604 <HAL_UART_Transmit_IT>
 8005a06:	e027      	b.n	8005a58 <main+0x104>
		}
		else if (read_flag == 2) //c
 8005a08:	4b7a      	ldr	r3, [pc, #488]	; (8005bf4 <main+0x2a0>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d123      	bne.n	8005a58 <main+0x104>
		{
			simultaneous_read(10, 50);
 8005a10:	2132      	movs	r1, #50	; 0x32
 8005a12:	200a      	movs	r0, #10
 8005a14:	f7ff fcb0 	bl	8005378 <simultaneous_read>

			HAL_Delay(20);
 8005a18:	2014      	movs	r0, #20
 8005a1a:	f7fa fe2b 	bl	8000674 <HAL_Delay>
			read_flag = 0;
 8005a1e:	4b75      	ldr	r3, [pc, #468]	; (8005bf4 <main+0x2a0>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
			message_size2 = sprintf(message_buff2, "--------------------------------------------\r\n");
 8005a24:	4a74      	ldr	r2, [pc, #464]	; (8005bf8 <main+0x2a4>)
 8005a26:	4b75      	ldr	r3, [pc, #468]	; (8005bfc <main+0x2a8>)
 8005a28:	4614      	mov	r4, r2
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a38:	c407      	stmia	r4!, {r0, r1, r2}
 8005a3a:	8023      	strh	r3, [r4, #0]
 8005a3c:	3402      	adds	r4, #2
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	7023      	strb	r3, [r4, #0]
 8005a42:	222e      	movs	r2, #46	; 0x2e
 8005a44:	4b6e      	ldr	r3, [pc, #440]	; (8005c00 <main+0x2ac>)
 8005a46:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_buff2, message_size2);
 8005a48:	4b6d      	ldr	r3, [pc, #436]	; (8005c00 <main+0x2ac>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4969      	ldr	r1, [pc, #420]	; (8005bf8 <main+0x2a4>)
 8005a52:	4865      	ldr	r0, [pc, #404]	; (8005be8 <main+0x294>)
 8005a54:	f7fd fdd6 	bl	8003604 <HAL_UART_Transmit_IT>
		}

		if (laser_flag != 0) //x
 8005a58:	4b6a      	ldr	r3, [pc, #424]	; (8005c04 <main+0x2b0>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <main+0x122>
		{
			HAL_GPIO_TogglePin(LASER_TRIGGER_GPIO_Port, LASER_TRIGGER_Pin);
 8005a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a64:	4868      	ldr	r0, [pc, #416]	; (8005c08 <main+0x2b4>)
 8005a66:	f7fc f914 	bl	8001c92 <HAL_GPIO_TogglePin>
			--laser_flag;
 8005a6a:	4b66      	ldr	r3, [pc, #408]	; (8005c04 <main+0x2b0>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	4b64      	ldr	r3, [pc, #400]	; (8005c04 <main+0x2b0>)
 8005a74:	701a      	strb	r2, [r3, #0]
		}

		if (single_sensor == 1) //q
 8005a76:	4b65      	ldr	r3, [pc, #404]	; (8005c0c <main+0x2b8>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d109      	bne.n	8005a92 <main+0x13e>
		{
			trace(POSITIVE_MESSAGE, "PSD_SMALL_1:");
 8005a7e:	4964      	ldr	r1, [pc, #400]	; (8005c10 <main+0x2bc>)
 8005a80:	2001      	movs	r0, #1
 8005a82:	f7fe ffad 	bl	80049e0 <trace>
			measure_psd_small_1();
 8005a86:	f7ff fdc5 	bl	8005614 <measure_psd_small_1>
			single_sensor = 0;
 8005a8a:	4b60      	ldr	r3, [pc, #384]	; (8005c0c <main+0x2b8>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e044      	b.n	8005b1c <main+0x1c8>
		}

		else if (single_sensor == 2) //w
 8005a92:	4b5e      	ldr	r3, [pc, #376]	; (8005c0c <main+0x2b8>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d109      	bne.n	8005aae <main+0x15a>
		{
			trace(POSITIVE_MESSAGE, "PSD_SMALL_2:");
 8005a9a:	495e      	ldr	r1, [pc, #376]	; (8005c14 <main+0x2c0>)
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f7fe ff9f 	bl	80049e0 <trace>
			measure_psd_small_2();
 8005aa2:	f7ff fe03 	bl	80056ac <measure_psd_small_2>
			single_sensor = 0;
 8005aa6:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <main+0x2b8>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e036      	b.n	8005b1c <main+0x1c8>
		}

		else if (single_sensor == 3) //e
 8005aae:	4b57      	ldr	r3, [pc, #348]	; (8005c0c <main+0x2b8>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d109      	bne.n	8005aca <main+0x176>
		{
			trace(POSITIVE_MESSAGE, "PSD_BIG:");
 8005ab6:	4958      	ldr	r1, [pc, #352]	; (8005c18 <main+0x2c4>)
 8005ab8:	2001      	movs	r0, #1
 8005aba:	f7fe ff91 	bl	80049e0 <trace>
			measure_psd_big();
 8005abe:	f7ff fe41 	bl	8005744 <measure_psd_big>
			single_sensor = 0;
 8005ac2:	4b52      	ldr	r3, [pc, #328]	; (8005c0c <main+0x2b8>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e028      	b.n	8005b1c <main+0x1c8>
		}

		else if (single_sensor == 4) //r
 8005aca:	4b50      	ldr	r3, [pc, #320]	; (8005c0c <main+0x2b8>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d109      	bne.n	8005ae6 <main+0x192>
		{
			trace(POSITIVE_MESSAGE, "TFMINI:");
 8005ad2:	4952      	ldr	r1, [pc, #328]	; (8005c1c <main+0x2c8>)
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7fe ff83 	bl	80049e0 <trace>
			measure_TFMini();
 8005ada:	f7ff fe7f 	bl	80057dc <measure_TFMini>
			single_sensor = 0;
 8005ade:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <main+0x2b8>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e01a      	b.n	8005b1c <main+0x1c8>
		}

		else if (single_sensor == 5) //t
 8005ae6:	4b49      	ldr	r3, [pc, #292]	; (8005c0c <main+0x2b8>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	d109      	bne.n	8005b02 <main+0x1ae>
		{
			trace(POSITIVE_MESSAGE, "VL53L0X:");
 8005aee:	494c      	ldr	r1, [pc, #304]	; (8005c20 <main+0x2cc>)
 8005af0:	2001      	movs	r0, #1
 8005af2:	f7fe ff75 	bl	80049e0 <trace>
			measure_VL53L0X();
 8005af6:	f7ff fead 	bl	8005854 <measure_VL53L0X>
			single_sensor = 0;
 8005afa:	4b44      	ldr	r3, [pc, #272]	; (8005c0c <main+0x2b8>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e00c      	b.n	8005b1c <main+0x1c8>
		}

		else if (single_sensor == 6) //y
 8005b02:	4b42      	ldr	r3, [pc, #264]	; (8005c0c <main+0x2b8>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d108      	bne.n	8005b1c <main+0x1c8>
		{
			trace(POSITIVE_MESSAGE, "VL53L1:");
 8005b0a:	4946      	ldr	r1, [pc, #280]	; (8005c24 <main+0x2d0>)
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f7fe ff67 	bl	80049e0 <trace>
			measure_VL53L1();
 8005b12:	f7ff fedf 	bl	80058d4 <measure_VL53L1>
			single_sensor = 0;
 8005b16:	4b3d      	ldr	r3, [pc, #244]	; (8005c0c <main+0x2b8>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
		}

		if (trace_mode == 2)
 8005b1c:	4b42      	ldr	r3, [pc, #264]	; (8005c28 <main+0x2d4>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d109      	bne.n	8005b38 <main+0x1e4>
		{
			set_trace_level_critical();
 8005b24:	f7fe ff74 	bl	8004a10 <set_trace_level_critical>
			trace(POSITIVE_MESSAGE, "TRACE MODE SET TO CRITICAL_MESSAGE");
 8005b28:	4940      	ldr	r1, [pc, #256]	; (8005c2c <main+0x2d8>)
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	f7fe ff58 	bl	80049e0 <trace>
			trace_mode = 0;
 8005b30:	4b3d      	ldr	r3, [pc, #244]	; (8005c28 <main+0x2d4>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	e01a      	b.n	8005b6e <main+0x21a>
		}
		else if (trace_mode == 3)
 8005b38:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <main+0x2d4>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d109      	bne.n	8005b54 <main+0x200>
		{
			set_trace_level_positive();
 8005b40:	f7fe ff72 	bl	8004a28 <set_trace_level_positive>
			trace(POSITIVE_MESSAGE, "TRACE MODE SET TO POSITIVE_MESSAGE");
 8005b44:	493a      	ldr	r1, [pc, #232]	; (8005c30 <main+0x2dc>)
 8005b46:	2001      	movs	r0, #1
 8005b48:	f7fe ff4a 	bl	80049e0 <trace>
			trace_mode = 0;
 8005b4c:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <main+0x2d4>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e00c      	b.n	8005b6e <main+0x21a>
		}
		else if (trace_mode == 4)
 8005b54:	4b34      	ldr	r3, [pc, #208]	; (8005c28 <main+0x2d4>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d108      	bne.n	8005b6e <main+0x21a>
		{
			set_trace_level_output_only();
 8005b5c:	f7fe ff70 	bl	8004a40 <set_trace_level_output_only>
			trace(POSITIVE_MESSAGE, "TRACE MODE SET TO OUTPUT_ONLY");
 8005b60:	4934      	ldr	r1, [pc, #208]	; (8005c34 <main+0x2e0>)
 8005b62:	2001      	movs	r0, #1
 8005b64:	f7fe ff3c 	bl	80049e0 <trace>
			trace_mode = 0;
 8005b68:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <main+0x2d4>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
		}

		if (output_level == 2)
 8005b6e:	4b32      	ldr	r3, [pc, #200]	; (8005c38 <main+0x2e4>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d109      	bne.n	8005b8a <main+0x236>
		{
			set_output_type_human();
 8005b76:	f7fe ff6f 	bl	8004a58 <set_output_type_human>
			trace(POSITIVE_MESSAGE, "OUTPUT TYPE SET TO HUMAN");
 8005b7a:	4930      	ldr	r1, [pc, #192]	; (8005c3c <main+0x2e8>)
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f7fe ff2f 	bl	80049e0 <trace>
			output_level = 0;
 8005b82:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <main+0x2e4>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e00c      	b.n	8005ba4 <main+0x250>
		}
		else if (output_level == 3)
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <main+0x2e4>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d108      	bne.n	8005ba4 <main+0x250>
		{
			set_output_type_machine();
 8005b92:	f7fe ff6d 	bl	8004a70 <set_output_type_machine>
			trace(POSITIVE_MESSAGE, "OUTPUT TYPE SET TO MACHINE");
 8005b96:	492a      	ldr	r1, [pc, #168]	; (8005c40 <main+0x2ec>)
 8005b98:	2001      	movs	r0, #1
 8005b9a:	f7fe ff21 	bl	80049e0 <trace>
			output_level = 0;
 8005b9e:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <main+0x2e4>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
		}

		if (psd_level == 2)
 8005ba4:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <main+0x2f0>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d109      	bne.n	8005bc0 <main+0x26c>
		{
			set_psd_value_raw();
 8005bac:	f7fe ff6c 	bl	8004a88 <set_psd_value_raw>
			trace(POSITIVE_MESSAGE, "PSD OUTPUT SET TO RAW");
 8005bb0:	4925      	ldr	r1, [pc, #148]	; (8005c48 <main+0x2f4>)
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	f7fe ff14 	bl	80049e0 <trace>
			psd_level = 0;
 8005bb8:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <main+0x2f0>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	e00c      	b.n	8005bda <main+0x286>
		}
		else if (psd_level == 3)
 8005bc0:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <main+0x2f0>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d108      	bne.n	8005bda <main+0x286>
		{
			set_psd_value_si();
 8005bc8:	f7fe ff6a 	bl	8004aa0 <set_psd_value_si>
			trace(POSITIVE_MESSAGE, "PSD OUTPUT SET TO SI");
 8005bcc:	491f      	ldr	r1, [pc, #124]	; (8005c4c <main+0x2f8>)
 8005bce:	2001      	movs	r0, #1
 8005bd0:	f7fe ff06 	bl	80049e0 <trace>
			psd_level = 0;
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <main+0x2f0>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(10);
 8005bda:	200a      	movs	r0, #10
 8005bdc:	f7fa fd4a 	bl	8000674 <HAL_Delay>
		if (read_flag == 1) //z
 8005be0:	e6e9      	b.n	80059b6 <main+0x62>
 8005be2:	bf00      	nop
 8005be4:	200008d0 	.word	0x200008d0
 8005be8:	20000cdc 	.word	0x20000cdc
 8005bec:	08012584 	.word	0x08012584
 8005bf0:	20000a5c 	.word	0x20000a5c
 8005bf4:	200008d1 	.word	0x200008d1
 8005bf8:	20000a7c 	.word	0x20000a7c
 8005bfc:	080125a0 	.word	0x080125a0
 8005c00:	200008d8 	.word	0x200008d8
 8005c04:	200008d2 	.word	0x200008d2
 8005c08:	40020000 	.word	0x40020000
 8005c0c:	200008d3 	.word	0x200008d3
 8005c10:	080125d0 	.word	0x080125d0
 8005c14:	080125e0 	.word	0x080125e0
 8005c18:	080125f0 	.word	0x080125f0
 8005c1c:	080125fc 	.word	0x080125fc
 8005c20:	08012604 	.word	0x08012604
 8005c24:	08012610 	.word	0x08012610
 8005c28:	200008d4 	.word	0x200008d4
 8005c2c:	08012618 	.word	0x08012618
 8005c30:	0801263c 	.word	0x0801263c
 8005c34:	08012660 	.word	0x08012660
 8005c38:	200008d5 	.word	0x200008d5
 8005c3c:	08012680 	.word	0x08012680
 8005c40:	0801269c 	.word	0x0801269c
 8005c44:	200008d6 	.word	0x200008d6
 8005c48:	080126b8 	.word	0x080126b8
 8005c4c:	080126d0 	.word	0x080126d0

08005c50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b094      	sub	sp, #80	; 0x50
 8005c54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8005c56:	2300      	movs	r3, #0
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	4a36      	ldr	r2, [pc, #216]	; (8005d34 <SystemClock_Config+0xe4>)
 8005c5c:	4b35      	ldr	r3, [pc, #212]	; (8005d34 <SystemClock_Config+0xe4>)
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c64:	6413      	str	r3, [r2, #64]	; 0x40
 8005c66:	4b33      	ldr	r3, [pc, #204]	; (8005d34 <SystemClock_Config+0xe4>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	60bb      	str	r3, [r7, #8]
 8005c70:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c72:	2300      	movs	r3, #0
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	4a30      	ldr	r2, [pc, #192]	; (8005d38 <SystemClock_Config+0xe8>)
 8005c78:	4b2f      	ldr	r3, [pc, #188]	; (8005d38 <SystemClock_Config+0xe8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	4b2c      	ldr	r3, [pc, #176]	; (8005d38 <SystemClock_Config+0xe8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005c92:	2302      	movs	r3, #2
 8005c94:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c96:	2301      	movs	r3, #1
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8005c9a:	2310      	movs	r3, #16
 8005c9c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8005ca6:	2310      	movs	r3, #16
 8005ca8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8005caa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005cae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8005cb4:	2307      	movs	r3, #7
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cb8:	f107 0320 	add.w	r3, r7, #32
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fc ff29 	bl	8002b14 <HAL_RCC_OscConfig>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <SystemClock_Config+0x82>
	{
		_Error_Handler(__FILE__, __LINE__);
 8005cc8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005ccc:	481b      	ldr	r0, [pc, #108]	; (8005d3c <SystemClock_Config+0xec>)
 8005cce:	f000 f839 	bl	8005d44 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cd2:	230f      	movs	r3, #15
 8005cd4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005ce8:	f107 030c 	add.w	r3, r7, #12
 8005cec:	2102      	movs	r1, #2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd f952 	bl	8002f98 <HAL_RCC_ClockConfig>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <SystemClock_Config+0xb4>
	{
		_Error_Handler(__FILE__, __LINE__);
 8005cfa:	f240 21f7 	movw	r1, #759	; 0x2f7
 8005cfe:	480f      	ldr	r0, [pc, #60]	; (8005d3c <SystemClock_Config+0xec>)
 8005d00:	f000 f820 	bl	8005d44 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8005d04:	f7fd fb02 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <SystemClock_Config+0xf0>)
 8005d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d10:	099b      	lsrs	r3, r3, #6
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fb f9e3 	bl	80010de <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005d18:	2004      	movs	r0, #4
 8005d1a:	f7fb f9ed 	bl	80010f8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	f04f 30ff 	mov.w	r0, #4294967295
 8005d26:	f7fb f9b0 	bl	800108a <HAL_NVIC_SetPriority>
}
 8005d2a:	bf00      	nop
 8005d2c:	3750      	adds	r7, #80	; 0x50
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40007000 	.word	0x40007000
 8005d3c:	080126e8 	.word	0x080126e8
 8005d40:	10624dd3 	.word	0x10624dd3

08005d44 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8005d4e:	e7fe      	b.n	8005d4e <_Error_Handler+0xa>

08005d50 <PSD_init>:
#include "psd.h"

bool PSD_init()
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
	psd_raw_values = malloc(number_of_sensors * sizeof(uint16_t));
 8005d54:	2303      	movs	r3, #3
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f00b fadb 	bl	8011314 <malloc>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <PSD_init+0x38>)
 8005d64:	601a      	str	r2, [r3, #0]

	if (psd_raw_values == NULL)
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <PSD_init+0x38>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <PSD_init+0x2a>
	{
		trace(CRITICAL_MESSAGE, "PSD - memory allocation failed");
 8005d6e:	4907      	ldr	r1, [pc, #28]	; (8005d8c <PSD_init+0x3c>)
 8005d70:	2000      	movs	r0, #0
 8005d72:	f7fe fe35 	bl	80049e0 <trace>
		return false;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e004      	b.n	8005d84 <PSD_init+0x34>
	}
	trace(POSITIVE_MESSAGE, "PSD - memory allocation succeeded");
 8005d7a:	4905      	ldr	r1, [pc, #20]	; (8005d90 <PSD_init+0x40>)
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	f7fe fe2f 	bl	80049e0 <trace>
	return true;
 8005d82:	2301      	movs	r3, #1
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20000a58 	.word	0x20000a58
 8005d8c:	080126f8 	.word	0x080126f8
 8005d90:	08012718 	.word	0x08012718

08005d94 <PSD_read>:
	trace(POSITIVE_MESSAGE, "PSD - memory allocation succeeded");
	return true;
}

void PSD_read()
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) psd_raw_values, number_of_sensors);
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <PSD_read+0x2c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4808      	ldr	r0, [pc, #32]	; (8005dc4 <PSD_read+0x30>)
 8005da2:	f7fa fccd 	bl	8000740 <HAL_ADC_Start_DMA>
	HAL_Delay(20);
 8005da6:	2014      	movs	r0, #20
 8005da8:	f7fa fc64 	bl	8000674 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1);
 8005dac:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <PSD_read+0x30>)
 8005dae:	f7fa fd99 	bl	80008e4 <HAL_ADC_Stop_DMA>
	trace(POSITIVE_MESSAGE, "PSD - data read out");
 8005db2:	4905      	ldr	r1, [pc, #20]	; (8005dc8 <PSD_read+0x34>)
 8005db4:	2001      	movs	r0, #1
 8005db6:	f7fe fe13 	bl	80049e0 <trace>
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000a58 	.word	0x20000a58
 8005dc4:	20000908 	.word	0x20000908
 8005dc8:	0801275c 	.word	0x0801275c

08005dcc <PSD_small_1_value>:

uint16_t PSD_small_1_value()
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
	return psd_raw_values[0];
 8005dd0:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <PSD_small_1_value+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	881b      	ldrh	r3, [r3, #0]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000a58 	.word	0x20000a58

08005de4 <PSD_small_2_value>:

uint16_t PSD_small_2_value()
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
	return psd_raw_values[1];
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <PSD_small_2_value+0x14>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	885b      	ldrh	r3, [r3, #2]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20000a58 	.word	0x20000a58

08005dfc <PSD_big_value>:

uint16_t PSD_big_value()
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
	return psd_raw_values[2];
 8005e00:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <PSD_big_value+0x14>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	889b      	ldrh	r3, [r3, #4]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	20000a58 	.word	0x20000a58

08005e14 <PSD_small_1_distance_cm>:

uint16_t PSD_small_1_distance_cm()
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
	return (uint16_t) ((a_small_1 / psd_raw_values[0]) - b_small_1);
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <PSD_small_1_distance_cm+0x40>)
 8005e1c:	edd3 6a00 	vldr	s13, [r3]
 8005e20:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <PSD_small_1_distance_cm+0x44>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <PSD_small_1_distance_cm+0x48>)
 8005e34:	edd3 7a00 	vldr	s15, [r3]
 8005e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e40:	edc7 7a01 	vstr	s15, [r7, #4]
 8005e44:	88bb      	ldrh	r3, [r7, #4]
 8005e46:	b29b      	uxth	r3, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	200008dc 	.word	0x200008dc
 8005e58:	20000a58 	.word	0x20000a58
 8005e5c:	200008e0 	.word	0x200008e0

08005e60 <PSD_small_2_distance_cm>:

uint16_t PSD_small_2_distance_cm()
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
	return (uint16_t) ((a_small_2 / psd_raw_values[1]) - b_small_2);
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <PSD_small_2_distance_cm+0x44>)
 8005e68:	edd3 6a00 	vldr	s13, [r3]
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <PSD_small_2_distance_cm+0x48>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3302      	adds	r3, #2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <PSD_small_2_distance_cm+0x4c>)
 8005e82:	edd3 7a00 	vldr	s15, [r3]
 8005e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005e92:	88bb      	ldrh	r3, [r7, #4]
 8005e94:	b29b      	uxth	r3, r3
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	200008e4 	.word	0x200008e4
 8005ea8:	20000a58 	.word	0x20000a58
 8005eac:	200008e8 	.word	0x200008e8

08005eb0 <PSD_big_distance_cm>:

uint16_t PSD_big_distance_cm()
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
	return (uint16_t) ((a_big / psd_raw_values[2]) - b_big);
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <PSD_big_distance_cm+0x44>)
 8005eb8:	edd3 6a00 	vldr	s13, [r3]
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <PSD_big_distance_cm+0x48>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <PSD_big_distance_cm+0x4c>)
 8005ed2:	edd3 7a00 	vldr	s15, [r3]
 8005ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ede:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ee2:	88bb      	ldrh	r3, [r7, #4]
 8005ee4:	b29b      	uxth	r3, r3
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	200008ec 	.word	0x200008ec
 8005ef8:	20000a58 	.word	0x20000a58
 8005efc:	200008f0 	.word	0x200008f0

08005f00 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8005f04:	4b18      	ldr	r3, [pc, #96]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f06:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <MX_SPI3_Init+0x6c>)
 8005f08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005f0a:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f18:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f1e:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f24:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005f2a:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f4c:	220a      	movs	r2, #10
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005f50:	4805      	ldr	r0, [pc, #20]	; (8005f68 <MX_SPI3_Init+0x68>)
 8005f52:	f7fd fa0f 	bl	8003374 <HAL_SPI_Init>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <MX_SPI3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005f5c:	2145      	movs	r1, #69	; 0x45
 8005f5e:	4804      	ldr	r0, [pc, #16]	; (8005f70 <MX_SPI3_Init+0x70>)
 8005f60:	f7ff fef0 	bl	8005d44 <_Error_Handler>
  }

}
 8005f64:	bf00      	nop
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000b44 	.word	0x20000b44
 8005f6c:	40003c00 	.word	0x40003c00
 8005f70:	08012770 	.word	0x08012770

08005f74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <HAL_SPI_MspInit+0x58>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d11e      	bne.n	8005fc4 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	4a11      	ldr	r2, [pc, #68]	; (8005fd0 <HAL_SPI_MspInit+0x5c>)
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <HAL_SPI_MspInit+0x5c>)
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f94:	6413      	str	r3, [r2, #64]	; 0x40
 8005f96:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <HAL_SPI_MspInit+0x5c>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = SONAR_SCK_Pin|SONAR_MISO_Pin|SONAR_MOSI_Pin;
 8005fa2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005fa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005fb4:	2306      	movs	r3, #6
 8005fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4805      	ldr	r0, [pc, #20]	; (8005fd4 <HAL_SPI_MspInit+0x60>)
 8005fc0:	f7fb fccc 	bl	800195c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40003c00 	.word	0x40003c00
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	40020800 	.word	0x40020800

08005fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	4a25      	ldr	r2, [pc, #148]	; (8006078 <HAL_MspInit+0xa0>)
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <HAL_MspInit+0xa0>)
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fec:	6453      	str	r3, [r2, #68]	; 0x44
 8005fee:	4b22      	ldr	r3, [pc, #136]	; (8006078 <HAL_MspInit+0xa0>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <HAL_MspInit+0xa0>)
 8006000:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <HAL_MspInit+0xa0>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006008:	6413      	str	r3, [r2, #64]	; 0x40
 800600a:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <HAL_MspInit+0xa0>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006016:	2007      	movs	r0, #7
 8006018:	f7fb f82c 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800601c:	2200      	movs	r2, #0
 800601e:	2100      	movs	r1, #0
 8006020:	f06f 000b 	mvn.w	r0, #11
 8006024:	f7fb f831 	bl	800108a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006028:	2200      	movs	r2, #0
 800602a:	2100      	movs	r1, #0
 800602c:	f06f 000a 	mvn.w	r0, #10
 8006030:	f7fb f82b 	bl	800108a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006034:	2200      	movs	r2, #0
 8006036:	2100      	movs	r1, #0
 8006038:	f06f 0009 	mvn.w	r0, #9
 800603c:	f7fb f825 	bl	800108a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006040:	2200      	movs	r2, #0
 8006042:	2100      	movs	r1, #0
 8006044:	f06f 0004 	mvn.w	r0, #4
 8006048:	f7fb f81f 	bl	800108a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800604c:	2200      	movs	r2, #0
 800604e:	2100      	movs	r1, #0
 8006050:	f06f 0003 	mvn.w	r0, #3
 8006054:	f7fb f819 	bl	800108a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006058:	2200      	movs	r2, #0
 800605a:	2100      	movs	r1, #0
 800605c:	f06f 0001 	mvn.w	r0, #1
 8006060:	f7fb f813 	bl	800108a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006064:	2200      	movs	r2, #0
 8006066:	2100      	movs	r1, #0
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	f7fb f80d 	bl	800108a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40023800 	.word	0x40023800

0800607c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800608a:	b480      	push	{r7}
 800608c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800608e:	e7fe      	b.n	800608e <HardFault_Handler+0x4>

08006090 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006094:	e7fe      	b.n	8006094 <MemManage_Handler+0x4>

08006096 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006096:	b480      	push	{r7}
 8006098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800609a:	e7fe      	b.n	800609a <BusFault_Handler+0x4>

0800609c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060a0:	e7fe      	b.n	80060a0 <UsageFault_Handler+0x4>

080060a2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80060a2:	b480      	push	{r7}
 80060a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060a6:	bf00      	nop
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80060be:	b480      	push	{r7}
 80060c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060c2:	bf00      	nop
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060d0:	f7fa fab0 	bl	8000634 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80060d4:	f7fb f82c 	bl	8001130 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}

080060dc <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80060e0:	2010      	movs	r0, #16
 80060e2:	f7fb fde9 	bl	8001cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}

080060ea <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80060ee:	2020      	movs	r0, #32
 80060f0:	f7fb fde2 	bl	8001cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80060f4:	bf00      	nop
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80060fc:	4802      	ldr	r0, [pc, #8]	; (8006108 <USART2_IRQHandler+0x10>)
 80060fe:	f7fd fbef 	bl	80038e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000cdc 	.word	0x20000cdc

0800610c <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006110:	4802      	ldr	r0, [pc, #8]	; (800611c <DMA2_Stream0_IRQHandler+0x10>)
 8006112:	f7fb f9bb 	bl	800148c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006116:	bf00      	nop
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000950 	.word	0x20000950

08006120 <DMA2_Stream1_IRQHandler>:

/**
* @brief This function handles DMA2 stream1 global interrupt.
*/
void DMA2_Stream1_IRQHandler(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006124:	4802      	ldr	r0, [pc, #8]	; (8006130 <DMA2_Stream1_IRQHandler+0x10>)
 8006126:	f7fb f9b1 	bl	800148c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000b9c 	.word	0x20000b9c

08006134 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006138:	4802      	ldr	r0, [pc, #8]	; (8006144 <DMA2_Stream6_IRQHandler+0x10>)
 800613a:	f7fb f9a7 	bl	800148c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800613e:	bf00      	nop
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000bfc 	.word	0x20000bfc

08006148 <USART6_IRQHandler>:

/**
* @brief This function handles USART6 global interrupt.
*/
void USART6_IRQHandler(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800614c:	4802      	ldr	r0, [pc, #8]	; (8006158 <USART6_IRQHandler+0x10>)
 800614e:	f7fd fbc7 	bl	80038e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000c9c 	.word	0x20000c9c

0800615c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006160:	4a16      	ldr	r2, [pc, #88]	; (80061bc <SystemInit+0x60>)
 8006162:	4b16      	ldr	r3, [pc, #88]	; (80061bc <SystemInit+0x60>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800616c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <SystemInit+0x64>)
 8006172:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <SystemInit+0x64>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <SystemInit+0x64>)
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006182:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <SystemInit+0x64>)
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <SystemInit+0x64>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800618c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006190:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <SystemInit+0x64>)
 8006194:	4a0b      	ldr	r2, [pc, #44]	; (80061c4 <SystemInit+0x68>)
 8006196:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <SystemInit+0x64>)
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <SystemInit+0x64>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <SystemInit+0x64>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80061aa:	4b04      	ldr	r3, [pc, #16]	; (80061bc <SystemInit+0x60>)
 80061ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061b0:	609a      	str	r2, [r3, #8]
#endif
}
 80061b2:	bf00      	nop
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	e000ed00 	.word	0xe000ed00
 80061c0:	40023800 	.word	0x40023800
 80061c4:	24003010 	.word	0x24003010

080061c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061ce:	4a13      	ldr	r2, [pc, #76]	; (800621c <MX_USART1_UART_Init+0x54>)
 80061d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80061d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061dc:	2200      	movs	r2, #0
 80061de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061ee:	220c      	movs	r2, #12
 80061f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80061f8:	4b07      	ldr	r3, [pc, #28]	; (8006218 <MX_USART1_UART_Init+0x50>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80061fe:	4806      	ldr	r0, [pc, #24]	; (8006218 <MX_USART1_UART_Init+0x50>)
 8006200:	f7fd f91b 	bl	800343a <HAL_UART_Init>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <MX_USART1_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800620a:	2147      	movs	r1, #71	; 0x47
 800620c:	4804      	ldr	r0, [pc, #16]	; (8006220 <MX_USART1_UART_Init+0x58>)
 800620e:	f7ff fd99 	bl	8005d44 <_Error_Handler>
  }

}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000c5c 	.word	0x20000c5c
 800621c:	40011000 	.word	0x40011000
 8006220:	08012780 	.word	0x08012780

08006224 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006228:	4b12      	ldr	r3, [pc, #72]	; (8006274 <MX_USART2_UART_Init+0x50>)
 800622a:	4a13      	ldr	r2, [pc, #76]	; (8006278 <MX_USART2_UART_Init+0x54>)
 800622c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <MX_USART2_UART_Init+0x50>)
 8006230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006236:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <MX_USART2_UART_Init+0x50>)
 8006238:	2200      	movs	r2, #0
 800623a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800623c:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <MX_USART2_UART_Init+0x50>)
 800623e:	2200      	movs	r2, #0
 8006240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <MX_USART2_UART_Init+0x50>)
 8006244:	2200      	movs	r2, #0
 8006246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <MX_USART2_UART_Init+0x50>)
 800624a:	220c      	movs	r2, #12
 800624c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <MX_USART2_UART_Init+0x50>)
 8006250:	2200      	movs	r2, #0
 8006252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006254:	4b07      	ldr	r3, [pc, #28]	; (8006274 <MX_USART2_UART_Init+0x50>)
 8006256:	2200      	movs	r2, #0
 8006258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800625a:	4806      	ldr	r0, [pc, #24]	; (8006274 <MX_USART2_UART_Init+0x50>)
 800625c:	f7fd f8ed 	bl	800343a <HAL_UART_Init>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006266:	215a      	movs	r1, #90	; 0x5a
 8006268:	4804      	ldr	r0, [pc, #16]	; (800627c <MX_USART2_UART_Init+0x58>)
 800626a:	f7ff fd6b 	bl	8005d44 <_Error_Handler>
  }

}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000cdc 	.word	0x20000cdc
 8006278:	40004400 	.word	0x40004400
 800627c:	08012780 	.word	0x08012780

08006280 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8006284:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 8006286:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <MX_USART6_UART_Init+0x54>)
 8006288:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800628a:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 800628c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006290:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 8006294:	2200      	movs	r2, #0
 8006296:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 800629a:	2200      	movs	r2, #0
 800629c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800629e:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 80062a6:	220c      	movs	r2, #12
 80062a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80062b6:	4806      	ldr	r0, [pc, #24]	; (80062d0 <MX_USART6_UART_Init+0x50>)
 80062b8:	f7fd f8bf 	bl	800343a <HAL_UART_Init>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <MX_USART6_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80062c2:	216d      	movs	r1, #109	; 0x6d
 80062c4:	4804      	ldr	r0, [pc, #16]	; (80062d8 <MX_USART6_UART_Init+0x58>)
 80062c6:	f7ff fd3d 	bl	8005d44 <_Error_Handler>
  }

}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000c9c 	.word	0x20000c9c
 80062d4:	40011400 	.word	0x40011400
 80062d8:	08012780 	.word	0x08012780

080062dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a6f      	ldr	r2, [pc, #444]	; (80064a8 <HAL_UART_MspInit+0x1cc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d11f      	bne.n	800632e <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	4a6e      	ldr	r2, [pc, #440]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 80062f4:	4b6d      	ldr	r3, [pc, #436]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f8:	f043 0310 	orr.w	r3, r3, #16
 80062fc:	6453      	str	r3, [r2, #68]	; 0x44
 80062fe:	4b6b      	ldr	r3, [pc, #428]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ROTATION_TX_Pin|ROTATION_RX_Pin;
 800630a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800630e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006310:	2302      	movs	r3, #2
 8006312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006314:	2301      	movs	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006318:	2303      	movs	r3, #3
 800631a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800631c:	2307      	movs	r3, #7
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4619      	mov	r1, r3
 8006326:	4862      	ldr	r0, [pc, #392]	; (80064b0 <HAL_UART_MspInit+0x1d4>)
 8006328:	f7fb fb18 	bl	800195c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800632c:	e0b8      	b.n	80064a0 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a60      	ldr	r2, [pc, #384]	; (80064b4 <HAL_UART_MspInit+0x1d8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d126      	bne.n	8006386 <HAL_UART_MspInit+0xaa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	4a5b      	ldr	r2, [pc, #364]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 800633e:	4b5b      	ldr	r3, [pc, #364]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006346:	6413      	str	r3, [r2, #64]	; 0x40
 8006348:	4b58      	ldr	r3, [pc, #352]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_DEBUG_TX_Pin|PC_DEBUG_RX_Pin;
 8006354:	230c      	movs	r3, #12
 8006356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006358:	2302      	movs	r3, #2
 800635a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800635c:	2301      	movs	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006360:	2303      	movs	r3, #3
 8006362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006364:	2307      	movs	r3, #7
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	4619      	mov	r1, r3
 800636e:	4850      	ldr	r0, [pc, #320]	; (80064b0 <HAL_UART_MspInit+0x1d4>)
 8006370:	f7fb faf4 	bl	800195c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006374:	2200      	movs	r2, #0
 8006376:	2100      	movs	r1, #0
 8006378:	2026      	movs	r0, #38	; 0x26
 800637a:	f7fa fe86 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800637e:	2026      	movs	r0, #38	; 0x26
 8006380:	f7fa fe9f 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 8006384:	e08c      	b.n	80064a0 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART6)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a4b      	ldr	r2, [pc, #300]	; (80064b8 <HAL_UART_MspInit+0x1dc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	f040 8087 	bne.w	80064a0 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	4a45      	ldr	r2, [pc, #276]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 8006398:	4b44      	ldr	r3, [pc, #272]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 800639a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639c:	f043 0320 	orr.w	r3, r3, #32
 80063a0:	6453      	str	r3, [r2, #68]	; 0x44
 80063a2:	4b42      	ldr	r3, [pc, #264]	; (80064ac <HAL_UART_MspInit+0x1d0>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	60bb      	str	r3, [r7, #8]
 80063ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TFMini_TX_Pin|TFMini_RX_Pin;
 80063ae:	23c0      	movs	r3, #192	; 0xc0
 80063b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b2:	2302      	movs	r3, #2
 80063b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063b6:	2301      	movs	r3, #1
 80063b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063ba:	2303      	movs	r3, #3
 80063bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80063be:	2308      	movs	r3, #8
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063c2:	f107 0314 	add.w	r3, r7, #20
 80063c6:	4619      	mov	r1, r3
 80063c8:	483c      	ldr	r0, [pc, #240]	; (80064bc <HAL_UART_MspInit+0x1e0>)
 80063ca:	f7fb fac7 	bl	800195c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80063ce:	4b3c      	ldr	r3, [pc, #240]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063d0:	4a3c      	ldr	r2, [pc, #240]	; (80064c4 <HAL_UART_MspInit+0x1e8>)
 80063d2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80063d4:	4b3a      	ldr	r3, [pc, #232]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063d6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80063da:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063dc:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063de:	2200      	movs	r2, #0
 80063e0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063e2:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063e8:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ee:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063f0:	4b33      	ldr	r3, [pc, #204]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063f6:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80063fc:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 80063fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006402:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006404:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 8006406:	2200      	movs	r2, #0
 8006408:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800640a:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 800640c:	2200      	movs	r2, #0
 800640e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006410:	482b      	ldr	r0, [pc, #172]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 8006412:	f7fa fe9b 	bl	800114c <HAL_DMA_Init>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_UART_MspInit+0x148>
      _Error_Handler(__FILE__, __LINE__);
 800641c:	21c8      	movs	r1, #200	; 0xc8
 800641e:	482a      	ldr	r0, [pc, #168]	; (80064c8 <HAL_UART_MspInit+0x1ec>)
 8006420:	f7ff fc90 	bl	8005d44 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 8006428:	635a      	str	r2, [r3, #52]	; 0x34
 800642a:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <HAL_UART_MspInit+0x1e4>)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006430:	4b26      	ldr	r3, [pc, #152]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <HAL_UART_MspInit+0x1f4>)
 8006434:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006436:	4b25      	ldr	r3, [pc, #148]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006438:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800643c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800643e:	4b23      	ldr	r3, [pc, #140]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006440:	2240      	movs	r2, #64	; 0x40
 8006442:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006444:	4b21      	ldr	r3, [pc, #132]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006446:	2200      	movs	r2, #0
 8006448:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800644a:	4b20      	ldr	r3, [pc, #128]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 800644c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006450:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006452:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006454:	2200      	movs	r2, #0
 8006456:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006458:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800645e:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006460:	2200      	movs	r2, #0
 8006462:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006464:	4b19      	ldr	r3, [pc, #100]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006466:	2200      	movs	r2, #0
 8006468:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 800646c:	2200      	movs	r2, #0
 800646e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006470:	4816      	ldr	r0, [pc, #88]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006472:	f7fa fe6b 	bl	800114c <HAL_DMA_Init>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_UART_MspInit+0x1a8>
      _Error_Handler(__FILE__, __LINE__);
 800647c:	21da      	movs	r1, #218	; 0xda
 800647e:	4812      	ldr	r0, [pc, #72]	; (80064c8 <HAL_UART_MspInit+0x1ec>)
 8006480:	f7ff fc60 	bl	8005d44 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a11      	ldr	r2, [pc, #68]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
 800648a:	4a10      	ldr	r2, [pc, #64]	; (80064cc <HAL_UART_MspInit+0x1f0>)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006490:	2200      	movs	r2, #0
 8006492:	2100      	movs	r1, #0
 8006494:	2047      	movs	r0, #71	; 0x47
 8006496:	f7fa fdf8 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800649a:	2047      	movs	r0, #71	; 0x47
 800649c:	f7fa fe11 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 80064a0:	bf00      	nop
 80064a2:	3728      	adds	r7, #40	; 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40011000 	.word	0x40011000
 80064ac:	40023800 	.word	0x40023800
 80064b0:	40020000 	.word	0x40020000
 80064b4:	40004400 	.word	0x40004400
 80064b8:	40011400 	.word	0x40011400
 80064bc:	40020800 	.word	0x40020800
 80064c0:	20000b9c 	.word	0x20000b9c
 80064c4:	40026428 	.word	0x40026428
 80064c8:	08012780 	.word	0x08012780
 80064cc:	20000bfc 	.word	0x20000bfc
 80064d0:	400264a0 	.word	0x400264a0

080064d4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fcfe 	bl	8007ee6 <VL53L0X_get_offset_calibration_data_micro_meter>
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80064ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80064fc:	b5b0      	push	{r4, r5, r7, lr}
 80064fe:	b096      	sub	sp, #88	; 0x58
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006504:	2300      	movs	r3, #0
 8006506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800650a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800650e:	2b00      	cmp	r3, #0
 8006510:	d107      	bne.n	8006522 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006512:	2200      	movs	r2, #0
 8006514:	2188      	movs	r1, #136	; 0x88
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f005 f802 	bl	800b520 <VL53L0X_WrByte>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006530:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800653a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a9e      	ldr	r2, [pc, #632]	; (80067bc <VL53L0X_DataInit+0x2c0>)
 8006542:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a9d      	ldr	r2, [pc, #628]	; (80067c0 <VL53L0X_DataInit+0x2c4>)
 800654a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006554:	f107 0310 	add.w	r3, r7, #16
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fac2 	bl	8006ae4 <VL53L0X_GetDeviceParameters>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006566:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800656a:	2b00      	cmp	r3, #0
 800656c:	d112      	bne.n	8006594 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800656e:	2300      	movs	r3, #0
 8006570:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006572:	2300      	movs	r3, #0
 8006574:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f103 0410 	add.w	r4, r3, #16
 800657c:	f107 0510 	add.w	r5, r7, #16
 8006580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2264      	movs	r2, #100	; 0x64
 8006598:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f44f 7261 	mov.w	r2, #900	; 0x384
 80065a2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80065ac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80065b6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80065c2:	2201      	movs	r2, #1
 80065c4:	2180      	movs	r1, #128	; 0x80
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f004 ffaa 	bl	800b520 <VL53L0X_WrByte>
 80065cc:	4603      	mov	r3, r0
 80065ce:	461a      	mov	r2, r3
 80065d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065da:	2201      	movs	r2, #1
 80065dc:	21ff      	movs	r1, #255	; 0xff
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f004 ff9e 	bl	800b520 <VL53L0X_WrByte>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80065f2:	2200      	movs	r2, #0
 80065f4:	2100      	movs	r1, #0
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f004 ff92 	bl	800b520 <VL53L0X_WrByte>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461a      	mov	r2, r3
 8006600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006604:	4313      	orrs	r3, r2
 8006606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800660a:	f107 030f 	add.w	r3, r7, #15
 800660e:	461a      	mov	r2, r3
 8006610:	2191      	movs	r1, #145	; 0x91
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f005 f824 	bl	800b660 <VL53L0X_RdByte>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006620:	4313      	orrs	r3, r2
 8006622:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006626:	7bfa      	ldrb	r2, [r7, #15]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800662e:	2201      	movs	r2, #1
 8006630:	2100      	movs	r1, #0
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f004 ff74 	bl	800b520 <VL53L0X_WrByte>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006640:	4313      	orrs	r3, r2
 8006642:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006646:	2200      	movs	r2, #0
 8006648:	21ff      	movs	r1, #255	; 0xff
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f004 ff68 	bl	800b520 <VL53L0X_WrByte>
 8006650:	4603      	mov	r3, r0
 8006652:	461a      	mov	r2, r3
 8006654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006658:	4313      	orrs	r3, r2
 800665a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800665e:	2200      	movs	r2, #0
 8006660:	2180      	movs	r1, #128	; 0x80
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f004 ff5c 	bl	800b520 <VL53L0X_WrByte>
 8006668:	4603      	mov	r3, r0
 800666a:	461a      	mov	r2, r3
 800666c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006670:	4313      	orrs	r3, r2
 8006672:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006676:	2300      	movs	r3, #0
 8006678:	653b      	str	r3, [r7, #80]	; 0x50
 800667a:	e014      	b.n	80066a6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800667c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006680:	2b00      	cmp	r3, #0
 8006682:	d114      	bne.n	80066ae <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	2201      	movs	r2, #1
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fd83 	bl	8007198 <VL53L0X_SetLimitCheckEnable>
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800669a:	4313      	orrs	r3, r2
 800669c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80066a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a2:	3301      	adds	r3, #1
 80066a4:	653b      	str	r3, [r7, #80]	; 0x50
 80066a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	dde7      	ble.n	800667c <VL53L0X_DataInit+0x180>
 80066ac:	e000      	b.n	80066b0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80066ae:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80066b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80066b8:	2200      	movs	r2, #0
 80066ba:	2102      	movs	r1, #2
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fd6b 	bl	8007198 <VL53L0X_SetLimitCheckEnable>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80066c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80066d0:	2200      	movs	r2, #0
 80066d2:	2103      	movs	r1, #3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fd5f 	bl	8007198 <VL53L0X_SetLimitCheckEnable>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80066e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80066e8:	2200      	movs	r2, #0
 80066ea:	2104      	movs	r1, #4
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fd53 	bl	8007198 <VL53L0X_SetLimitCheckEnable>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80066f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d107      	bne.n	8006710 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006700:	2200      	movs	r2, #0
 8006702:	2105      	movs	r1, #5
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fd47 	bl	8007198 <VL53L0X_SetLimitCheckEnable>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006710:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006718:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800671c:	2100      	movs	r1, #0
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fdea 	bl	80072f8 <VL53L0X_SetLimitCheckValue>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800672a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800672e:	2b00      	cmp	r3, #0
 8006730:	d108      	bne.n	8006744 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006736:	2101      	movs	r1, #1
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fddd 	bl	80072f8 <VL53L0X_SetLimitCheckValue>
 800673e:	4603      	mov	r3, r0
 8006740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006744:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006748:	2b00      	cmp	r3, #0
 800674a:	d108      	bne.n	800675e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800674c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006750:	2102      	movs	r1, #2
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fdd0 	bl	80072f8 <VL53L0X_SetLimitCheckValue>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800675e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006762:	2b00      	cmp	r3, #0
 8006764:	d107      	bne.n	8006776 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006766:	2200      	movs	r2, #0
 8006768:	2103      	movs	r1, #3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fdc4 	bl	80072f8 <VL53L0X_SetLimitCheckValue>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006776:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10f      	bne.n	800679e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	22ff      	movs	r2, #255	; 0xff
 8006782:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006786:	22ff      	movs	r2, #255	; 0xff
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f004 fec8 	bl	800b520 <VL53L0X_WrByte>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800679e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d103      	bne.n	80067ae <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80067ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3758      	adds	r7, #88	; 0x58
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bdb0      	pop	{r4, r5, r7, pc}
 80067ba:	bf00      	nop
 80067bc:	00016b85 	.word	0x00016b85
 80067c0:	000970a4 	.word	0x000970a4

080067c4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80067c4:	b5b0      	push	{r4, r5, r7, lr}
 80067c6:	b09e      	sub	sp, #120	; 0x78
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80067d2:	f107 031c 	add.w	r3, r7, #28
 80067d6:	2240      	movs	r2, #64	; 0x40
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f00a fdad 	bl	801133a <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006800:	2101      	movs	r1, #1
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f002 fac5 	bl	8008d92 <VL53L0X_get_info_from_device>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006814:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800681c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006824:	2b01      	cmp	r3, #1
 8006826:	d80d      	bhi.n	8006844 <VL53L0X_StaticInit+0x80>
 8006828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800682c:	2b01      	cmp	r3, #1
 800682e:	d102      	bne.n	8006836 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006832:	2b20      	cmp	r3, #32
 8006834:	d806      	bhi.n	8006844 <VL53L0X_StaticInit+0x80>
 8006836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10e      	bne.n	800685c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800683e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006840:	2b0c      	cmp	r3, #12
 8006842:	d90b      	bls.n	800685c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006844:	f107 0218 	add.w	r2, r7, #24
 8006848:	f107 0314 	add.w	r3, r7, #20
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 fd44 	bl	80082dc <VL53L0X_perform_ref_spad_management>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800685a:	e009      	b.n	8006870 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800685c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006860:	461a      	mov	r2, r3
 8006862:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 ff45 	bl	80086f4 <VL53L0X_set_reference_spads>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006870:	4b94      	ldr	r3, [pc, #592]	; (8006ac4 <VL53L0X_StaticInit+0x300>)
 8006872:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006874:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10f      	bne.n	800689c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006886:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006894:	66bb      	str	r3, [r7, #104]	; 0x68
 8006896:	e001      	b.n	800689c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006898:	4b8a      	ldr	r3, [pc, #552]	; (8006ac4 <VL53L0X_StaticInit+0x300>)
 800689a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800689c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80068a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f003 fe16 	bl	800a4d8 <VL53L0X_load_tuning_settings>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80068b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80068ba:	2300      	movs	r3, #0
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	2304      	movs	r3, #4
 80068c0:	2200      	movs	r2, #0
 80068c2:	2100      	movs	r1, #0
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f93f 	bl	8007b48 <VL53L0X_SetGpioConfig>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d121      	bne.n	800691c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068d8:	2201      	movs	r2, #1
 80068da:	21ff      	movs	r1, #255	; 0xff
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f004 fe1f 	bl	800b520 <VL53L0X_WrByte>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80068e8:	f107 031a 	add.w	r3, r7, #26
 80068ec:	461a      	mov	r2, r3
 80068ee:	2184      	movs	r1, #132	; 0x84
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f004 fed6 	bl	800b6a2 <VL53L0X_RdWord>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80068fe:	4313      	orrs	r3, r2
 8006900:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006904:	2200      	movs	r2, #0
 8006906:	21ff      	movs	r1, #255	; 0xff
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f004 fe09 	bl	800b520 <VL53L0X_WrByte>
 800690e:	4603      	mov	r3, r0
 8006910:	461a      	mov	r2, r3
 8006912:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006916:	4313      	orrs	r3, r2
 8006918:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800691c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006924:	8b7b      	ldrh	r3, [r7, #26]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	461a      	mov	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006930:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006938:	f107 031c 	add.w	r3, r7, #28
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8d0 	bl	8006ae4 <VL53L0X_GetDeviceParameters>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800694a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800694e:	2b00      	cmp	r3, #0
 8006950:	d110      	bne.n	8006974 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006952:	f107 0319 	add.w	r3, r7, #25
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f9ae 	bl	8006cba <VL53L0X_GetFractionEnable>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006964:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006968:	2b00      	cmp	r3, #0
 800696a:	d103      	bne.n	8006974 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800696c:	7e7a      	ldrb	r2, [r7, #25]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006974:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10e      	bne.n	800699a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f103 0410 	add.w	r4, r3, #16
 8006982:	f107 051c 	add.w	r5, r7, #28
 8006986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800698a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800698c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800698e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006992:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800699a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d111      	bne.n	80069c6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80069a2:	f107 0319 	add.w	r3, r7, #25
 80069a6:	461a      	mov	r2, r3
 80069a8:	2101      	movs	r1, #1
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f004 fe58 	bl	800b660 <VL53L0X_RdByte>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80069b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80069be:	7e7a      	ldrb	r2, [r7, #25]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80069c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d107      	bne.n	80069de <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80069ce:	2200      	movs	r2, #0
 80069d0:	2100      	movs	r1, #0
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9e6 	bl	8006da4 <VL53L0X_SetSequenceStepEnable>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80069de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d107      	bne.n	80069f6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80069e6:	2200      	movs	r2, #0
 80069e8:	2102      	movs	r1, #2
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9da 	bl	8006da4 <VL53L0X_SetSequenceStepEnable>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80069f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2203      	movs	r2, #3
 8006a02:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006a0e:	f107 0313 	add.w	r3, r7, #19
 8006a12:	461a      	mov	r2, r3
 8006a14:	2100      	movs	r1, #0
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9ac 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006a2a:	7cfa      	ldrb	r2, [r7, #19]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006a3a:	f107 0313 	add.w	r3, r7, #19
 8006a3e:	461a      	mov	r2, r3
 8006a40:	2101      	movs	r1, #1
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f996 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006a56:	7cfa      	ldrb	r2, [r7, #19]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006a66:	f107 030c 	add.w	r3, r7, #12
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	2103      	movs	r1, #3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f002 ff10 	bl	8009894 <get_sequence_step_timeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006a92:	f107 030c 	add.w	r3, r7, #12
 8006a96:	461a      	mov	r2, r3
 8006a98:	2104      	movs	r1, #4
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f002 fefa 	bl	8009894 <get_sequence_step_timeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006aa6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ab6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3770      	adds	r7, #112	; 0x70
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000020 	.word	0x20000020

08006ac8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006ad0:	239d      	movs	r3, #157	; 0x9d
 8006ad2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8cc 	bl	8006c94 <VL53L0X_GetDeviceMode>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d107      	bne.n	8006b18 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fac6 	bl	80070a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d107      	bne.n	8006b3e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	3310      	adds	r3, #16
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fafc 	bl	8007132 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d107      	bne.n	8006b56 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fcc1 	bl	80064d4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d134      	bne.n	8006bc8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	e02a      	b.n	8006bba <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d12a      	bne.n	8006bc2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	b299      	uxth	r1, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3308      	adds	r3, #8
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fc1c 	bl	80073bc <VL53L0X_GetLimitCheckValue>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d117      	bne.n	8006bc6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fb83 	bl	80072b0 <VL53L0X_GetLimitCheckEnable>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b05      	cmp	r3, #5
 8006bbe:	ddd1      	ble.n	8006b64 <VL53L0X_GetDeviceParameters+0x80>
 8006bc0:	e002      	b.n	8006bc8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006bc6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d107      	bne.n	8006be0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	333c      	adds	r3, #60	; 0x3c
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fc7e 	bl	80074d8 <VL53L0X_GetWrapAroundCheckEnable>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d107      	bne.n	8006bf8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f895 	bl	8006d1e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2b15      	cmp	r3, #21
 8006c18:	d832      	bhi.n	8006c80 <VL53L0X_SetDeviceMode+0x7c>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <VL53L0X_SetDeviceMode+0x1c>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c79 	.word	0x08006c79
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c79 	.word	0x08006c79
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006c81 	.word	0x08006c81
 8006c38:	08006c81 	.word	0x08006c81
 8006c3c:	08006c81 	.word	0x08006c81
 8006c40:	08006c81 	.word	0x08006c81
 8006c44:	08006c81 	.word	0x08006c81
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c81 	.word	0x08006c81
 8006c64:	08006c81 	.word	0x08006c81
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c81 	.word	0x08006c81
 8006c70:	08006c79 	.word	0x08006c79
 8006c74:	08006c79 	.word	0x08006c79
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	741a      	strb	r2, [r3, #16]
		break;
 8006c7e:	e001      	b.n	8006c84 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006c80:	23f8      	movs	r3, #248	; 0xf8
 8006c82:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7c1a      	ldrb	r2, [r3, #16]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	2109      	movs	r1, #9
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f004 fcc7 	bl	800b660 <VL53L0X_RdByte>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f003 fa54 	bl	800a1b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f003 fb21 	bl	800a376 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
 8006d50:	4613      	mov	r3, r2
 8006d52:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006d58:	78ba      	ldrb	r2, [r7, #2]
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f002 ff6b 	bl	8009c3a <VL53L0X_set_vcsel_pulse_period>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006d86:	7afb      	ldrb	r3, [r7, #11]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f003 f9db 	bl	800a148 <VL53L0X_get_vcsel_pulse_period>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
 8006db0:	4613      	mov	r3, r2
 8006db2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006dc0:	f107 030f 	add.w	r3, r7, #15
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f004 fc49 	bl	800b660 <VL53L0X_RdByte>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d159      	bne.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8006dde:	78bb      	ldrb	r3, [r7, #2]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d12b      	bne.n	8006e3c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d825      	bhi.n	8006e36 <VL53L0X_SetSequenceStepEnable+0x92>
 8006dea:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df0:	08006e05 	.word	0x08006e05
 8006df4:	08006e0f 	.word	0x08006e0f
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	08006e23 	.word	0x08006e23
 8006e00:	08006e2d 	.word	0x08006e2d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006e04:	7dbb      	ldrb	r3, [r7, #22]
 8006e06:	f043 0310 	orr.w	r3, r3, #16
 8006e0a:	75bb      	strb	r3, [r7, #22]
				break;
 8006e0c:	e041      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006e0e:	7dbb      	ldrb	r3, [r7, #22]
 8006e10:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006e14:	75bb      	strb	r3, [r7, #22]
				break;
 8006e16:	e03c      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006e18:	7dbb      	ldrb	r3, [r7, #22]
 8006e1a:	f043 0304 	orr.w	r3, r3, #4
 8006e1e:	75bb      	strb	r3, [r7, #22]
				break;
 8006e20:	e037      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006e22:	7dbb      	ldrb	r3, [r7, #22]
 8006e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e28:	75bb      	strb	r3, [r7, #22]
				break;
 8006e2a:	e032      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006e2c:	7dbb      	ldrb	r3, [r7, #22]
 8006e2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e32:	75bb      	strb	r3, [r7, #22]
				break;
 8006e34:	e02d      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e36:	23fc      	movs	r3, #252	; 0xfc
 8006e38:	75fb      	strb	r3, [r7, #23]
 8006e3a:	e02a      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d825      	bhi.n	8006e8e <VL53L0X_SetSequenceStepEnable+0xea>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e67 	.word	0x08006e67
 8006e50:	08006e71 	.word	0x08006e71
 8006e54:	08006e7b 	.word	0x08006e7b
 8006e58:	08006e85 	.word	0x08006e85
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	f023 0310 	bic.w	r3, r3, #16
 8006e62:	75bb      	strb	r3, [r7, #22]
				break;
 8006e64:	e015      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006e66:	7dbb      	ldrb	r3, [r7, #22]
 8006e68:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006e6c:	75bb      	strb	r3, [r7, #22]
				break;
 8006e6e:	e010      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006e70:	7dbb      	ldrb	r3, [r7, #22]
 8006e72:	f023 0304 	bic.w	r3, r3, #4
 8006e76:	75bb      	strb	r3, [r7, #22]
				break;
 8006e78:	e00b      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006e7a:	7dbb      	ldrb	r3, [r7, #22]
 8006e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e80:	75bb      	strb	r3, [r7, #22]
				break;
 8006e82:	e006      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
 8006e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e8a:	75bb      	strb	r3, [r7, #22]
				break;
 8006e8c:	e001      	b.n	8006e92 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e8e:	23fc      	movs	r3, #252	; 0xfc
 8006e90:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	7dba      	ldrb	r2, [r7, #22]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d01e      	beq.n	8006ed8 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8006ea2:	7dbb      	ldrb	r3, [r7, #22]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f004 fb39 	bl	800b520 <VL53L0X_WrByte>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	7dba      	ldrb	r2, [r7, #22]
 8006ebe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006ed0:	6939      	ldr	r1, [r7, #16]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ff10 	bl	8006cf8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	607b      	str	r3, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	72fb      	strb	r3, [r7, #11]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d836      	bhi.n	8006f74 <sequence_step_enabled+0x90>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <sequence_step_enabled+0x28>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f21 	.word	0x08006f21
 8006f10:	08006f33 	.word	0x08006f33
 8006f14:	08006f45 	.word	0x08006f45
 8006f18:	08006f57 	.word	0x08006f57
 8006f1c:	08006f69 	.word	0x08006f69
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006f20:	7abb      	ldrb	r3, [r7, #10]
 8006f22:	111b      	asrs	r3, r3, #4
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	701a      	strb	r2, [r3, #0]
		break;
 8006f30:	e022      	b.n	8006f78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006f32:	7abb      	ldrb	r3, [r7, #10]
 8006f34:	10db      	asrs	r3, r3, #3
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	701a      	strb	r2, [r3, #0]
		break;
 8006f42:	e019      	b.n	8006f78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006f44:	7abb      	ldrb	r3, [r7, #10]
 8006f46:	109b      	asrs	r3, r3, #2
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	701a      	strb	r2, [r3, #0]
		break;
 8006f54:	e010      	b.n	8006f78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006f56:	7abb      	ldrb	r3, [r7, #10]
 8006f58:	119b      	asrs	r3, r3, #6
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	701a      	strb	r2, [r3, #0]
		break;
 8006f66:	e007      	b.n	8006f78 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006f68:	7abb      	ldrb	r3, [r7, #10]
 8006f6a:	09db      	lsrs	r3, r3, #7
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	701a      	strb	r2, [r3, #0]
		break;
 8006f72:	e001      	b.n	8006f78 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f74:	23fc      	movs	r3, #252	; 0xfc
 8006f76:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f9a:	f107 030e 	add.w	r3, r7, #14
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f004 fb5c 	bl	800b660 <VL53L0X_RdByte>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d107      	bne.n	8006fc4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006fb4:	7bba      	ldrb	r2, [r7, #14]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2100      	movs	r1, #0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff ff92 	bl	8006ee4 <sequence_step_enabled>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006fcc:	7bba      	ldrb	r2, [r7, #14]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff85 	bl	8006ee4 <sequence_step_enabled>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d108      	bne.n	8006ff8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006fe6:	7bba      	ldrb	r2, [r7, #14]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	3301      	adds	r3, #1
 8006fec:	2102      	movs	r1, #2
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff ff78 	bl	8006ee4 <sequence_step_enabled>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d108      	bne.n	8007012 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007000:	7bba      	ldrb	r2, [r7, #14]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	3303      	adds	r3, #3
 8007006:	2103      	movs	r1, #3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff ff6b 	bl	8006ee4 <sequence_step_enabled>
 800700e:	4603      	mov	r3, r0
 8007010:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d108      	bne.n	800702c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800701a:	7bba      	ldrb	r2, [r7, #14]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	3304      	adds	r3, #4
 8007020:	2104      	movs	r1, #4
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff ff5e 	bl	8006ee4 <sequence_step_enabled>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800702c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007046:	f107 030e 	add.w	r3, r7, #14
 800704a:	461a      	mov	r2, r3
 800704c:	21f8      	movs	r1, #248	; 0xf8
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f004 fb27 	bl	800b6a2 <VL53L0X_RdWord>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d112      	bne.n	8007086 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8007060:	89fb      	ldrh	r3, [r7, #14]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d006      	beq.n	8007074 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 8007066:	89fb      	ldrh	r3, [r7, #14]
 8007068:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	fb03 f302 	mul.w	r3, r3, r2
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	e001      	b.n	8007078 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	2104      	movs	r1, #4
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f004 fa93 	bl	800b5a8 <VL53L0X_WrDWord>
 8007082:	4603      	mov	r3, r0
 8007084:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007086:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007094:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80070ae:	f107 030c 	add.w	r3, r7, #12
 80070b2:	461a      	mov	r2, r3
 80070b4:	21f8      	movs	r1, #248	; 0xf8
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f004 faf3 	bl	800b6a2 <VL53L0X_RdWord>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80070c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d108      	bne.n	80070da <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80070c8:	f107 0308 	add.w	r3, r7, #8
 80070cc:	461a      	mov	r2, r3
 80070ce:	2104      	movs	r1, #4
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f004 fb07 	bl	800b6e4 <VL53L0X_RdDWord>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10c      	bne.n	80070fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80070e2:	89bb      	ldrh	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	89ba      	ldrh	r2, [r7, #12]
 80070ec:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7f1b      	ldrb	r3, [r3, #28]
 800711a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	7bba      	ldrb	r2, [r7, #14]
 8007120:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800713c:	2300      	movs	r3, #0
 800713e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007140:	f107 030e 	add.w	r3, r7, #14
 8007144:	461a      	mov	r2, r3
 8007146:	2120      	movs	r1, #32
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f004 faaa 	bl	800b6a2 <VL53L0X_RdWord>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007152:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d118      	bne.n	800718c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800715a:	89fb      	ldrh	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	771a      	strb	r2, [r3, #28]
 8007172:	e00b      	b.n	800718c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007174:	89fb      	ldrh	r3, [r7, #14]
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800718c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
 80071a4:	4613      	mov	r3, r2
 80071a6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80071b8:	887b      	ldrh	r3, [r7, #2]
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d902      	bls.n	80071c4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071be:	23fc      	movs	r3, #252	; 0xfc
 80071c0:	75fb      	strb	r3, [r7, #23]
 80071c2:	e05b      	b.n	800727c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80071c4:	787b      	ldrb	r3, [r7, #1]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80071d2:	2301      	movs	r3, #1
 80071d4:	73bb      	strb	r3, [r7, #14]
 80071d6:	e00a      	b.n	80071ee <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80071d8:	887b      	ldrh	r3, [r7, #2]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	330c      	adds	r3, #12
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80071ea:	2301      	movs	r3, #1
 80071ec:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80071ee:	887b      	ldrh	r3, [r7, #2]
 80071f0:	2b05      	cmp	r3, #5
 80071f2:	d841      	bhi.n	8007278 <VL53L0X_SetLimitCheckEnable+0xe0>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <VL53L0X_SetLimitCheckEnable+0x64>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	08007215 	.word	0x08007215
 8007200:	0800721f 	.word	0x0800721f
 8007204:	08007235 	.word	0x08007235
 8007208:	0800723f 	.word	0x0800723f
 800720c:	08007249 	.word	0x08007249
 8007210:	08007261 	.word	0x08007261

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7bfa      	ldrb	r2, [r7, #15]
 8007218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800721c:	e02e      	b.n	800727c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	2144      	movs	r1, #68	; 0x44
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f004 f99b 	bl	800b564 <VL53L0X_WrWord>
 800722e:	4603      	mov	r3, r0
 8007230:	75fb      	strb	r3, [r7, #23]

			break;
 8007232:	e023      	b.n	800727c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7bfa      	ldrb	r2, [r7, #15]
 8007238:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800723c:	e01e      	b.n	800727c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7bfa      	ldrb	r2, [r7, #15]
 8007242:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007246:	e019      	b.n	800727c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800724e:	7b7b      	ldrb	r3, [r7, #13]
 8007250:	22fe      	movs	r2, #254	; 0xfe
 8007252:	2160      	movs	r1, #96	; 0x60
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f004 f9c1 	bl	800b5dc <VL53L0X_UpdateByte>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800725e:	e00d      	b.n	800727c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007266:	7b7b      	ldrb	r3, [r7, #13]
 8007268:	22ef      	movs	r2, #239	; 0xef
 800726a:	2160      	movs	r1, #96	; 0x60
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f004 f9b5 	bl	800b5dc <VL53L0X_UpdateByte>
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007276:	e001      	b.n	800727c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007278:	23fc      	movs	r3, #252	; 0xfc
 800727a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800727c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10f      	bne.n	80072a4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007284:	787b      	ldrb	r3, [r7, #1]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4413      	add	r3, r2
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007296:	e005      	b.n	80072a4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007298:	887b      	ldrh	r3, [r7, #2]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	460b      	mov	r3, r1
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80072c2:	897b      	ldrh	r3, [r7, #10]
 80072c4:	2b05      	cmp	r3, #5
 80072c6:	d905      	bls.n	80072d4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072c8:	23fc      	movs	r3, #252	; 0xfc
 80072ca:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	e008      	b.n	80072e6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80072d4:	897b      	ldrh	r3, [r7, #10]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072de:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7dba      	ldrb	r2, [r7, #22]
 80072e4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
	...

080072f8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	460b      	mov	r3, r1
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800730a:	897b      	ldrh	r3, [r7, #10]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007314:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007316:	7dbb      	ldrb	r3, [r7, #22]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d107      	bne.n	800732c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800731c:	897b      	ldrh	r3, [r7, #10]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	330c      	adds	r3, #12
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	605a      	str	r2, [r3, #4]
 800732a:	e040      	b.n	80073ae <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800732c:	897b      	ldrh	r3, [r7, #10]
 800732e:	2b05      	cmp	r3, #5
 8007330:	d830      	bhi.n	8007394 <VL53L0X_SetLimitCheckValue+0x9c>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <VL53L0X_SetLimitCheckValue+0x40>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	08007351 	.word	0x08007351
 800733c:	08007359 	.word	0x08007359
 8007340:	0800736f 	.word	0x0800736f
 8007344:	08007377 	.word	0x08007377
 8007348:	0800737f 	.word	0x0800737f
 800734c:	0800737f 	.word	0x0800737f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007356:	e01f      	b.n	8007398 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	2144      	movs	r1, #68	; 0x44
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f004 f8fe 	bl	800b564 <VL53L0X_WrWord>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800736c:	e014      	b.n	8007398 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007374:	e010      	b.n	8007398 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800737c:	e00c      	b.n	8007398 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	2164      	movs	r1, #100	; 0x64
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f004 f8eb 	bl	800b564 <VL53L0X_WrWord>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007392:	e001      	b.n	8007398 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007394:	23fc      	movs	r3, #252	; 0xfc
 8007396:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007398:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d106      	bne.n	80073ae <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80073a0:	897b      	ldrh	r3, [r7, #10]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	330c      	adds	r3, #12
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop

080073bc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	460b      	mov	r3, r1
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80073d2:	897b      	ldrh	r3, [r7, #10]
 80073d4:	2b05      	cmp	r3, #5
 80073d6:	d847      	bhi.n	8007468 <VL53L0X_GetLimitCheckValue+0xac>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <VL53L0X_GetLimitCheckValue+0x24>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	080073f9 	.word	0x080073f9
 80073e4:	08007405 	.word	0x08007405
 80073e8:	0800742b 	.word	0x0800742b
 80073ec:	08007437 	.word	0x08007437
 80073f0:	08007443 	.word	0x08007443
 80073f4:	08007443 	.word	0x08007443

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	77bb      	strb	r3, [r7, #30]
		break;
 8007402:	e033      	b.n	800746c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007404:	f107 0316 	add.w	r3, r7, #22
 8007408:	461a      	mov	r2, r3
 800740a:	2144      	movs	r1, #68	; 0x44
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f004 f948 	bl	800b6a2 <VL53L0X_RdWord>
 8007412:	4603      	mov	r3, r0
 8007414:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007416:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d102      	bne.n	8007424 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800741e:	8afb      	ldrh	r3, [r7, #22]
 8007420:	025b      	lsls	r3, r3, #9
 8007422:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007424:	2301      	movs	r3, #1
 8007426:	77bb      	strb	r3, [r7, #30]
		break;
 8007428:	e020      	b.n	800746c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	77bb      	strb	r3, [r7, #30]
		break;
 8007434:	e01a      	b.n	800746c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	77bb      	strb	r3, [r7, #30]
		break;
 8007440:	e014      	b.n	800746c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007442:	f107 0316 	add.w	r3, r7, #22
 8007446:	461a      	mov	r2, r3
 8007448:	2164      	movs	r1, #100	; 0x64
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f004 f929 	bl	800b6a2 <VL53L0X_RdWord>
 8007450:	4603      	mov	r3, r0
 8007452:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800745c:	8afb      	ldrh	r3, [r7, #22]
 800745e:	025b      	lsls	r3, r3, #9
 8007460:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	77bb      	strb	r3, [r7, #30]
		break;
 8007466:	e001      	b.n	800746c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007468:	23fc      	movs	r3, #252	; 0xfc
 800746a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800746c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d12a      	bne.n	80074ca <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007474:	7fbb      	ldrb	r3, [r7, #30]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d124      	bne.n	80074c4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d110      	bne.n	80074a2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007480:	897b      	ldrh	r3, [r7, #10]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	330c      	adds	r3, #12
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007494:	897b      	ldrh	r3, [r7, #10]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80074a0:	e013      	b.n	80074ca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80074a8:	897b      	ldrh	r3, [r7, #10]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	330c      	adds	r3, #12
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80074b6:	897b      	ldrh	r3, [r7, #10]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80074c2:	e002      	b.n	80074ca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80074ca:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop

080074d8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80074e6:	f107 030e 	add.w	r3, r7, #14
 80074ea:	461a      	mov	r2, r3
 80074ec:	2101      	movs	r1, #1
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f004 f8b6 	bl	800b660 <VL53L0X_RdByte>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80074f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10e      	bne.n	800751e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007500:	7bba      	ldrb	r2, [r7, #14]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	b25b      	sxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	da03      	bge.n	8007518 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2201      	movs	r2, #1
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	e002      	b.n	800751e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800751e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007548:	f107 030e 	add.w	r3, r7, #14
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fba0 	bl	8006c94 <VL53L0X_GetDeviceMode>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d107      	bne.n	8007570 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f898 	bl	800769c <VL53L0X_StartMeasurement>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fb3d 	bl	8008bf8 <VL53L0X_measurement_poll_for_completion>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d103      	bne.n	8007598 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2203      	movs	r2, #3
 8007594:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80075b4:	2301      	movs	r3, #1
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f001 fadf 	bl	8008b7e <VL53L0X_perform_ref_calibration>
 80075c0:	4603      	mov	r3, r0
 80075c2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80075c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075dc:	2300      	movs	r3, #0
 80075de:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80075e6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80075e8:	7dbb      	ldrb	r3, [r7, #22]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d005      	beq.n	80075fa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80075ee:	7dbb      	ldrb	r3, [r7, #22]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d002      	beq.n	80075fa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80075f4:	7dbb      	ldrb	r3, [r7, #22]
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d147      	bne.n	800768a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80075fa:	f107 030c 	add.w	r3, r7, #12
 80075fe:	f107 0210 	add.w	r2, r7, #16
 8007602:	2101      	movs	r1, #1
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fbc1 	bl	8007d8c <VL53L0X_GetInterruptThresholds>
 800760a:	4603      	mov	r3, r0
 800760c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007614:	d803      	bhi.n	800761e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007616:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007618:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800761c:	d935      	bls.n	800768a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800761e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d131      	bne.n	800768a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800762c:	491a      	ldr	r1, [pc, #104]	; (8007698 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f002 ff52 	bl	800a4d8 <VL53L0X_load_tuning_settings>
 8007634:	4603      	mov	r3, r0
 8007636:	75fb      	strb	r3, [r7, #23]
 8007638:	e027      	b.n	800768a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800763a:	2204      	movs	r2, #4
 800763c:	21ff      	movs	r1, #255	; 0xff
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f003 ff6e 	bl	800b520 <VL53L0X_WrByte>
 8007644:	4603      	mov	r3, r0
 8007646:	461a      	mov	r2, r3
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	4313      	orrs	r3, r2
 800764c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800764e:	2200      	movs	r2, #0
 8007650:	2170      	movs	r1, #112	; 0x70
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f003 ff64 	bl	800b520 <VL53L0X_WrByte>
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	4313      	orrs	r3, r2
 8007660:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007662:	2200      	movs	r2, #0
 8007664:	21ff      	movs	r1, #255	; 0xff
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f003 ff5a 	bl	800b520 <VL53L0X_WrByte>
 800766c:	4603      	mov	r3, r0
 800766e:	461a      	mov	r2, r3
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	4313      	orrs	r3, r2
 8007674:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007676:	2200      	movs	r2, #0
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f003 ff50 	bl	800b520 <VL53L0X_WrByte>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	4313      	orrs	r3, r2
 8007688:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800768a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000114 	.word	0x20000114

0800769c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80076ac:	f107 030e 	add.w	r3, r7, #14
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff faee 	bl	8006c94 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80076b8:	2201      	movs	r2, #1
 80076ba:	2180      	movs	r1, #128	; 0x80
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f003 ff2f 	bl	800b520 <VL53L0X_WrByte>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80076c6:	2201      	movs	r2, #1
 80076c8:	21ff      	movs	r1, #255	; 0xff
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f003 ff28 	bl	800b520 <VL53L0X_WrByte>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80076d4:	2200      	movs	r2, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f003 ff21 	bl	800b520 <VL53L0X_WrByte>
 80076de:	4603      	mov	r3, r0
 80076e0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80076e8:	461a      	mov	r2, r3
 80076ea:	2191      	movs	r1, #145	; 0x91
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f003 ff17 	bl	800b520 <VL53L0X_WrByte>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80076f6:	2201      	movs	r2, #1
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f003 ff10 	bl	800b520 <VL53L0X_WrByte>
 8007700:	4603      	mov	r3, r0
 8007702:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007704:	2200      	movs	r2, #0
 8007706:	21ff      	movs	r1, #255	; 0xff
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f003 ff09 	bl	800b520 <VL53L0X_WrByte>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007712:	2200      	movs	r2, #0
 8007714:	2180      	movs	r1, #128	; 0x80
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f003 ff02 	bl	800b520 <VL53L0X_WrByte>
 800771c:	4603      	mov	r3, r0
 800771e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d037      	beq.n	8007796 <VL53L0X_StartMeasurement+0xfa>
 8007726:	2b03      	cmp	r3, #3
 8007728:	d04f      	beq.n	80077ca <VL53L0X_StartMeasurement+0x12e>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d167      	bne.n	80077fe <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800772e:	2201      	movs	r2, #1
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f003 fef4 	bl	800b520 <VL53L0X_WrByte>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d15d      	bne.n	8007804 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8007752:	f107 030d 	add.w	r3, r7, #13
 8007756:	461a      	mov	r2, r3
 8007758:	2100      	movs	r1, #0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f003 ff80 	bl	800b660 <VL53L0X_RdByte>
 8007760:	4603      	mov	r3, r0
 8007762:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	3301      	adds	r3, #1
 8007768:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800776a:	7b7a      	ldrb	r2, [r7, #13]
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4013      	ands	r3, r2
 8007770:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007772:	7bfa      	ldrb	r2, [r7, #15]
 8007774:	429a      	cmp	r2, r3
 8007776:	d107      	bne.n	8007788 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8007778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d103      	bne.n	8007788 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007786:	d3e1      	bcc.n	800774c <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800778e:	d339      	bcc.n	8007804 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007790:	23f9      	movs	r3, #249	; 0xf9
 8007792:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007794:	e036      	b.n	8007804 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d105      	bne.n	80077aa <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800779e:	2101      	movs	r1, #1
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff ff15 	bl	80075d0 <VL53L0X_CheckAndLoadInterruptSettings>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80077aa:	2202      	movs	r2, #2
 80077ac:	2100      	movs	r1, #0
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f003 feb6 	bl	800b520 <VL53L0X_WrByte>
 80077b4:	4603      	mov	r3, r0
 80077b6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80077b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d123      	bne.n	8007808 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2204      	movs	r2, #4
 80077c4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80077c8:	e01e      	b.n	8007808 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80077ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80077d2:	2101      	movs	r1, #1
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff fefb 	bl	80075d0 <VL53L0X_CheckAndLoadInterruptSettings>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80077de:	2204      	movs	r2, #4
 80077e0:	2100      	movs	r1, #0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f003 fe9c 	bl	800b520 <VL53L0X_WrByte>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80077ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2204      	movs	r2, #4
 80077f8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80077fc:	e006      	b.n	800780c <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80077fe:	23f8      	movs	r3, #248	; 0xf8
 8007800:	75fb      	strb	r3, [r7, #23]
 8007802:	e004      	b.n	800780e <VL53L0X_StartMeasurement+0x172>
		break;
 8007804:	bf00      	nop
 8007806:	e002      	b.n	800780e <VL53L0X_StartMeasurement+0x172>
		break;
 8007808:	bf00      	nop
 800780a:	e000      	b.n	800780e <VL53L0X_StartMeasurement+0x172>
		break;
 800780c:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800780e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800782e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b04      	cmp	r3, #4
 8007834:	d112      	bne.n	800785c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007836:	f107 0308 	add.w	r3, r7, #8
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fb1b 	bl	8007e78 <VL53L0X_GetInterruptMaskStatus>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d103      	bne.n	8007854 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	e01c      	b.n	800788e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e018      	b.n	800788e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800785c:	f107 030d 	add.w	r3, r7, #13
 8007860:	461a      	mov	r2, r3
 8007862:	2114      	movs	r1, #20
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f003 fefb 	bl	800b660 <VL53L0X_RdByte>
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800786e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007876:	7b7b      	ldrb	r3, [r7, #13]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2201      	movs	r2, #1
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	e002      	b.n	800788e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800789c:	b5b0      	push	{r4, r5, r7, lr}
 800789e:	b096      	sub	sp, #88	; 0x58
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80078ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80078b0:	230c      	movs	r3, #12
 80078b2:	2114      	movs	r1, #20
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f003 fe0a 	bl	800b4ce <VL53L0X_ReadMulti>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80078c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 80d2 	bne.w	8007a6e <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2200      	movs	r2, #0
 80078ce:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80078d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80078da:	b29b      	uxth	r3, r3
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4413      	add	r3, r2
 80078e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2200      	movs	r2, #0
 80078f0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80078f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007900:	b29b      	uxth	r3, r3
 8007902:	4413      	add	r3, r2
 8007904:	b29b      	uxth	r3, r3
 8007906:	025b      	lsls	r3, r3, #9
 8007908:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800790e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007910:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007914:	b29b      	uxth	r3, r3
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	b29a      	uxth	r2, r3
 800791a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800791e:	b29b      	uxth	r3, r3
 8007920:	4413      	add	r3, r2
 8007922:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800792a:	025b      	lsls	r3, r3, #9
 800792c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007932:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007936:	b29b      	uxth	r3, r3
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	b29a      	uxth	r2, r3
 800793c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007940:	b29b      	uxth	r3, r3
 8007942:	4413      	add	r3, r2
 8007944:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800794e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007950:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800795e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007966:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800796a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800796c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007970:	d047      	beq.n	8007a02 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007972:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007974:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007980:	4a58      	ldr	r2, [pc, #352]	; (8007ae4 <VL53L0X_GetRangingMeasurementData+0x248>)
 8007982:	fb82 1203 	smull	r1, r2, r2, r3
 8007986:	1192      	asrs	r2, r2, #6
 8007988:	17db      	asrs	r3, r3, #31
 800798a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800798c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7f1b      	ldrb	r3, [r3, #28]
 800799a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800799e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d02d      	beq.n	8007a02 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80079a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80079ac:	fb02 f303 	mul.w	r3, r2, r3
 80079b0:	121b      	asrs	r3, r3, #8
 80079b2:	461a      	mov	r2, r3
				if ((SignalRate
 80079b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d10d      	bne.n	80079d6 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 80079ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 80079c2:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80079c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80079ca:	e016      	b.n	80079fa <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 80079cc:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80079d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80079d4:	e011      	b.n	80079fa <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80079d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80079da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079dc:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80079e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079e2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80079ea:	121b      	asrs	r3, r3, #8
 80079ec:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80079ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80079f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80079fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80079fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007a02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007a0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007a16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	019b      	lsls	r3, r3, #6
 8007a1e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	75da      	strb	r2, [r3, #23]
 8007a24:	e006      	b.n	8007a34 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007a2c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2200      	movs	r2, #0
 8007a32:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007a34:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007a38:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007a3c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	4613      	mov	r3, r2
 8007a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f003 f9ec 	bl	800ae28 <VL53L0X_get_pal_range_status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	461a      	mov	r2, r3
 8007a54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007a5e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007a66:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a6e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d12f      	bne.n	8007ad6 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f107 040c 	add.w	r4, r7, #12
 8007a7c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007a90:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007a9e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007aa4:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007aaa:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007ab0:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007ab6:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007abc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007ac6:	f107 050c 	add.w	r5, r7, #12
 8007aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ad6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3750      	adds	r7, #80	; 0x50
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	10624dd3 	.word	0x10624dd3

08007ae8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007af6:	2100      	movs	r1, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff f883 	bl	8006c04 <VL53L0X_SetDeviceMode>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fd16 	bl	800753c <VL53L0X_PerformSingleMeasurement>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff febc 	bl	800789c <VL53L0X_GetRangingMeasurementData>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d105      	bne.n	8007b3c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007b30:	2100      	movs	r1, #0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f960 	bl	8007df8 <VL53L0X_ClearInterruptMask>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	4608      	mov	r0, r1
 8007b52:	4611      	mov	r1, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	70fb      	strb	r3, [r7, #3]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70bb      	strb	r3, [r7, #2]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007b6c:	23f6      	movs	r3, #246	; 0xf6
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	e105      	b.n	8007d7e <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007b72:	78bb      	ldrb	r3, [r7, #2]
 8007b74:	2b14      	cmp	r3, #20
 8007b76:	d110      	bne.n	8007b9a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007b78:	7e3b      	ldrb	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007b7e:	2310      	movs	r3, #16
 8007b80:	73bb      	strb	r3, [r7, #14]
 8007b82:	e001      	b.n	8007b88 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2184      	movs	r1, #132	; 0x84
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f003 fcc6 	bl	800b520 <VL53L0X_WrByte>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	e0f1      	b.n	8007d7e <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007b9a:	78bb      	ldrb	r3, [r7, #2]
 8007b9c:	2b15      	cmp	r3, #21
 8007b9e:	f040 8097 	bne.w	8007cd0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	21ff      	movs	r1, #255	; 0xff
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f003 fcba 	bl	800b520 <VL53L0X_WrByte>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f003 fcb0 	bl	800b520 <VL53L0X_WrByte>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007bca:	2200      	movs	r2, #0
 8007bcc:	21ff      	movs	r1, #255	; 0xff
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f003 fca6 	bl	800b520 <VL53L0X_WrByte>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007bde:	2201      	movs	r2, #1
 8007be0:	2180      	movs	r1, #128	; 0x80
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f003 fc9c 	bl	800b520 <VL53L0X_WrByte>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	2185      	movs	r1, #133	; 0x85
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f003 fc92 	bl	800b520 <VL53L0X_WrByte>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007c06:	2204      	movs	r2, #4
 8007c08:	21ff      	movs	r1, #255	; 0xff
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f003 fc88 	bl	800b520 <VL53L0X_WrByte>
 8007c10:	4603      	mov	r3, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	21cd      	movs	r1, #205	; 0xcd
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f003 fc7e 	bl	800b520 <VL53L0X_WrByte>
 8007c24:	4603      	mov	r3, r0
 8007c26:	461a      	mov	r2, r3
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007c2e:	2211      	movs	r2, #17
 8007c30:	21cc      	movs	r1, #204	; 0xcc
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f003 fc74 	bl	800b520 <VL53L0X_WrByte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007c42:	2207      	movs	r2, #7
 8007c44:	21ff      	movs	r1, #255	; 0xff
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f003 fc6a 	bl	800b520 <VL53L0X_WrByte>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007c56:	2200      	movs	r2, #0
 8007c58:	21be      	movs	r1, #190	; 0xbe
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f003 fc60 	bl	800b520 <VL53L0X_WrByte>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	21ff      	movs	r1, #255	; 0xff
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f003 fc56 	bl	800b520 <VL53L0X_WrByte>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007c7e:	2209      	movs	r2, #9
 8007c80:	21cc      	movs	r1, #204	; 0xcc
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f003 fc4c 	bl	800b520 <VL53L0X_WrByte>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007c92:	2200      	movs	r2, #0
 8007c94:	21ff      	movs	r1, #255	; 0xff
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f003 fc42 	bl	800b520 <VL53L0X_WrByte>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	21ff      	movs	r1, #255	; 0xff
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f003 fc38 	bl	800b520 <VL53L0X_WrByte>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f003 fc2e 	bl	800b520 <VL53L0X_WrByte>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	73fb      	strb	r3, [r7, #15]
 8007cce:	e056      	b.n	8007d7e <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d120      	bne.n	8007d1a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8007cd8:	787b      	ldrb	r3, [r7, #1]
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d81b      	bhi.n	8007d16 <VL53L0X_SetGpioConfig+0x1ce>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <VL53L0X_SetGpioConfig+0x19c>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007cf9 	.word	0x08007cf9
 8007ce8:	08007cff 	.word	0x08007cff
 8007cec:	08007d05 	.word	0x08007d05
 8007cf0:	08007d0b 	.word	0x08007d0b
 8007cf4:	08007d11 	.word	0x08007d11
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73bb      	strb	r3, [r7, #14]
				break;
 8007cfc:	e00d      	b.n	8007d1a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	73bb      	strb	r3, [r7, #14]
				break;
 8007d02:	e00a      	b.n	8007d1a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007d04:	2302      	movs	r3, #2
 8007d06:	73bb      	strb	r3, [r7, #14]
				break;
 8007d08:	e007      	b.n	8007d1a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	73bb      	strb	r3, [r7, #14]
				break;
 8007d0e:	e004      	b.n	8007d1a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007d10:	2304      	movs	r3, #4
 8007d12:	73bb      	strb	r3, [r7, #14]
				break;
 8007d14:	e001      	b.n	8007d1a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8007d16:	23f5      	movs	r3, #245	; 0xf5
 8007d18:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d107      	bne.n	8007d32 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	461a      	mov	r2, r3
 8007d26:	210a      	movs	r1, #10
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f003 fbf9 	bl	800b520 <VL53L0X_WrByte>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10f      	bne.n	8007d5a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007d3a:	7e3b      	ldrb	r3, [r7, #24]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73bb      	strb	r3, [r7, #14]
 8007d44:	e001      	b.n	8007d4a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8007d46:	2310      	movs	r3, #16
 8007d48:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	22ef      	movs	r2, #239	; 0xef
 8007d4e:	2184      	movs	r1, #132	; 0x84
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f003 fc43 	bl	800b5dc <VL53L0X_UpdateByte>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d103      	bne.n	8007d6a <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	787a      	ldrb	r2, [r7, #1]
 8007d66:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d105      	bne.n	8007d7e <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f83f 	bl	8007df8 <VL53L0X_ClearInterruptMask>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop

08007d8c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007da0:	f107 0314 	add.w	r3, r7, #20
 8007da4:	461a      	mov	r2, r3
 8007da6:	210e      	movs	r1, #14
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f003 fc7a 	bl	800b6a2 <VL53L0X_RdWord>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007db2:	8abb      	ldrh	r3, [r7, #20]
 8007db4:	045b      	lsls	r3, r3, #17
 8007db6:	461a      	mov	r2, r3
 8007db8:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007dba:	4013      	ands	r3, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10f      	bne.n	8007de8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007dc8:	f107 0314 	add.w	r3, r7, #20
 8007dcc:	461a      	mov	r2, r3
 8007dce:	210c      	movs	r1, #12
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f003 fc66 	bl	800b6a2 <VL53L0X_RdWord>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007dda:	8abb      	ldrh	r3, [r7, #20]
 8007ddc:	045b      	lsls	r3, r3, #17
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007de2:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	1ffe0000 	.word	0x1ffe0000

08007df8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	210b      	movs	r1, #11
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f003 fb86 	bl	800b520 <VL53L0X_WrByte>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007e18:	2200      	movs	r2, #0
 8007e1a:	210b      	movs	r1, #11
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f003 fb7f 	bl	800b520 <VL53L0X_WrByte>
 8007e22:	4603      	mov	r3, r0
 8007e24:	461a      	mov	r2, r3
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007e2c:	f107 030d 	add.w	r3, r7, #13
 8007e30:	461a      	mov	r2, r3
 8007e32:	2113      	movs	r1, #19
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f003 fc13 	bl	800b660 <VL53L0X_RdByte>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	3301      	adds	r3, #1
 8007e48:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007e4a:	7b7b      	ldrb	r3, [r7, #13]
 8007e4c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d006      	beq.n	8007e62 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d803      	bhi.n	8007e62 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0d3      	beq.n	8007e0a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007e68:	23f4      	movs	r3, #244	; 0xf4
 8007e6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007e86:	f107 030e 	add.w	r3, r7, #14
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	2113      	movs	r1, #19
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f003 fbe6 	bl	800b660 <VL53L0X_RdByte>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	f003 0207 	and.w	r2, r3, #7
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	f003 0318 	and.w	r3, r3, #24
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007eac:	23fa      	movs	r3, #250	; 0xfa
 8007eae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	68b9      	ldr	r1, [r7, #8]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fa03 	bl	80082dc <VL53L0X_perform_ref_spad_management>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007ef4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007ef8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007efe:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007f00:	f107 0308 	add.w	r3, r7, #8
 8007f04:	461a      	mov	r2, r3
 8007f06:	2128      	movs	r1, #40	; 0x28
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f003 fbca 	bl	800b6a2 <VL53L0X_RdWord>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d11e      	bne.n	8007f58 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007f24:	893b      	ldrh	r3, [r7, #8]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	dd0b      	ble.n	8007f48 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007f30:	893a      	ldrh	r2, [r7, #8]
 8007f32:	897b      	ldrh	r3, [r7, #10]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	b21b      	sxth	r3, r3
 8007f3a:	461a      	mov	r2, r3
					* 250;
 8007f3c:	23fa      	movs	r3, #250	; 0xfa
 8007f3e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e007      	b.n	8007f58 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007f48:	893b      	ldrh	r3, [r7, #8]
 8007f4a:	b21b      	sxth	r3, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	23fa      	movs	r3, #250	; 0xfa
 8007f50:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b08b      	sub	sp, #44	; 0x2c
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007f72:	2308      	movs	r3, #8
 8007f74:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f94:	69b9      	ldr	r1, [r7, #24]
 8007f96:	fb01 f202 	mul.w	r2, r1, r2
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	e030      	b.n	8008006 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	4413      	add	r3, r2
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d11e      	bne.n	8007ff8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007fba:	7ffa      	ldrb	r2, [r7, #31]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	fa42 f303 	asr.w	r3, r2, r3
 8007fc2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007fc8:	e016      	b.n	8007ff8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007fca:	7ffb      	ldrb	r3, [r7, #31]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <get_next_good_spad+0x88>
				success = 1;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	fb02 f203 	mul.w	r2, r2, r3
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	601a      	str	r2, [r3, #0]
				break;
 8007fea:	e009      	b.n	8008000 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007fec:	7ffb      	ldrb	r3, [r7, #31]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007ff8:	6a3a      	ldr	r2, [r7, #32]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d3e4      	bcc.n	8007fca <get_next_good_spad+0x66>
				coarseIndex++) {
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	3301      	adds	r3, #1
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	d202      	bcs.n	8008014 <get_next_good_spad+0xb0>
 800800e:	7fbb      	ldrb	r3, [r7, #30]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0c7      	beq.n	8007fa4 <get_next_good_spad+0x40>
		}
	}
}
 8008014:	bf00      	nop
 8008016:	372c      	adds	r7, #44	; 0x2c
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	099b      	lsrs	r3, r3, #6
 8008030:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008032:	4a07      	ldr	r2, [pc, #28]	; (8008050 <is_aperture+0x30>)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <is_aperture+0x22>
		isAperture = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	200002cc 	.word	0x200002cc

08008054 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008054:	b480      	push	{r7}
 8008056:	b089      	sub	sp, #36	; 0x24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008060:	2300      	movs	r3, #0
 8008062:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008064:	2308      	movs	r3, #8
 8008066:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	fbb3 f2f2 	udiv	r2, r3, r2
 800807a:	69b9      	ldr	r1, [r7, #24]
 800807c:	fb01 f202 	mul.w	r2, r1, r2
 8008080:	1a9b      	subs	r3, r3, r2
 8008082:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800808c:	23ce      	movs	r3, #206	; 0xce
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e010      	b.n	80080b4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	4413      	add	r3, r2
 8008098:	68f9      	ldr	r1, [r7, #12]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	440a      	add	r2, r1
 800809e:	7812      	ldrb	r2, [r2, #0]
 80080a0:	b251      	sxtb	r1, r2
 80080a2:	2001      	movs	r0, #1
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	fa00 f202 	lsl.w	r2, r0, r2
 80080aa:	b252      	sxtb	r2, r2
 80080ac:	430a      	orrs	r2, r1
 80080ae:	b252      	sxtb	r2, r2
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]

	return status;
 80080b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3724      	adds	r7, #36	; 0x24
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80080ce:	2306      	movs	r3, #6
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	21b0      	movs	r1, #176	; 0xb0
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f003 f9cf 	bl	800b478 <VL53L0X_WriteMulti>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80080f4:	2306      	movs	r3, #6
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	21b0      	movs	r1, #176	; 0xb0
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f003 f9e7 	bl	800b4ce <VL53L0X_ReadMulti>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008104:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08c      	sub	sp, #48	; 0x30
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	460b      	mov	r3, r1
 800811e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008120:	2300      	movs	r3, #0
 8008122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008128:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800812a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800812c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800812e:	2300      	movs	r3, #0
 8008130:	62bb      	str	r3, [r7, #40]	; 0x28
 8008132:	e02b      	b.n	800818c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008134:	f107 031c 	add.w	r3, r7, #28
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff ff11 	bl	8007f64 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d103      	bne.n	8008152 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800814a:	23ce      	movs	r3, #206	; 0xce
 800814c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008150:	e020      	b.n	8008194 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	461a      	mov	r2, r3
 8008156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008158:	4413      	add	r3, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff ff60 	bl	8008020 <is_aperture>
 8008160:	4603      	mov	r3, r0
 8008162:	461a      	mov	r2, r3
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	4293      	cmp	r3, r2
 8008168:	d003      	beq.n	8008172 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800816a:	23ce      	movs	r3, #206	; 0xce
 800816c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008170:	e010      	b.n	8008194 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008176:	6a3a      	ldr	r2, [r7, #32]
 8008178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800817a:	6838      	ldr	r0, [r7, #0]
 800817c:	f7ff ff6a 	bl	8008054 <enable_spad_bit>
		currentSpad++;
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	3301      	adds	r3, #1
 8008184:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	3301      	adds	r3, #1
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
 800818c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008190:	429a      	cmp	r2, r3
 8008192:	d3cf      	bcc.n	8008134 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800819a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ff8d 	bl	80080c4 <set_ref_spad_map>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80081b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d121      	bne.n	80081fc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80081b8:	f107 0314 	add.w	r3, r7, #20
 80081bc:	4619      	mov	r1, r3
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff ff93 	bl	80080ea <get_ref_spad_map>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80081ce:	e011      	b.n	80081f4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	4413      	add	r3, r2
 80081d6:	781a      	ldrb	r2, [r3, #0]
 80081d8:	f107 0114 	add.w	r1, r7, #20
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	440b      	add	r3, r1
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d003      	beq.n	80081ee <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80081e6:	23ce      	movs	r3, #206	; 0xce
 80081e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80081ec:	e006      	b.n	80081fc <enable_ref_spads+0xec>
			}
			i++;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	3301      	adds	r3, #1
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80081f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d3e9      	bcc.n	80081d0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80081fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008200:	4618      	mov	r0, r3
 8008202:	3730      	adds	r7, #48	; 0x30
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008212:	2300      	movs	r3, #0
 8008214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008228:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800822c:	2b00      	cmp	r3, #0
 800822e:	d107      	bne.n	8008240 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008230:	22c0      	movs	r2, #192	; 0xc0
 8008232:	2101      	movs	r1, #1
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f003 f973 	bl	800b520 <VL53L0X_WrByte>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008244:	2b00      	cmp	r3, #0
 8008246:	d108      	bne.n	800825a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fc4a 	bl	8007ae8 <VL53L0X_PerformSingleRangingMeasurement>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800825a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800825e:	2b00      	cmp	r3, #0
 8008260:	d107      	bne.n	8008272 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008262:	2201      	movs	r2, #1
 8008264:	21ff      	movs	r1, #255	; 0xff
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f003 f95a 	bl	800b520 <VL53L0X_WrByte>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008272:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008276:	2b00      	cmp	r3, #0
 8008278:	d107      	bne.n	800828a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	21b6      	movs	r1, #182	; 0xb6
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f003 fa0f 	bl	800b6a2 <VL53L0X_RdWord>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800828a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800828e:	2b00      	cmp	r3, #0
 8008290:	d107      	bne.n	80082a2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008292:	2200      	movs	r2, #0
 8008294:	21ff      	movs	r1, #255	; 0xff
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f003 f942 	bl	800b520 <VL53L0X_WrByte>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80082a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d112      	bne.n	80082d0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80082aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082ae:	461a      	mov	r2, r3
 80082b0:	2101      	movs	r1, #1
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f003 f934 	bl	800b520 <VL53L0X_WrByte>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80082be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d104      	bne.n	80082d0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80082d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3728      	adds	r7, #40	; 0x28
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b09d      	sub	sp, #116	; 0x74
 80082e0:	af06      	add	r7, sp, #24
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80082ee:	23b4      	movs	r3, #180	; 0xb4
 80082f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80082f4:	2303      	movs	r3, #3
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80082f8:	232c      	movs	r3, #44	; 0x2c
 80082fa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008308:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800830c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008316:	2306      	movs	r3, #6
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008340:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008342:	2300      	movs	r3, #0
 8008344:	64bb      	str	r3, [r7, #72]	; 0x48
 8008346:	e009      	b.n	800835c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800834c:	4413      	add	r3, r2
 800834e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008352:	2200      	movs	r2, #0
 8008354:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008358:	3301      	adds	r3, #1
 800835a:	64bb      	str	r3, [r7, #72]	; 0x48
 800835c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	429a      	cmp	r2, r3
 8008362:	d3f1      	bcc.n	8008348 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008364:	2201      	movs	r2, #1
 8008366:	21ff      	movs	r1, #255	; 0xff
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f003 f8d9 	bl	800b520 <VL53L0X_WrByte>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008374:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800837c:	2200      	movs	r2, #0
 800837e:	214f      	movs	r1, #79	; 0x4f
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f003 f8cd 	bl	800b520 <VL53L0X_WrByte>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800838c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008390:	2b00      	cmp	r3, #0
 8008392:	d107      	bne.n	80083a4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008394:	222c      	movs	r2, #44	; 0x2c
 8008396:	214e      	movs	r1, #78	; 0x4e
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f003 f8c1 	bl	800b520 <VL53L0X_WrByte>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80083a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d107      	bne.n	80083bc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80083ac:	2200      	movs	r2, #0
 80083ae:	21ff      	movs	r1, #255	; 0xff
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f003 f8b5 	bl	800b520 <VL53L0X_WrByte>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80083bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80083c4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80083c8:	461a      	mov	r2, r3
 80083ca:	21b6      	movs	r1, #182	; 0xb6
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f003 f8a7 	bl	800b520 <VL53L0X_WrByte>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80083d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d107      	bne.n	80083f0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80083e0:	2200      	movs	r2, #0
 80083e2:	2180      	movs	r1, #128	; 0x80
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f003 f89b 	bl	800b520 <VL53L0X_WrByte>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80083f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80083f8:	f107 0210 	add.w	r2, r7, #16
 80083fc:	f107 0111 	add.w	r1, r7, #17
 8008400:	2300      	movs	r3, #0
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 fbbb 	bl	8008b7e <VL53L0X_perform_ref_calibration>
 8008408:	4603      	mov	r3, r0
 800840a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800840e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008412:	2b00      	cmp	r3, #0
 8008414:	d121      	bne.n	800845a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800841a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800841c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008424:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008432:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008436:	f107 0218 	add.w	r2, r7, #24
 800843a:	9204      	str	r2, [sp, #16]
 800843c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800843e:	9203      	str	r2, [sp, #12]
 8008440:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008442:	9202      	str	r2, [sp, #8]
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4623      	mov	r3, r4
 800844c:	4602      	mov	r2, r0
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fe5e 	bl	8008110 <enable_ref_spads>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800845a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800845e:	2b00      	cmp	r3, #0
 8008460:	d174      	bne.n	800854c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008466:	f107 0312 	add.w	r3, r7, #18
 800846a:	4619      	mov	r1, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7ff fecb 	bl	8008208 <perform_ref_signal_measurement>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008478:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800847c:	2b00      	cmp	r3, #0
 800847e:	d161      	bne.n	8008544 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008480:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008482:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008484:	429a      	cmp	r2, r3
 8008486:	d25d      	bcs.n	8008544 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008488:	2300      	movs	r3, #0
 800848a:	64bb      	str	r3, [r7, #72]	; 0x48
 800848c:	e009      	b.n	80084a2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008492:	4413      	add	r3, r2
 8008494:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800849c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800849e:	3301      	adds	r3, #1
 80084a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d3f1      	bcc.n	800848e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80084aa:	e002      	b.n	80084b2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80084ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ae:	3301      	adds	r3, #1
 80084b0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80084b2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80084b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b8:	4413      	add	r3, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff fdb0 	bl	8008020 <is_aperture>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d103      	bne.n	80084ce <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80084c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d3ee      	bcc.n	80084ac <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80084ce:	2301      	movs	r3, #1
 80084d0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80084d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80084e2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80084e6:	f107 0218 	add.w	r2, r7, #24
 80084ea:	9204      	str	r2, [sp, #16]
 80084ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ee:	9203      	str	r2, [sp, #12]
 80084f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084f2:	9202      	str	r2, [sp, #8]
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4623      	mov	r3, r4
 80084fc:	4602      	mov	r2, r0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff fe06 	bl	8008110 <enable_ref_spads>
 8008504:	4603      	mov	r3, r0
 8008506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800850a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800850e:	2b00      	cmp	r3, #0
 8008510:	d11b      	bne.n	800854a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008516:	f107 0312 	add.w	r3, r7, #18
 800851a:	4619      	mov	r1, r3
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff fe73 	bl	8008208 <perform_ref_signal_measurement>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008528:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10c      	bne.n	800854a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008530:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008532:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008534:	429a      	cmp	r2, r3
 8008536:	d208      	bcs.n	800854a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008538:	2301      	movs	r3, #1
 800853a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008542:	e002      	b.n	800854a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008548:	e000      	b.n	800854c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800854a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800854c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008550:	2b00      	cmp	r3, #0
 8008552:	f040 80af 	bne.w	80086b4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008556:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008558:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800855a:	429a      	cmp	r2, r3
 800855c:	f240 80aa 	bls.w	80086b4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008570:	f107 031c 	add.w	r3, r7, #28
 8008574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008576:	4618      	mov	r0, r3
 8008578:	f008 fed4 	bl	8011324 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800857c:	8a7b      	ldrh	r3, [r7, #18]
 800857e:	461a      	mov	r2, r3
 8008580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfb8      	it	lt
 8008588:	425b      	neglt	r3, r3
 800858a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008592:	e086      	b.n	80086a2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800859a:	f107 0314 	add.w	r3, r7, #20
 800859e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085a2:	f7ff fcdf 	bl	8007f64 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ac:	d103      	bne.n	80085b6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80085ae:	23ce      	movs	r3, #206	; 0xce
 80085b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80085b4:	e07e      	b.n	80086b4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80085b6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4413      	add	r3, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff fd2e 	bl	8008020 <is_aperture>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d003      	beq.n	80085d6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80085d4:	e06e      	b.n	80086b4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80085d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d8:	3301      	adds	r3, #1
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80085e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fd32 	bl	8008054 <enable_spad_bit>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80085f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10c      	bne.n	8008618 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80085fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008600:	3301      	adds	r3, #1
 8008602:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800860a:	4619      	mov	r1, r3
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff fd59 	bl	80080c4 <set_ref_spad_map>
 8008612:	4603      	mov	r3, r0
 8008614:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008618:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800861c:	2b00      	cmp	r3, #0
 800861e:	d146      	bne.n	80086ae <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008620:	f107 0312 	add.w	r3, r7, #18
 8008624:	4619      	mov	r1, r3
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f7ff fdee 	bl	8008208 <perform_ref_signal_measurement>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008632:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008636:	2b00      	cmp	r3, #0
 8008638:	d13b      	bne.n	80086b2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800863a:	8a7b      	ldrh	r3, [r7, #18]
 800863c:	461a      	mov	r2, r3
 800863e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	bfb8      	it	lt
 8008646:	425b      	neglt	r3, r3
 8008648:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800864a:	8a7b      	ldrh	r3, [r7, #18]
 800864c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800864e:	429a      	cmp	r2, r3
 8008650:	d21c      	bcs.n	800868c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008656:	429a      	cmp	r2, r3
 8008658:	d914      	bls.n	8008684 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800865a:	f107 031c 	add.w	r3, r7, #28
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff fd2f 	bl	80080c4 <set_ref_spad_map>
 8008666:	4603      	mov	r3, r0
 8008668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008672:	f107 011c 	add.w	r1, r7, #28
 8008676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008678:	4618      	mov	r0, r3
 800867a:	f008 fe53 	bl	8011324 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800867e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008680:	3b01      	subs	r3, #1
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868a:	e00a      	b.n	80086a2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008696:	f107 031c 	add.w	r3, r7, #28
 800869a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869c:	4618      	mov	r0, r3
 800869e:	f008 fe41 	bl	8011324 <memcpy>
		while (!complete) {
 80086a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f43f af74 	beq.w	8008594 <VL53L0X_perform_ref_spad_management+0x2b8>
 80086ac:	e002      	b.n	80086b4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80086ae:	bf00      	nop
 80086b0:	e000      	b.n	80086b4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80086b2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80086b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d115      	bne.n	80086e8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086c0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80086c8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	781a      	ldrb	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80086e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	375c      	adds	r7, #92	; 0x5c
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd90      	pop	{r4, r7, pc}

080086f4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b093      	sub	sp, #76	; 0x4c
 80086f8:	af06      	add	r7, sp, #24
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008702:	2300      	movs	r3, #0
 8008704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800870c:	23b4      	movs	r3, #180	; 0xb4
 800870e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008712:	2306      	movs	r3, #6
 8008714:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008716:	232c      	movs	r3, #44	; 0x2c
 8008718:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800871a:	2201      	movs	r2, #1
 800871c:	21ff      	movs	r1, #255	; 0xff
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f002 fefe 	bl	800b520 <VL53L0X_WrByte>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800872a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800872e:	2b00      	cmp	r3, #0
 8008730:	d107      	bne.n	8008742 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008732:	2200      	movs	r2, #0
 8008734:	214f      	movs	r1, #79	; 0x4f
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f002 fef2 	bl	800b520 <VL53L0X_WrByte>
 800873c:	4603      	mov	r3, r0
 800873e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008742:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d107      	bne.n	800875a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800874a:	222c      	movs	r2, #44	; 0x2c
 800874c:	214e      	movs	r1, #78	; 0x4e
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f002 fee6 	bl	800b520 <VL53L0X_WrByte>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800875a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800875e:	2b00      	cmp	r3, #0
 8008760:	d107      	bne.n	8008772 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008762:	2200      	movs	r2, #0
 8008764:	21ff      	movs	r1, #255	; 0xff
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f002 feda 	bl	800b520 <VL53L0X_WrByte>
 800876c:	4603      	mov	r3, r0
 800876e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008772:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008776:	2b00      	cmp	r3, #0
 8008778:	d109      	bne.n	800878e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800877a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800877e:	461a      	mov	r2, r3
 8008780:	21b6      	movs	r1, #182	; 0xb6
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f002 fecc 	bl	800b520 <VL53L0X_WrByte>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800878e:	2300      	movs	r3, #0
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
 8008792:	e009      	b.n	80087a8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	4413      	add	r3, r2
 800879a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	3301      	adds	r3, #1
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
 80087a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3f1      	bcc.n	8008794 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80087b6:	e002      	b.n	80087be <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	3301      	adds	r3, #1
 80087bc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80087be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	4413      	add	r3, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fc2a 	bl	8008020 <is_aperture>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <VL53L0X_set_reference_spads+0xe6>
 80087d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d3ee      	bcc.n	80087b8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80087e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ea:	79f9      	ldrb	r1, [r7, #7]
 80087ec:	f107 0214 	add.w	r2, r7, #20
 80087f0:	9204      	str	r2, [sp, #16]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	9203      	str	r2, [sp, #12]
 80087f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087f8:	9202      	str	r2, [sp, #8]
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	4623      	mov	r3, r4
 8008802:	4602      	mov	r2, r0
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff fc83 	bl	8008110 <enable_ref_spads>
 800880a:	4603      	mov	r3, r0
 800880c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008810:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10c      	bne.n	8008832 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	b2da      	uxtb	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	79fa      	ldrb	r2, [r7, #7]
 800882e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008832:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008836:	4618      	mov	r0, r3
 8008838:	3734      	adds	r7, #52	; 0x34
 800883a:	46bd      	mov	sp, r7
 800883c:	bd90      	pop	{r4, r7, pc}

0800883e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800884e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	f043 0301 	orr.w	r3, r3, #1
 800885c:	b2db      	uxtb	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f002 fe5c 	bl	800b520 <VL53L0X_WrByte>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800886c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f9bf 	bl	8008bf8 <VL53L0X_measurement_poll_for_completion>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800887e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008886:	2100      	movs	r1, #0
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fab5 	bl	8007df8 <VL53L0X_ClearInterruptMask>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800889a:	2200      	movs	r2, #0
 800889c:	2100      	movs	r1, #0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f002 fe3e 	bl	800b520 <VL53L0X_WrByte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]

	return Status;
 80088a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	4608      	mov	r0, r1
 80088be:	4611      	mov	r1, r2
 80088c0:	461a      	mov	r2, r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	70fb      	strb	r3, [r7, #3]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70bb      	strb	r3, [r7, #2]
 80088ca:	4613      	mov	r3, r2
 80088cc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80088d6:	2201      	movs	r2, #1
 80088d8:	21ff      	movs	r1, #255	; 0xff
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f002 fe20 	bl	800b520 <VL53L0X_WrByte>
 80088e0:	4603      	mov	r3, r0
 80088e2:	461a      	mov	r2, r3
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80088ea:	2200      	movs	r2, #0
 80088ec:	2100      	movs	r1, #0
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f002 fe16 	bl	800b520 <VL53L0X_WrByte>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80088fe:	2200      	movs	r2, #0
 8008900:	21ff      	movs	r1, #255	; 0xff
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f002 fe0c 	bl	800b520 <VL53L0X_WrByte>
 8008908:	4603      	mov	r3, r0
 800890a:	461a      	mov	r2, r3
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4313      	orrs	r3, r2
 8008910:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01e      	beq.n	8008956 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008918:	f897 3020 	ldrb.w	r3, [r7, #32]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	21cb      	movs	r1, #203	; 0xcb
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f002 fe9b 	bl	800b660 <VL53L0X_RdByte>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	4313      	orrs	r3, r2
 8008932:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008934:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d02a      	beq.n	8008992 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800893c:	f107 030e 	add.w	r3, r7, #14
 8008940:	461a      	mov	r2, r3
 8008942:	21ee      	movs	r1, #238	; 0xee
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f002 fe8b 	bl	800b660 <VL53L0X_RdByte>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	4313      	orrs	r3, r2
 8008952:	73fb      	strb	r3, [r7, #15]
 8008954:	e01d      	b.n	8008992 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800895e:	78bb      	ldrb	r3, [r7, #2]
 8008960:	461a      	mov	r2, r3
 8008962:	21cb      	movs	r1, #203	; 0xcb
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f002 fddb 	bl	800b520 <VL53L0X_WrByte>
 800896a:	4603      	mov	r3, r0
 800896c:	461a      	mov	r2, r3
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	4313      	orrs	r3, r2
 8008972:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008974:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800897c:	787b      	ldrb	r3, [r7, #1]
 800897e:	2280      	movs	r2, #128	; 0x80
 8008980:	21ee      	movs	r1, #238	; 0xee
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f002 fe2a 	bl	800b5dc <VL53L0X_UpdateByte>
 8008988:	4603      	mov	r3, r0
 800898a:	461a      	mov	r2, r3
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4313      	orrs	r3, r2
 8008990:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008992:	2201      	movs	r2, #1
 8008994:	21ff      	movs	r1, #255	; 0xff
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f002 fdc2 	bl	800b520 <VL53L0X_WrByte>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80089a6:	2201      	movs	r2, #1
 80089a8:	2100      	movs	r1, #0
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f002 fdb8 	bl	800b520 <VL53L0X_WrByte>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80089ba:	2200      	movs	r2, #0
 80089bc:	21ff      	movs	r1, #255	; 0xff
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f002 fdae 	bl	800b520 <VL53L0X_WrByte>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	f023 0310 	bic.w	r3, r3, #16
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	701a      	strb	r2, [r3, #0]

	return Status;
 80089da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b08a      	sub	sp, #40	; 0x28
 80089ea:	af04      	add	r7, sp, #16
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	4611      	mov	r1, r2
 80089f2:	461a      	mov	r2, r3
 80089f4:	460b      	mov	r3, r1
 80089f6:	71fb      	strb	r3, [r7, #7]
 80089f8:	4613      	mov	r3, r2
 80089fa:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008a10:	79bb      	ldrb	r3, [r7, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008a1c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008a1e:	2201      	movs	r2, #1
 8008a20:	2101      	movs	r1, #1
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f002 fd7c 	bl	800b520 <VL53L0X_WrByte>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d105      	bne.n	8008a40 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008a34:	2140      	movs	r1, #64	; 0x40
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff ff01 	bl	800883e <VL53L0X_perform_single_ref_calibration>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d115      	bne.n	8008a74 <VL53L0X_perform_vhv_calibration+0x8e>
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d112      	bne.n	8008a74 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008a4e:	7d39      	ldrb	r1, [r7, #20]
 8008a50:	7d7a      	ldrb	r2, [r7, #21]
 8008a52:	2300      	movs	r3, #0
 8008a54:	9303      	str	r3, [sp, #12]
 8008a56:	2301      	movs	r3, #1
 8008a58:	9302      	str	r3, [sp, #8]
 8008a5a:	f107 0313 	add.w	r3, r7, #19
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	460b      	mov	r3, r1
 8008a66:	2101      	movs	r1, #1
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff ff23 	bl	80088b4 <VL53L0X_ref_calibration_io>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	75fb      	strb	r3, [r7, #23]
 8008a72:	e002      	b.n	8008a7a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d112      	bne.n	8008aa8 <VL53L0X_perform_vhv_calibration+0xc2>
 8008a82:	79bb      	ldrb	r3, [r7, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00f      	beq.n	8008aa8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008a88:	7dbb      	ldrb	r3, [r7, #22]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f002 fd46 	bl	800b520 <VL53L0X_WrByte>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	7dba      	ldrb	r2, [r7, #22]
 8008aa4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08a      	sub	sp, #40	; 0x28
 8008ab8:	af04      	add	r7, sp, #16
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	71fb      	strb	r3, [r7, #7]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008ada:	79bb      	ldrb	r3, [r7, #6]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008ae6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008ae8:	2202      	movs	r2, #2
 8008aea:	2101      	movs	r1, #1
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f002 fd17 	bl	800b520 <VL53L0X_WrByte>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008afe:	2100      	movs	r1, #0
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f7ff fe9c 	bl	800883e <VL53L0X_perform_single_ref_calibration>
 8008b06:	4603      	mov	r3, r0
 8008b08:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d115      	bne.n	8008b3e <VL53L0X_perform_phase_calibration+0x8a>
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d112      	bne.n	8008b3e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008b18:	7d39      	ldrb	r1, [r7, #20]
 8008b1a:	7d7a      	ldrb	r2, [r7, #21]
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	9303      	str	r3, [sp, #12]
 8008b20:	2300      	movs	r3, #0
 8008b22:	9302      	str	r3, [sp, #8]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	f107 0313 	add.w	r3, r7, #19
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	2101      	movs	r1, #1
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7ff febe 	bl	80088b4 <VL53L0X_ref_calibration_io>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	75fb      	strb	r3, [r7, #23]
 8008b3c:	e002      	b.n	8008b44 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d112      	bne.n	8008b72 <VL53L0X_perform_phase_calibration+0xbe>
 8008b4c:	79bb      	ldrb	r3, [r7, #6]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00f      	beq.n	8008b72 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008b52:	7dbb      	ldrb	r3, [r7, #22]
 8008b54:	461a      	mov	r2, r3
 8008b56:	2101      	movs	r1, #1
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f002 fce1 	bl	800b520 <VL53L0X_WrByte>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	7dba      	ldrb	r2, [r7, #22]
 8008b6e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008b9a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff ff1f 	bl	80089e6 <VL53L0X_perform_vhv_calibration>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d107      	bne.n	8008bc4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6879      	ldr	r1, [r7, #4]
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7ff ff7a 	bl	8008ab4 <VL53L0X_perform_phase_calibration>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10f      	bne.n	8008bec <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008bcc:	7dbb      	ldrb	r3, [r7, #22]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f002 fca4 	bl	800b520 <VL53L0X_WrByte>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	7dba      	ldrb	r2, [r7, #22]
 8008be8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008c0c:	f107 030f 	add.w	r3, r7, #15
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fe fe01 	bl	800781a <VL53L0X_GetMeasurementDataReady>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d110      	bne.n	8008c46 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d00f      	beq.n	8008c4a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008c36:	d302      	bcc.n	8008c3e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008c38:	23f9      	movs	r3, #249	; 0xf9
 8008c3a:	75fb      	strb	r3, [r7, #23]
			break;
 8008c3c:	e006      	b.n	8008c4c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f002 fd72 	bl	800b728 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008c44:	e7e2      	b.n	8008c0c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008c46:	bf00      	nop
 8008c48:	e000      	b.n	8008c4c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008c4a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	4603      	mov	r3, r0
 8008c86:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008c8c:	79fb      	ldrb	r3, [r7, #7]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cb4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008cb6:	e002      	b.n	8008cbe <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	089b      	lsrs	r3, r3, #2
 8008cbc:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d8f8      	bhi.n	8008cb8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008cc6:	e017      	b.n	8008cf8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	441a      	add	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d80b      	bhi.n	8008cec <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4413      	add	r3, r2
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	085a      	lsrs	r2, r3, #1
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]
 8008cea:	e002      	b.n	8008cf2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	085b      	lsrs	r3, r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	089b      	lsrs	r3, r3, #2
 8008cf6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e4      	bne.n	8008cc8 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2183      	movs	r1, #131	; 0x83
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f002 fbff 	bl	800b520 <VL53L0X_WrByte>
 8008d22:	4603      	mov	r3, r0
 8008d24:	461a      	mov	r2, r3
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d11e      	bne.n	8008d72 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008d38:	f107 030f 	add.w	r3, r7, #15
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	2183      	movs	r1, #131	; 0x83
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f002 fc8d 	bl	800b660 <VL53L0X_RdByte>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <VL53L0X_device_read_strobe+0x5a>
 8008d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d64:	d3e8      	bcc.n	8008d38 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d6c:	d301      	bcc.n	8008d72 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008d6e:	23f9      	movs	r3, #249	; 0xf9
 8008d70:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008d72:	2201      	movs	r2, #1
 8008d74:	2183      	movs	r1, #131	; 0x83
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f002 fbd2 	bl	800b520 <VL53L0X_WrByte>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	461a      	mov	r2, r3
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008d86:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b098      	sub	sp, #96	; 0x60
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008dc2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008dc6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008dde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008de2:	2b07      	cmp	r3, #7
 8008de4:	f000 8408 	beq.w	80095f8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008de8:	2201      	movs	r2, #1
 8008dea:	2180      	movs	r1, #128	; 0x80
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f002 fb97 	bl	800b520 <VL53L0X_WrByte>
 8008df2:	4603      	mov	r3, r0
 8008df4:	461a      	mov	r2, r3
 8008df6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e00:	2201      	movs	r2, #1
 8008e02:	21ff      	movs	r1, #255	; 0xff
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f002 fb8b 	bl	800b520 <VL53L0X_WrByte>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e12:	4313      	orrs	r3, r2
 8008e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f002 fb7f 	bl	800b520 <VL53L0X_WrByte>
 8008e22:	4603      	mov	r3, r0
 8008e24:	461a      	mov	r2, r3
 8008e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008e30:	2206      	movs	r2, #6
 8008e32:	21ff      	movs	r1, #255	; 0xff
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f002 fb73 	bl	800b520 <VL53L0X_WrByte>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e42:	4313      	orrs	r3, r2
 8008e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008e48:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	2183      	movs	r1, #131	; 0x83
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f002 fc05 	bl	800b660 <VL53L0X_RdByte>
 8008e56:	4603      	mov	r3, r0
 8008e58:	461a      	mov	r2, r3
 8008e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008e64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e68:	f043 0304 	orr.w	r3, r3, #4
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	2183      	movs	r1, #131	; 0x83
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f002 fb54 	bl	800b520 <VL53L0X_WrByte>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008e86:	2207      	movs	r2, #7
 8008e88:	21ff      	movs	r1, #255	; 0xff
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f002 fb48 	bl	800b520 <VL53L0X_WrByte>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	2181      	movs	r1, #129	; 0x81
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f002 fb3c 	bl	800b520 <VL53L0X_WrByte>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f002 fc36 	bl	800b728 <VL53L0X_PollingDelay>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008eca:	2201      	movs	r2, #1
 8008ecc:	2180      	movs	r1, #128	; 0x80
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f002 fb26 	bl	800b520 <VL53L0X_WrByte>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 8098 	beq.w	800901e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008eee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ef2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f040 8091 	bne.w	800901e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008efc:	226b      	movs	r2, #107	; 0x6b
 8008efe:	2194      	movs	r1, #148	; 0x94
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f002 fb0d 	bl	800b520 <VL53L0X_WrByte>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7ff fef9 	bl	8008d0c <VL53L0X_device_read_strobe>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f22:	4313      	orrs	r3, r2
 8008f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	2190      	movs	r1, #144	; 0x90
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f002 fbd7 	bl	800b6e4 <VL53L0X_RdDWord>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	0a1b      	lsrs	r3, r3, #8
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f4e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	0bdb      	lsrs	r3, r3, #15
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008f60:	2224      	movs	r2, #36	; 0x24
 8008f62:	2194      	movs	r1, #148	; 0x94
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f002 fadb 	bl	800b520 <VL53L0X_WrByte>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff fec7 	bl	8008d0c <VL53L0X_device_read_strobe>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	461a      	mov	r2, r3
 8008f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f90:	461a      	mov	r2, r3
 8008f92:	2190      	movs	r1, #144	; 0x90
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f002 fba5 	bl	800b6e4 <VL53L0X_RdDWord>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	0e1b      	lsrs	r3, r3, #24
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	0a1b      	lsrs	r3, r3, #8
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008fc6:	2225      	movs	r2, #37	; 0x25
 8008fc8:	2194      	movs	r1, #148	; 0x94
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f002 faa8 	bl	800b520 <VL53L0X_WrByte>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7ff fe94 	bl	8008d0c <VL53L0X_device_read_strobe>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2190      	movs	r1, #144	; 0x90
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f002 fb72 	bl	800b6e4 <VL53L0X_RdDWord>
 8009000:	4603      	mov	r3, r0
 8009002:	461a      	mov	r2, r3
 8009004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009008:	4313      	orrs	r3, r2
 800900a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	0e1b      	lsrs	r3, r3, #24
 8009012:	b2db      	uxtb	r3, r3
 8009014:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	b2db      	uxtb	r3, r3
 800901c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8189 	beq.w	800933c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800902a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800902e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009032:	2b00      	cmp	r3, #0
 8009034:	f040 8182 	bne.w	800933c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009038:	2202      	movs	r2, #2
 800903a:	2194      	movs	r1, #148	; 0x94
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f002 fa6f 	bl	800b520 <VL53L0X_WrByte>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800904a:	4313      	orrs	r3, r2
 800904c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff fe5b 	bl	8008d0c <VL53L0X_device_read_strobe>
 8009056:	4603      	mov	r3, r0
 8009058:	461a      	mov	r2, r3
 800905a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800905e:	4313      	orrs	r3, r2
 8009060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009064:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009068:	461a      	mov	r2, r3
 800906a:	2190      	movs	r1, #144	; 0x90
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f002 faf7 	bl	800b660 <VL53L0X_RdByte>
 8009072:	4603      	mov	r3, r0
 8009074:	461a      	mov	r2, r3
 8009076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800907a:	4313      	orrs	r3, r2
 800907c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009080:	227b      	movs	r2, #123	; 0x7b
 8009082:	2194      	movs	r1, #148	; 0x94
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f002 fa4b 	bl	800b520 <VL53L0X_WrByte>
 800908a:	4603      	mov	r3, r0
 800908c:	461a      	mov	r2, r3
 800908e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009092:	4313      	orrs	r3, r2
 8009094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff fe37 	bl	8008d0c <VL53L0X_device_read_strobe>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a6:	4313      	orrs	r3, r2
 80090a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80090ac:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80090b0:	461a      	mov	r2, r3
 80090b2:	2190      	movs	r1, #144	; 0x90
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f002 fad3 	bl	800b660 <VL53L0X_RdByte>
 80090ba:	4603      	mov	r3, r0
 80090bc:	461a      	mov	r2, r3
 80090be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090c2:	4313      	orrs	r3, r2
 80090c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80090c8:	2277      	movs	r2, #119	; 0x77
 80090ca:	2194      	movs	r1, #148	; 0x94
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f002 fa27 	bl	800b520 <VL53L0X_WrByte>
 80090d2:	4603      	mov	r3, r0
 80090d4:	461a      	mov	r2, r3
 80090d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090da:	4313      	orrs	r3, r2
 80090dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff fe13 	bl	8008d0c <VL53L0X_device_read_strobe>
 80090e6:	4603      	mov	r3, r0
 80090e8:	461a      	mov	r2, r3
 80090ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ee:	4313      	orrs	r3, r2
 80090f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80090f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090f8:	461a      	mov	r2, r3
 80090fa:	2190      	movs	r1, #144	; 0x90
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f002 faf1 	bl	800b6e4 <VL53L0X_RdDWord>
 8009102:	4603      	mov	r3, r0
 8009104:	461a      	mov	r2, r3
 8009106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800910a:	4313      	orrs	r3, r2
 800910c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	0e5b      	lsrs	r3, r3, #25
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911a:	b2db      	uxtb	r3, r3
 800911c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	0c9b      	lsrs	r3, r3, #18
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009128:	b2db      	uxtb	r3, r3
 800912a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	0adb      	lsrs	r3, r3, #11
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009136:	b2db      	uxtb	r3, r3
 8009138:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	091b      	lsrs	r3, r3, #4
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009144:	b2db      	uxtb	r3, r3
 8009146:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	b2db      	uxtb	r3, r3
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009154:	b2db      	uxtb	r3, r3
 8009156:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800915a:	2278      	movs	r2, #120	; 0x78
 800915c:	2194      	movs	r1, #148	; 0x94
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 f9de 	bl	800b520 <VL53L0X_WrByte>
 8009164:	4603      	mov	r3, r0
 8009166:	461a      	mov	r2, r3
 8009168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800916c:	4313      	orrs	r3, r2
 800916e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff fdca 	bl	8008d0c <VL53L0X_device_read_strobe>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009180:	4313      	orrs	r3, r2
 8009182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800918a:	461a      	mov	r2, r3
 800918c:	2190      	movs	r1, #144	; 0x90
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f002 faa8 	bl	800b6e4 <VL53L0X_RdDWord>
 8009194:	4603      	mov	r3, r0
 8009196:	461a      	mov	r2, r3
 8009198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800919c:	4313      	orrs	r3, r2
 800919e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	0f5b      	lsrs	r3, r3, #29
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ac:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80091ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091b2:	4413      	add	r3, r2
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	0d9b      	lsrs	r3, r3, #22
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	0bdb      	lsrs	r3, r3, #15
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	0a1b      	lsrs	r3, r3, #8
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	019b      	lsls	r3, r3, #6
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009202:	2279      	movs	r2, #121	; 0x79
 8009204:	2194      	movs	r1, #148	; 0x94
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f002 f98a 	bl	800b520 <VL53L0X_WrByte>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009214:	4313      	orrs	r3, r2
 8009216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fd76 	bl	8008d0c <VL53L0X_device_read_strobe>
 8009220:	4603      	mov	r3, r0
 8009222:	461a      	mov	r2, r3
 8009224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009228:	4313      	orrs	r3, r2
 800922a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800922e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009232:	461a      	mov	r2, r3
 8009234:	2190      	movs	r1, #144	; 0x90
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f002 fa54 	bl	800b6e4 <VL53L0X_RdDWord>
 800923c:	4603      	mov	r3, r0
 800923e:	461a      	mov	r2, r3
 8009240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009244:	4313      	orrs	r3, r2
 8009246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	0e9b      	lsrs	r3, r3, #26
 800924e:	b2db      	uxtb	r3, r3
 8009250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009254:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800925a:	4413      	add	r3, r2
 800925c:	b2db      	uxtb	r3, r3
 800925e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	0cdb      	lsrs	r3, r3, #19
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926a:	b2db      	uxtb	r3, r3
 800926c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	0b1b      	lsrs	r3, r3, #12
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009278:	b2db      	uxtb	r3, r3
 800927a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009286:	b2db      	uxtb	r3, r3
 8009288:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	b2db      	uxtb	r3, r3
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	b2db      	uxtb	r3, r3
 8009292:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800929c:	227a      	movs	r2, #122	; 0x7a
 800929e:	2194      	movs	r1, #148	; 0x94
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f002 f93d 	bl	800b520 <VL53L0X_WrByte>
 80092a6:	4603      	mov	r3, r0
 80092a8:	461a      	mov	r2, r3
 80092aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff fd29 	bl	8008d0c <VL53L0X_device_read_strobe>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092c2:	4313      	orrs	r3, r2
 80092c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80092c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092cc:	461a      	mov	r2, r3
 80092ce:	2190      	movs	r1, #144	; 0x90
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f002 fa07 	bl	800b6e4 <VL53L0X_RdDWord>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461a      	mov	r2, r3
 80092da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092de:	4313      	orrs	r3, r2
 80092e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	0f9b      	lsrs	r3, r3, #30
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ee:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80092f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092f4:	4413      	add	r3, r2
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	0ddb      	lsrs	r3, r3, #23
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009304:	b2db      	uxtb	r3, r3
 8009306:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009312:	b2db      	uxtb	r3, r3
 8009314:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	0a5b      	lsrs	r3, r3, #9
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	089b      	lsrs	r3, r3, #2
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009336:	2300      	movs	r3, #0
 8009338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 80f1 	beq.w	800952a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800934c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 80ea 	bne.w	800952a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009356:	227b      	movs	r2, #123	; 0x7b
 8009358:	2194      	movs	r1, #148	; 0x94
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f002 f8e0 	bl	800b520 <VL53L0X_WrByte>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009368:	4313      	orrs	r3, r2
 800936a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fccc 	bl	8008d0c <VL53L0X_device_read_strobe>
 8009374:	4603      	mov	r3, r0
 8009376:	461a      	mov	r2, r3
 8009378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800937c:	4313      	orrs	r3, r2
 800937e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009386:	461a      	mov	r2, r3
 8009388:	2190      	movs	r1, #144	; 0x90
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f002 f9aa 	bl	800b6e4 <VL53L0X_RdDWord>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009398:	4313      	orrs	r3, r2
 800939a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800939e:	227c      	movs	r2, #124	; 0x7c
 80093a0:	2194      	movs	r1, #148	; 0x94
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f002 f8bc 	bl	800b520 <VL53L0X_WrByte>
 80093a8:	4603      	mov	r3, r0
 80093aa:	461a      	mov	r2, r3
 80093ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093b0:	4313      	orrs	r3, r2
 80093b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fca8 	bl	8008d0c <VL53L0X_device_read_strobe>
 80093bc:	4603      	mov	r3, r0
 80093be:	461a      	mov	r2, r3
 80093c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093c4:	4313      	orrs	r3, r2
 80093c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80093ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093ce:	461a      	mov	r2, r3
 80093d0:	2190      	movs	r1, #144	; 0x90
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f002 f986 	bl	800b6e4 <VL53L0X_RdDWord>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
 80093dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093e0:	4313      	orrs	r3, r2
 80093e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80093e6:	2273      	movs	r2, #115	; 0x73
 80093e8:	2194      	movs	r1, #148	; 0x94
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f002 f898 	bl	800b520 <VL53L0X_WrByte>
 80093f0:	4603      	mov	r3, r0
 80093f2:	461a      	mov	r2, r3
 80093f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093f8:	4313      	orrs	r3, r2
 80093fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff fc84 	bl	8008d0c <VL53L0X_device_read_strobe>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800940c:	4313      	orrs	r3, r2
 800940e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009416:	461a      	mov	r2, r3
 8009418:	2190      	movs	r1, #144	; 0x90
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f002 f962 	bl	800b6e4 <VL53L0X_RdDWord>
 8009420:	4603      	mov	r3, r0
 8009422:	461a      	mov	r2, r3
 8009424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009428:	4313      	orrs	r3, r2
 800942a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009432:	b29b      	uxth	r3, r3
 8009434:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009436:	2274      	movs	r2, #116	; 0x74
 8009438:	2194      	movs	r1, #148	; 0x94
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f002 f870 	bl	800b520 <VL53L0X_WrByte>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009448:	4313      	orrs	r3, r2
 800944a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fc5c 	bl	8008d0c <VL53L0X_device_read_strobe>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800945c:	4313      	orrs	r3, r2
 800945e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009466:	461a      	mov	r2, r3
 8009468:	2190      	movs	r1, #144	; 0x90
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 f93a 	bl	800b6e4 <VL53L0X_RdDWord>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009478:	4313      	orrs	r3, r2
 800947a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009482:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009484:	4313      	orrs	r3, r2
 8009486:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009488:	2275      	movs	r2, #117	; 0x75
 800948a:	2194      	movs	r1, #148	; 0x94
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f002 f847 	bl	800b520 <VL53L0X_WrByte>
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800949a:	4313      	orrs	r3, r2
 800949c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff fc33 	bl	8008d0c <VL53L0X_device_read_strobe>
 80094a6:	4603      	mov	r3, r0
 80094a8:	461a      	mov	r2, r3
 80094aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094b8:	461a      	mov	r2, r3
 80094ba:	2190      	movs	r1, #144	; 0x90
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f002 f911 	bl	800b6e4 <VL53L0X_RdDWord>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80094d8:	2276      	movs	r2, #118	; 0x76
 80094da:	2194      	movs	r1, #148	; 0x94
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f002 f81f 	bl	800b520 <VL53L0X_WrByte>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fc0b 	bl	8008d0c <VL53L0X_device_read_strobe>
 80094f6:	4603      	mov	r3, r0
 80094f8:	461a      	mov	r2, r3
 80094fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094fe:	4313      	orrs	r3, r2
 8009500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009508:	461a      	mov	r2, r3
 800950a:	2190      	movs	r1, #144	; 0x90
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f002 f8e9 	bl	800b6e4 <VL53L0X_RdDWord>
 8009512:	4603      	mov	r3, r0
 8009514:	461a      	mov	r2, r3
 8009516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800951a:	4313      	orrs	r3, r2
 800951c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009526:	4313      	orrs	r3, r2
 8009528:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800952a:	2200      	movs	r2, #0
 800952c:	2181      	movs	r1, #129	; 0x81
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 fff6 	bl	800b520 <VL53L0X_WrByte>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800953c:	4313      	orrs	r3, r2
 800953e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009542:	2206      	movs	r2, #6
 8009544:	21ff      	movs	r1, #255	; 0xff
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 ffea 	bl	800b520 <VL53L0X_WrByte>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009554:	4313      	orrs	r3, r2
 8009556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800955a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800955e:	461a      	mov	r2, r3
 8009560:	2183      	movs	r1, #131	; 0x83
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f002 f87c 	bl	800b660 <VL53L0X_RdByte>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009570:	4313      	orrs	r3, r2
 8009572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800957a:	f023 0304 	bic.w	r3, r3, #4
 800957e:	b2db      	uxtb	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	2183      	movs	r1, #131	; 0x83
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 ffcb 	bl	800b520 <VL53L0X_WrByte>
 800958a:	4603      	mov	r3, r0
 800958c:	461a      	mov	r2, r3
 800958e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009592:	4313      	orrs	r3, r2
 8009594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009598:	2201      	movs	r2, #1
 800959a:	21ff      	movs	r1, #255	; 0xff
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 ffbf 	bl	800b520 <VL53L0X_WrByte>
 80095a2:	4603      	mov	r3, r0
 80095a4:	461a      	mov	r2, r3
 80095a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80095b0:	2201      	movs	r2, #1
 80095b2:	2100      	movs	r1, #0
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 ffb3 	bl	800b520 <VL53L0X_WrByte>
 80095ba:	4603      	mov	r3, r0
 80095bc:	461a      	mov	r2, r3
 80095be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80095c8:	2200      	movs	r2, #0
 80095ca:	21ff      	movs	r1, #255	; 0xff
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 ffa7 	bl	800b520 <VL53L0X_WrByte>
 80095d2:	4603      	mov	r3, r0
 80095d4:	461a      	mov	r2, r3
 80095d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095da:	4313      	orrs	r3, r2
 80095dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80095e0:	2200      	movs	r2, #0
 80095e2:	2180      	movs	r1, #128	; 0x80
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 ff9b 	bl	800b520 <VL53L0X_WrByte>
 80095ea:	4603      	mov	r3, r0
 80095ec:	461a      	mov	r2, r3
 80095ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095f2:	4313      	orrs	r3, r2
 80095f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80095f8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 808f 	bne.w	8009720 <VL53L0X_get_info_from_device+0x98e>
 8009602:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009606:	2b07      	cmp	r3, #7
 8009608:	f000 808a 	beq.w	8009720 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d024      	beq.n	8009660 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009616:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800961a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800961e:	2b00      	cmp	r3, #0
 8009620:	d11e      	bne.n	8009660 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009628:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009632:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009636:	2300      	movs	r3, #0
 8009638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800963a:	e00e      	b.n	800965a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800963c:	f107 0208 	add.w	r2, r7, #8
 8009640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009642:	4413      	add	r3, r2
 8009644:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964a:	4413      	add	r3, r2
 800964c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009650:	460a      	mov	r2, r1
 8009652:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009656:	3301      	adds	r3, #1
 8009658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800965a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965c:	2b05      	cmp	r3, #5
 800965e:	dded      	ble.n	800963c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d018      	beq.n	800969c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800966a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800966e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009672:	2b00      	cmp	r3, #0
 8009674:	d112      	bne.n	800969c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009676:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009680:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	33f3      	adds	r3, #243	; 0xf3
 800968e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009690:	f107 0310 	add.w	r3, r7, #16
 8009694:	4619      	mov	r1, r3
 8009696:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009698:	f008 facd 	bl	8011c36 <strcpy>

		}

		if (((option & 4) == 4) &&
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	f003 0304 	and.w	r3, r3, #4
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d030      	beq.n	8009708 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80096a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096aa:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d12a      	bne.n	8009708 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80096c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c4:	025b      	lsls	r3, r3, #9
 80096c6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096cc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80096d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d011      	beq.n	8009700 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80096dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80096e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096ea:	fb02 f303 	mul.w	r3, r2, r3
 80096ee:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80096f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80096f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80096f8:	425b      	negs	r3, r3
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009700:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009708:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	4313      	orrs	r3, r2
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009716:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009720:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009724:	4618      	mov	r0, r3
 8009726:	3760      	adds	r7, #96	; 0x60
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800972c:	b490      	push	{r4, r7}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009738:	f240 6377 	movw	r3, #1655	; 0x677
 800973c:	f04f 0400 	mov.w	r4, #0
 8009740:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8009744:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009748:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	fb02 f303 	mul.w	r3, r2, r3
 8009758:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800975a:	68bb      	ldr	r3, [r7, #8]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bc90      	pop	{r4, r7}
 8009764:	4770      	bx	lr

08009766 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009766:	b480      	push	{r7}
 8009768:	b087      	sub	sp, #28
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d017      	beq.n	80097b0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3b01      	subs	r3, #1
 8009784:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009786:	e005      	b.n	8009794 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	085b      	lsrs	r3, r3, #1
 800978c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800978e:	89fb      	ldrh	r3, [r7, #14]
 8009790:	3301      	adds	r3, #1
 8009792:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f4      	bne.n	8009788 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800979e:	89fb      	ldrh	r3, [r7, #14]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80097ac:	4413      	add	r3, r2
 80097ae:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80097b0:	8afb      	ldrh	r3, [r7, #22]

}
 80097b2:	4618      	mov	r0, r3
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	4603      	mov	r3, r0
 80097c6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80097d0:	88fa      	ldrh	r2, [r7, #6]
 80097d2:	0a12      	lsrs	r2, r2, #8
 80097d4:	b292      	uxth	r2, r2
 80097d6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80097d8:	3301      	adds	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80097dc:	68fb      	ldr	r3, [r7, #12]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	4619      	mov	r1, r3
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff ff92 	bl	800972c <VL53L0X_calc_macro_period_ps>
 8009808:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009810:	4a0a      	ldr	r2, [pc, #40]	; (800983c <VL53L0X_calc_timeout_mclks+0x50>)
 8009812:	fba2 2303 	umull	r2, r3, r2, r3
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009820:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	441a      	add	r2, r3
	timeout_period_mclks =
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009830:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009832:	69fb      	ldr	r3, [r7, #28]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	10624dd3 	.word	0x10624dd3

08009840 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	807b      	strh	r3, [r7, #2]
 800984c:	4613      	mov	r3, r2
 800984e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009854:	787b      	ldrb	r3, [r7, #1]
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff ff67 	bl	800972c <VL53L0X_calc_macro_period_ps>
 800985e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009866:	4a0a      	ldr	r2, [pc, #40]	; (8009890 <VL53L0X_calc_timeout_us+0x50>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	099b      	lsrs	r3, r3, #6
 800986e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009870:	887b      	ldrh	r3, [r7, #2]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	fb02 f303 	mul.w	r3, r2, r3
 8009878:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800987c:	4a04      	ldr	r2, [pc, #16]	; (8009890 <VL53L0X_calc_timeout_us+0x50>)
 800987e:	fba2 2303 	umull	r2, r3, r2, r3
 8009882:	099b      	lsrs	r3, r3, #6
 8009884:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009886:	697b      	ldr	r3, [r7, #20]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	10624dd3 	.word	0x10624dd3

08009894 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08c      	sub	sp, #48	; 0x30
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	460b      	mov	r3, r1
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80098ba:	7afb      	ldrb	r3, [r7, #11]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <get_sequence_step_timeout+0x38>
 80098c0:	7afb      	ldrb	r3, [r7, #11]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d002      	beq.n	80098cc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d128      	bne.n	800991e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80098cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80098d0:	461a      	mov	r2, r3
 80098d2:	2100      	movs	r1, #0
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7fd fa4d 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 80098da:	4603      	mov	r3, r0
 80098dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80098e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80098e8:	f107 0320 	add.w	r3, r7, #32
 80098ec:	461a      	mov	r2, r3
 80098ee:	2146      	movs	r1, #70	; 0x46
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f001 feb5 	bl	800b660 <VL53L0X_RdByte>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80098fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009900:	b29b      	uxth	r3, r3
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff ff5b 	bl	80097be <VL53L0X_decode_timeout>
 8009908:	4603      	mov	r3, r0
 800990a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800990c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009912:	4619      	mov	r1, r3
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff ff93 	bl	8009840 <VL53L0X_calc_timeout_us>
 800991a:	62b8      	str	r0, [r7, #40]	; 0x28
 800991c:	e092      	b.n	8009a44 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800991e:	7afb      	ldrb	r3, [r7, #11]
 8009920:	2b03      	cmp	r3, #3
 8009922:	d135      	bne.n	8009990 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009924:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009928:	461a      	mov	r2, r3
 800992a:	2100      	movs	r1, #0
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7fd fa21 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009938:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 8081 	bne.w	8009a44 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009942:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009946:	461a      	mov	r2, r3
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7fd fa12 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009956:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800995e:	f107 031e 	add.w	r3, r7, #30
 8009962:	461a      	mov	r2, r3
 8009964:	2151      	movs	r1, #81	; 0x51
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f001 fe9b 	bl	800b6a2 <VL53L0X_RdWord>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009972:	8bfb      	ldrh	r3, [r7, #30]
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff ff22 	bl	80097be <VL53L0X_decode_timeout>
 800997a:	4603      	mov	r3, r0
 800997c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800997e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009982:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009984:	4619      	mov	r1, r3
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f7ff ff5a 	bl	8009840 <VL53L0X_calc_timeout_us>
 800998c:	62b8      	str	r0, [r7, #40]	; 0x28
 800998e:	e059      	b.n	8009a44 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	2b04      	cmp	r3, #4
 8009994:	d156      	bne.n	8009a44 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009996:	f107 0314 	add.w	r3, r7, #20
 800999a:	4619      	mov	r1, r3
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7fd faf3 	bl	8006f88 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01d      	beq.n	80099e8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80099ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80099b0:	461a      	mov	r2, r3
 80099b2:	2100      	movs	r1, #0
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7fd f9dd 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80099c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10f      	bne.n	80099e8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80099c8:	f107 031e 	add.w	r3, r7, #30
 80099cc:	461a      	mov	r2, r3
 80099ce:	2151      	movs	r1, #81	; 0x51
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f001 fe66 	bl	800b6a2 <VL53L0X_RdWord>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80099dc:	8bfb      	ldrh	r3, [r7, #30]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff feed 	bl	80097be <VL53L0X_decode_timeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80099e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d109      	bne.n	8009a04 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80099f0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80099f4:	461a      	mov	r2, r3
 80099f6:	2101      	movs	r1, #1
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f7fd f9bb 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009a04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10f      	bne.n	8009a2c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009a0c:	f107 031c 	add.w	r3, r7, #28
 8009a10:	461a      	mov	r2, r3
 8009a12:	2171      	movs	r1, #113	; 0x71
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f001 fe44 	bl	800b6a2 <VL53L0X_RdWord>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009a20:	8bbb      	ldrh	r3, [r7, #28]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff fecb 	bl	80097be <VL53L0X_decode_timeout>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009a2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009a34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7ff feff 	bl	8009840 <VL53L0X_calc_timeout_us>
 8009a42:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a48:	601a      	str	r2, [r3, #0]

	return Status;
 8009a4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3730      	adds	r7, #48	; 0x30
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b08a      	sub	sp, #40	; 0x28
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	607a      	str	r2, [r7, #4]
 8009a62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a64:	2300      	movs	r3, #0
 8009a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <set_sequence_step_timeout+0x26>
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d002      	beq.n	8009a7c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d138      	bne.n	8009aee <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a7c:	f107 031b 	add.w	r3, r7, #27
 8009a80:	461a      	mov	r2, r3
 8009a82:	2100      	movs	r1, #0
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7fd f975 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d11a      	bne.n	8009ace <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009a98:	7efb      	ldrb	r3, [r7, #27]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	6879      	ldr	r1, [r7, #4]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fea4 	bl	80097ec <VL53L0X_calc_timeout_mclks>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009aa8:	8bbb      	ldrh	r3, [r7, #28]
 8009aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aae:	d903      	bls.n	8009ab8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009ab0:	23ff      	movs	r3, #255	; 0xff
 8009ab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ab6:	e004      	b.n	8009ac2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009ab8:	8bbb      	ldrh	r3, [r7, #28]
 8009aba:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009abc:	3b01      	subs	r3, #1
 8009abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009ace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f040 80ab 	bne.w	8009c2e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009adc:	461a      	mov	r2, r3
 8009ade:	2146      	movs	r1, #70	; 0x46
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f001 fd1d 	bl	800b520 <VL53L0X_WrByte>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009aec:	e09f      	b.n	8009c2e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009aee:	7afb      	ldrb	r3, [r7, #11]
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d135      	bne.n	8009b60 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009af4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d11b      	bne.n	8009b34 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009afc:	f107 031b 	add.w	r3, r7, #27
 8009b00:	461a      	mov	r2, r3
 8009b02:	2100      	movs	r1, #0
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f7fd f935 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009b10:	7efb      	ldrb	r3, [r7, #27]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fe68 	bl	80097ec <VL53L0X_calc_timeout_mclks>
 8009b1c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009b1e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fe1f 	bl	8009766 <VL53L0X_encode_timeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b2c:	8b3a      	ldrh	r2, [r7, #24]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d108      	bne.n	8009b4e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009b3c:	8b3b      	ldrh	r3, [r7, #24]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	2151      	movs	r1, #81	; 0x51
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f001 fd0e 	bl	800b564 <VL53L0X_WrWord>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009b4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d16b      	bne.n	8009c2e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009b5e:	e066      	b.n	8009c2e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d160      	bne.n	8009c28 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009b66:	f107 0310 	add.w	r3, r7, #16
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7fd fa0b 	bl	8006f88 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009b76:	7cfb      	ldrb	r3, [r7, #19]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d01d      	beq.n	8009bb8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b7c:	f107 031b 	add.w	r3, r7, #27
 8009b80:	461a      	mov	r2, r3
 8009b82:	2100      	movs	r1, #0
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7fd f8f5 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009b90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10f      	bne.n	8009bb8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009b98:	f107 0318 	add.w	r3, r7, #24
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	2151      	movs	r1, #81	; 0x51
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f001 fd7e 	bl	800b6a2 <VL53L0X_RdWord>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009bac:	8b3b      	ldrh	r3, [r7, #24]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff fe05 	bl	80097be <VL53L0X_decode_timeout>
 8009bb4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009bb6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d109      	bne.n	8009bd4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009bc0:	f107 031b 	add.w	r3, r7, #27
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7fd f8d3 	bl	8006d74 <VL53L0X_GetVcselPulsePeriod>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d128      	bne.n	8009c2e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009bdc:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8009bde:	461a      	mov	r2, r3
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff fe02 	bl	80097ec <VL53L0X_calc_timeout_mclks>
 8009be8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bec:	6a3a      	ldr	r2, [r7, #32]
 8009bee:	4413      	add	r3, r2
 8009bf0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8009bf2:	6a38      	ldr	r0, [r7, #32]
 8009bf4:	f7ff fdb7 	bl	8009766 <VL53L0X_encode_timeout>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8009bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d108      	bne.n	8009c16 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009c04:	8bfb      	ldrh	r3, [r7, #30]
 8009c06:	461a      	mov	r2, r3
 8009c08:	2171      	movs	r1, #113	; 0x71
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f001 fcaa 	bl	800b564 <VL53L0X_WrWord>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009c16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d107      	bne.n	8009c2e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009c26:	e002      	b.n	8009c2e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c28:	23fc      	movs	r3, #252	; 0xfc
 8009c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3728      	adds	r7, #40	; 0x28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b08a      	sub	sp, #40	; 0x28
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
 8009c46:	4613      	mov	r3, r2
 8009c48:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009c50:	230c      	movs	r3, #12
 8009c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009c56:	2312      	movs	r3, #18
 8009c58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009c62:	230e      	movs	r3, #14
 8009c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009c6c:	78bb      	ldrb	r3, [r7, #2]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c78:	23fc      	movs	r3, #252	; 0xfc
 8009c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c7e:	e020      	b.n	8009cc2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10d      	bne.n	8009ca2 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009c86:	78ba      	ldrb	r2, [r7, #2]
 8009c88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d304      	bcc.n	8009c9a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009c90:	78ba      	ldrb	r2, [r7, #2]
 8009c92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d903      	bls.n	8009ca2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c9a:	23fc      	movs	r3, #252	; 0xfc
 8009c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ca0:	e00f      	b.n	8009cc2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d10c      	bne.n	8009cc2 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009ca8:	78ba      	ldrb	r2, [r7, #2]
 8009caa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d304      	bcc.n	8009cbc <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009cb2:	78ba      	ldrb	r2, [r7, #2]
 8009cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d902      	bls.n	8009cc2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009cbc:	23fc      	movs	r3, #252	; 0xfc
 8009cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009cc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009cca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cce:	e237      	b.n	800a140 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d150      	bne.n	8009d78 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009cd6:	78bb      	ldrb	r3, [r7, #2]
 8009cd8:	2b0c      	cmp	r3, #12
 8009cda:	d110      	bne.n	8009cfe <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009cdc:	2218      	movs	r2, #24
 8009cde:	2157      	movs	r1, #87	; 0x57
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 fc1d 	bl	800b520 <VL53L0X_WrByte>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009cec:	2208      	movs	r2, #8
 8009cee:	2156      	movs	r1, #86	; 0x56
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 fc15 	bl	800b520 <VL53L0X_WrByte>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cfc:	e17f      	b.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009cfe:	78bb      	ldrb	r3, [r7, #2]
 8009d00:	2b0e      	cmp	r3, #14
 8009d02:	d110      	bne.n	8009d26 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009d04:	2230      	movs	r2, #48	; 0x30
 8009d06:	2157      	movs	r1, #87	; 0x57
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f001 fc09 	bl	800b520 <VL53L0X_WrByte>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009d14:	2208      	movs	r2, #8
 8009d16:	2156      	movs	r1, #86	; 0x56
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 fc01 	bl	800b520 <VL53L0X_WrByte>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d24:	e16b      	b.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009d26:	78bb      	ldrb	r3, [r7, #2]
 8009d28:	2b10      	cmp	r3, #16
 8009d2a:	d110      	bne.n	8009d4e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009d2c:	2240      	movs	r2, #64	; 0x40
 8009d2e:	2157      	movs	r1, #87	; 0x57
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 fbf5 	bl	800b520 <VL53L0X_WrByte>
 8009d36:	4603      	mov	r3, r0
 8009d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	2156      	movs	r1, #86	; 0x56
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 fbed 	bl	800b520 <VL53L0X_WrByte>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d4c:	e157      	b.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009d4e:	78bb      	ldrb	r3, [r7, #2]
 8009d50:	2b12      	cmp	r3, #18
 8009d52:	f040 8154 	bne.w	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009d56:	2250      	movs	r2, #80	; 0x50
 8009d58:	2157      	movs	r1, #87	; 0x57
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 fbe0 	bl	800b520 <VL53L0X_WrByte>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009d66:	2208      	movs	r2, #8
 8009d68:	2156      	movs	r1, #86	; 0x56
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fbd8 	bl	800b520 <VL53L0X_WrByte>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d76:	e142      	b.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	f040 813f 	bne.w	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009d80:	78bb      	ldrb	r3, [r7, #2]
 8009d82:	2b08      	cmp	r3, #8
 8009d84:	d14c      	bne.n	8009e20 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009d86:	2210      	movs	r2, #16
 8009d88:	2148      	movs	r1, #72	; 0x48
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 fbc8 	bl	800b520 <VL53L0X_WrByte>
 8009d90:	4603      	mov	r3, r0
 8009d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009d96:	2208      	movs	r2, #8
 8009d98:	2147      	movs	r1, #71	; 0x47
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f001 fbc0 	bl	800b520 <VL53L0X_WrByte>
 8009da0:	4603      	mov	r3, r0
 8009da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009da6:	2202      	movs	r2, #2
 8009da8:	2132      	movs	r1, #50	; 0x32
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 fbb8 	bl	800b520 <VL53L0X_WrByte>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009db8:	4313      	orrs	r3, r2
 8009dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009dbe:	220c      	movs	r2, #12
 8009dc0:	2130      	movs	r1, #48	; 0x30
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 fbac 	bl	800b520 <VL53L0X_WrByte>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	21ff      	movs	r1, #255	; 0xff
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 fba0 	bl	800b520 <VL53L0X_WrByte>
 8009de0:	4603      	mov	r3, r0
 8009de2:	461a      	mov	r2, r3
 8009de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de8:	4313      	orrs	r3, r2
 8009dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009dee:	2230      	movs	r2, #48	; 0x30
 8009df0:	2130      	movs	r1, #48	; 0x30
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 fb94 	bl	800b520 <VL53L0X_WrByte>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e00:	4313      	orrs	r3, r2
 8009e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009e06:	2200      	movs	r2, #0
 8009e08:	21ff      	movs	r1, #255	; 0xff
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 fb88 	bl	800b520 <VL53L0X_WrByte>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461a      	mov	r2, r3
 8009e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e1e:	e0ee      	b.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009e20:	78bb      	ldrb	r3, [r7, #2]
 8009e22:	2b0a      	cmp	r3, #10
 8009e24:	d14c      	bne.n	8009ec0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009e26:	2228      	movs	r2, #40	; 0x28
 8009e28:	2148      	movs	r1, #72	; 0x48
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 fb78 	bl	800b520 <VL53L0X_WrByte>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009e36:	2208      	movs	r2, #8
 8009e38:	2147      	movs	r1, #71	; 0x47
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fb70 	bl	800b520 <VL53L0X_WrByte>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009e46:	2203      	movs	r2, #3
 8009e48:	2132      	movs	r1, #50	; 0x32
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 fb68 	bl	800b520 <VL53L0X_WrByte>
 8009e50:	4603      	mov	r3, r0
 8009e52:	461a      	mov	r2, r3
 8009e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009e5e:	2209      	movs	r2, #9
 8009e60:	2130      	movs	r1, #48	; 0x30
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 fb5c 	bl	800b520 <VL53L0X_WrByte>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e70:	4313      	orrs	r3, r2
 8009e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009e76:	2201      	movs	r2, #1
 8009e78:	21ff      	movs	r1, #255	; 0xff
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fb50 	bl	800b520 <VL53L0X_WrByte>
 8009e80:	4603      	mov	r3, r0
 8009e82:	461a      	mov	r2, r3
 8009e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009e8e:	2220      	movs	r2, #32
 8009e90:	2130      	movs	r1, #48	; 0x30
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 fb44 	bl	800b520 <VL53L0X_WrByte>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	21ff      	movs	r1, #255	; 0xff
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fb38 	bl	800b520 <VL53L0X_WrByte>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ebe:	e09e      	b.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009ec0:	78bb      	ldrb	r3, [r7, #2]
 8009ec2:	2b0c      	cmp	r3, #12
 8009ec4:	d14c      	bne.n	8009f60 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009ec6:	2238      	movs	r2, #56	; 0x38
 8009ec8:	2148      	movs	r1, #72	; 0x48
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 fb28 	bl	800b520 <VL53L0X_WrByte>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009ed6:	2208      	movs	r2, #8
 8009ed8:	2147      	movs	r1, #71	; 0x47
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 fb20 	bl	800b520 <VL53L0X_WrByte>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	2132      	movs	r1, #50	; 0x32
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 fb18 	bl	800b520 <VL53L0X_WrByte>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009efe:	2208      	movs	r2, #8
 8009f00:	2130      	movs	r1, #48	; 0x30
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fb0c 	bl	800b520 <VL53L0X_WrByte>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009f16:	2201      	movs	r2, #1
 8009f18:	21ff      	movs	r1, #255	; 0xff
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fb00 	bl	800b520 <VL53L0X_WrByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	461a      	mov	r2, r3
 8009f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009f2e:	2220      	movs	r2, #32
 8009f30:	2130      	movs	r1, #48	; 0x30
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 faf4 	bl	800b520 <VL53L0X_WrByte>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f40:	4313      	orrs	r3, r2
 8009f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009f46:	2200      	movs	r2, #0
 8009f48:	21ff      	movs	r1, #255	; 0xff
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fae8 	bl	800b520 <VL53L0X_WrByte>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f5e:	e04e      	b.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009f60:	78bb      	ldrb	r3, [r7, #2]
 8009f62:	2b0e      	cmp	r3, #14
 8009f64:	d14b      	bne.n	8009ffe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009f66:	2248      	movs	r2, #72	; 0x48
 8009f68:	2148      	movs	r1, #72	; 0x48
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 fad8 	bl	800b520 <VL53L0X_WrByte>
 8009f70:	4603      	mov	r3, r0
 8009f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009f76:	2208      	movs	r2, #8
 8009f78:	2147      	movs	r1, #71	; 0x47
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fad0 	bl	800b520 <VL53L0X_WrByte>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009f86:	2203      	movs	r2, #3
 8009f88:	2132      	movs	r1, #50	; 0x32
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fac8 	bl	800b520 <VL53L0X_WrByte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009f9e:	2207      	movs	r2, #7
 8009fa0:	2130      	movs	r1, #48	; 0x30
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 fabc 	bl	800b520 <VL53L0X_WrByte>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	461a      	mov	r2, r3
 8009fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	21ff      	movs	r1, #255	; 0xff
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 fab0 	bl	800b520 <VL53L0X_WrByte>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009fce:	2220      	movs	r2, #32
 8009fd0:	2130      	movs	r1, #48	; 0x30
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f001 faa4 	bl	800b520 <VL53L0X_WrByte>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	21ff      	movs	r1, #255	; 0xff
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 fa98 	bl	800b520 <VL53L0X_WrByte>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009ffe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a002:	2b00      	cmp	r3, #0
 800a004:	d17e      	bne.n	800a104 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a006:	78bb      	ldrb	r3, [r7, #2]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fe fe38 	bl	8008c7e <VL53L0X_encode_vcsel_period>
 800a00e:	4603      	mov	r3, r0
 800a010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d045      	beq.n	800a0aa <VL53L0X_set_vcsel_pulse_period+0x470>
 800a01e:	e06e      	b.n	800a0fe <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a020:	f107 0314 	add.w	r3, r7, #20
 800a024:	461a      	mov	r2, r3
 800a026:	2103      	movs	r1, #3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7ff fc33 	bl	8009894 <get_sequence_step_timeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d109      	bne.n	800a050 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a03c:	f107 0310 	add.w	r3, r7, #16
 800a040:	461a      	mov	r2, r3
 800a042:	2102      	movs	r1, #2
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff fc25 	bl	8009894 <get_sequence_step_timeout>
 800a04a:	4603      	mov	r3, r0
 800a04c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a050:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a054:	2b00      	cmp	r3, #0
 800a056:	d109      	bne.n	800a06c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a058:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a05c:	461a      	mov	r2, r3
 800a05e:	2150      	movs	r1, #80	; 0x50
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 fa5d 	bl	800b520 <VL53L0X_WrByte>
 800a066:	4603      	mov	r3, r0
 800a068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a06c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a070:	2b00      	cmp	r3, #0
 800a072:	d108      	bne.n	800a086 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	461a      	mov	r2, r3
 800a078:	2103      	movs	r1, #3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fceb 	bl	8009a56 <set_sequence_step_timeout>
 800a080:	4603      	mov	r3, r0
 800a082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a086:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d108      	bne.n	800a0a0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	461a      	mov	r2, r3
 800a092:	2102      	movs	r1, #2
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff fcde 	bl	8009a56 <set_sequence_step_timeout>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	78ba      	ldrb	r2, [r7, #2]
 800a0a4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a0a8:	e02c      	b.n	800a104 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a0aa:	f107 0318 	add.w	r3, r7, #24
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	2104      	movs	r1, #4
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff fbee 	bl	8009894 <get_sequence_step_timeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a0be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d109      	bne.n	800a0da <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a0c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	2170      	movs	r1, #112	; 0x70
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fa26 	bl	800b520 <VL53L0X_WrByte>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a0da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d108      	bne.n	800a0f4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	2104      	movs	r1, #4
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff fcb4 	bl	8009a56 <set_sequence_step_timeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	78ba      	ldrb	r2, [r7, #2]
 800a0f8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a0fc:	e002      	b.n	800a104 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a0fe:	23fc      	movs	r3, #252	; 0xfc
 800a100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d109      	bne.n	800a120 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a112:	69f9      	ldr	r1, [r7, #28]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7fc fdef 	bl	8006cf8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a11a:	4603      	mov	r3, r0
 800a11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a124:	2b00      	cmp	r3, #0
 800a126:	d109      	bne.n	800a13c <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800a128:	f107 010f 	add.w	r1, r7, #15
 800a12c:	2301      	movs	r3, #1
 800a12e:	2200      	movs	r2, #0
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7fe fcbf 	bl	8008ab4 <VL53L0X_perform_phase_calibration>
 800a136:	4603      	mov	r3, r0
 800a138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a13c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a140:	4618      	mov	r0, r3
 800a142:	3728      	adds	r7, #40	; 0x28
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	460b      	mov	r3, r1
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a156:	2300      	movs	r3, #0
 800a158:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a160:	2b01      	cmp	r3, #1
 800a162:	d00a      	beq.n	800a17a <VL53L0X_get_vcsel_pulse_period+0x32>
 800a164:	e013      	b.n	800a18e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a166:	f107 0316 	add.w	r3, r7, #22
 800a16a:	461a      	mov	r2, r3
 800a16c:	2150      	movs	r1, #80	; 0x50
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f001 fa76 	bl	800b660 <VL53L0X_RdByte>
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a178:	e00b      	b.n	800a192 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a17a:	f107 0316 	add.w	r3, r7, #22
 800a17e:	461a      	mov	r2, r3
 800a180:	2170      	movs	r1, #112	; 0x70
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f001 fa6c 	bl	800b660 <VL53L0X_RdByte>
 800a188:	4603      	mov	r3, r0
 800a18a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a18c:	e001      	b.n	800a192 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a18e:	23fc      	movs	r3, #252	; 0xfc
 800a190:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d107      	bne.n	800a1aa <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a19a:	7dbb      	ldrb	r3, [r7, #22]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fd5b 	bl	8008c58 <VL53L0X_decode_vcsel_period>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	701a      	strb	r2, [r3, #0]

	return Status;
 800a1aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b092      	sub	sp, #72	; 0x48
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a1c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a1ca:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a1cc:	f240 7376 	movw	r3, #1910	; 0x776
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a1d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a1d8:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a1dc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a1de:	f240 234e 	movw	r3, #590	; 0x24e
 800a1e2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a1e4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a1ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a1f0:	f240 2326 	movw	r3, #550	; 0x226
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a1fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a1fe:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d205      	bcs.n	800a218 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a20c:	23fc      	movs	r3, #252	; 0xfc
 800a20e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a212:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a216:	e0aa      	b.n	800a36e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a224:	f107 0314 	add.w	r3, r7, #20
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7fc feac 	bl	8006f88 <VL53L0X_GetSequenceStepEnables>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a236:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d15b      	bne.n	800a2f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a23e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a240:	2b00      	cmp	r3, #0
 800a242:	d105      	bne.n	800a250 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a244:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a24a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d052      	beq.n	800a2f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a250:	f107 0310 	add.w	r3, r7, #16
 800a254:	461a      	mov	r2, r3
 800a256:	2102      	movs	r1, #2
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff fb1b 	bl	8009894 <get_sequence_step_timeout>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a264:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a26c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a270:	e07d      	b.n	800a36e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a272:	7d3b      	ldrb	r3, [r7, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00f      	beq.n	800a298 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a278:	693a      	ldr	r2, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27c:	4413      	add	r3, r2
 800a27e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a280:	69fa      	ldr	r2, [r7, #28]
 800a282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a284:	429a      	cmp	r2, r3
 800a286:	d204      	bcs.n	800a292 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	643b      	str	r3, [r7, #64]	; 0x40
 800a290:	e002      	b.n	800a298 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a292:	23fc      	movs	r3, #252	; 0xfc
 800a294:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a298:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a2a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a2a4:	e063      	b.n	800a36e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a2a6:	7dbb      	ldrb	r3, [r7, #22]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d011      	beq.n	800a2d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	4413      	add	r3, r2
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d204      	bcs.n	800a2c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a2be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2c6:	e016      	b.n	800a2f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2c8:	23fc      	movs	r3, #252	; 0xfc
 800a2ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a2ce:	e012      	b.n	800a2f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a2d0:	7d7b      	ldrb	r3, [r7, #21]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00f      	beq.n	800a2f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2da:	4413      	add	r3, r2
 800a2dc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a2de:	69fa      	ldr	r2, [r7, #28]
 800a2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d204      	bcs.n	800a2f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a2e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ee:	e002      	b.n	800a2f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2f0:	23fc      	movs	r3, #252	; 0xfc
 800a2f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a2f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a2fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a302:	e034      	b.n	800a36e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d019      	beq.n	800a33e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a30a:	f107 030c 	add.w	r3, r7, #12
 800a30e:	461a      	mov	r2, r3
 800a310:	2103      	movs	r1, #3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff fabe 	bl	8009894 <get_sequence_step_timeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	4413      	add	r3, r2
 800a324:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a326:	69fa      	ldr	r2, [r7, #28]
 800a328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d204      	bcs.n	800a338 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a32e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	643b      	str	r3, [r7, #64]	; 0x40
 800a336:	e002      	b.n	800a33e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a338:	23fc      	movs	r3, #252	; 0xfc
 800a33a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a33e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a342:	2b00      	cmp	r3, #0
 800a344:	d111      	bne.n	800a36a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a346:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00e      	beq.n	800a36a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a34c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a356:	2104      	movs	r1, #4
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7ff fb7c 	bl	8009a56 <set_sequence_step_timeout>
 800a35e:	4603      	mov	r3, r0
 800a360:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a36a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3748      	adds	r7, #72	; 0x48
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b090      	sub	sp, #64	; 0x40
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a380:	2300      	movs	r3, #0
 800a382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a386:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a38a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a38c:	f240 7376 	movw	r3, #1910	; 0x776
 800a390:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a392:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a396:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a398:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a39c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a39e:	f240 234e 	movw	r3, #590	; 0x24e
 800a3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a3a4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a3a8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a3aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a3b0:	f240 2326 	movw	r3, #550	; 0x226
 800a3b4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3be:	441a      	add	r2, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a3c4:	f107 0318 	add.w	r3, r7, #24
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7fc fddc 	bl	8006f88 <VL53L0X_GetSequenceStepEnables>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a3d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a3de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3e2:	e075      	b.n	800a4d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a3e4:	7e3b      	ldrb	r3, [r7, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d105      	bne.n	800a3f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a3ea:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a3f0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d030      	beq.n	800a458 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a3f6:	f107 0310 	add.w	r3, r7, #16
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	2102      	movs	r1, #2
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff fa48 	bl	8009894 <get_sequence_step_timeout>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a40a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d122      	bne.n	800a458 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a412:	7e3b      	ldrb	r3, [r7, #24]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d007      	beq.n	800a428 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a41c:	6939      	ldr	r1, [r7, #16]
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a422:	441a      	add	r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a428:	7ebb      	ldrb	r3, [r7, #26]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a432:	6939      	ldr	r1, [r7, #16]
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	440b      	add	r3, r1
 800a438:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a43a:	441a      	add	r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	e00a      	b.n	800a458 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a442:	7e7b      	ldrb	r3, [r7, #25]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d007      	beq.n	800a458 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a44c:	6939      	ldr	r1, [r7, #16]
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a452:	441a      	add	r2, r3
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a458:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d114      	bne.n	800a48a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a460:	7efb      	ldrb	r3, [r7, #27]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d011      	beq.n	800a48a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a466:	f107 030c 	add.w	r3, r7, #12
 800a46a:	461a      	mov	r2, r3
 800a46c:	2103      	movs	r1, #3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff fa10 	bl	8009894 <get_sequence_step_timeout>
 800a474:	4603      	mov	r3, r0
 800a476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a484:	441a      	add	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a48a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d114      	bne.n	800a4bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a492:	7f3b      	ldrb	r3, [r7, #28]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d011      	beq.n	800a4bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a498:	f107 0314 	add.w	r3, r7, #20
 800a49c:	461a      	mov	r2, r3
 800a49e:	2104      	movs	r1, #4
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff f9f7 	bl	8009894 <get_sequence_step_timeout>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a4b0:	6979      	ldr	r1, [r7, #20]
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a4b6:	441a      	add	r2, r3
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3740      	adds	r7, #64	; 0x40
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a4ea:	e0c6      	b.n	800a67a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a4fc:	7cfb      	ldrb	r3, [r7, #19]
 800a4fe:	2bff      	cmp	r3, #255	; 0xff
 800a500:	f040 808d 	bne.w	800a61e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	4413      	add	r3, r2
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	3301      	adds	r3, #1
 800a512:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a514:	7cbb      	ldrb	r3, [r7, #18]
 800a516:	2b03      	cmp	r3, #3
 800a518:	d87e      	bhi.n	800a618 <VL53L0X_load_tuning_settings+0x140>
 800a51a:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <VL53L0X_load_tuning_settings+0x48>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a531 	.word	0x0800a531
 800a524:	0800a56b 	.word	0x0800a56b
 800a528:	0800a5a5 	.word	0x0800a5a5
 800a52c:	0800a5df 	.word	0x0800a5df
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	4413      	add	r3, r2
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	747b      	strb	r3, [r7, #17]
				Index++;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	3301      	adds	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	4413      	add	r3, r2
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	743b      	strb	r3, [r7, #16]
				Index++;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	3301      	adds	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a550:	7c7b      	ldrb	r3, [r7, #17]
 800a552:	b29b      	uxth	r3, r3
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	b29a      	uxth	r2, r3
 800a558:	7c3b      	ldrb	r3, [r7, #16]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	4413      	add	r3, r2
 800a55e:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	89fa      	ldrh	r2, [r7, #14]
 800a564:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a568:	e087      	b.n	800a67a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	4413      	add	r3, r2
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	747b      	strb	r3, [r7, #17]
				Index++;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	3301      	adds	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	4413      	add	r3, r2
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	743b      	strb	r3, [r7, #16]
				Index++;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	3301      	adds	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a58a:	7c7b      	ldrb	r3, [r7, #17]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	b29a      	uxth	r2, r3
 800a592:	7c3b      	ldrb	r3, [r7, #16]
 800a594:	b29b      	uxth	r3, r3
 800a596:	4413      	add	r3, r2
 800a598:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	89fa      	ldrh	r2, [r7, #14]
 800a59e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a5a2:	e06a      	b.n	800a67a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	747b      	strb	r3, [r7, #17]
				Index++;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	743b      	strb	r3, [r7, #16]
				Index++;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a5c4:	7c7b      	ldrb	r3, [r7, #17]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	021b      	lsls	r3, r3, #8
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	7c3b      	ldrb	r3, [r7, #16]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	89fa      	ldrh	r2, [r7, #14]
 800a5d8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a5dc:	e04d      	b.n	800a67a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	747b      	strb	r3, [r7, #17]
				Index++;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	743b      	strb	r3, [r7, #16]
				Index++;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a5fe:	7c7b      	ldrb	r3, [r7, #17]
 800a600:	b29b      	uxth	r3, r3
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	b29a      	uxth	r2, r3
 800a606:	7c3b      	ldrb	r3, [r7, #16]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	4413      	add	r3, r2
 800a60c:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	89fa      	ldrh	r2, [r7, #14]
 800a612:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a616:	e030      	b.n	800a67a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a618:	23fc      	movs	r3, #252	; 0xfc
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e02d      	b.n	800a67a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a61e:	7cfb      	ldrb	r3, [r7, #19]
 800a620:	2b04      	cmp	r3, #4
 800a622:	d828      	bhi.n	800a676 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4413      	add	r3, r2
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	737b      	strb	r3, [r7, #13]
			Index++;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	3301      	adds	r3, #1
 800a632:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a634:	2300      	movs	r3, #0
 800a636:	61bb      	str	r3, [r7, #24]
 800a638:	e00f      	b.n	800a65a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	4413      	add	r3, r2
 800a640:	7819      	ldrb	r1, [r3, #0]
 800a642:	f107 0208 	add.w	r2, r7, #8
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	4413      	add	r3, r2
 800a64a:	460a      	mov	r2, r1
 800a64c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	3301      	adds	r3, #1
 800a652:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	3301      	adds	r3, #1
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	7cfa      	ldrb	r2, [r7, #19]
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	429a      	cmp	r2, r3
 800a660:	dceb      	bgt.n	800a63a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a662:	7cfb      	ldrb	r3, [r7, #19]
 800a664:	f107 0208 	add.w	r2, r7, #8
 800a668:	7b79      	ldrb	r1, [r7, #13]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 ff04 	bl	800b478 <VL53L0X_WriteMulti>
 800a670:	4603      	mov	r3, r0
 800a672:	77fb      	strb	r3, [r7, #31]
 800a674:	e001      	b.n	800a67a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a676:	23fc      	movs	r3, #252	; 0xfc
 800a678:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	4413      	add	r3, r2
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d004      	beq.n	800a690 <VL53L0X_load_tuning_settings+0x1b8>
 800a686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f43f af2e 	beq.w	800a4ec <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a690:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3720      	adds	r7, #32
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a6b2:	f107 0313 	add.w	r3, r7, #19
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7fc fd25 	bl	8007108 <VL53L0X_GetXTalkCompensationEnable>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a6c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d111      	bne.n	800a6ee <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a6ca:	7cfb      	ldrb	r3, [r7, #19]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00e      	beq.n	800a6ee <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
 800a6d4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	8a9b      	ldrh	r3, [r3, #20]
 800a6da:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	fb03 f302 	mul.w	r3, r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	3380      	adds	r3, #128	; 0x80
 800a6e8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a6ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b086      	sub	sp, #24
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a706:	2300      	movs	r3, #0
 800a708:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a712:	f107 0310 	add.w	r3, r7, #16
 800a716:	461a      	mov	r2, r3
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7ff ffbe 	bl	800a69c <VL53L0X_get_total_xtalk_rate>
 800a720:	4603      	mov	r3, r0
 800a722:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d105      	bne.n	800a738 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	441a      	add	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]

	return Status;
 800a738:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b09a      	sub	sp, #104	; 0x68
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a752:	2312      	movs	r3, #18
 800a754:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a75a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a75c:	2342      	movs	r3, #66	; 0x42
 800a75e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a760:	2306      	movs	r3, #6
 800a762:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a764:	2307      	movs	r3, #7
 800a766:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a768:	2300      	movs	r3, #0
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78a:	3380      	adds	r3, #128	; 0x80
 800a78c:	0a1b      	lsrs	r3, r3, #8
 800a78e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a794:	fb02 f303 	mul.w	r3, r2, r3
 800a798:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01b      	beq.n	800a7dc <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	029b      	lsls	r3, r3, #10
 800a7a8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	085a      	lsrs	r2, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	4413      	add	r3, r2
 800a7b2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a7b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7bc:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a7be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	4413      	add	r3, r2
 800a7c6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a7c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7cc:	fb02 f303 	mul.w	r3, r2, r3
 800a7d0:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a7d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a7d8:	0c1b      	lsrs	r3, r3, #16
 800a7da:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a7e0:	fb02 f303 	mul.w	r3, r2, r3
 800a7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f4:	fb02 f303 	mul.w	r3, r2, r3
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a7fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a800:	0c1b      	lsrs	r3, r3, #16
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a806:	085a      	lsrs	r2, r3, #1
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	441a      	add	r2, r3
 800a80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a812:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a818:	fb02 f303 	mul.w	r3, r2, r3
 800a81c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a824:	d302      	bcc.n	800a82c <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800a826:	4b55      	ldr	r3, [pc, #340]	; (800a97c <VL53L0X_calc_dmax+0x238>)
 800a828:	663b      	str	r3, [r7, #96]	; 0x60
 800a82a:	e016      	b.n	800a85a <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a82e:	085a      	lsrs	r2, r3, #1
 800a830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a832:	441a      	add	r2, r3
 800a834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a836:	fbb2 f3f3 	udiv	r3, r2, r3
 800a83a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a83e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a840:	fb02 f303 	mul.w	r3, r2, r3
 800a844:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a848:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a84c:	0c1b      	lsrs	r3, r3, #16
 800a84e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a854:	fb02 f303 	mul.w	r3, r2, r3
 800a858:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a85c:	039b      	lsls	r3, r3, #14
 800a85e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a862:	4a47      	ldr	r2, [pc, #284]	; (800a980 <VL53L0X_calc_dmax+0x23c>)
 800a864:	fba2 2303 	umull	r2, r3, r2, r3
 800a868:	099b      	lsrs	r3, r3, #6
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a870:	fb02 f303 	mul.w	r3, r2, r3
 800a874:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a87a:	fb02 f303 	mul.w	r3, r2, r3
 800a87e:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	3308      	adds	r3, #8
 800a884:	091b      	lsrs	r3, r3, #4
 800a886:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a892:	4613      	mov	r3, r2
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	4413      	add	r3, r2
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a8a2:	0b9b      	lsrs	r3, r3, #14
 800a8a4:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a8a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8aa:	4413      	add	r3, r2
 800a8ac:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a8ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8b0:	085b      	lsrs	r3, r3, #1
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c0:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	039b      	lsls	r3, r3, #14
 800a8c6:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	085b      	lsrs	r3, r3, #1
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a8d2:	69ba      	ldr	r2, [r7, #24]
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8da:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8e0:	fb02 f303 	mul.w	r3, r2, r3
 800a8e4:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8ec:	4a24      	ldr	r2, [pc, #144]	; (800a980 <VL53L0X_calc_dmax+0x23c>)
 800a8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f2:	099b      	lsrs	r3, r3, #6
 800a8f4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	011b      	lsls	r3, r3, #4
 800a8fa:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a902:	4a1f      	ldr	r2, [pc, #124]	; (800a980 <VL53L0X_calc_dmax+0x23c>)
 800a904:	fba2 2303 	umull	r2, r3, r2, r3
 800a908:	099b      	lsrs	r3, r3, #6
 800a90a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90e:	3380      	adds	r3, #128	; 0x80
 800a910:	0a1b      	lsrs	r3, r3, #8
 800a912:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d008      	beq.n	800a92c <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	085a      	lsrs	r2, r3, #1
 800a91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a920:	441a      	add	r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	fbb2 f3f3 	udiv	r3, r2, r3
 800a928:	65bb      	str	r3, [r7, #88]	; 0x58
 800a92a:	e001      	b.n	800a930 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a930:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a932:	f7fe f9b7 	bl	8008ca4 <VL53L0X_isqrt>
 800a936:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d008      	beq.n	800a950 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	085a      	lsrs	r2, r3, #1
 800a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a944:	441a      	add	r2, r3
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a94e:	e001      	b.n	800a954 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a954:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a956:	f7fe f9a5 	bl	8008ca4 <VL53L0X_isqrt>
 800a95a:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a95c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a966:	429a      	cmp	r2, r3
 800a968:	d902      	bls.n	800a970 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800a96a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a96c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a96e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a970:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a974:	4618      	mov	r0, r3
 800a976:	3768      	adds	r7, #104	; 0x68
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	fff00000 	.word	0xfff00000
 800a980:	10624dd3 	.word	0x10624dd3

0800a984 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b0b4      	sub	sp, #208	; 0xd0
 800a988:	af04      	add	r7, sp, #16
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
 800a990:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a992:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a99a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a99e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a9a2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a9a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a9aa:	f241 235c 	movw	r3, #4700	; 0x125c
 800a9ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a9b2:	4b9e      	ldr	r3, [pc, #632]	; (800ac2c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a9b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a9b8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a9bc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a9be:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a9c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ca:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a9cc:	4b98      	ldr	r3, [pc, #608]	; (800ac30 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a9ce:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a9d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9d4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a9d6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a9da:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a9dc:	f240 6377 	movw	r3, #1655	; 0x677
 800a9e0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9f6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a9fa:	0c1b      	lsrs	r3, r3, #16
 800a9fc:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800aa04:	f107 0310 	add.w	r3, r7, #16
 800aa08:	461a      	mov	r2, r3
 800aa0a:	68b9      	ldr	r1, [r7, #8]
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7ff fe74 	bl	800a6fa <VL53L0X_get_total_signal_rate>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800aa18:	f107 0314 	add.w	r3, r7, #20
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff fe3b 	bl	800a69c <VL53L0X_get_total_xtalk_rate>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa32:	fb02 f303 	mul.w	r3, r2, r3
 800aa36:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800aa38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aa3e:	0c1b      	lsrs	r3, r3, #16
 800aa40:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa48:	fb02 f303 	mul.w	r3, r2, r3
 800aa4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800aa50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800aa54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d902      	bls.n	800aa60 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800aa5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800aa60:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d168      	bne.n	800ab3a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800aa6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800aa78:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800aa7c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800aa80:	461a      	mov	r2, r3
 800aa82:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7fe feb0 	bl	80097ec <VL53L0X_calc_timeout_mclks>
 800aa8c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800aa9e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800aaa2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7fe fe9d 	bl	80097ec <VL53L0X_calc_timeout_mclks>
 800aab2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800aab4:	2303      	movs	r3, #3
 800aab6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800aaba:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800aabe:	2b08      	cmp	r3, #8
 800aac0:	d102      	bne.n	800aac8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800aac2:	2302      	movs	r3, #2
 800aac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800aac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aaca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aacc:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800aace:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	02db      	lsls	r3, r3, #11
 800aad8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800aadc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aae0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aae4:	4a53      	ldr	r2, [pc, #332]	; (800ac34 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800aae6:	fba2 2303 	umull	r2, r3, r2, r3
 800aaea:	099b      	lsrs	r3, r3, #6
 800aaec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800aaf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aaf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aaf6:	fb02 f303 	mul.w	r3, r2, r3
 800aafa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800aafe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab02:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ab06:	4a4b      	ldr	r2, [pc, #300]	; (800ac34 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ab08:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0c:	099b      	lsrs	r3, r3, #6
 800ab0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	3380      	adds	r3, #128	; 0x80
 800ab16:	0a1b      	lsrs	r3, r3, #8
 800ab18:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
 800ab24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ab28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab2c:	3380      	adds	r3, #128	; 0x80
 800ab2e:	0a1b      	lsrs	r3, r3, #8
 800ab30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ab3a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800ab42:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ab46:	e165      	b.n	800ae14 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800ab48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10c      	bne.n	800ab68 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab54:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab5c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	e153      	b.n	800ae10 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800ab68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800ab76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab7a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ab7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab7e:	041a      	lsls	r2, r3, #16
 800ab80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ab8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d902      	bls.n	800ab9a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800ab94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ab9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ab9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aba2:	fb02 f303 	mul.w	r3, r2, r3
 800aba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800abaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800abae:	4613      	mov	r3, r2
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	4413      	add	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe f874 	bl	8008ca4 <VL53L0X_isqrt>
 800abbc:	4603      	mov	r3, r0
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	891b      	ldrh	r3, [r3, #8]
 800abc6:	461a      	mov	r2, r3
 800abc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abca:	fb03 f302 	mul.w	r3, r3, r2
 800abce:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800abd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abd2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800abd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abd8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800abda:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800abdc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800abe0:	4a14      	ldr	r2, [pc, #80]	; (800ac34 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	099b      	lsrs	r3, r3, #6
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800abea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abec:	041b      	lsls	r3, r3, #16
 800abee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800abf2:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800abf4:	fba2 2303 	umull	r2, r3, r2, r3
 800abf8:	099b      	lsrs	r3, r3, #6
 800abfa:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800abfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfe:	021b      	lsls	r3, r3, #8
 800ac00:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ac02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	bfb8      	it	lt
 800ac0e:	425b      	neglt	r3, r3
 800ac10:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ac12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	7e1b      	ldrb	r3, [r3, #24]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00b      	beq.n	800ac38 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800ac20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac28:	e035      	b.n	800ac96 <VL53L0X_calc_sigma_estimate+0x312>
 800ac2a:	bf00      	nop
 800ac2c:	028f87ae 	.word	0x028f87ae
 800ac30:	0006999a 	.word	0x0006999a
 800ac34:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ac38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ac46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac48:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800ac4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ac58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac5e:	4413      	add	r3, r2
 800ac60:	0c1b      	lsrs	r3, r3, #16
 800ac62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ac66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ac6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800ac72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ac7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac84:	fb02 f303 	mul.w	r3, r2, r3
 800ac88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800ac8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac90:	0b9b      	lsrs	r3, r3, #14
 800ac92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800ac96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac9c:	fb02 f303 	mul.w	r3, r2, r3
 800aca0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aca8:	0c1b      	lsrs	r3, r3, #16
 800acaa:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800acac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb0:	fb02 f303 	mul.w	r3, r2, r3
 800acb4:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800acb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800acba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800acc2:	0c1b      	lsrs	r3, r3, #16
 800acc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acca:	fb02 f303 	mul.w	r3, r2, r3
 800acce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800acd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd4:	4413      	add	r3, r2
 800acd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800acd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acda:	f7fd ffe3 	bl	8008ca4 <VL53L0X_isqrt>
 800acde:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	041b      	lsls	r3, r3, #16
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	3332      	adds	r3, #50	; 0x32
 800acea:	4a4c      	ldr	r2, [pc, #304]	; (800ae1c <VL53L0X_calc_sigma_estimate+0x498>)
 800acec:	fba2 2303 	umull	r2, r3, r2, r3
 800acf0:	095a      	lsrs	r2, r3, #5
 800acf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800acfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad00:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800ad04:	fb02 f303 	mul.w	r3, r2, r3
 800ad08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ad0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad10:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ad14:	3308      	adds	r3, #8
 800ad16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800ad1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad1e:	4a40      	ldr	r2, [pc, #256]	; (800ae20 <VL53L0X_calc_sigma_estimate+0x49c>)
 800ad20:	fba2 2303 	umull	r2, r3, r2, r3
 800ad24:	0b5b      	lsrs	r3, r3, #13
 800ad26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ad2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d902      	bls.n	800ad3a <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800ad34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800ad3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ad3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800ad48:	4a36      	ldr	r2, [pc, #216]	; (800ae24 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	099b      	lsrs	r3, r3, #6
 800ad50:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800ad56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad5a:	441a      	add	r2, r3
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd ff9e 	bl	8008ca4 <VL53L0X_isqrt>
 800ad68:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad76:	4a2b      	ldr	r2, [pc, #172]	; (800ae24 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800ad78:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7c:	099b      	lsrs	r3, r3, #6
 800ad7e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800ad80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad84:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad88:	fb02 f303 	mul.w	r3, r2, r3
 800ad8c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	69fa      	ldr	r2, [r7, #28]
 800ad92:	fb02 f303 	mul.w	r3, r2, r3
 800ad96:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800ad98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	4413      	add	r3, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fd ff80 	bl	8008ca4 <VL53L0X_isqrt>
 800ada4:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800adac:	fb02 f303 	mul.w	r3, r2, r3
 800adb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800adb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d009      	beq.n	800adce <VL53L0X_calc_sigma_estimate+0x44a>
 800adba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d005      	beq.n	800adce <VL53L0X_calc_sigma_estimate+0x44a>
 800adc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800adc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adca:	429a      	cmp	r2, r3
 800adcc:	d903      	bls.n	800add6 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800adce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800add2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800addc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800ade8:	6939      	ldr	r1, [r7, #16]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	9303      	str	r3, [sp, #12]
 800adee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff fc9d 	bl	800a744 <VL53L0X_calc_dmax>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae10:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	37c0      	adds	r7, #192	; 0xc0
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	51eb851f 	.word	0x51eb851f
 800ae20:	d1b71759 	.word	0xd1b71759
 800ae24:	10624dd3 	.word	0x10624dd3

0800ae28 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b090      	sub	sp, #64	; 0x40
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	607a      	str	r2, [r7, #4]
 800ae32:	461a      	mov	r2, r3
 800ae34:	460b      	mov	r3, r1
 800ae36:	72fb      	strb	r3, [r7, #11]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	10db      	asrs	r3, r3, #3
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ae88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d017      	beq.n	800aec0 <VL53L0X_get_pal_range_status+0x98>
 800ae90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae94:	2b05      	cmp	r3, #5
 800ae96:	d013      	beq.n	800aec0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ae98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae9c:	2b07      	cmp	r3, #7
 800ae9e:	d00f      	beq.n	800aec0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800aea0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aea4:	2b0c      	cmp	r3, #12
 800aea6:	d00b      	beq.n	800aec0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800aea8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aeac:	2b0d      	cmp	r3, #13
 800aeae:	d007      	beq.n	800aec0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800aeb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aeb4:	2b0e      	cmp	r3, #14
 800aeb6:	d003      	beq.n	800aec0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800aeb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aebc:	2b0f      	cmp	r3, #15
 800aebe:	d103      	bne.n	800aec8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800aec6:	e002      	b.n	800aece <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800aece:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800aed6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800aeda:	461a      	mov	r2, r3
 800aedc:	2100      	movs	r1, #0
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7fc f9e6 	bl	80072b0 <VL53L0X_GetLimitCheckEnable>
 800aee4:	4603      	mov	r3, r0
 800aee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800aeea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d02e      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x128>
 800aef2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d12a      	bne.n	800af50 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800aefa:	f107 0310 	add.w	r3, r7, #16
 800aefe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800af02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fd3d 	bl	800a984 <VL53L0X_calc_sigma_estimate>
 800af0a:	4603      	mov	r3, r0
 800af0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800af10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af14:	2b00      	cmp	r3, #0
 800af16:	d103      	bne.n	800af20 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af1e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800af20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af24:	2b00      	cmp	r3, #0
 800af26:	d113      	bne.n	800af50 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800af28:	f107 0320 	add.w	r3, r7, #32
 800af2c:	461a      	mov	r2, r3
 800af2e:	2100      	movs	r1, #0
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7fc fa43 	bl	80073bc <VL53L0X_GetLimitCheckValue>
 800af36:	4603      	mov	r3, r0
 800af38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d006      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800af42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af44:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800af46:	429a      	cmp	r2, r3
 800af48:	d902      	bls.n	800af50 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800af4a:	2301      	movs	r3, #1
 800af4c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800af50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800af58:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800af5c:	461a      	mov	r2, r3
 800af5e:	2102      	movs	r1, #2
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7fc f9a5 	bl	80072b0 <VL53L0X_GetLimitCheckEnable>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800af6c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800af70:	2b00      	cmp	r3, #0
 800af72:	d044      	beq.n	800affe <VL53L0X_get_pal_range_status+0x1d6>
 800af74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d140      	bne.n	800affe <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800af7c:	f107 031c 	add.w	r3, r7, #28
 800af80:	461a      	mov	r2, r3
 800af82:	2102      	movs	r1, #2
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7fc fa19 	bl	80073bc <VL53L0X_GetLimitCheckValue>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800af90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af94:	2b00      	cmp	r3, #0
 800af96:	d107      	bne.n	800afa8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af98:	2201      	movs	r2, #1
 800af9a:	21ff      	movs	r1, #255	; 0xff
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 fabf 	bl	800b520 <VL53L0X_WrByte>
 800afa2:	4603      	mov	r3, r0
 800afa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800afa8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afac:	2b00      	cmp	r3, #0
 800afae:	d109      	bne.n	800afc4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800afb0:	f107 0316 	add.w	r3, r7, #22
 800afb4:	461a      	mov	r2, r3
 800afb6:	21b6      	movs	r1, #182	; 0xb6
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f000 fb72 	bl	800b6a2 <VL53L0X_RdWord>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800afc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d107      	bne.n	800afdc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800afcc:	2200      	movs	r2, #0
 800afce:	21ff      	movs	r1, #255	; 0xff
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 faa5 	bl	800b520 <VL53L0X_WrByte>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800afdc:	8afb      	ldrh	r3, [r7, #22]
 800afde:	025b      	lsls	r3, r3, #9
 800afe0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afe6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d006      	beq.n	800affe <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800aff0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800aff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d902      	bls.n	800affe <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800affe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b002:	2b00      	cmp	r3, #0
 800b004:	d109      	bne.n	800b01a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b00a:	461a      	mov	r2, r3
 800b00c:	2103      	movs	r1, #3
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7fc f94e 	bl	80072b0 <VL53L0X_GetLimitCheckEnable>
 800b014:	4603      	mov	r3, r0
 800b016:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b01a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d023      	beq.n	800b06a <VL53L0X_get_pal_range_status+0x242>
 800b022:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b026:	2b00      	cmp	r3, #0
 800b028:	d11f      	bne.n	800b06a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b02a:	893b      	ldrh	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	637b      	str	r3, [r7, #52]	; 0x34
 800b034:	e005      	b.n	800b042 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	021a      	lsls	r2, r3, #8
 800b03a:	893b      	ldrh	r3, [r7, #8]
 800b03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b040:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b042:	f107 0318 	add.w	r3, r7, #24
 800b046:	461a      	mov	r2, r3
 800b048:	2103      	movs	r1, #3
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7fc f9b6 	bl	80073bc <VL53L0X_GetLimitCheckValue>
 800b050:	4603      	mov	r3, r0
 800b052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d006      	beq.n	800b06a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b05c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b05e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b060:	429a      	cmp	r2, r3
 800b062:	d202      	bcs.n	800b06a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b064:	2301      	movs	r3, #1
 800b066:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b06a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d14a      	bne.n	800b108 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b072:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b076:	2b01      	cmp	r3, #1
 800b078:	d103      	bne.n	800b082 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b07c:	22ff      	movs	r2, #255	; 0xff
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	e042      	b.n	800b108 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b082:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b086:	2b01      	cmp	r3, #1
 800b088:	d007      	beq.n	800b09a <VL53L0X_get_pal_range_status+0x272>
 800b08a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d003      	beq.n	800b09a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b092:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b096:	2b03      	cmp	r3, #3
 800b098:	d103      	bne.n	800b0a2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b09c:	2205      	movs	r2, #5
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	e032      	b.n	800b108 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b0a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b0a6:	2b06      	cmp	r3, #6
 800b0a8:	d003      	beq.n	800b0b2 <VL53L0X_get_pal_range_status+0x28a>
 800b0aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b0ae:	2b09      	cmp	r3, #9
 800b0b0:	d103      	bne.n	800b0ba <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b4:	2204      	movs	r2, #4
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	e026      	b.n	800b108 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b0ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b0be:	2b08      	cmp	r3, #8
 800b0c0:	d007      	beq.n	800b0d2 <VL53L0X_get_pal_range_status+0x2aa>
 800b0c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b0c6:	2b0a      	cmp	r3, #10
 800b0c8:	d003      	beq.n	800b0d2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b0ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d103      	bne.n	800b0da <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	e016      	b.n	800b108 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b0da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d003      	beq.n	800b0ea <VL53L0X_get_pal_range_status+0x2c2>
 800b0e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d103      	bne.n	800b0f2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	e00a      	b.n	800b108 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b0f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d103      	bne.n	800b102 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	e002      	b.n	800b108 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b104:	2200      	movs	r2, #0
 800b106:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b112:	2200      	movs	r2, #0
 800b114:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b116:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b11a:	461a      	mov	r2, r3
 800b11c:	2101      	movs	r1, #1
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7fc f8c6 	bl	80072b0 <VL53L0X_GetLimitCheckEnable>
 800b124:	4603      	mov	r3, r0
 800b126:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b12a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d14f      	bne.n	800b1d2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <VL53L0X_get_pal_range_status+0x31a>
 800b13a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d103      	bne.n	800b14a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b142:	2301      	movs	r3, #1
 800b144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b148:	e002      	b.n	800b150 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b156:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b15a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d003      	beq.n	800b16a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b162:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b166:	2b00      	cmp	r3, #0
 800b168:	d103      	bne.n	800b172 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b16a:	2301      	movs	r3, #1
 800b16c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b170:	e002      	b.n	800b178 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b17e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b182:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <VL53L0X_get_pal_range_status+0x36a>
 800b18a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d103      	bne.n	800b19a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b192:	2301      	movs	r3, #1
 800b194:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b198:	e002      	b.n	800b1a0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b1a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b1aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <VL53L0X_get_pal_range_status+0x392>
 800b1b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d103      	bne.n	800b1c2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1c0:	e002      	b.n	800b1c8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b1ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3740      	adds	r7, #64	; 0x40
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <VL53L0X_write_byte>:

#include "vl53l0x/vl53l0x_i2c_platform.h"

uint8_t _i2c_buffer[64];

int32_t VL53L0X_write_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t   data){
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af02      	add	r7, sp, #8
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	70fb      	strb	r3, [r7, #3]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70bb      	strb	r3, [r7, #2]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	707b      	strb	r3, [r7, #1]

	_i2c_buffer[0]=index;
 800b1fa:	4a0a      	ldr	r2, [pc, #40]	; (800b224 <VL53L0X_write_byte+0x44>)
 800b1fc:	78bb      	ldrb	r3, [r7, #2]
 800b1fe:	7013      	strb	r3, [r2, #0]
	_i2c_buffer[1]=data;
 800b200:	4a08      	ldr	r2, [pc, #32]	; (800b224 <VL53L0X_write_byte+0x44>)
 800b202:	787b      	ldrb	r3, [r7, #1]
 800b204:	7053      	strb	r3, [r2, #1]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,2,10);
 800b206:	78fb      	ldrb	r3, [r7, #3]
 800b208:	b299      	uxth	r1, r3
 800b20a:	230a      	movs	r3, #10
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	2302      	movs	r3, #2
 800b210:	4a04      	ldr	r2, [pc, #16]	; (800b224 <VL53L0X_write_byte+0x44>)
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7f6 fe48 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800b218:	4603      	mov	r3, r0

}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20000d1c 	.word	0x20000d1c

0800b228 <VL53L0X_read_byte>:

int32_t VL53L0X_read_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata){
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af02      	add	r7, sp, #8
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	607b      	str	r3, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	72fb      	strb	r3, [r7, #11]
 800b236:	4613      	mov	r3, r2
 800b238:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(i2c_handle,address,&index,1,10)){
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	b299      	uxth	r1, r3
 800b23e:	f107 020a 	add.w	r2, r7, #10
 800b242:	230a      	movs	r3, #10
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	2301      	movs	r3, #1
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f7f6 fe2d 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <VL53L0X_read_byte+0x30>
		return 1;
 800b254:	2301      	movs	r3, #1
 800b256:	e00c      	b.n	800b272 <VL53L0X_read_byte+0x4a>
	}

	return HAL_I2C_Master_Receive(i2c_handle,address|1,pdata,1,10);
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	f043 0301 	orr.w	r3, r3, #1
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	b299      	uxth	r1, r3
 800b262:	230a      	movs	r3, #10
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	2301      	movs	r3, #1
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7f6 ff2a 	bl	80020c4 <HAL_I2C_Master_Receive>
 800b270:	4603      	mov	r3, r0



}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint32_t *pdata) {
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af02      	add	r7, sp, #8
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	607b      	str	r3, [r7, #4]
 800b286:	460b      	mov	r3, r1
 800b288:	72fb      	strb	r3, [r7, #11]
 800b28a:	4613      	mov	r3, r2
 800b28c:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800b28e:	7afb      	ldrb	r3, [r7, #11]
 800b290:	b299      	uxth	r1, r3
 800b292:	f107 020a 	add.w	r2, r7, #10
 800b296:	230a      	movs	r3, #10
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	2301      	movs	r3, #1
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f7f6 fe03 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <VL53L0X_read_dword+0x30>
		return 1;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e021      	b.n	800b2f0 <VL53L0X_read_dword+0x74>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 4, 10)) {
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	f043 0301 	orr.w	r3, r3, #1
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	b299      	uxth	r1, r3
 800b2b6:	230a      	movs	r3, #10
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	2304      	movs	r3, #4
 800b2bc:	4a0e      	ldr	r2, [pc, #56]	; (800b2f8 <VL53L0X_read_dword+0x7c>)
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f7f6 ff00 	bl	80020c4 <HAL_I2C_Master_Receive>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <VL53L0X_read_dword+0x52>
		return 1;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e010      	b.n	800b2f0 <VL53L0X_read_dword+0x74>
	}

	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <VL53L0X_read_dword+0x7c>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) _i2c_buffer[1] << 16)
 800b2d4:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <VL53L0X_read_dword+0x7c>)
 800b2d6:	785b      	ldrb	r3, [r3, #1]
 800b2d8:	041b      	lsls	r3, r3, #16
 800b2da:	441a      	add	r2, r3
			+ ((uint32_t) _i2c_buffer[2] << 8) + (uint32_t) _i2c_buffer[3];
 800b2dc:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <VL53L0X_read_dword+0x7c>)
 800b2de:	789b      	ldrb	r3, [r3, #2]
 800b2e0:	021b      	lsls	r3, r3, #8
 800b2e2:	4413      	add	r3, r2
 800b2e4:	4a04      	ldr	r2, [pc, #16]	; (800b2f8 <VL53L0X_read_dword+0x7c>)
 800b2e6:	78d2      	ldrb	r2, [r2, #3]
 800b2e8:	441a      	add	r2, r3
	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	601a      	str	r2, [r3, #0]
	return 0;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20000d1c 	.word	0x20000d1c

0800b2fc <VL53L0X_write_word>:


int32_t VL53L0X_write_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t  data){
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af02      	add	r7, sp, #8
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
 800b308:	461a      	mov	r2, r3
 800b30a:	4603      	mov	r3, r0
 800b30c:	70fb      	strb	r3, [r7, #3]
 800b30e:	460b      	mov	r3, r1
 800b310:	70bb      	strb	r3, [r7, #2]
 800b312:	4613      	mov	r3, r2
 800b314:	803b      	strh	r3, [r7, #0]


    _i2c_buffer[0] = index;
 800b316:	4a0d      	ldr	r2, [pc, #52]	; (800b34c <VL53L0X_write_word+0x50>)
 800b318:	78bb      	ldrb	r3, [r7, #2]
 800b31a:	7013      	strb	r3, [r2, #0]
    _i2c_buffer[1] = data >> 8;
 800b31c:	883b      	ldrh	r3, [r7, #0]
 800b31e:	0a1b      	lsrs	r3, r3, #8
 800b320:	b29b      	uxth	r3, r3
 800b322:	b2da      	uxtb	r2, r3
 800b324:	4b09      	ldr	r3, [pc, #36]	; (800b34c <VL53L0X_write_word+0x50>)
 800b326:	705a      	strb	r2, [r3, #1]
    _i2c_buffer[2] = data & 0x00FF;
 800b328:	883b      	ldrh	r3, [r7, #0]
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	4b07      	ldr	r3, [pc, #28]	; (800b34c <VL53L0X_write_word+0x50>)
 800b32e:	709a      	strb	r2, [r3, #2]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,3,10);
 800b330:	78fb      	ldrb	r3, [r7, #3]
 800b332:	b299      	uxth	r1, r3
 800b334:	230a      	movs	r3, #10
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	2303      	movs	r3, #3
 800b33a:	4a04      	ldr	r2, [pc, #16]	; (800b34c <VL53L0X_write_word+0x50>)
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7f6 fdb3 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800b342:	4603      	mov	r3, r0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20000d1c 	.word	0x20000d1c

0800b350 <VL53L0X_read_word>:


int32_t VL53L0X_read_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t *pdata){
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	607b      	str	r3, [r7, #4]
 800b35a:	460b      	mov	r3, r1
 800b35c:	72fb      	strb	r3, [r7, #11]
 800b35e:	4613      	mov	r3, r2
 800b360:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800b362:	7afb      	ldrb	r3, [r7, #11]
 800b364:	b299      	uxth	r1, r3
 800b366:	f107 020a 	add.w	r2, r7, #10
 800b36a:	230a      	movs	r3, #10
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2301      	movs	r3, #1
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7f6 fd99 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <VL53L0X_read_word+0x30>
		return 1;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e01d      	b.n	800b3bc <VL53L0X_read_word+0x6c>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 2, 10)) {
 800b380:	7afb      	ldrb	r3, [r7, #11]
 800b382:	f043 0301 	orr.w	r3, r3, #1
 800b386:	b2db      	uxtb	r3, r3
 800b388:	b299      	uxth	r1, r3
 800b38a:	230a      	movs	r3, #10
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	2302      	movs	r3, #2
 800b390:	4a0c      	ldr	r2, [pc, #48]	; (800b3c4 <VL53L0X_read_word+0x74>)
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7f6 fe96 	bl	80020c4 <HAL_I2C_Master_Receive>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <VL53L0X_read_word+0x52>
		return 1;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e00c      	b.n	800b3bc <VL53L0X_read_word+0x6c>
	}

	 *pdata = ((uint16_t)_i2c_buffer[0]<<8) + (uint16_t)_i2c_buffer[1];
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <VL53L0X_read_word+0x74>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	021b      	lsls	r3, r3, #8
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <VL53L0X_read_word+0x74>)
 800b3ae:	785b      	ldrb	r3, [r3, #1]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	801a      	strh	r2, [r3, #0]
	return 0;
 800b3ba:	2300      	movs	r3, #0

}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000d1c 	.word	0x20000d1c

0800b3c8 <VL53L0X_read_multi>:


int32_t VL53L0X_read_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata, int32_t count){
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af02      	add	r7, sp, #8
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	607b      	str	r3, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	72fb      	strb	r3, [r7, #11]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800b3da:	7afb      	ldrb	r3, [r7, #11]
 800b3dc:	b299      	uxth	r1, r3
 800b3de:	f107 020a 	add.w	r2, r7, #10
 800b3e2:	230a      	movs	r3, #10
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7f6 fd5d 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <VL53L0X_read_multi+0x30>
		return 1;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e013      	b.n	800b420 <VL53L0X_read_multi+0x58>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, pdata, count, 10)) {
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	f043 0301 	orr.w	r3, r3, #1
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	b299      	uxth	r1, r3
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	b29a      	uxth	r2, r3
 800b406:	230a      	movs	r3, #10
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	4613      	mov	r3, r2
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f7f6 fe58 	bl	80020c4 <HAL_I2C_Master_Receive>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <VL53L0X_read_multi+0x56>
		return 1;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <VL53L0X_read_multi+0x58>
	}

	return 0;
 800b41e:	2300      	movs	r3, #0


}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <VL53L0X_write_multi>:


int32_t VL53L0X_write_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint8_t  *pdata, int32_t count){
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	607b      	str	r3, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	72fb      	strb	r3, [r7, #11]
 800b436:	4613      	mov	r3, r2
 800b438:	72bb      	strb	r3, [r7, #10]
    _i2c_buffer[0] = index;
 800b43a:	4a0d      	ldr	r2, [pc, #52]	; (800b470 <VL53L0X_write_multi+0x48>)
 800b43c:	7abb      	ldrb	r3, [r7, #10]
 800b43e:	7013      	strb	r3, [r2, #0]
    memcpy(&_i2c_buffer[1], pdata, count);
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	461a      	mov	r2, r3
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	480b      	ldr	r0, [pc, #44]	; (800b474 <VL53L0X_write_multi+0x4c>)
 800b448:	f005 ff6c 	bl	8011324 <memcpy>

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,count+1,10);
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	b299      	uxth	r1, r3
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	b29b      	uxth	r3, r3
 800b454:	3301      	adds	r3, #1
 800b456:	b29a      	uxth	r2, r3
 800b458:	230a      	movs	r3, #10
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	4613      	mov	r3, r2
 800b45e:	4a04      	ldr	r2, [pc, #16]	; (800b470 <VL53L0X_write_multi+0x48>)
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7f6 fd21 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800b466:	4603      	mov	r3, r0

}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000d1c 	.word	0x20000d1c
 800b474:	20000d1d 	.word	0x20000d1d

0800b478 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08a      	sub	sp, #40	; 0x28
 800b47c:	af02      	add	r7, sp, #8
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	607a      	str	r2, [r7, #4]
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	460b      	mov	r3, r1
 800b486:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b488:	2300      	movs	r3, #0
 800b48a:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b3f      	cmp	r3, #63	; 0x3f
 800b494:	d901      	bls.n	800b49a <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b496:	23fc      	movs	r3, #252	; 0xfc
 800b498:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b4a0:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	7afa      	ldrb	r2, [r7, #11]
 800b4ac:	7df9      	ldrb	r1, [r7, #23]
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f7ff ffb9 	bl	800b428 <VL53L0X_write_multi>
 800b4b6:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b4be:	23ec      	movs	r3, #236	; 0xec
 800b4c0:	77fb      	strb	r3, [r7, #31]

    return Status;
 800b4c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3720      	adds	r7, #32
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b088      	sub	sp, #32
 800b4d2:	af02      	add	r7, sp, #8
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
 800b4da:	460b      	mov	r3, r1
 800b4dc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	2b3f      	cmp	r3, #63	; 0x3f
 800b4e6:	d901      	bls.n	800b4ec <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b4e8:	23fc      	movs	r3, #252	; 0xfc
 800b4ea:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b4f2:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	7afa      	ldrb	r2, [r7, #11]
 800b4fe:	7db9      	ldrb	r1, [r7, #22]
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f7ff ff60 	bl	800b3c8 <VL53L0X_read_multi>
 800b508:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <VL53L0X_ReadMulti+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b510:	23ec      	movs	r3, #236	; 0xec
 800b512:	75fb      	strb	r3, [r7, #23]

    return Status;
 800b514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
 800b52c:	4613      	mov	r3, r2
 800b52e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b53a:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b542:	78bb      	ldrb	r3, [r7, #2]
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	7bb9      	ldrb	r1, [r7, #14]
 800b548:	f7ff fe4a 	bl	800b1e0 <VL53L0X_write_byte>
 800b54c:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <VL53L0X_WrByte+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b554:	23ec      	movs	r3, #236	; 0xec
 800b556:	73fb      	strb	r3, [r7, #15]

    return Status;
 800b558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
 800b570:	4613      	mov	r3, r2
 800b572:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b57e:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(Dev->i2c_handle,deviceAddress, index, data);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b586:	883b      	ldrh	r3, [r7, #0]
 800b588:	78fa      	ldrb	r2, [r7, #3]
 800b58a:	7bb9      	ldrb	r1, [r7, #14]
 800b58c:	f7ff feb6 	bl	800b2fc <VL53L0X_write_word>
 800b590:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <VL53L0X_WrWord+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b598:	23ec      	movs	r3, #236	; 0xec
 800b59a:	73fb      	strb	r3, [r7, #15]

    return Status;
 800b59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data){
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b5c0:	75bb      	strb	r3, [r7, #22]

	//status_int = VL53L0X_write_dword(Dev->i2c_handle,deviceAddress, index, data);

	if (status_int != 0)
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <VL53L0X_WrDWord+0x24>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5c8:	23ec      	movs	r3, #236	; 0xec
 800b5ca:	75fb      	strb	r3, [r7, #23]

    return Status;
 800b5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	371c      	adds	r7, #28
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	70fb      	strb	r3, [r7, #3]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	70bb      	strb	r3, [r7, #2]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b600:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, &data);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b608:	f107 030f 	add.w	r3, r7, #15
 800b60c:	78fa      	ldrb	r2, [r7, #3]
 800b60e:	7db9      	ldrb	r1, [r7, #22]
 800b610:	f7ff fe0a 	bl	800b228 <VL53L0X_read_byte>
 800b614:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <VL53L0X_UpdateByte+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b61c:	23ec      	movs	r3, #236	; 0xec
 800b61e:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 800b620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d115      	bne.n	800b654 <VL53L0X_UpdateByte+0x78>
        data = (data & AndData) | OrData;
 800b628:	7bfa      	ldrb	r2, [r7, #15]
 800b62a:	78bb      	ldrb	r3, [r7, #2]
 800b62c:	4013      	ands	r3, r2
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	787b      	ldrb	r3, [r7, #1]
 800b632:	4313      	orrs	r3, r2
 800b634:	b2db      	uxtb	r3, r3
 800b636:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
 800b640:	78fa      	ldrb	r2, [r7, #3]
 800b642:	7db9      	ldrb	r1, [r7, #22]
 800b644:	f7ff fdcc 	bl	800b1e0 <VL53L0X_write_byte>
 800b648:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <VL53L0X_UpdateByte+0x78>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b650:	23ec      	movs	r3, #236	; 0xec
 800b652:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800b654:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	460b      	mov	r3, r1
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b66e:	2300      	movs	r3, #0
 800b670:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b678:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, data);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b680:	7afa      	ldrb	r2, [r7, #11]
 800b682:	7db9      	ldrb	r1, [r7, #22]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f7ff fdcf 	bl	800b228 <VL53L0X_read_byte>
 800b68a:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <VL53L0X_RdByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b692:	23ec      	movs	r3, #236	; 0xec
 800b694:	75fb      	strb	r3, [r7, #23]

    return Status;
 800b696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b086      	sub	sp, #24
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b6ba:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(Dev->i2c_handle,deviceAddress, index, data);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b6c2:	7afa      	ldrb	r2, [r7, #11]
 800b6c4:	7db9      	ldrb	r1, [r7, #22]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f7ff fe42 	bl	800b350 <VL53L0X_read_word>
 800b6cc:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <VL53L0X_RdWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b6d4:	23ec      	movs	r3, #236	; 0xec
 800b6d6:	75fb      	strb	r3, [r7, #23]

    return Status;
 800b6d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800b6fc:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(Dev->i2c_handle,deviceAddress, index, data);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800b704:	7afa      	ldrb	r2, [r7, #11]
 800b706:	7db9      	ldrb	r1, [r7, #22]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f7ff fdb7 	bl	800b27c <VL53L0X_read_dword>
 800b70e:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <VL53L0X_RdDWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b716:	23ec      	movs	r3, #236	; 0xec
 800b718:	75fb      	strb	r3, [r7, #23]

    return Status;
 800b71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b730:	2300      	movs	r3, #0
 800b732:	72fb      	strb	r3, [r7, #11]
    LOG_FUNCTION_START("");

    //czekaj 2 ms nie rob nic
    //HAL_Delay(2);

	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 800b734:	2300      	movs	r3, #0
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e002      	b.n	800b740 <VL53L0X_PollingDelay+0x18>
		time++;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3301      	adds	r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]
	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4a05      	ldr	r2, [pc, #20]	; (800b758 <VL53L0X_PollingDelay+0x30>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d9f8      	bls.n	800b73a <VL53L0X_PollingDelay+0x12>
	}

    LOG_FUNCTION_END(status);
    return status;
 800b748:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	0003d08f 	.word	0x0003d08f

0800b75c <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b764:	2300      	movs	r3, #0
 800b766:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800b768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d105      	bne.n	800b77c <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800b770:	2101      	movs	r1, #1
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 f84a 	bl	800c80c <VL53L1_data_init>
 800b778:	4603      	mov	r3, r0
 800b77a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 800b77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d107      	bne.n	800b794 <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2208      	movs	r2, #8
 800b790:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b794:	2300      	movs	r3, #0
 800b796:	73bb      	strb	r3, [r7, #14]
 800b798:	e012      	b.n	800b7c0 <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 800b79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d112      	bne.n	800b7c8 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fbf1 	bl	800bf92 <VL53L1_SetLimitCheckEnable>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b7ba:	7bbb      	ldrb	r3, [r7, #14]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	73bb      	strb	r3, [r7, #14]
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d9e9      	bls.n	800b79a <VL53L1_DataInit+0x3e>
 800b7c6:	e000      	b.n	800b7ca <VL53L1_DataInit+0x6e>
		else
			break;
 800b7c8:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 800b7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d107      	bne.n	800b7e2 <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800b7d2:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fc3b 	bl	800c054 <VL53L1_SetLimitCheckValue>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 800b7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d107      	bne.n	800b7fa <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800b7ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fc2f 	bl	800c054 <VL53L1_SetLimitCheckValue>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2203      	movs	r2, #3
 800b816:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800b81a:	2320      	movs	r3, #32
 800b81c:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	7bba      	ldrb	r2, [r7, #14]
 800b822:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2203      	movs	r2, #3
 800b828:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2203      	movs	r2, #3
 800b830:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2203      	movs	r2, #3
 800b838:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800b83c:	2108      	movs	r1, #8
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f8ed 	bl	800ba1e <VL53L1_SetPresetMode>
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 800b848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800b860:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f005 facd 	bl	8010e04 <VL53L1_poll_for_boot_completion>
 800b86a:	4603      	mov	r3, r0
 800b86c:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b86e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	603a      	str	r2, [r7, #0]
 800b886:	71fb      	strb	r3, [r7, #7]
 800b888:	460b      	mov	r3, r1
 800b88a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800b890:	4a2c      	ldr	r2, [pc, #176]	; (800b944 <ComputeDevicePresetMode+0xc8>)
 800b892:	f107 0310 	add.w	r3, r7, #16
 800b896:	6812      	ldr	r2, [r2, #0]
 800b898:	4611      	mov	r1, r2
 800b89a:	8019      	strh	r1, [r3, #0]
 800b89c:	3302      	adds	r3, #2
 800b89e:	0c12      	lsrs	r2, r2, #16
 800b8a0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800b8a2:	4a29      	ldr	r2, [pc, #164]	; (800b948 <ComputeDevicePresetMode+0xcc>)
 800b8a4:	f107 030c 	add.w	r3, r7, #12
 800b8a8:	6812      	ldr	r2, [r2, #0]
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	8019      	strh	r1, [r3, #0]
 800b8ae:	3302      	adds	r3, #2
 800b8b0:	0c12      	lsrs	r2, r2, #16
 800b8b2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800b8b4:	4a25      	ldr	r2, [pc, #148]	; (800b94c <ComputeDevicePresetMode+0xd0>)
 800b8b6:	f107 0308 	add.w	r3, r7, #8
 800b8ba:	6812      	ldr	r2, [r2, #0]
 800b8bc:	4611      	mov	r1, r2
 800b8be:	8019      	strh	r1, [r3, #0]
 800b8c0:	3302      	adds	r3, #2
 800b8c2:	0c12      	lsrs	r2, r2, #16
 800b8c4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800b8cc:	79bb      	ldrb	r3, [r7, #6]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d002      	beq.n	800b8d8 <ComputeDevicePresetMode+0x5c>
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d003      	beq.n	800b8de <ComputeDevicePresetMode+0x62>
 800b8d6:	e005      	b.n	800b8e4 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75bb      	strb	r3, [r7, #22]
		break;
 800b8dc:	e004      	b.n	800b8e8 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	75bb      	strb	r3, [r7, #22]
		break;
 800b8e2:	e001      	b.n	800b8e8 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800b8e8:	79fb      	ldrb	r3, [r7, #7]
 800b8ea:	2b04      	cmp	r3, #4
 800b8ec:	d004      	beq.n	800b8f8 <ComputeDevicePresetMode+0x7c>
 800b8ee:	2b08      	cmp	r3, #8
 800b8f0:	d014      	beq.n	800b91c <ComputeDevicePresetMode+0xa0>
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d009      	beq.n	800b90a <ComputeDevicePresetMode+0x8e>
 800b8f6:	e01a      	b.n	800b92e <ComputeDevicePresetMode+0xb2>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800b8f8:	7dbb      	ldrb	r3, [r7, #22]
 800b8fa:	f107 0218 	add.w	r2, r7, #24
 800b8fe:	4413      	add	r3, r2
 800b900:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	701a      	strb	r2, [r3, #0]
		break;
 800b908:	e013      	b.n	800b932 <ComputeDevicePresetMode+0xb6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800b90a:	7dbb      	ldrb	r3, [r7, #22]
 800b90c:	f107 0218 	add.w	r2, r7, #24
 800b910:	4413      	add	r3, r2
 800b912:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	701a      	strb	r2, [r3, #0]
		break;
 800b91a:	e00a      	b.n	800b932 <ComputeDevicePresetMode+0xb6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800b91c:	7dbb      	ldrb	r3, [r7, #22]
 800b91e:	f107 0218 	add.w	r2, r7, #24
 800b922:	4413      	add	r3, r2
 800b924:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	701a      	strb	r2, [r3, #0]
		break;
 800b92c:	e001      	b.n	800b932 <ComputeDevicePresetMode+0xb6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b92e:	23f8      	movs	r3, #248	; 0xf8
 800b930:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800b932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b936:	4618      	mov	r0, r3
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	080127bc 	.word	0x080127bc
 800b948:	080127c0 	.word	0x080127c0
 800b94c:	080127c4 	.word	0x080127c4

0800b950 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800b950:	b5b0      	push	{r4, r5, r7, lr}
 800b952:	b08e      	sub	sp, #56	; 0x38
 800b954:	af04      	add	r7, sp, #16
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	607b      	str	r3, [r7, #4]
 800b95a:	460b      	mov	r3, r1
 800b95c:	72fb      	strb	r3, [r7, #11]
 800b95e:	4613      	mov	r3, r2
 800b960:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b962:	2300      	movs	r3, #0
 800b964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800b968:	7afb      	ldrb	r3, [r7, #11]
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d002      	beq.n	800b974 <SetPresetMode+0x24>
 800b96e:	7afb      	ldrb	r3, [r7, #11]
 800b970:	2b08      	cmp	r3, #8
 800b972:	d103      	bne.n	800b97c <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800b974:	2340      	movs	r3, #64	; 0x40
 800b976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b97a:	e002      	b.n	800b982 <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800b97c:	2320      	movs	r3, #32
 800b97e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800b982:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800b986:	7ab9      	ldrb	r1, [r7, #10]
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7ff ff76 	bl	800b87c <ComputeDevicePresetMode>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800b996:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d112      	bne.n	800b9c4 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800b99e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800b9a2:	f107 001c 	add.w	r0, r7, #28
 800b9a6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800b9aa:	f107 0314 	add.w	r3, r7, #20
 800b9ae:	9301      	str	r3, [sp, #4]
 800b9b0:	f107 0318 	add.w	r3, r7, #24
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f001 f9e7 	bl	800cd8c <VL53L1_get_preset_mode_timing_cfg>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800b9c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d112      	bne.n	800b9f2 <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 800b9cc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800b9d0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800b9d2:	69fd      	ldr	r5, [r7, #28]
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	6879      	ldr	r1, [r7, #4]
 800b9da:	9102      	str	r1, [sp, #8]
 800b9dc:	9201      	str	r2, [sp, #4]
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	462b      	mov	r3, r5
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	4601      	mov	r1, r0
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f001 fa7a 	bl	800cee0 <VL53L1_set_preset_mode>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800b9f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba00:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 800ba02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d103      	bne.n	800ba12 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	7afa      	ldrb	r2, [r7, #11]
 800ba0e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800ba12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3728      	adds	r7, #40	; 0x28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bdb0      	pop	{r4, r5, r7, pc}

0800ba1e <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	460b      	mov	r3, r1
 800ba28:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 800ba32:	7bba      	ldrb	r2, [r7, #14]
 800ba34:	78f9      	ldrb	r1, [r7, #3]
 800ba36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7ff ff88 	bl	800b950 <SetPresetMode>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800ba44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d11f      	bne.n	800ba8c <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	7bba      	ldrb	r2, [r7, #14]
 800ba50:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7bba      	ldrb	r2, [r7, #14]
 800ba58:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800ba5c:	78fb      	ldrb	r3, [r7, #3]
 800ba5e:	2b04      	cmp	r3, #4
 800ba60:	d005      	beq.n	800ba6e <VL53L1_SetPresetMode+0x50>
 800ba62:	78fb      	ldrb	r3, [r7, #3]
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d002      	beq.n	800ba6e <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	2b08      	cmp	r3, #8
 800ba6c:	d107      	bne.n	800ba7e <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ba6e:	f24a 0128 	movw	r1, #41000	; 0xa028
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f8a2 	bl	800bbbc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73fb      	strb	r3, [r7, #15]
 800ba7c:	e006      	b.n	800ba8c <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ba7e:	f248 2135 	movw	r1, #33333	; 0x8235
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f89a 	bl	800bbbc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ba8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d106      	bne.n	800baa2 <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800ba94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fa0d 	bl	800beb8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800baa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b088      	sub	sp, #32
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800baba:	2300      	movs	r3, #0
 800babc:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800bac4:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d008      	beq.n	800bade <VL53L1_SetDistanceMode+0x30>
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d005      	beq.n	800bade <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800bad2:	78fb      	ldrb	r3, [r7, #3]
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d002      	beq.n	800bade <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800bad8:	f06f 0303 	mvn.w	r3, #3
 800badc:	e069      	b.n	800bbb2 <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 800bade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10a      	bne.n	800bafc <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 800bae6:	78fb      	ldrb	r3, [r7, #3]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d002      	beq.n	800baf2 <VL53L1_SetDistanceMode+0x44>
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d102      	bne.n	800baf8 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 800baf2:	78fb      	ldrb	r3, [r7, #3]
 800baf4:	77bb      	strb	r3, [r7, #30]
 800baf6:	e001      	b.n	800bafc <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800baf8:	2303      	movs	r3, #3
 800bafa:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 800bafc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d107      	bne.n	800bb14 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800bb04:	f107 0308 	add.w	r3, r7, #8
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 f8e7 	bl	800ccde <VL53L1_get_user_zone>
 800bb10:	4603      	mov	r3, r0
 800bb12:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800bb1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10a      	bne.n	800bb38 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800bb22:	f107 0314 	add.w	r3, r7, #20
 800bb26:	f107 0210 	add.w	r2, r7, #16
 800bb2a:	f107 010c 	add.w	r1, r7, #12
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f001 f810 	bl	800cb54 <VL53L1_get_timeouts_us>
 800bb34:	4603      	mov	r3, r0
 800bb36:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800bb38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d107      	bne.n	800bb50 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 800bb40:	7fba      	ldrb	r2, [r7, #30]
 800bb42:	7f79      	ldrb	r1, [r7, #29]
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7ff ff02 	bl	800b950 <SetPresetMode>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800bb50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10b      	bne.n	800bb70 <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	7fba      	ldrb	r2, [r7, #30]
 800bb5c:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	7fba      	ldrb	r2, [r7, #30]
 800bb64:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	78fa      	ldrb	r2, [r7, #3]
 800bb6c:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800bb70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10e      	bne.n	800bb96 <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800bb78:	68f9      	ldr	r1, [r7, #12]
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 ffb0 	bl	800cae4 <VL53L1_set_timeouts_us>
 800bb84:	4603      	mov	r3, r0
 800bb86:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800bb88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d102      	bne.n	800bb96 <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800bb96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d107      	bne.n	800bbae <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800bb9e:	f107 0308 	add.w	r3, r7, #8
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f001 f877 	bl	800cc98 <VL53L1_set_user_zone>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800bbae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08c      	sub	sp, #48	; 0x30
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800bbcc:	4b63      	ldr	r3, [pc, #396]	; (800bd5c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a0>)
 800bbce:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	4a63      	ldr	r2, [pc, #396]	; (800bd60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d902      	bls.n	800bbde <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800bbd8:	23fc      	movs	r3, #252	; 0xfc
 800bbda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800bbde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d109      	bne.n	800bbfa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800bbe6:	f107 031a 	add.w	r3, r7, #26
 800bbea:	461a      	mov	r2, r3
 800bbec:	2105      	movs	r1, #5
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fac0 	bl	800c174 <VL53L1_GetSequenceStepEnable>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800bbfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d109      	bne.n	800bc16 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800bc02:	f107 0319 	add.w	r3, r7, #25
 800bc06:	461a      	mov	r2, r3
 800bc08:	2106      	movs	r1, #6
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fab2 	bl	800c174 <VL53L1_GetSequenceStepEnable>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800bc16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10b      	bne.n	800bc36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 800bc1e:	f107 0314 	add.w	r3, r7, #20
 800bc22:	f107 0210 	add.w	r2, r7, #16
 800bc26:	f107 010c 	add.w	r1, r7, #12
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 ff92 	bl	800cb54 <VL53L1_get_timeouts_us>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800bc36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d17f      	bne.n	800bd3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800bc44:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800bc4e:	7efb      	ldrb	r3, [r7, #27]
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d004      	beq.n	800bc5e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xa2>
 800bc54:	2b08      	cmp	r3, #8
 800bc56:	d023      	beq.n	800bca0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe4>
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d00e      	beq.n	800bc7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
 800bc5c:	e03f      	b.n	800bcde <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x122>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800bc5e:	7ebb      	ldrb	r3, [r7, #26]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d002      	beq.n	800bc6a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xae>
 800bc64:	7e7b      	ldrb	r3, [r7, #25]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d103      	bne.n	800bc72 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
				TimingGuard = 5000;
 800bc6a:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc6e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800bc70:	e038      	b.n	800bce4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>
				TimingGuard = 1000;
 800bc72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc76:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800bc78:	e034      	b.n	800bce4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800bc80:	7ebb      	ldrb	r3, [r7, #26]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d002      	beq.n	800bc8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd0>
 800bc86:	7e7b      	ldrb	r3, [r7, #25]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d103      	bne.n	800bc94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
				TimingGuard = 26600;
 800bc8c:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800bc90:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc92:	e002      	b.n	800bc9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
			else
				TimingGuard = 21600;
 800bc94:	f245 4360 	movw	r3, #21600	; 0x5460
 800bc98:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800bc9a:	2302      	movs	r3, #2
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800bc9e:	e021      	b.n	800bce4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	005b      	lsls	r3, r3, #1
 800bca4:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800bca6:	23f5      	movs	r3, #245	; 0xf5
 800bca8:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800bcaa:	f107 0308 	add.w	r3, r7, #8
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f248 0136 	movw	r1, #32822	; 0x8036
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 ffd3 	bl	800dc60 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dd07      	ble.n	800bcd0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
				vhv += vhv_loops *
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	22f5      	movs	r2, #245	; 0xf5
 800bcc4:	fb02 f303 	mul.w	r3, r2, r3
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	4413      	add	r3, r2
 800bcce:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800bcd8:	2302      	movs	r3, #2
 800bcda:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800bcdc:	e002      	b.n	800bce4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800bcde:	23f8      	movs	r3, #248	; 0xf8
 800bce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d803      	bhi.n	800bcf4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800bcec:	23fc      	movs	r3, #252	; 0xfc
 800bcee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bcf2:	e003      	b.n	800bcfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800bcfa:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800bcfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d11c      	bne.n	800bd3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d903      	bls.n	800bd14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800bd0c:	23fc      	movs	r3, #252	; 0xfc
 800bd0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bd12:	e00d      	b.n	800bd30 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x174>
			else {
				TimingBudget /= divisor;
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1c:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800bd1e:	68f9      	ldr	r1, [r7, #12]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fedd 	bl	800cae4 <VL53L1_set_timeouts_us>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800bd30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d102      	bne.n	800bd3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
				VL53L1DevDataSet(Dev,
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800bd3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d103      	bne.n	800bd4e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x192>
		VL53L1DevDataSet(Dev,
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3730      	adds	r7, #48	; 0x30
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	00086470 	.word	0x00086470
 800bd60:	00989680 	.word	0x00989680

0800bd64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08c      	sub	sp, #48	; 0x30
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800bd92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d109      	bne.n	800bdae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800bd9a:	f107 031b 	add.w	r3, r7, #27
 800bd9e:	461a      	mov	r2, r3
 800bda0:	2105      	movs	r1, #5
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f9e6 	bl	800c174 <VL53L1_GetSequenceStepEnable>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800bdae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d109      	bne.n	800bdca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800bdb6:	f107 031a 	add.w	r3, r7, #26
 800bdba:	461a      	mov	r2, r3
 800bdbc:	2106      	movs	r1, #6
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f9d8 	bl	800c174 <VL53L1_GetSequenceStepEnable>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800bdca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10b      	bne.n	800bdea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800bdd2:	f107 0310 	add.w	r3, r7, #16
 800bdd6:	f107 0214 	add.w	r2, r7, #20
 800bdda:	f107 010c 	add.w	r1, r7, #12
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 feb8 	bl	800cb54 <VL53L1_get_timeouts_us>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800bdea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d154      	bne.n	800be9c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800bdf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		switch (PresetMode) {
 800bdfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be00:	2b04      	cmp	r3, #4
 800be02:	d004      	beq.n	800be0e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xaa>
 800be04:	2b08      	cmp	r3, #8
 800be06:	d027      	beq.n	800be58 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf4>
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d011      	beq.n	800be30 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 800be0c:	e043      	b.n	800be96 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x132>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800be0e:	7efb      	ldrb	r3, [r7, #27]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d002      	beq.n	800be1a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb6>
 800be14:	7ebb      	ldrb	r3, [r7, #26]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d105      	bne.n	800be26 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc2>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800be20:	3308      	adds	r3, #8
 800be22:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800be24:	e03a      	b.n	800be9c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800be2c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800be2e:	e035      	b.n	800be9c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800be30:	7efb      	ldrb	r3, [r7, #27]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d002      	beq.n	800be3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 800be36:	7ebb      	ldrb	r3, [r7, #26]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d106      	bne.n	800be4a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe6>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800be42:	3334      	adds	r3, #52	; 0x34
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800be48:	e028      	b.n	800be9c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800be50:	3330      	adds	r3, #48	; 0x30
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800be56:	e021      	b.n	800be9c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800be58:	23f5      	movs	r3, #245	; 0xf5
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800be5c:	f107 0308 	add.w	r3, r7, #8
 800be60:	461a      	mov	r2, r3
 800be62:	f248 0136 	movw	r1, #32822	; 0x8036
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 fefa 	bl	800dc60 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dd07      	ble.n	800be82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x11e>
				vhv += vhv_loops *
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	22f5      	movs	r2, #245	; 0xf5
 800be76:	fb02 f303 	mul.w	r3, r2, r3
 800be7a:	461a      	mov	r2, r3
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	4413      	add	r3, r2
 800be80:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800be88:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	005a      	lsls	r2, r3, #1
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	4413      	add	r3, r2
 800be92:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800be94:	e002      	b.n	800be9c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800be96:	23f8      	movs	r3, #248	; 0xf8
 800be98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 800be9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x146>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bea8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800beaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3730      	adds	r7, #48	; 0x30
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	019b      	lsls	r3, r3, #6
 800bece:	4a09      	ldr	r2, [pc, #36]	; (800bef4 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800bed0:	fba2 2303 	umull	r2, r3, r2, r3
 800bed4:	099b      	lsrs	r3, r3, #6
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	4413      	add	r3, r2
 800beda:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fdb1 	bl	800ca46 <VL53L1_set_inter_measurement_period_ms>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800bee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	10624dd3 	.word	0x10624dd3

0800bef8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800bf06:	f107 0308 	add.w	r3, r7, #8
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fdc3 	bl	800ca98 <VL53L1_get_inter_measurement_period_ms>
 800bf12:	4603      	mov	r3, r0
 800bf14:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	019b      	lsls	r3, r3, #6
 800bf1c:	4907      	ldr	r1, [pc, #28]	; (800bf3c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800bf1e:	fba1 1303 	umull	r1, r3, r1, r3
 800bf22:	099b      	lsrs	r3, r3, #6
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800bf2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	10624dd3 	.word	0x10624dd3

0800bf40 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800bf52:	897b      	ldrh	r3, [r7, #10]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <SetLimitValue+0x1e>
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d009      	beq.n	800bf70 <SetLimitValue+0x30>
 800bf5c:	e011      	b.n	800bf82 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	0b9b      	lsrs	r3, r3, #14
 800bf62:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800bf64:	8abb      	ldrh	r3, [r7, #20]
 800bf66:	4619      	mov	r1, r3
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f001 f945 	bl	800d1f8 <VL53L1_set_lite_sigma_threshold>
		break;
 800bf6e:	e00a      	b.n	800bf86 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	0a5b      	lsrs	r3, r3, #9
 800bf74:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800bf76:	8abb      	ldrh	r3, [r7, #20]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f001 f968 	bl	800d250 <VL53L1_set_lite_min_count_rate>
		break;
 800bf80:	e001      	b.n	800bf86 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800bf82:	23fc      	movs	r3, #252	; 0xfc
 800bf84:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b084      	sub	sp, #16
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	807b      	strh	r3, [r7, #2]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bfaa:	887b      	ldrh	r3, [r7, #2]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d902      	bls.n	800bfb6 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800bfb0:	23fc      	movs	r3, #252	; 0xfc
 800bfb2:	73fb      	strb	r3, [r7, #15]
 800bfb4:	e014      	b.n	800bfe0 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800bfb6:	787b      	ldrb	r3, [r7, #1]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60bb      	str	r3, [r7, #8]
 800bfc0:	e006      	b.n	800bfd0 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bfc2:	887b      	ldrh	r3, [r7, #2]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	33e0      	adds	r3, #224	; 0xe0
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800bfd0:	887b      	ldrh	r3, [r7, #2]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff ffb2 	bl	800bf40 <SetLimitValue>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800bfe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10c      	bne.n	800c002 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800bfe8:	887b      	ldrh	r3, [r7, #2]
 800bfea:	787a      	ldrb	r2, [r7, #1]
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	bf14      	ite	ne
 800bff0:	2201      	movne	r2, #1
 800bff2:	2200      	moveq	r2, #0
 800bff4:	b2d2      	uxtb	r2, r2
 800bff6:	4611      	mov	r1, r2
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	4413      	add	r3, r2
 800bffc:	460a      	mov	r2, r1
 800bffe:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800c002:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800c00e:	b480      	push	{r7}
 800c010:	b087      	sub	sp, #28
 800c012:	af00      	add	r7, sp, #0
 800c014:	60f8      	str	r0, [r7, #12]
 800c016:	460b      	mov	r3, r1
 800c018:	607a      	str	r2, [r7, #4]
 800c01a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c020:	897b      	ldrh	r3, [r7, #10]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d905      	bls.n	800c032 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800c026:	23fc      	movs	r3, #252	; 0xfc
 800c028:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	701a      	strb	r2, [r3, #0]
 800c030:	e008      	b.n	800c044 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c032:	897b      	ldrh	r3, [r7, #10]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	4413      	add	r3, r2
 800c038:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800c03c:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	7dba      	ldrb	r2, [r7, #22]
 800c042:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c044:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	371c      	adds	r7, #28
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	460b      	mov	r3, r1
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c062:	2300      	movs	r3, #0
 800c064:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c066:	897b      	ldrh	r3, [r7, #10]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d902      	bls.n	800c072 <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800c06c:	23fc      	movs	r3, #252	; 0xfc
 800c06e:	75fb      	strb	r3, [r7, #23]
 800c070:	e023      	b.n	800c0ba <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c072:	897b      	ldrh	r3, [r7, #10]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800c07c:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 800c07e:	7dbb      	ldrb	r3, [r7, #22]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d107      	bne.n	800c094 <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c084:	897b      	ldrh	r3, [r7, #10]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	33e0      	adds	r3, #224	; 0xe0
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	609a      	str	r2, [r3, #8]
 800c092:	e012      	b.n	800c0ba <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800c094:	897b      	ldrh	r3, [r7, #10]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	4619      	mov	r1, r3
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff ff50 	bl	800bf40 <SetLimitValue>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800c0a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d106      	bne.n	800c0ba <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c0ac:	897b      	ldrh	r3, [r7, #10]
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	33e0      	adds	r3, #224	; 0xe0
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3718      	adds	r7, #24
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b088      	sub	sp, #32
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	607a      	str	r2, [r7, #4]
 800c0d2:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800c0d8:	897b      	ldrh	r3, [r7, #10]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <VL53L1_GetLimitCheckValue+0x1e>
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d00c      	beq.n	800c0fc <VL53L1_GetLimitCheckValue+0x36>
 800c0e2:	e017      	b.n	800c114 <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800c0e4:	f107 0314 	add.w	r3, r7, #20
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f001 f86e 	bl	800d1cc <VL53L1_get_lite_sigma_threshold>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800c0f4:	8abb      	ldrh	r3, [r7, #20]
 800c0f6:	039b      	lsls	r3, r3, #14
 800c0f8:	61bb      	str	r3, [r7, #24]
		break;
 800c0fa:	e00d      	b.n	800c118 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800c0fc:	f107 0316 	add.w	r3, r7, #22
 800c100:	4619      	mov	r1, r3
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f001 f88e 	bl	800d224 <VL53L1_get_lite_min_count_rate>
 800c108:	4603      	mov	r3, r0
 800c10a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800c10c:	8afb      	ldrh	r3, [r7, #22]
 800c10e:	025b      	lsls	r3, r3, #9
 800c110:	61bb      	str	r3, [r7, #24]
		break;
 800c112:	e001      	b.n	800c118 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800c114:	23fc      	movs	r3, #252	; 0xfc
 800c116:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800c118:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d123      	bne.n	800c168 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d110      	bne.n	800c148 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800c126:	897b      	ldrh	r3, [r7, #10]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	33e0      	adds	r3, #224	; 0xe0
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	4413      	add	r3, r2
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c13a:	897b      	ldrh	r3, [r7, #10]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4413      	add	r3, r2
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800c146:	e00f      	b.n	800c168 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c14e:	897b      	ldrh	r3, [r7, #10]
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	33e0      	adds	r3, #224	; 0xe0
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c15c:	897b      	ldrh	r3, [r7, #10]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	4413      	add	r3, r2
 800c162:	2201      	movs	r2, #1
 800c164:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800c168:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3720      	adds	r7, #32
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	460b      	mov	r3, r1
 800c17e:	607a      	str	r2, [r7, #4]
 800c180:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c182:	2300      	movs	r3, #0
 800c184:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800c186:	7afb      	ldrb	r3, [r7, #11]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4619      	mov	r1, r3
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f000 fd4c 	bl	800cc2a <VL53L1_get_sequence_config_bit>
 800c192:	4603      	mov	r3, r0
 800c194:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800c196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800c1b6:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 800c1b8:	7dbb      	ldrb	r3, [r7, #22]
 800c1ba:	2b05      	cmp	r3, #5
 800c1bc:	dc06      	bgt.n	800c1cc <VL53L1_StartMeasurement+0x28>
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	da0b      	bge.n	800c1da <VL53L1_StartMeasurement+0x36>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	db0c      	blt.n	800c1e0 <VL53L1_StartMeasurement+0x3c>
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	dd07      	ble.n	800c1da <VL53L1_StartMeasurement+0x36>
 800c1ca:	e003      	b.n	800c1d4 <VL53L1_StartMeasurement+0x30>
 800c1cc:	3b62      	subs	r3, #98	; 0x62
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d806      	bhi.n	800c1e0 <VL53L1_StartMeasurement+0x3c>
 800c1d2:	e002      	b.n	800c1da <VL53L1_StartMeasurement+0x36>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	75fb      	strb	r3, [r7, #23]
		break;
 800c1d8:	e004      	b.n	800c1e4 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800c1da:	23f2      	movs	r3, #242	; 0xf2
 800c1dc:	75fb      	strb	r3, [r7, #23]
		break;
 800c1de:	e001      	b.n	800c1e4 <VL53L1_StartMeasurement+0x40>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800c1e0:	23fd      	movs	r3, #253	; 0xfd
 800c1e2:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	789b      	ldrb	r3, [r3, #2]
 800c1e8:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800c1ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d11f      	bne.n	800c232 <VL53L1_StartMeasurement+0x8e>
 800c1f2:	7d7b      	ldrb	r3, [r7, #21]
 800c1f4:	2b40      	cmp	r3, #64	; 0x40
 800c1f6:	d11c      	bne.n	800c232 <VL53L1_StartMeasurement+0x8e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800c1f8:	f107 0310 	add.w	r3, r7, #16
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff fdb0 	bl	800bd64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800c204:	4603      	mov	r3, r0
 800c206:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	4a17      	ldr	r2, [pc, #92]	; (800c268 <VL53L1_StartMeasurement+0xc4>)
 800c20c:	fba2 2303 	umull	r2, r3, r2, r3
 800c210:	099b      	lsrs	r3, r3, #6
 800c212:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800c214:	f107 030c 	add.w	r3, r7, #12
 800c218:	4619      	mov	r1, r3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7ff fe6c 	bl	800bef8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800c220:	4603      	mov	r3, r0
 800c222:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	1d1a      	adds	r2, r3, #4
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d901      	bls.n	800c232 <VL53L1_StartMeasurement+0x8e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800c22e:	23fc      	movs	r3, #252	; 0xfc
 800c230:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800c232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d107      	bne.n	800c24a <VL53L1_StartMeasurement+0xa6>
		Status = VL53L1_init_and_start_range(
 800c23a:	7d7b      	ldrb	r3, [r7, #21]
 800c23c:	2206      	movs	r2, #6
 800c23e:	4619      	mov	r1, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f001 f83b 	bl	800d2bc <VL53L1_init_and_start_range>
 800c246:	4603      	mov	r3, r0
 800c248:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800c24a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d103      	bne.n	800c25a <VL53L1_StartMeasurement+0xb6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2204      	movs	r2, #4
 800c256:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800c25a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	10624dd3 	.word	0x10624dd3

0800c26c <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08a      	sub	sp, #40	; 0x28
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c274:	2300      	movs	r3, #0
 800c276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 800c27a:	f107 0318 	add.w	r3, r7, #24
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fd2c 	bl	800ccde <VL53L1_get_user_zone>
 800c286:	4603      	mov	r3, r0
 800c288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800c292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800c29c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 800c2a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10b      	bne.n	800c2c0 <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800c2a8:	f107 0314 	add.w	r3, r7, #20
 800c2ac:	f107 0210 	add.w	r2, r7, #16
 800c2b0:	f107 010c 	add.w	r1, r7, #12
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fc4d 	bl	800cb54 <VL53L1_get_timeouts_us>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800c2c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d105      	bne.n	800c2d4 <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f001 fa21 	bl	800d710 <VL53L1_stop_range>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE)
 800c2d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d107      	bne.n	800c2ec <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 800c2dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f003 fbe1 	bl	800faa8 <VL53L1_WaitUs>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800c2ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10d      	bne.n	800c310 <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 800c2fa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c2fe:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff fb23 	bl	800b950 <SetPresetMode>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800c310:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10f      	bne.n	800c338 <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800c318:	68f9      	ldr	r1, [r7, #12]
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fbe0 	bl	800cae4 <VL53L1_set_timeouts_us>
 800c324:	4603      	mov	r3, r0
 800c326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800c32a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800c338:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d108      	bne.n	800c352 <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800c340:	f107 0318 	add.w	r3, r7, #24
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fca6 	bl	800cc98 <VL53L1_set_user_zone>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800c352:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10b      	bne.n	800c372 <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	789b      	ldrb	r3, [r3, #2]
 800c35e:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 800c360:	7ffb      	ldrb	r3, [r7, #31]
 800c362:	2206      	movs	r2, #6
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 ffa8 	bl	800d2bc <VL53L1_init_and_start_range>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 800c372:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c376:	2b00      	cmp	r3, #0
 800c378:	d104      	bne.n	800c384 <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c380:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800c384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3728      	adds	r7, #40	; 0x28
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c398:	2300      	movs	r3, #0
 800c39a:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	789b      	ldrb	r3, [r3, #2]
 800c3a0:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800c3a8:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800c3b0:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 800c3b2:	7b3a      	ldrb	r2, [r7, #12]
 800c3b4:	7b7b      	ldrb	r3, [r7, #13]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d005      	beq.n	800c3c6 <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7ff ff56 	bl	800c26c <ChangePresetMode>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73fb      	strb	r3, [r7, #15]
 800c3c4:	e006      	b.n	800c3d4 <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f001 faff 	bl	800d9ce <VL53L1_clear_interrupt_and_enable_next_range>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800c3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800c3ec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f004 fd33 	bl	8010e5c <VL53L1_poll_for_range_completion>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800c3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800c408:	b480      	push	{r7}
 800c40a:	b08d      	sub	sp, #52	; 0x34
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	4603      	mov	r3, r0
 800c410:	603a      	str	r2, [r7, #0]
 800c412:	71fb      	strb	r3, [r7, #7]
 800c414:	460b      	mov	r3, r1
 800c416:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800c418:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800c41c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800c41e:	231e      	movs	r3, #30
 800c420:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800c422:	4b34      	ldr	r3, [pc, #208]	; (800c4f4 <ComputeRQL+0xec>)
 800c424:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800c426:	4b34      	ldr	r3, [pc, #208]	; (800c4f8 <ComputeRQL+0xf0>)
 800c428:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800c42a:	f641 139a 	movw	r3, #6554	; 0x199a
 800c42e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800c430:	79fb      	ldrb	r3, [r7, #7]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d103      	bne.n	800c43e <ComputeRQL+0x36>
		returnvalue = 0;
 800c436:	2300      	movs	r3, #0
 800c438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c43c:	e052      	b.n	800c4e4 <ComputeRQL+0xdc>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800c43e:	79bb      	ldrb	r3, [r7, #6]
 800c440:	2b07      	cmp	r3, #7
 800c442:	d103      	bne.n	800c44c <ComputeRQL+0x44>
		returnvalue = 50;
 800c444:	2332      	movs	r3, #50	; 0x32
 800c446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c44a:	e04b      	b.n	800c4e4 <ComputeRQL+0xdc>
	else {
		if (presults_data->median_range_mm < SRL)
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c452:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c456:	429a      	cmp	r2, r3
 800c458:	dd03      	ble.n	800c462 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800c45a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c45c:	041b      	lsls	r3, r3, #16
 800c45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c460:	e007      	b.n	800c472 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c468:	461a      	mov	r2, r3
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	fb03 f302 	mul.w	r3, r3, r2
 800c470:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	2b00      	cmp	r3, #0
 800c476:	d020      	beq.n	800c4ba <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c47c:	461a      	mov	r2, r3
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	fb03 f302 	mul.w	r3, r3, r2
 800c484:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	085b      	lsrs	r3, r3, #1
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	4413      	add	r3, r2
 800c48e:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	fbb2 f3f3 	udiv	r3, r2, r3
 800c498:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	041b      	lsls	r3, r3, #16
 800c49e:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d804      	bhi.n	800c4b2 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800c4a8:	69fa      	ldr	r2, [r7, #28]
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4b0:	e006      	b.n	800c4c0 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800c4b2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c4b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4b8:	e002      	b.n	800c4c0 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800c4ba:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800c4be:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	0c1b      	lsrs	r3, r3, #16
 800c4c4:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
 800c4c8:	2b64      	cmp	r3, #100	; 0x64
 800c4ca:	d802      	bhi.n	800c4d2 <ComputeRQL+0xca>
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	2b32      	cmp	r3, #50	; 0x32
 800c4d0:	dd05      	ble.n	800c4de <ComputeRQL+0xd6>
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
 800c4d4:	2b64      	cmp	r3, #100	; 0x64
 800c4d6:	bf28      	it	cs
 800c4d8:	2364      	movcs	r3, #100	; 0x64
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	e000      	b.n	800c4e0 <ComputeRQL+0xd8>
 800c4de:	2332      	movs	r3, #50	; 0x32
 800c4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800c4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3734      	adds	r7, #52	; 0x34
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	0075b333 	.word	0x0075b333
 800c4f8:	0030cccd 	.word	0x0030cccd

0800c4fc <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	3b04      	subs	r3, #4
 800c50a:	2b0f      	cmp	r3, #15
 800c50c:	d83d      	bhi.n	800c58a <ConvertStatusLite+0x8e>
 800c50e:	a201      	add	r2, pc, #4	; (adr r2, 800c514 <ConvertStatusLite+0x18>)
 800c510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c514:	0800c567 	.word	0x0800c567
 800c518:	0800c561 	.word	0x0800c561
 800c51c:	0800c56d 	.word	0x0800c56d
 800c520:	0800c573 	.word	0x0800c573
 800c524:	0800c57f 	.word	0x0800c57f
 800c528:	0800c585 	.word	0x0800c585
 800c52c:	0800c58b 	.word	0x0800c58b
 800c530:	0800c58b 	.word	0x0800c58b
 800c534:	0800c579 	.word	0x0800c579
 800c538:	0800c58b 	.word	0x0800c58b
 800c53c:	0800c58b 	.word	0x0800c58b
 800c540:	0800c58b 	.word	0x0800c58b
 800c544:	0800c58b 	.word	0x0800c58b
 800c548:	0800c58b 	.word	0x0800c58b
 800c54c:	0800c555 	.word	0x0800c555
 800c550:	0800c55b 	.word	0x0800c55b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800c554:	230a      	movs	r3, #10
 800c556:	73fb      	strb	r3, [r7, #15]
		break;
 800c558:	e019      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800c55a:	2306      	movs	r3, #6
 800c55c:	73fb      	strb	r3, [r7, #15]
		break;
 800c55e:	e016      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800c560:	2304      	movs	r3, #4
 800c562:	73fb      	strb	r3, [r7, #15]
		break;
 800c564:	e013      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800c566:	2302      	movs	r3, #2
 800c568:	73fb      	strb	r3, [r7, #15]
		break;
 800c56a:	e010      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800c56c:	2301      	movs	r3, #1
 800c56e:	73fb      	strb	r3, [r7, #15]
		break;
 800c570:	e00d      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800c572:	2307      	movs	r3, #7
 800c574:	73fb      	strb	r3, [r7, #15]
		break;
 800c576:	e00a      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800c578:	2309      	movs	r3, #9
 800c57a:	73fb      	strb	r3, [r7, #15]
		break;
 800c57c:	e007      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800c57e:	2303      	movs	r3, #3
 800c580:	73fb      	strb	r3, [r7, #15]
		break;
 800c582:	e004      	b.n	800c58e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800c584:	2300      	movs	r3, #0
 800c586:	73fb      	strb	r3, [r7, #15]
		break;
 800c588:	e001      	b.n	800c58e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800c58a:	23ff      	movs	r3, #255	; 0xff
 800c58c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08c      	sub	sp, #48	; 0x30
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	607b      	str	r3, [r7, #4]
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	72fb      	strb	r3, [r7, #11]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5c2:	f003 031f 	and.w	r3, r3, #31
 800c5c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800c5ca:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800c5ce:	7afb      	ldrb	r3, [r7, #11]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff ff18 	bl	800c408 <ComputeRQL>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	461a      	mov	r2, r3
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c5e4:	025b      	lsls	r3, r3, #9
 800c5e6:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ec:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c5f2:	025b      	lsls	r3, r3, #9
 800c5f4:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5fa:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c608:	025b      	lsls	r3, r3, #9
 800c60a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	6a3a      	ldr	r2, [r7, #32]
 800c610:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	2200      	movs	r2, #0
 800c620:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800c622:	7abb      	ldrb	r3, [r7, #10]
 800c624:	3b01      	subs	r3, #1
 800c626:	2b10      	cmp	r3, #16
 800c628:	d82c      	bhi.n	800c684 <SetSimpleData+0xe8>
 800c62a:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <SetSimpleData+0x94>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c675 	.word	0x0800c675
 800c634:	0800c675 	.word	0x0800c675
 800c638:	0800c675 	.word	0x0800c675
 800c63c:	0800c685 	.word	0x0800c685
 800c640:	0800c685 	.word	0x0800c685
 800c644:	0800c685 	.word	0x0800c685
 800c648:	0800c685 	.word	0x0800c685
 800c64c:	0800c685 	.word	0x0800c685
 800c650:	0800c685 	.word	0x0800c685
 800c654:	0800c685 	.word	0x0800c685
 800c658:	0800c685 	.word	0x0800c685
 800c65c:	0800c685 	.word	0x0800c685
 800c660:	0800c67d 	.word	0x0800c67d
 800c664:	0800c685 	.word	0x0800c685
 800c668:	0800c685 	.word	0x0800c685
 800c66c:	0800c685 	.word	0x0800c685
 800c670:	0800c675 	.word	0x0800c675
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	2205      	movs	r2, #5
 800c678:	76da      	strb	r2, [r3, #27]
		break;
 800c67a:	e006      	b.n	800c68a <SetSimpleData+0xee>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	220d      	movs	r2, #13
 800c680:	76da      	strb	r2, [r3, #27]
		break;
 800c682:	e002      	b.n	800c68a <SetSimpleData+0xee>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800c684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c686:	2200      	movs	r2, #0
 800c688:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800c68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68c:	7edb      	ldrb	r3, [r3, #27]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d108      	bne.n	800c6a4 <SetSimpleData+0x108>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800c692:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff ff30 	bl	800c4fc <ConvertStatusLite>
 800c69c:	4603      	mov	r3, r0
 800c69e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c6a8:	025b      	lsls	r3, r3, #9
 800c6aa:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6a3a      	ldr	r2, [r7, #32]
 800c6b0:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6b8:	025b      	lsls	r3, r3, #9
 800c6ba:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6a3a      	ldr	r2, [r7, #32]
 800c6c0:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800c6c4:	f107 0314 	add.w	r3, r7, #20
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f7ff fcfa 	bl	800c0c6 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800c6d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6d6:	2b06      	cmp	r3, #6
 800c6d8:	bf0c      	ite	eq
 800c6da:	2301      	moveq	r3, #1
 800c6dc:	2300      	movne	r3, #0
 800c6de:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800c6e0:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800c6e2:	f107 0319 	add.w	r3, r7, #25
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f7ff fc8f 	bl	800c00e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800c6f0:	7e7b      	ldrb	r3, [r7, #25]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d104      	bne.n	800c700 <SetSimpleData+0x164>
 800c6f6:	7ffb      	ldrb	r3, [r7, #31]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d101      	bne.n	800c700 <SetSimpleData+0x164>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e000      	b.n	800c702 <SetSimpleData+0x166>
 800c700:	2300      	movs	r3, #0
 800c702:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	7fba      	ldrb	r2, [r7, #30]
 800c708:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800c70c:	f107 0314 	add.w	r3, r7, #20
 800c710:	461a      	mov	r2, r3
 800c712:	2101      	movs	r1, #1
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff fcd6 	bl	800c0c6 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800c71a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c71e:	2b04      	cmp	r3, #4
 800c720:	bf0c      	ite	eq
 800c722:	2301      	moveq	r3, #1
 800c724:	2300      	movne	r3, #0
 800c726:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800c728:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800c72a:	f107 0319 	add.w	r3, r7, #25
 800c72e:	461a      	mov	r2, r3
 800c730:	2101      	movs	r1, #1
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7ff fc6b 	bl	800c00e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800c738:	7e7b      	ldrb	r3, [r7, #25]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d104      	bne.n	800c748 <SetSimpleData+0x1ac>
 800c73e:	7f7b      	ldrb	r3, [r7, #29]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d101      	bne.n	800c748 <SetSimpleData+0x1ac>
 800c744:	2301      	movs	r3, #1
 800c746:	e000      	b.n	800c74a <SetSimpleData+0x1ae>
 800c748:	2300      	movs	r3, #0
 800c74a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	7fba      	ldrb	r2, [r7, #30]
 800c750:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	8b1b      	ldrh	r3, [r3, #24]
 800c758:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800c75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75c:	7edb      	ldrb	r3, [r3, #27]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d110      	bne.n	800c784 <SetSimpleData+0x1e8>
 800c762:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c766:	2b00      	cmp	r3, #0
 800c768:	da0c      	bge.n	800c784 <SetSimpleData+0x1e8>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800c76a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c76e:	4b08      	ldr	r3, [pc, #32]	; (800c790 <SetSimpleData+0x1f4>)
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	429a      	cmp	r2, r3
 800c774:	da03      	bge.n	800c77e <SetSimpleData+0x1e2>
			pRangeData->RangeStatus =
 800c776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c778:	220e      	movs	r2, #14
 800c77a:	76da      	strb	r2, [r3, #27]
 800c77c:	e002      	b.n	800c784 <SetSimpleData+0x1e8>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800c77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c780:	2200      	movs	r2, #0
 800c782:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800c784:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3730      	adds	r7, #48	; 0x30
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	200002dc 	.word	0x200002dc

0800c794 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b0a8      	sub	sp, #160	; 0xa0
 800c798:	af02      	add	r7, sp, #8
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 800c7a4:	f107 0308 	add.w	r3, r7, #8
 800c7a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800c7ac:	221c      	movs	r2, #28
 800c7ae:	21ff      	movs	r1, #255	; 0xff
 800c7b0:	6838      	ldr	r0, [r7, #0]
 800c7b2:	f004 fdc2 	bl	801133a <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800c7b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c7ba:	2102      	movs	r1, #2
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f001 f888 	bl	800d8d2 <VL53L1_get_device_results>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800c7c8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d117      	bne.n	800c800 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800c7d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7d4:	789a      	ldrb	r2, [r3, #2]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800c7da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7de:	3304      	adds	r3, #4
 800c7e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800c7e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7e8:	78da      	ldrb	r2, [r3, #3]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7f2:	2101      	movs	r1, #1
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7ff fed1 	bl	800c59c <SetSimpleData>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c800:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800c804:	4618      	mov	r0, r3
 800c806:	3798      	adds	r7, #152	; 0x98
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800c80c:	b5b0      	push	{r4, r5, r7, lr}
 800c80e:	b088      	sub	sp, #32
 800c810:	af04      	add	r7, sp, #16
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	460b      	mov	r3, r1
 800c816:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c818:	2300      	movs	r3, #0
 800c81a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800c820:	2162      	movs	r1, #98	; 0x62
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f002 f91a 	bl	800ea5c <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	2200      	movs	r2, #0
 800c82c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	2201      	movs	r2, #1
 800c832:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2200      	movs	r2, #0
 800c838:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	2201      	movs	r2, #1
 800c83e:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	2201      	movs	r2, #1
 800c844:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c84c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c854:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c85c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2264      	movs	r2, #100	; 0x64
 800c862:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c86a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	f240 72db 	movw	r2, #2011	; 0x7db
 800c87a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f002 f8d0 	bl	800ea24 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d008      	beq.n	800c89c <VL53L1_data_init+0x90>
 800c88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d104      	bne.n	800c89c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f857 	bl	800c946 <VL53L1_read_p2p_data>
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f503 7388 	add.w	r3, r3, #272	; 0x110
	status =
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f001 fc00 	bl	800e0a8 <VL53L1_init_refspadchar_config_struct>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f503 7390 	add.w	r3, r3, #288	; 0x120
	status =
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f001 fc1c 	bl	800e0f0 <VL53L1_init_ssc_config_struct>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	status =
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	f001 fc31 	bl	800e132 <VL53L1_init_xtalk_config_struct>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
	status =
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f001 fc8b 	bl	800e1f6 <VL53L1_init_offset_cal_config_struct>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	33a4      	adds	r3, #164	; 0xa4
	status =
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f001 fcab 	bl	800e244 <VL53L1_init_tuning_parm_storage_struct>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800c8f2:	2120      	movs	r1, #32
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fcc1 	bl	800d27c <VL53L1_set_vhv_loopbound>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800c8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d116      	bne.n	800c934 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	7858      	ldrb	r0, [r3, #1]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	8b1c      	ldrh	r4, [r3, #24]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	689d      	ldr	r5, [r3, #8]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	6912      	ldr	r2, [r2, #16]
 800c91a:	68b9      	ldr	r1, [r7, #8]
 800c91c:	6949      	ldr	r1, [r1, #20]
 800c91e:	9102      	str	r1, [sp, #8]
 800c920:	9201      	str	r2, [sp, #4]
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	462b      	mov	r3, r5
 800c926:	4622      	mov	r2, r4
 800c928:	4601      	mov	r1, r0
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 fad8 	bl	800cee0 <VL53L1_set_preset_mode>
 800c930:	4603      	mov	r3, r0
 800c932:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f002 fdda 	bl	800f4ee <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800c93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bdb0      	pop	{r4, r5, r7, pc}

0800c946 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c94e:	2300      	movs	r3, #0
 800c950:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800c956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d108      	bne.n	800c970 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f003 f9fd 	bl	800fd66 <VL53L1_get_static_nvm_managed>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800c970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d107      	bne.n	800c988 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	3342      	adds	r3, #66	; 0x42
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f003 fb2f 	bl	800ffe2 <VL53L1_get_customer_nvm_managed>
 800c984:	4603      	mov	r3, r0
 800c986:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800c988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d115      	bne.n	800c9bc <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f004 fa08 	bl	8010dae <VL53L1_get_nvm_copy_data>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800c9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d108      	bne.n	800c9bc <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	33f0      	adds	r3, #240	; 0xf0
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	f002 f9b3 	bl	800ed22 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800c9bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d109      	bne.n	800c9d8 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
		status =
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	21de      	movs	r1, #222	; 0xde
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f003 f80a 	bl	800f9e8 <VL53L1_RdWord>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800c9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9e2:	d204      	bcs.n	800c9ee <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800c9ea:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800c9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d107      	bne.n	800ca06 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	339e      	adds	r3, #158	; 0x9e
		status =
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f990 	bl	800cd22 <VL53L1_get_mode_mitigation_roi>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d114      	bne.n	800ca3a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10f      	bne.n	800ca3a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800ca30:	011b      	lsls	r3, r3, #4
 800ca32:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b085      	sub	sp, #20
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ca62:	23f1      	movs	r3, #241	; 0xf1
 800ca64:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800ca66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10c      	bne.n	800ca88 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800ca7a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d101      	bne.n	800cab8 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800cab4:	23f1      	movs	r3, #241	; 0xf1
 800cab6:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800cab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d109      	bne.n	800cad4 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800cacc:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800cad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af02      	add	r7, sp, #8
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800caf2:	2300      	movs	r3, #0
 800caf4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d101      	bne.n	800cb08 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800cb04:	23f1      	movs	r3, #241	; 0xf1
 800cb06:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800cb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d11b      	bne.n	800cb48 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	68ba      	ldr	r2, [r7, #8]
 800cb14:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800cb2e:	693a      	ldr	r2, [r7, #16]
 800cb30:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
		status =
 800cb34:	9201      	str	r2, [sp, #4]
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	68b8      	ldr	r0, [r7, #8]
 800cb40:	f002 fc07 	bl	800f352 <VL53L1_calc_timeout_register_values>
 800cb44:	4603      	mov	r3, r0
 800cb46:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800cb48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b088      	sub	sp, #32
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb62:	2300      	movs	r3, #0
 800cb64:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800cb7c:	23f1      	movs	r3, #241	; 0xf1
 800cb7e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800cb80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d14a      	bne.n	800cc1e <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
		macro_period_us =
 800cb94:	4619      	mov	r1, r3
 800cb96:	4610      	mov	r0, r2
 800cb98:	f002 fa86 	bl	800f0a8 <VL53L1_calc_macro_period_us>
 800cb9c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800cba4:	6979      	ldr	r1, [r7, #20]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f002 fb3f 	bl	800f22a <VL53L1_calc_timeout_us>
 800cbac:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800cbb8:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800cbba:	8a7b      	ldrh	r3, [r7, #18]
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800cbc6:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800cbc8:	4413      	add	r3, r2
 800cbca:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800cbcc:	8a7b      	ldrh	r3, [r7, #18]
 800cbce:	6979      	ldr	r1, [r7, #20]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f002 fb63 	bl	800f29c <VL53L1_calc_decoded_timeout_us>
 800cbd6:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800cbe2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800cbe4:	8a7b      	ldrh	r3, [r7, #18]
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800cbf0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800cbf2:	4413      	add	r3, r2
 800cbf4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800cbf6:	8a7b      	ldrh	r3, [r7, #18]
 800cbf8:	6979      	ldr	r1, [r7, #20]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f002 fb4e 	bl	800f29c <VL53L1_calc_decoded_timeout_us>
 800cc00:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800cc1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3720      	adds	r7, #32
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800cc2a:	b480      	push	{r7}
 800cc2c:	b087      	sub	sp, #28
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	60f8      	str	r0, [r7, #12]
 800cc32:	460b      	mov	r3, r1
 800cc34:	607a      	str	r2, [r7, #4]
 800cc36:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800cc40:	2301      	movs	r3, #1
 800cc42:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800cc44:	7afb      	ldrb	r3, [r7, #11]
 800cc46:	2b07      	cmp	r3, #7
 800cc48:	d81c      	bhi.n	800cc84 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800cc4a:	7afb      	ldrb	r3, [r7, #11]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d004      	beq.n	800cc5a <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800cc50:	7afb      	ldrb	r3, [r7, #11]
 800cc52:	2201      	movs	r2, #1
 800cc54:	fa02 f303 	lsl.w	r3, r2, r3
 800cc58:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800cc60:	7dbb      	ldrb	r3, [r7, #22]
 800cc62:	4013      	ands	r3, r2
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800cc6a:	7afb      	ldrb	r3, [r7, #11]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	461a      	mov	r2, r3
 800cc76:	7afb      	ldrb	r3, [r7, #11]
 800cc78:	fa42 f303 	asr.w	r3, r2, r3
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	e001      	b.n	800cc88 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800cc84:	23fc      	movs	r3, #252	; 0xfc
 800cc86:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800cc88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	371c      	adds	r7, #28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cca2:	2300      	movs	r3, #0
 800cca4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	7858      	ldrb	r0, [r3, #1]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	7819      	ldrb	r1, [r3, #0]
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800ccb8:	461a      	mov	r2, r3
 800ccba:	f002 fbc3 	bl	800f444 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	7898      	ldrb	r0, [r3, #2]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	78d9      	ldrb	r1, [r3, #3]
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800cccc:	461a      	mov	r2, r3
 800ccce:	f002 fbf8 	bl	800f4c2 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800ccd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	f002 fd67 	bl	800f7d0 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	1c99      	adds	r1, r3, #2
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	3303      	adds	r3, #3
 800cd10:	461a      	mov	r2, r3
 800cd12:	f002 fbbe 	bl	800f492 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800cd16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b086      	sub	sp, #24
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800cd46:	f107 020e 	add.w	r2, r7, #14
 800cd4a:	f107 010d 	add.w	r1, r7, #13
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f002 fd3e 	bl	800f7d0 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800cd54:	7bba      	ldrb	r2, [r7, #14]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800cd5a:	7b7a      	ldrb	r2, [r7, #13]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800cd66:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	091b      	lsrs	r3, r3, #4
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800cd7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
	...

0800cd8c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b087      	sub	sp, #28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	607a      	str	r2, [r7, #4]
 800cd96:	603b      	str	r3, [r7, #0]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800cda4:	7afb      	ldrb	r3, [r7, #11]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	2b25      	cmp	r3, #37	; 0x25
 800cdaa:	f200 808e 	bhi.w	800ceca <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800cdae:	a201      	add	r2, pc, #4	; (adr r2, 800cdb4 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800cdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb4:	0800ce4d 	.word	0x0800ce4d
 800cdb8:	0800ce4d 	.word	0x0800ce4d
 800cdbc:	0800ce4d 	.word	0x0800ce4d
 800cdc0:	0800ce4d 	.word	0x0800ce4d
 800cdc4:	0800ce4d 	.word	0x0800ce4d
 800cdc8:	0800ce77 	.word	0x0800ce77
 800cdcc:	0800ce77 	.word	0x0800ce77
 800cdd0:	0800ce77 	.word	0x0800ce77
 800cdd4:	0800cecb 	.word	0x0800cecb
 800cdd8:	0800cecb 	.word	0x0800cecb
 800cddc:	0800cecb 	.word	0x0800cecb
 800cde0:	0800cecb 	.word	0x0800cecb
 800cde4:	0800cecb 	.word	0x0800cecb
 800cde8:	0800cecb 	.word	0x0800cecb
 800cdec:	0800cecb 	.word	0x0800cecb
 800cdf0:	0800cecb 	.word	0x0800cecb
 800cdf4:	0800ce4d 	.word	0x0800ce4d
 800cdf8:	0800ce77 	.word	0x0800ce77
 800cdfc:	0800cecb 	.word	0x0800cecb
 800ce00:	0800cecb 	.word	0x0800cecb
 800ce04:	0800cecb 	.word	0x0800cecb
 800ce08:	0800cecb 	.word	0x0800cecb
 800ce0c:	0800cecb 	.word	0x0800cecb
 800ce10:	0800cecb 	.word	0x0800cecb
 800ce14:	0800cecb 	.word	0x0800cecb
 800ce18:	0800cecb 	.word	0x0800cecb
 800ce1c:	0800cecb 	.word	0x0800cecb
 800ce20:	0800cecb 	.word	0x0800cecb
 800ce24:	0800cecb 	.word	0x0800cecb
 800ce28:	0800cecb 	.word	0x0800cecb
 800ce2c:	0800cecb 	.word	0x0800cecb
 800ce30:	0800cecb 	.word	0x0800cecb
 800ce34:	0800cecb 	.word	0x0800cecb
 800ce38:	0800cecb 	.word	0x0800cecb
 800ce3c:	0800cecb 	.word	0x0800cecb
 800ce40:	0800cea1 	.word	0x0800cea1
 800ce44:	0800cea1 	.word	0x0800cea1
 800ce48:	0800cea1 	.word	0x0800cea1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	601a      	str	r2, [r3, #0]
	break;
 800ce74:	e02c      	b.n	800ced0 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	601a      	str	r2, [r3, #0]
	break;
 800ce9e:	e017      	b.n	800ced0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	601a      	str	r2, [r3, #0]
	break;
 800cec8:	e002      	b.n	800ced0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800ceca:	23fc      	movs	r3, #252	; 0xfc
 800cecc:	75fb      	strb	r3, [r7, #23]
		break;
 800cece:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800ced0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	371c      	adds	r7, #28
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b092      	sub	sp, #72	; 0x48
 800cee4:	af04      	add	r7, sp, #16
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	607b      	str	r3, [r7, #4]
 800ceea:	460b      	mov	r3, r1
 800ceec:	72fb      	strb	r3, [r7, #11]
 800ceee:	4613      	mov	r3, r2
 800cef0:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cef2:	2300      	movs	r3, #0
 800cef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf02:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800cf0a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800cf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf16:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800cf1a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cf22:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	33a4      	adds	r3, #164	; 0xa4
 800cf28:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800cf30:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	7afa      	ldrb	r2, [r7, #11]
 800cf36:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf3c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf42:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800cf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf48:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800cf4a:	2103      	movs	r1, #3
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f001 fd85 	bl	800ea5c <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800cf52:	7afb      	ldrb	r3, [r7, #11]
 800cf54:	3b01      	subs	r3, #1
 800cf56:	2b25      	cmp	r3, #37	; 0x25
 800cf58:	f200 810c 	bhi.w	800d174 <VL53L1_set_preset_mode+0x294>
 800cf5c:	a201      	add	r2, pc, #4	; (adr r2, 800cf64 <VL53L1_set_preset_mode+0x84>)
 800cf5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf62:	bf00      	nop
 800cf64:	0800cffd 	.word	0x0800cffd
 800cf68:	0800d019 	.word	0x0800d019
 800cf6c:	0800d035 	.word	0x0800d035
 800cf70:	0800d051 	.word	0x0800d051
 800cf74:	0800d06d 	.word	0x0800d06d
 800cf78:	0800d089 	.word	0x0800d089
 800cf7c:	0800d0a5 	.word	0x0800d0a5
 800cf80:	0800d0c1 	.word	0x0800d0c1
 800cf84:	0800d175 	.word	0x0800d175
 800cf88:	0800d175 	.word	0x0800d175
 800cf8c:	0800d175 	.word	0x0800d175
 800cf90:	0800d175 	.word	0x0800d175
 800cf94:	0800d175 	.word	0x0800d175
 800cf98:	0800d175 	.word	0x0800d175
 800cf9c:	0800d175 	.word	0x0800d175
 800cfa0:	0800d175 	.word	0x0800d175
 800cfa4:	0800d0dd 	.word	0x0800d0dd
 800cfa8:	0800d0f9 	.word	0x0800d0f9
 800cfac:	0800d175 	.word	0x0800d175
 800cfb0:	0800d175 	.word	0x0800d175
 800cfb4:	0800d175 	.word	0x0800d175
 800cfb8:	0800d175 	.word	0x0800d175
 800cfbc:	0800d175 	.word	0x0800d175
 800cfc0:	0800d175 	.word	0x0800d175
 800cfc4:	0800d175 	.word	0x0800d175
 800cfc8:	0800d175 	.word	0x0800d175
 800cfcc:	0800d175 	.word	0x0800d175
 800cfd0:	0800d175 	.word	0x0800d175
 800cfd4:	0800d175 	.word	0x0800d175
 800cfd8:	0800d175 	.word	0x0800d175
 800cfdc:	0800d175 	.word	0x0800d175
 800cfe0:	0800d175 	.word	0x0800d175
 800cfe4:	0800d175 	.word	0x0800d175
 800cfe8:	0800d175 	.word	0x0800d175
 800cfec:	0800d175 	.word	0x0800d175
 800cff0:	0800d115 	.word	0x0800d115
 800cff4:	0800d135 	.word	0x0800d135
 800cff8:	0800d155 	.word	0x0800d155

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	9301      	str	r3, [sp, #4]
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d00a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d00c:	f001 f9a8 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800d010:	4603      	mov	r3, r0
 800d012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d016:	e0b1      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	9301      	str	r3, [sp, #4]
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d028:	f001 fab8 	bl	800e59c <VL53L1_preset_mode_standard_ranging_short_range>
 800d02c:	4603      	mov	r3, r0
 800d02e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d032:	e0a3      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	9301      	str	r3, [sp, #4]
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d044:	f001 faeb 	bl	800e61e <VL53L1_preset_mode_standard_ranging_long_range>
 800d048:	4603      	mov	r3, r0
 800d04a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d04e:	e095      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d05e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d060:	f001 fb1e 	bl	800e6a0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800d064:	4603      	mov	r3, r0
 800d066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d06a:	e087      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d07c:	f001 fb35 	bl	800e6ea <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800d080:	4603      	mov	r3, r0
 800d082:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d086:	e079      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	9301      	str	r3, [sp, #4]
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d098:	f001 fb4c 	bl	800e734 <VL53L1_preset_mode_timed_ranging>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d0a2:	e06b      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0b4:	f001 fb78 	bl	800e7a8 <VL53L1_preset_mode_timed_ranging_short_range>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d0be:	e05d      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0d0:	f001 fba4 	bl	800e81c <VL53L1_preset_mode_timed_ranging_long_range>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d0da:	e04f      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0ec:	f001 fc78 	bl	800e9e0 <VL53L1_preset_mode_olt>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d0f6:	e041      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	9301      	str	r3, [sp, #4]
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	6a3b      	ldr	r3, [r7, #32]
 800d102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d106:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d108:	f001 fc34 	bl	800e974 <VL53L1_preset_mode_singleshot_ranging>
 800d10c:	4603      	mov	r3, r0
 800d10e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800d112:	e033      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	9302      	str	r3, [sp, #8]
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d128:	f001 fbd8 	bl	800e8dc <VL53L1_preset_mode_low_power_auto_short_ranging>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800d132:	e023      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	9302      	str	r3, [sp, #8]
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	9301      	str	r3, [sp, #4]
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d148:	f001 fba2 	bl	800e890 <VL53L1_preset_mode_low_power_auto_ranging>
 800d14c:	4603      	mov	r3, r0
 800d14e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800d152:	e013      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	9302      	str	r3, [sp, #8]
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	6a3b      	ldr	r3, [r7, #32]
 800d162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d168:	f001 fbde 	bl	800e928 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800d172:	e003      	b.n	800d17c <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d174:	23fc      	movs	r3, #252	; 0xfc
 800d176:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800d17a:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800d17c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d180:	2b00      	cmp	r3, #0
 800d182:	d105      	bne.n	800d190 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800d184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d186:	893a      	ldrh	r2, [r7, #8]
 800d188:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	893a      	ldrh	r2, [r7, #8]
 800d18e:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800d190:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d194:	2b00      	cmp	r3, #0
 800d196:	d108      	bne.n	800d1aa <VL53L1_set_preset_mode+0x2ca>
		status =
 800d198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d19a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f7ff fca0 	bl	800cae4 <VL53L1_set_timeouts_us>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800d1aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d106      	bne.n	800d1c0 <VL53L1_set_preset_mode+0x2e0>
		status =
 800d1b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7ff fc46 	bl	800ca46 <VL53L1_set_inter_measurement_period_ms>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800d1c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3738      	adds	r7, #56	; 0x38
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d1e8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	460b      	mov	r3, r1
 800d202:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d204:	2300      	movs	r3, #0
 800d206:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	887a      	ldrh	r2, [r7, #2]
 800d210:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800d214:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d218:	4618      	mov	r0, r3
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d240:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d244:	4618      	mov	r0, r3
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	460b      	mov	r3, r1
 800d25a:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d25c:	2300      	movs	r3, #0
 800d25e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	887a      	ldrh	r2, [r7, #2]
 800d268:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800d26c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d270:	4618      	mov	r0, r3
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	460b      	mov	r3, r1
 800d286:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d296:	f003 0303 	and.w	r3, r3, #3
 800d29a:	b2da      	uxtb	r2, r3
			(vhv_loopbound * 4);
 800d29c:	78fb      	ldrb	r3, [r7, #3]
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	b2db      	uxtb	r3, r3
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800d2a2:	4413      	add	r3, r2
 800d2a4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	LOG_FUNCTION_END(status);

	return status;
 800d2ac:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3714      	adds	r7, #20
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b0d0      	sub	sp, #320	; 0x140
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	1d3b      	adds	r3, r7, #4
 800d2c4:	6018      	str	r0, [r3, #0]
 800d2c6:	4608      	mov	r0, r1
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	1cfb      	adds	r3, r7, #3
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	701a      	strb	r2, [r3, #0]
 800d2d0:	1cbb      	adds	r3, r7, #2
 800d2d2:	460a      	mov	r2, r1
 800d2d4:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d2dc:	1d3b      	adds	r3, r7, #4
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800d2e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d2ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800d2f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2f4:	3342      	adds	r3, #66	; 0x42
 800d2f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800d2fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800d306:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d30a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d30e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800d312:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d316:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d31a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800d31e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d322:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d326:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800d32a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d32e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d332:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800d336:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d33a:	332c      	adds	r3, #44	; 0x2c
 800d33c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800d340:	f107 030c 	add.w	r3, r7, #12
 800d344:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800d348:	2300      	movs	r3, #0
 800d34a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800d360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d364:	1cfa      	adds	r2, r7, #3
 800d366:	7812      	ldrb	r2, [r2, #0]
 800d368:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800d36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d36e:	791b      	ldrb	r3, [r3, #4]
 800d370:	b25b      	sxtb	r3, r3
 800d372:	f003 030f 	and.w	r3, r3, #15
 800d376:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800d378:	1cfb      	adds	r3, r7, #3
 800d37a:	f993 3000 	ldrsb.w	r3, [r3]
 800d37e:	4313      	orrs	r3, r2
 800d380:	b25b      	sxtb	r3, r3
 800d382:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800d384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d388:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800d38a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d38e:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800d392:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d396:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800d39a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d39e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800d3a2:	2bff      	cmp	r3, #255	; 0xff
 800d3a4:	d104      	bne.n	800d3b0 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800d3a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d3b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3b4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d133      	bne.n	800d424 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800d3bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3c0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d12d      	bne.n	800d424 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800d3c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3cc:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800d3d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3d4:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800d3d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3dc:	2220      	movs	r2, #32
 800d3de:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800d3e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3e6:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800d3ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d10c      	bne.n	800d40c <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800d3f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3f6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800d402:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d406:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800d40a:	e004      	b.n	800d416 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800d40c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d410:	2200      	movs	r2, #0
 800d412:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800d416:	1cbb      	adds	r3, r7, #2
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	2b04      	cmp	r3, #4
 800d41c:	d802      	bhi.n	800d424 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800d41e:	1cbb      	adds	r3, r7, #2
 800d420:	2205      	movs	r2, #5
 800d422:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d424:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d428:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d110      	bne.n	800d452 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800d430:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d434:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d10a      	bne.n	800d452 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800d43c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d440:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800d444:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d448:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800d44c:	1cbb      	adds	r3, r7, #2
 800d44e:	2206      	movs	r2, #6
 800d450:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800d452:	1cbb      	adds	r3, r7, #2
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	3b01      	subs	r3, #1
 800d458:	2b05      	cmp	r3, #5
 800d45a:	d827      	bhi.n	800d4ac <VL53L1_init_and_start_range+0x1f0>
 800d45c:	a201      	add	r2, pc, #4	; (adr r2, 800d464 <VL53L1_init_and_start_range+0x1a8>)
 800d45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d462:	bf00      	nop
 800d464:	0800d4a5 	.word	0x0800d4a5
 800d468:	0800d49d 	.word	0x0800d49d
 800d46c:	0800d495 	.word	0x0800d495
 800d470:	0800d48d 	.word	0x0800d48d
 800d474:	0800d485 	.word	0x0800d485
 800d478:	0800d47d 	.word	0x0800d47d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800d47c:	2301      	movs	r3, #1
 800d47e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d482:	e017      	b.n	800d4b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800d484:	230d      	movs	r3, #13
 800d486:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d48a:	e013      	b.n	800d4b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800d48c:	2324      	movs	r3, #36	; 0x24
 800d48e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d492:	e00f      	b.n	800d4b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800d494:	2344      	movs	r3, #68	; 0x44
 800d496:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d49a:	e00b      	b.n	800d4b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800d49c:	235a      	movs	r3, #90	; 0x5a
 800d49e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d4a2:	e007      	b.n	800d4b4 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800d4a4:	2371      	movs	r3, #113	; 0x71
 800d4a6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d4aa:	e003      	b.n	800d4b4 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800d4ac:	2383      	movs	r3, #131	; 0x83
 800d4ae:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800d4b2:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800d4b4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d4b8:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800d4bc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800d4c0:	f107 030c 	add.w	r3, r7, #12
 800d4c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800d4ce:	e00b      	b.n	800d4e8 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800d4d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d4d4:	1c5a      	adds	r2, r3, #1
 800d4d6:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800d4da:	2200      	movs	r2, #0
 800d4dc:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800d4de:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800d4e8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800d4ec:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d3ed      	bcc.n	800d4d0 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800d4f4:	1cbb      	adds	r3, r7, #2
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	2b05      	cmp	r3, #5
 800d4fa:	d917      	bls.n	800d52c <VL53L1_init_and_start_range+0x270>
 800d4fc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d500:	2b00      	cmp	r3, #0
 800d502:	d113      	bne.n	800d52c <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d504:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d508:	f1c3 0301 	rsb	r3, r3, #1
 800d50c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d510:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800d514:	f107 020c 	add.w	r2, r7, #12
 800d518:	4413      	add	r3, r2
		status =
 800d51a:	461a      	mov	r2, r3
 800d51c:	210b      	movs	r1, #11
 800d51e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800d522:	f002 fb6b 	bl	800fbfc <VL53L1_i2c_encode_static_nvm_managed>
 800d526:	4603      	mov	r3, r0
 800d528:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800d52c:	1cbb      	adds	r3, r7, #2
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	2b04      	cmp	r3, #4
 800d532:	d917      	bls.n	800d564 <VL53L1_init_and_start_range+0x2a8>
 800d534:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d113      	bne.n	800d564 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d53c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d540:	f1c3 030d 	rsb	r3, r3, #13
 800d544:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d548:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800d54c:	f107 020c 	add.w	r2, r7, #12
 800d550:	4413      	add	r3, r2
		status =
 800d552:	461a      	mov	r2, r3
 800d554:	2117      	movs	r1, #23
 800d556:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800d55a:	f002 fc2b 	bl	800fdb4 <VL53L1_i2c_encode_customer_nvm_managed>
 800d55e:	4603      	mov	r3, r0
 800d560:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800d564:	1cbb      	adds	r3, r7, #2
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d917      	bls.n	800d59c <VL53L1_init_and_start_range+0x2e0>
 800d56c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d570:	2b00      	cmp	r3, #0
 800d572:	d113      	bne.n	800d59c <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d574:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d578:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800d57c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d580:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800d584:	f107 020c 	add.w	r2, r7, #12
 800d588:	4413      	add	r3, r2
		status =
 800d58a:	461a      	mov	r2, r3
 800d58c:	2120      	movs	r1, #32
 800d58e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800d592:	f002 fd4d 	bl	8010030 <VL53L1_i2c_encode_static_config>
 800d596:	4603      	mov	r3, r0
 800d598:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800d59c:	1cbb      	adds	r3, r7, #2
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d917      	bls.n	800d5d4 <VL53L1_init_and_start_range+0x318>
 800d5a4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d113      	bne.n	800d5d4 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800d5ac:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d5b0:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800d5b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d5b8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800d5bc:	f107 020c 	add.w	r2, r7, #12
 800d5c0:	4413      	add	r3, r2
		status =
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	2116      	movs	r1, #22
 800d5c6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800d5ca:	f002 fe14 	bl	80101f6 <VL53L1_i2c_encode_general_config>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800d5d4:	1cbb      	adds	r3, r7, #2
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d917      	bls.n	800d60c <VL53L1_init_and_start_range+0x350>
 800d5dc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d113      	bne.n	800d60c <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d5e4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d5e8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800d5ec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d5f0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800d5f4:	f107 020c 	add.w	r2, r7, #12
 800d5f8:	4413      	add	r3, r2
		status =
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	2117      	movs	r1, #23
 800d5fe:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d602:	f002 fe7c 	bl	80102fe <VL53L1_i2c_encode_timing_config>
 800d606:	4603      	mov	r3, r0
 800d608:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800d60c:	1cbb      	adds	r3, r7, #2
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d036      	beq.n	800d682 <VL53L1_init_and_start_range+0x3c6>
 800d614:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d132      	bne.n	800d682 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800d61c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d620:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800d624:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800d628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d62c:	791b      	ldrb	r3, [r3, #4]
 800d62e:	f003 0320 	and.w	r3, r3, #32
 800d632:	2b00      	cmp	r3, #0
 800d634:	d017      	beq.n	800d666 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800d636:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d63a:	789b      	ldrb	r3, [r3, #2]
 800d63c:	f043 0301 	orr.w	r3, r3, #1
 800d640:	b2da      	uxtb	r2, r3
 800d642:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d646:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800d648:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d64c:	789b      	ldrb	r3, [r3, #2]
 800d64e:	f043 0301 	orr.w	r3, r3, #1
 800d652:	b2da      	uxtb	r2, r3
 800d654:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d658:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800d65a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d65e:	789a      	ldrb	r2, [r3, #2]
 800d660:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d664:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d666:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800d66a:	f107 020c 	add.w	r2, r7, #12
 800d66e:	4413      	add	r3, r2
		status =
 800d670:	461a      	mov	r2, r3
 800d672:	2112      	movs	r1, #18
 800d674:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800d678:	f002 fec3 	bl	8010402 <VL53L1_i2c_encode_dynamic_config>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800d682:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d686:	2b00      	cmp	r3, #0
 800d688:	d113      	bne.n	800d6b2 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800d68a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800d68e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800d692:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800d696:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800d69a:	f107 020c 	add.w	r2, r7, #12
 800d69e:	4413      	add	r3, r2
		status =
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	2105      	movs	r1, #5
 800d6a4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800d6a8:	f002 ff30 	bl	801050c <VL53L1_i2c_encode_system_control>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800d6b2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10c      	bne.n	800d6d4 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800d6ba:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
		status =
 800d6be:	f107 020c 	add.w	r2, r7, #12
 800d6c2:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800d6c6:	1d38      	adds	r0, r7, #4
 800d6c8:	6800      	ldr	r0, [r0, #0]
 800d6ca:	f002 f8f1 	bl	800f8b0 <VL53L1_WriteMulti>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800d6d4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d106      	bne.n	800d6ea <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800d6dc:	1d3b      	adds	r3, r7, #4
 800d6de:	6818      	ldr	r0, [r3, #0]
 800d6e0:	f001 f9e6 	bl	800eab0 <VL53L1_update_ll_driver_rd_state>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800d6ea:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d106      	bne.n	800d700 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800d6f2:	1d3b      	adds	r3, r7, #4
 800d6f4:	6818      	ldr	r0, [r3, #0]
 800d6f6:	f001 faae 	bl	800ec56 <VL53L1_update_ll_driver_cfg_state>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800d700:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800d704:	4618      	mov	r0, r3
 800d706:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop

0800d710 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d718:	2300      	movs	r3, #0
 800d71a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d726:	b25b      	sxtb	r3, r3
 800d728:	f003 030f 	and.w	r3, r3, #15
 800d72c:	b25b      	sxtb	r3, r3
 800d72e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d732:	b25b      	sxtb	r3, r3
 800d734:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d742:	4619      	mov	r1, r3
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f002 ff1c 	bl	8010582 <VL53L1_set_system_control>
 800d74a:	4603      	mov	r3, r0
 800d74c:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d754:	f003 030f 	and.w	r3, r3, #15
 800d758:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800d760:	2103      	movs	r1, #3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f001 f97a 	bl	800ea5c <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d102      	bne.n	800d778 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f001 feef 	bl	800f556 <VL53L1_low_power_auto_data_stop_range>

	return status;
 800d778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b0c8      	sub	sp, #288	; 0x120
 800d788:	af00      	add	r7, sp, #0
 800d78a:	1d3b      	adds	r3, r7, #4
 800d78c:	6018      	str	r0, [r3, #0]
 800d78e:	460a      	mov	r2, r1
 800d790:	1cfb      	adds	r3, r7, #3
 800d792:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d794:	2300      	movs	r3, #0
 800d796:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d79a:	1d3b      	adds	r3, r7, #4
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800d7a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d7a6:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800d7aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800d7ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d7b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d7b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800d7ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d7be:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800d7c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800d7c6:	2388      	movs	r3, #136	; 0x88
 800d7c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800d7d8:	1cfb      	adds	r3, r7, #3
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d008      	beq.n	800d7f2 <VL53L1_get_measurement_results+0x6e>
 800d7e0:	2b02      	cmp	r3, #2
 800d7e2:	d10d      	bne.n	800d800 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800d7e4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800d7e8:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800d7ec:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800d7f0:	e00a      	b.n	800d808 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800d7f2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800d7f6:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800d7fa:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800d7fe:	e003      	b.n	800d808 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800d800:	232c      	movs	r3, #44	; 0x2c
 800d802:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800d806:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d808:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d10c      	bne.n	800d82a <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800d810:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
		status =
 800d814:	f107 0208 	add.w	r2, r7, #8
 800d818:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800d81c:	1d38      	adds	r0, r7, #4
 800d81e:	6800      	ldr	r0, [r0, #0]
 800d820:	f002 f87c 	bl	800f91c <VL53L1_ReadMulti>
 800d824:	4603      	mov	r3, r0
 800d826:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800d82a:	1cfb      	adds	r3, r7, #3
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d917      	bls.n	800d862 <VL53L1_get_measurement_results+0xde>
 800d832:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800d836:	2b00      	cmp	r3, #0
 800d838:	d113      	bne.n	800d862 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800d83a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800d83e:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800d842:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800d846:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800d84a:	f107 0208 	add.w	r2, r7, #8
 800d84e:	4413      	add	r3, r2
		status =
 800d850:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800d854:	4619      	mov	r1, r3
 800d856:	2038      	movs	r0, #56	; 0x38
 800d858:	f003 f811 	bl	801087e <VL53L1_i2c_decode_debug_results>
 800d85c:	4603      	mov	r3, r0
 800d85e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800d862:	1cfb      	adds	r3, r7, #3
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d017      	beq.n	800d89a <VL53L1_get_measurement_results+0x116>
 800d86a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d113      	bne.n	800d89a <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800d872:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800d876:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800d87a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800d87e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800d882:	f107 0208 	add.w	r2, r7, #8
 800d886:	4413      	add	r3, r2
		status =
 800d888:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800d88c:	4619      	mov	r1, r3
 800d88e:	2021      	movs	r0, #33	; 0x21
 800d890:	f002 ff94 	bl	80107bc <VL53L1_i2c_decode_core_results>
 800d894:	4603      	mov	r3, r0
 800d896:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800d89a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d110      	bne.n	800d8c4 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800d8a8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800d8ac:	f107 0208 	add.w	r2, r7, #8
 800d8b0:	4413      	add	r3, r2
		status =
 800d8b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	202c      	movs	r0, #44	; 0x2c
 800d8ba:	f002 fe89 	bl	80105d0 <VL53L1_i2c_decode_system_results>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800d8c4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b088      	sub	sp, #32
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	460b      	mov	r3, r1
 800d8dc:	607a      	str	r2, [r7, #4]
 800d8de:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800d8ee:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d8f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d106      	bne.n	800d90a <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800d8fc:	7afb      	ldrb	r3, [r7, #11]
 800d8fe:	4619      	mov	r1, r3
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7ff ff3f 	bl	800d784 <VL53L1_get_measurement_results>
 800d906:	4603      	mov	r3, r0
 800d908:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800d90a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10c      	bne.n	800d92c <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800d918:	4618      	mov	r0, r3
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	f000 f86c 	bl	800da04 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800d932:	2b01      	cmp	r3, #1
 800d934:	d12d      	bne.n	800d992 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800d936:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10e      	bne.n	800d95c <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800d944:	2b00      	cmp	r3, #0
 800d946:	d109      	bne.n	800d95c <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f001 fe5e 	bl	800f60a <VL53L1_low_power_auto_setup_manual_calibration>
 800d94e:	4603      	mov	r3, r0
 800d950:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2201      	movs	r2, #1
 800d956:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800d95a:	e00c      	b.n	800d976 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800d95c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d108      	bne.n	800d976 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d103      	bne.n	800d976 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	2202      	movs	r2, #2
 800d972:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800d97c:	2bff      	cmp	r3, #255	; 0xff
 800d97e:	d008      	beq.n	800d992 <VL53L1_get_device_results+0xc0>
 800d980:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d104      	bne.n	800d992 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f001 fe83 	bl	800f694 <VL53L1_low_power_auto_update_DSS>
 800d98e:	4603      	mov	r3, r0
 800d990:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800d9a6:	2284      	movs	r2, #132	; 0x84
 800d9a8:	6939      	ldr	r1, [r7, #16]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f003 fcba 	bl	8011324 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800d9b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d104      	bne.n	800d9c2 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f001 f901 	bl	800ebc0 <VL53L1_check_ll_driver_rd_state>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d9c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3720      	adds	r7, #32
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d107      	bne.n	800d9f6 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800d9e6:	78fb      	ldrb	r3, [r7, #3]
 800d9e8:	2203      	movs	r2, #3
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7ff fc65 	bl	800d2bc <VL53L1_init_and_start_range>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800d9f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
	...

0800da04 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800da04:	b480      	push	{r7}
 800da06:	b089      	sub	sp, #36	; 0x24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	78da      	ldrb	r2, [r3, #3]
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	3304      	adds	r3, #4
 800da2a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800da2c:	2300      	movs	r3, #0
 800da2e:	77fb      	strb	r3, [r7, #31]
 800da30:	e0d0      	b.n	800dbd4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	7ffa      	ldrb	r2, [r7, #31]
 800da36:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	2200      	movs	r2, #0
 800da3c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	78db      	ldrb	r3, [r3, #3]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10a      	bne.n	800da5c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	785b      	ldrb	r3, [r3, #1]
 800da4a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800da4e:	2b09      	cmp	r3, #9
 800da50:	d104      	bne.n	800da5c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	2213      	movs	r2, #19
 800da56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da5a:	e007      	b.n	800da6c <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	f003 031f 	and.w	r3, r3, #31
 800da64:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800da6c:	7ffb      	ldrb	r3, [r7, #31]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800da72:	2b01      	cmp	r3, #1
 800da74:	d05d      	beq.n	800db32 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800da76:	e0a7      	b.n	800dbc8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	789b      	ldrb	r3, [r3, #2]
 800da7c:	2b07      	cmp	r3, #7
 800da7e:	d104      	bne.n	800da8a <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	821a      	strh	r2, [r3, #16]
 800da88:	e00c      	b.n	800daa4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	789b      	ldrb	r3, [r3, #2]
 800da8e:	2b08      	cmp	r3, #8
 800da90:	d104      	bne.n	800da9c <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	821a      	strh	r2, [r3, #16]
 800da9a:	e003      	b.n	800daa4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	895b      	ldrh	r3, [r3, #10]
 800dac0:	015b      	lsls	r3, r3, #5
 800dac2:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daca:	d302      	bcc.n	800dad2 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800dacc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dad0:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800dae6:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	fb02 f303 	mul.w	r3, r2, r3
 800daf0:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800daf8:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	da01      	bge.n	800db04 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800db00:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800db04:	12db      	asrs	r3, r3, #11
 800db06:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	b21a      	sxth	r2, r3
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	621a      	str	r2, [r3, #32]

			break;
 800db30:	e04a      	b.n	800dbc8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db48:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	8bdb      	ldrh	r3, [r3, #30]
 800db56:	015b      	lsls	r3, r3, #5
 800db58:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db60:	d302      	bcc.n	800db68 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800db62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db66:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800db7c:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	fb02 f303 	mul.w	r3, r2, r3
 800db86:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db8e:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	da01      	bge.n	800db9a <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800db96:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800db9a:	12db      	asrs	r3, r3, #11
 800db9c:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	b21a      	sxth	r2, r3
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	621a      	str	r2, [r3, #32]

			break;
 800dbc6:	bf00      	nop
		}

		pdata++;
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	3340      	adds	r3, #64	; 0x40
 800dbcc:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800dbce:	7ffb      	ldrb	r3, [r7, #31]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	77fb      	strb	r3, [r7, #31]
 800dbd4:	7ffb      	ldrb	r3, [r7, #31]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	f67f af2b 	bls.w	800da32 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	785b      	ldrb	r3, [r3, #1]
 800dbe6:	f003 031f 	and.w	r3, r3, #31
 800dbea:	3b01      	subs	r3, #1
 800dbec:	2b10      	cmp	r3, #16
 800dbee:	d831      	bhi.n	800dc54 <VL53L1_copy_sys_and_core_results_to_range_results+0x250>
 800dbf0:	a201      	add	r2, pc, #4	; (adr r2, 800dbf8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1f4>)
 800dbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf6:	bf00      	nop
 800dbf8:	0800dc3d 	.word	0x0800dc3d
 800dbfc:	0800dc3d 	.word	0x0800dc3d
 800dc00:	0800dc3d 	.word	0x0800dc3d
 800dc04:	0800dc55 	.word	0x0800dc55
 800dc08:	0800dc55 	.word	0x0800dc55
 800dc0c:	0800dc55 	.word	0x0800dc55
 800dc10:	0800dc55 	.word	0x0800dc55
 800dc14:	0800dc55 	.word	0x0800dc55
 800dc18:	0800dc55 	.word	0x0800dc55
 800dc1c:	0800dc55 	.word	0x0800dc55
 800dc20:	0800dc55 	.word	0x0800dc55
 800dc24:	0800dc55 	.word	0x0800dc55
 800dc28:	0800dc3d 	.word	0x0800dc3d
 800dc2c:	0800dc55 	.word	0x0800dc55
 800dc30:	0800dc55 	.word	0x0800dc55
 800dc34:	0800dc55 	.word	0x0800dc55
 800dc38:	0800dc3d 	.word	0x0800dc3d
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	785b      	ldrb	r3, [r3, #1]
 800dc40:	f003 031f 	and.w	r3, r3, #31
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800dc52:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800dc54:	bf00      	nop
 800dc56:	3724      	adds	r7, #36	; 0x24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	607a      	str	r2, [r7, #4]
 800dc6c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800dc76:	897b      	ldrh	r3, [r7, #10]
 800dc78:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800dc7c:	2b38      	cmp	r3, #56	; 0x38
 800dc7e:	f200 8204 	bhi.w	800e08a <VL53L1_get_tuning_parm+0x42a>
 800dc82:	a201      	add	r2, pc, #4	; (adr r2, 800dc88 <VL53L1_get_tuning_parm+0x28>)
 800dc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc88:	0800dd6d 	.word	0x0800dd6d
 800dc8c:	0800dd7b 	.word	0x0800dd7b
 800dc90:	0800dd89 	.word	0x0800dd89
 800dc94:	0800dd97 	.word	0x0800dd97
 800dc98:	0800dda5 	.word	0x0800dda5
 800dc9c:	0800ddb3 	.word	0x0800ddb3
 800dca0:	0800ddc1 	.word	0x0800ddc1
 800dca4:	0800ddcf 	.word	0x0800ddcf
 800dca8:	0800dddd 	.word	0x0800dddd
 800dcac:	0800ddeb 	.word	0x0800ddeb
 800dcb0:	0800ddf9 	.word	0x0800ddf9
 800dcb4:	0800de07 	.word	0x0800de07
 800dcb8:	0800de15 	.word	0x0800de15
 800dcbc:	0800de23 	.word	0x0800de23
 800dcc0:	0800de31 	.word	0x0800de31
 800dcc4:	0800de3f 	.word	0x0800de3f
 800dcc8:	0800de4d 	.word	0x0800de4d
 800dccc:	0800de5b 	.word	0x0800de5b
 800dcd0:	0800de69 	.word	0x0800de69
 800dcd4:	0800de77 	.word	0x0800de77
 800dcd8:	0800de85 	.word	0x0800de85
 800dcdc:	0800de93 	.word	0x0800de93
 800dce0:	0800dea1 	.word	0x0800dea1
 800dce4:	0800deaf 	.word	0x0800deaf
 800dce8:	0800debd 	.word	0x0800debd
 800dcec:	0800decb 	.word	0x0800decb
 800dcf0:	0800ded9 	.word	0x0800ded9
 800dcf4:	0800dee7 	.word	0x0800dee7
 800dcf8:	0800def5 	.word	0x0800def5
 800dcfc:	0800df03 	.word	0x0800df03
 800dd00:	0800df11 	.word	0x0800df11
 800dd04:	0800df1f 	.word	0x0800df1f
 800dd08:	0800df2d 	.word	0x0800df2d
 800dd0c:	0800df3b 	.word	0x0800df3b
 800dd10:	0800df49 	.word	0x0800df49
 800dd14:	0800df57 	.word	0x0800df57
 800dd18:	0800df65 	.word	0x0800df65
 800dd1c:	0800df73 	.word	0x0800df73
 800dd20:	0800df81 	.word	0x0800df81
 800dd24:	0800df8f 	.word	0x0800df8f
 800dd28:	0800df9d 	.word	0x0800df9d
 800dd2c:	0800dfab 	.word	0x0800dfab
 800dd30:	0800dfb9 	.word	0x0800dfb9
 800dd34:	0800dfc7 	.word	0x0800dfc7
 800dd38:	0800dfd5 	.word	0x0800dfd5
 800dd3c:	0800dfe3 	.word	0x0800dfe3
 800dd40:	0800dff1 	.word	0x0800dff1
 800dd44:	0800dfff 	.word	0x0800dfff
 800dd48:	0800e00d 	.word	0x0800e00d
 800dd4c:	0800e01b 	.word	0x0800e01b
 800dd50:	0800e029 	.word	0x0800e029
 800dd54:	0800e037 	.word	0x0800e037
 800dd58:	0800e045 	.word	0x0800e045
 800dd5c:	0800e053 	.word	0x0800e053
 800dd60:	0800e061 	.word	0x0800e061
 800dd64:	0800e06f 	.word	0x0800e06f
 800dd68:	0800e07d 	.word	0x0800e07d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800dd72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	601a      	str	r2, [r3, #0]
	break;
 800dd78:	e18e      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800dd80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	601a      	str	r2, [r3, #0]
	break;
 800dd86:	e187      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800dd8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	601a      	str	r2, [r3, #0]
	break;
 800dd94:	e180      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800dd9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	601a      	str	r2, [r3, #0]
	break;
 800dda2:	e179      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ddaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	601a      	str	r2, [r3, #0]
	break;
 800ddb0:	e172      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800ddb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	601a      	str	r2, [r3, #0]
	break;
 800ddbe:	e16b      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ddc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	601a      	str	r2, [r3, #0]
	break;
 800ddcc:	e164      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ddd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	601a      	str	r2, [r3, #0]
	break;
 800ddda:	e15d      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800dde2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	601a      	str	r2, [r3, #0]
	break;
 800dde8:	e156      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ddf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	601a      	str	r2, [r3, #0]
	break;
 800ddf6:	e14f      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800ddfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	601a      	str	r2, [r3, #0]
	break;
 800de04:	e148      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800de0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	601a      	str	r2, [r3, #0]
	break;
 800de12:	e141      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800de1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	601a      	str	r2, [r3, #0]
	break;
 800de20:	e13a      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800de28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	601a      	str	r2, [r3, #0]
	break;
 800de2e:	e133      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800de36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	601a      	str	r2, [r3, #0]
	break;
 800de3c:	e12c      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800de44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	601a      	str	r2, [r3, #0]
	break;
 800de4a:	e125      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800de52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	601a      	str	r2, [r3, #0]
	break;
 800de58:	e11e      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800de60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	601a      	str	r2, [r3, #0]
	break;
 800de66:	e117      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800de6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	601a      	str	r2, [r3, #0]
	break;
 800de74:	e110      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800de7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	601a      	str	r2, [r3, #0]
	break;
 800de82:	e109      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800de8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	601a      	str	r2, [r3, #0]
	break;
 800de90:	e102      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800de98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	601a      	str	r2, [r3, #0]
	break;
 800de9e:	e0fb      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800dea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	601a      	str	r2, [r3, #0]
	break;
 800deac:	e0f4      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800deb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	601a      	str	r2, [r3, #0]
	break;
 800deba:	e0ed      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800dec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	601a      	str	r2, [r3, #0]
	break;
 800dec8:	e0e6      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ded0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	601a      	str	r2, [r3, #0]
	break;
 800ded6:	e0df      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800dede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	601a      	str	r2, [r3, #0]
	break;
 800dee4:	e0d8      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800deec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	601a      	str	r2, [r3, #0]
	break;
 800def2:	e0d1      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800defa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	601a      	str	r2, [r3, #0]
	break;
 800df00:	e0ca      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800df08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	601a      	str	r2, [r3, #0]
	break;
 800df0e:	e0c3      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800df16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	601a      	str	r2, [r3, #0]
	break;
 800df1c:	e0bc      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800df24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	601a      	str	r2, [r3, #0]
	break;
 800df2a:	e0b5      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800df32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	601a      	str	r2, [r3, #0]
	break;
 800df38:	e0ae      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800df40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	601a      	str	r2, [r3, #0]
	break;
 800df46:	e0a7      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800df4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	601a      	str	r2, [r3, #0]
	break;
 800df54:	e0a0      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800df5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	601a      	str	r2, [r3, #0]
	break;
 800df62:	e099      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800df6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	601a      	str	r2, [r3, #0]
	break;
 800df70:	e092      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800df78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	601a      	str	r2, [r3, #0]
	break;
 800df7e:	e08b      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800df86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	601a      	str	r2, [r3, #0]
	break;
 800df8c:	e084      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800df94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	601a      	str	r2, [r3, #0]
	break;
 800df9a:	e07d      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dfa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	601a      	str	r2, [r3, #0]
	break;
 800dfa8:	e076      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800dfb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	601a      	str	r2, [r3, #0]
	break;
 800dfb6:	e06f      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800dfbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	601a      	str	r2, [r3, #0]
	break;
 800dfc4:	e068      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800dfcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	601a      	str	r2, [r3, #0]
	break;
 800dfd2:	e061      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800dfda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	601a      	str	r2, [r3, #0]
	break;
 800dfe0:	e05a      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800dfe8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	601a      	str	r2, [r3, #0]
	break;
 800dfee:	e053      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800dff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	601a      	str	r2, [r3, #0]
	break;
 800dffc:	e04c      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800e004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	601a      	str	r2, [r3, #0]
	break;
 800e00a:	e045      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e012:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	601a      	str	r2, [r3, #0]
	break;
 800e018:	e03e      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e020:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	601a      	str	r2, [r3, #0]
	break;
 800e026:	e037      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e02e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	601a      	str	r2, [r3, #0]
	break;
 800e034:	e030      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e03c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	601a      	str	r2, [r3, #0]
	break;
 800e042:	e029      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e04a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	601a      	str	r2, [r3, #0]
	break;
 800e050:	e022      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	601a      	str	r2, [r3, #0]
	break;
 800e05e:	e01b      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800e066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	601a      	str	r2, [r3, #0]
	break;
 800e06c:	e014      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	601a      	str	r2, [r3, #0]
	break;
 800e07a:	e00d      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	601a      	str	r2, [r3, #0]
	break;
 800e088:	e006      	b.n	800e098 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e090:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800e092:	23fc      	movs	r3, #252	; 0xfc
 800e094:	75fb      	strb	r3, [r7, #23]
	break;
 800e096:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800e098:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	371c      	adds	r7, #28
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2208      	movs	r2, #8
 800e0b8:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	220b      	movs	r2, #11
 800e0be:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e0c6:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e0ce:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800e0d6:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800e0de:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800e0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2212      	movs	r2, #18
 800e106:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	220f      	movs	r2, #15
 800e10c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2202      	movs	r2, #2
 800e112:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800e11a:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	220c      	movs	r2, #12
 800e120:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800e122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr

0800e132 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b084      	sub	sp, #16
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
 800e13a:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	895b      	ldrh	r3, [r3, #10]
 800e144:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	895b      	ldrh	r3, [r3, #10]
 800e162:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2200      	movs	r2, #0
 800e180:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2240      	movs	r2, #64	; 0x40
 800e186:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10d      	bne.n	800e1ac <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d108      	bne.n	800e1ac <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d103      	bne.n	800e1ac <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	741a      	strb	r2, [r3, #16]
 800e1aa:	e002      	b.n	800e1b2 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800e1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d114      	bne.n	800e1e4 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d110      	bne.n	800e1e4 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	6818      	ldr	r0, [r3, #0]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	7d1b      	ldrb	r3, [r3, #20]
 800e1d6:	f000 ff97 	bl	800f108 <VL53L1_calc_range_ignore_threshold>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	82da      	strh	r2, [r3, #22]
 800e1e2:	e002      	b.n	800e1ea <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b085      	sub	sp, #20
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e1fe:	2300      	movs	r3, #0
 800e200:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e208:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e210:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800e218:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800e220:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2208      	movs	r2, #8
 800e226:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2228      	movs	r2, #40	; 0x28
 800e22c:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2209      	movs	r2, #9
 800e232:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800e234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3714      	adds	r7, #20
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e24c:	2300      	movs	r3, #0
 800e24e:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f248 0203 	movw	r2, #32771	; 0x8003
 800e256:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f248 0201 	movw	r2, #32769	; 0x8001
 800e25e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f248 0241 	movw	r2, #32833	; 0x8041
 800e266:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	220e      	movs	r2, #14
 800e26c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	220a      	movs	r2, #10
 800e272:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2206      	movs	r2, #6
 800e278:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	220e      	movs	r2, #14
 800e27e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	220a      	movs	r2, #10
 800e284:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2206      	movs	r2, #6
 800e28a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2202      	movs	r2, #2
 800e290:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2221      	movs	r2, #33	; 0x21
 800e296:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e2aa:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e2b2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e2ba:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	22c0      	movs	r2, #192	; 0xc0
 800e2c0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	22c0      	movs	r2, #192	; 0xc0
 800e2c6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	22c0      	movs	r2, #192	; 0xc0
 800e2cc:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2210      	movs	r2, #16
 800e2d8:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e308:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e310:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f248 0230 	movw	r2, #32816	; 0x8030
 800e318:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e320:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e328:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e330:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f24f 6218 	movw	r2, #63000	; 0xf618
 800e338:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800e340:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2201      	movs	r2, #1
 800e346:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e34e:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800e350:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr

0800e360 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e360:	b480      	push	{r7}
 800e362:	b087      	sub	sp, #28
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
 800e36c:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e36e:	2300      	movs	r3, #0
 800e370:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800e378:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2200      	movs	r2, #0
 800e37e:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2200      	movs	r2, #0
 800e384:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2200      	movs	r2, #0
 800e396:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2211      	movs	r2, #17
 800e3ba:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2202      	movs	r2, #2
 800e3c0:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2208      	movs	r2, #8
 800e3d2:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	22ff      	movs	r2, #255	; 0xff
 800e410:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	2200      	movs	r2, #0
 800e43e:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	2220      	movs	r2, #32
 800e444:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	220b      	movs	r2, #11
 800e44a:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	2202      	movs	r2, #2
 800e458:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	220d      	movs	r2, #13
 800e45e:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2200      	movs	r2, #0
 800e46c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2201      	movs	r2, #1
 800e472:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2200      	movs	r2, #0
 800e478:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2200      	movs	r2, #0
 800e47e:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800e486:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	2200      	movs	r2, #0
 800e48c:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	2238      	movs	r2, #56	; 0x38
 800e492:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	22ff      	movs	r2, #255	; 0xff
 800e498:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2201      	movs	r2, #1
 800e49e:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	221a      	movs	r2, #26
 800e4aa:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2220      	movs	r2, #32
 800e4b6:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	22cc      	movs	r2, #204	; 0xcc
 800e4c2:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	220b      	movs	r2, #11
 800e4c8:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	22f5      	movs	r2, #245	; 0xf5
 800e4d4:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2209      	movs	r2, #9
 800e4da:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2208      	movs	r2, #8
 800e4f0:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2278      	movs	r2, #120	; 0x78
 800e4f6:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	2201      	movs	r2, #1
 800e508:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	2200      	movs	r2, #0
 800e50e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	2200      	movs	r2, #0
 800e514:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2200      	movs	r2, #0
 800e51a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	220b      	movs	r2, #11
 800e52a:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2209      	movs	r2, #9
 800e530:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2201      	movs	r2, #1
 800e546:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	22c7      	movs	r2, #199	; 0xc7
 800e560:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	22ff      	movs	r2, #255	; 0xff
 800e566:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	22db      	movs	r2, #219	; 0xdb
 800e56c:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2202      	movs	r2, #2
 800e572:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800e574:	6a3b      	ldr	r3, [r7, #32]
 800e576:	2200      	movs	r2, #0
 800e578:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	2201      	movs	r2, #1
 800e57e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800e580:	6a3b      	ldr	r3, [r7, #32]
 800e582:	2201      	movs	r2, #1
 800e584:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	2221      	movs	r2, #33	; 0x21
 800e58a:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800e58c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e590:	4618      	mov	r0, r3
 800e592:	371c      	adds	r7, #28
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr

0800e59c <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b088      	sub	sp, #32
 800e5a0:	af02      	add	r7, sp, #8
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	9301      	str	r3, [sp, #4]
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	68b9      	ldr	r1, [r7, #8]
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff fecf 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e5c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d121      	bne.n	800e612 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2207      	movs	r2, #7
 800e5d2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2205      	movs	r2, #5
 800e5d8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2208      	movs	r2, #8
 800e5ee:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2238      	movs	r2, #56	; 0x38
 800e5f4:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	2207      	movs	r2, #7
 800e5fa:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2205      	movs	r2, #5
 800e600:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b088      	sub	sp, #32
 800e622:	af02      	add	r7, sp, #8
 800e624:	60f8      	str	r0, [r7, #12]
 800e626:	60b9      	str	r1, [r7, #8]
 800e628:	607a      	str	r2, [r7, #4]
 800e62a:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e62c:	2300      	movs	r3, #0
 800e62e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	9300      	str	r3, [sp, #0]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	68b9      	ldr	r1, [r7, #8]
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7ff fe8e 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800e644:	4603      	mov	r3, r0
 800e646:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d121      	bne.n	800e694 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	220f      	movs	r2, #15
 800e654:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	220d      	movs	r2, #13
 800e65a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2208      	movs	r2, #8
 800e670:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	22b8      	movs	r2, #184	; 0xb8
 800e676:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	220f      	movs	r2, #15
 800e67c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	220d      	movs	r2, #13
 800e682:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800e694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
 800e6ac:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	9301      	str	r3, [sp, #4]
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	68b9      	ldr	r1, [r7, #8]
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f7ff fe4d 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e6ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d105      	bne.n	800e6de <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	2202      	movs	r2, #2
 800e6d6:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	223b      	movs	r2, #59	; 0x3b
 800e6dc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e6de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3718      	adds	r7, #24
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b088      	sub	sp, #32
 800e6ee:	af02      	add	r7, sp, #8
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
 800e6f6:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	68b9      	ldr	r1, [r7, #8]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f7ff fe28 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800e710:	4603      	mov	r3, r0
 800e712:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d105      	bne.n	800e728 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	2202      	movs	r2, #2
 800e720:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	225b      	movs	r2, #91	; 0x5b
 800e726:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af02      	add	r7, sp, #8
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
 800e740:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e742:	2300      	movs	r3, #0
 800e744:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	6a3b      	ldr	r3, [r7, #32]
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	68b9      	ldr	r1, [r7, #8]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff fe03 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800e75a:	4603      	mov	r3, r0
 800e75c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e75e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d11a      	bne.n	800e79c <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2200      	movs	r2, #0
 800e76a:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	22b1      	movs	r2, #177	; 0xb1
 800e776:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	22d4      	movs	r2, #212	; 0xd4
 800e782:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e78a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	2240      	movs	r2, #64	; 0x40
 800e79a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e79c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3718      	adds	r7, #24
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af02      	add	r7, sp, #8
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
 800e7b4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	9301      	str	r3, [sp, #4]
 800e7be:	6a3b      	ldr	r3, [r7, #32]
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	68b9      	ldr	r1, [r7, #8]
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f7ff fee7 	bl	800e59c <VL53L1_preset_mode_standard_ranging_short_range>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e7d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d11a      	bne.n	800e810 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2284      	movs	r2, #132	; 0x84
 800e7ea:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	22b1      	movs	r2, #177	; 0xb1
 800e7f6:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e7fe:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	2240      	movs	r2, #64	; 0x40
 800e80e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e810:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3718      	adds	r7, #24
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af02      	add	r7, sp, #8
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e82a:	2300      	movs	r3, #0
 800e82c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800e82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	6a3b      	ldr	r3, [r7, #32]
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	68b9      	ldr	r1, [r7, #8]
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7ff feee 	bl	800e61e <VL53L1_preset_mode_standard_ranging_long_range>
 800e842:	4603      	mov	r3, r0
 800e844:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d11a      	bne.n	800e884 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	2200      	movs	r2, #0
 800e852:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2297      	movs	r2, #151	; 0x97
 800e85e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	22b1      	movs	r2, #177	; 0xb1
 800e86a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e872:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800e87e:	6a3b      	ldr	r3, [r7, #32]
 800e880:	2240      	movs	r2, #64	; 0x40
 800e882:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b088      	sub	sp, #32
 800e894:	af02      	add	r7, sp, #8
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	9301      	str	r3, [sp, #4]
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	687a      	ldr	r2, [r7, #4]
 800e8ae:	68b9      	ldr	r1, [r7, #8]
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f7ff ff3f 	bl	800e734 <VL53L1_preset_mode_timed_ranging>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800e8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d106      	bne.n	800e8d0 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800e8c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	68b8      	ldr	r0, [r7, #8]
 800e8c8:	f000 fe7f 	bl	800f5ca <VL53L1_config_low_power_auto_mode>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e8d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3718      	adds	r7, #24
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b088      	sub	sp, #32
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	9301      	str	r3, [sp, #4]
 800e8f2:	6a3b      	ldr	r3, [r7, #32]
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	68b9      	ldr	r1, [r7, #8]
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f7ff ff53 	bl	800e7a8 <VL53L1_preset_mode_timed_ranging_short_range>
 800e902:	4603      	mov	r3, r0
 800e904:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800e906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d106      	bne.n	800e91c <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800e90e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e910:	6839      	ldr	r1, [r7, #0]
 800e912:	68b8      	ldr	r0, [r7, #8]
 800e914:	f000 fe59 	bl	800f5ca <VL53L1_config_low_power_auto_mode>
 800e918:	4603      	mov	r3, r0
 800e91a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e91c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3718      	adds	r7, #24
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	af02      	add	r7, sp, #8
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e936:	2300      	movs	r3, #0
 800e938:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	9301      	str	r3, [sp, #4]
 800e93e:	6a3b      	ldr	r3, [r7, #32]
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	68b9      	ldr	r1, [r7, #8]
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f7ff ff67 	bl	800e81c <VL53L1_preset_mode_timed_ranging_long_range>
 800e94e:	4603      	mov	r3, r0
 800e950:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800e952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d106      	bne.n	800e968 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800e95a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	68b8      	ldr	r0, [r7, #8]
 800e960:	f000 fe33 	bl	800f5ca <VL53L1_config_low_power_auto_mode>
 800e964:	4603      	mov	r3, r0
 800e966:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800e968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b088      	sub	sp, #32
 800e978:	af02      	add	r7, sp, #8
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e982:	2300      	movs	r3, #0
 800e984:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	6a3b      	ldr	r3, [r7, #32]
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	68b9      	ldr	r1, [r7, #8]
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f7ff fce3 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800e99a:	4603      	mov	r3, r0
 800e99c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800e99e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d116      	bne.n	800e9d4 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	22b1      	movs	r2, #177	; 0xb1
 800e9b6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	22d4      	movs	r2, #212	; 0xd4
 800e9c2:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	2210      	movs	r2, #16
 800e9d2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800e9d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3718      	adds	r7, #24
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b088      	sub	sp, #32
 800e9e4:	af02      	add	r7, sp, #8
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
 800e9ec:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	68b9      	ldr	r1, [r7, #8]
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7ff fcad 	bl	800e360 <VL53L1_preset_mode_standard_ranging>
 800ea06:	4603      	mov	r3, r0
 800ea08:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ea0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	2201      	movs	r2, #1
 800ea16:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800ea18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3718      	adds	r7, #24
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2202      	movs	r2, #2
 800ea3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	220a      	movs	r2, #10
 800ea44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800ea4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ea50:	bf00      	nop
 800ea52:	3714      	adds	r7, #20
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	460b      	mov	r3, r1
 800ea66:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	332c      	adds	r3, #44	; 0x2c
 800ea70:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	78fa      	ldrb	r2, [r7, #3]
 800ea76:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2202      	movs	r2, #2
 800ea82:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2200      	movs	r2, #0
 800ea88:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	78fa      	ldrb	r2, [r7, #3]
 800ea8e:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2200      	movs	r2, #0
 800ea94:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	2202      	movs	r2, #2
 800ea9a:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	71da      	strb	r2, [r3, #7]

}
 800eaa2:	bf00      	nop
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
	...

0800eab0 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800eab8:	2300      	movs	r3, #0
 800eaba:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	332c      	adds	r3, #44	; 0x2c
 800eac4:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800eacc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10c      	bne.n	800eaee <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2203      	movs	r2, #3
 800ead8:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2200      	movs	r2, #0
 800eade:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2202      	movs	r2, #2
 800eae4:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	71da      	strb	r2, [r3, #7]
 800eaec:	e060      	b.n	800ebb0 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	795b      	ldrb	r3, [r3, #5]
 800eaf2:	2bff      	cmp	r3, #255	; 0xff
 800eaf4:	d103      	bne.n	800eafe <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2280      	movs	r2, #128	; 0x80
 800eafa:	715a      	strb	r2, [r3, #5]
 800eafc:	e005      	b.n	800eb0a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	795b      	ldrb	r3, [r3, #5]
 800eb02:	3301      	adds	r3, #1
 800eb04:	b2da      	uxtb	r2, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	799b      	ldrb	r3, [r3, #6]
 800eb0e:	f083 0302 	eor.w	r3, r3, #2
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	791b      	ldrb	r3, [r3, #4]
 800eb1c:	3b03      	subs	r3, #3
 800eb1e:	2b05      	cmp	r3, #5
 800eb20:	d839      	bhi.n	800eb96 <VL53L1_update_ll_driver_rd_state+0xe6>
 800eb22:	a201      	add	r2, pc, #4	; (adr r2, 800eb28 <VL53L1_update_ll_driver_rd_state+0x78>)
 800eb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb28:	0800eb41 	.word	0x0800eb41
 800eb2c:	0800eb97 	.word	0x0800eb97
 800eb30:	0800eb97 	.word	0x0800eb97
 800eb34:	0800eb6b 	.word	0x0800eb6b
 800eb38:	0800eb79 	.word	0x0800eb79
 800eb3c:	0800eb81 	.word	0x0800eb81

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800eb46:	f003 0302 	and.w	r3, r3, #2
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	dd03      	ble.n	800eb56 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2206      	movs	r2, #6
 800eb52:	711a      	strb	r2, [r3, #4]
 800eb54:	e002      	b.n	800eb5c <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2208      	movs	r2, #8
 800eb5a:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	71da      	strb	r2, [r3, #7]

		break;
 800eb68:	e022      	b.n	800ebb0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2208      	movs	r2, #8
 800eb74:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800eb76:	e01b      	b.n	800ebb0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2208      	movs	r2, #8
 800eb7c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800eb7e:	e017      	b.n	800ebb0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	79db      	ldrb	r3, [r3, #7]
 800eb84:	f083 0301 	eor.w	r3, r3, #1
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2208      	movs	r2, #8
 800eb92:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800eb94:	e00c      	b.n	800ebb0 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2203      	movs	r2, #3
 800eb9a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2202      	movs	r2, #2
 800eba6:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	71da      	strb	r2, [r3, #7]

		break;
 800ebae:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ebb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	371c      	adds	r7, #28
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b089      	sub	sp, #36	; 0x24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	332c      	adds	r3, #44	; 0x2c
 800ebd4:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800ebdc:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800ebee:	f003 031f 	and.w	r3, r3, #31
 800ebf2:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	78db      	ldrb	r3, [r3, #3]
 800ebf8:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ebfe:	111b      	asrs	r3, r3, #4
 800ec00:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800ec02:	f003 0302 	and.w	r3, r3, #2
 800ec06:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ec0e:	f003 0320 	and.w	r3, r3, #32
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d017      	beq.n	800ec46 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	791b      	ldrb	r3, [r3, #4]
 800ec1a:	2b06      	cmp	r3, #6
 800ec1c:	d105      	bne.n	800ec2a <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800ec1e:	7bfb      	ldrb	r3, [r7, #15]
 800ec20:	2b12      	cmp	r3, #18
 800ec22:	d010      	beq.n	800ec46 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800ec24:	23ef      	movs	r3, #239	; 0xef
 800ec26:	77fb      	strb	r3, [r7, #31]
 800ec28:	e00d      	b.n	800ec46 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	795b      	ldrb	r3, [r3, #5]
 800ec2e:	7bba      	ldrb	r2, [r7, #14]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d001      	beq.n	800ec38 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800ec34:	23ee      	movs	r3, #238	; 0xee
 800ec36:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	799b      	ldrb	r3, [r3, #6]
 800ec3c:	7b7a      	ldrb	r2, [r7, #13]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d001      	beq.n	800ec46 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800ec42:	23ed      	movs	r3, #237	; 0xed
 800ec44:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800ec46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3724      	adds	r7, #36	; 0x24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800ec56:	b480      	push	{r7}
 800ec58:	b087      	sub	sp, #28
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	332c      	adds	r3, #44	; 0x2c
 800ec6a:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ec72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10c      	bne.n	800ec94 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2203      	movs	r2, #3
 800ec7e:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2202      	movs	r2, #2
 800ec8a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	70da      	strb	r2, [r3, #3]
 800ec92:	e03e      	b.n	800ed12 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	785b      	ldrb	r3, [r3, #1]
 800ec98:	2bff      	cmp	r3, #255	; 0xff
 800ec9a:	d103      	bne.n	800eca4 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2280      	movs	r2, #128	; 0x80
 800eca0:	705a      	strb	r2, [r3, #1]
 800eca2:	e005      	b.n	800ecb0 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	785b      	ldrb	r3, [r3, #1]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	b2da      	uxtb	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	789b      	ldrb	r3, [r3, #2]
 800ecb4:	f083 0302 	eor.w	r3, r3, #2
 800ecb8:	b2da      	uxtb	r2, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d002      	beq.n	800eccc <VL53L1_update_ll_driver_cfg_state+0x76>
 800ecc6:	2b04      	cmp	r3, #4
 800ecc8:	d00e      	beq.n	800ece8 <VL53L1_update_ll_driver_cfg_state+0x92>
 800ecca:	e015      	b.n	800ecf8 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	78db      	ldrb	r3, [r3, #3]
 800ecd0:	f083 0301 	eor.w	r3, r3, #1
 800ecd4:	b2da      	uxtb	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2204      	movs	r2, #4
 800ece4:	701a      	strb	r2, [r3, #0]
		break;
 800ece6:	e014      	b.n	800ed12 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	78db      	ldrb	r3, [r3, #3]
 800ecec:	f083 0301 	eor.w	r3, r3, #1
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	70da      	strb	r2, [r3, #3]

		break;
 800ecf6:	e00c      	b.n	800ed12 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2203      	movs	r2, #3
 800ecfc:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2200      	movs	r2, #0
 800ed02:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2202      	movs	r2, #2
 800ed08:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	70da      	strb	r2, [r3, #3]

		break;
 800ed10:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ed12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	371c      	adds	r7, #28
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800ed22:	b480      	push	{r7}
 800ed24:	b083      	sub	sp, #12
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	7c1a      	ldrb	r2, [r3, #16]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	3301      	adds	r3, #1
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	7c52      	ldrb	r2, [r2, #17]
 800ed3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	3302      	adds	r3, #2
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	7c92      	ldrb	r2, [r2, #18]
 800ed46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	3303      	adds	r3, #3
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	7cd2      	ldrb	r2, [r2, #19]
 800ed50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	3304      	adds	r3, #4
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	7d12      	ldrb	r2, [r2, #20]
 800ed5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	3305      	adds	r3, #5
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	7d52      	ldrb	r2, [r2, #21]
 800ed64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	3306      	adds	r3, #6
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	7d92      	ldrb	r2, [r2, #22]
 800ed6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	3307      	adds	r3, #7
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	7dd2      	ldrb	r2, [r2, #23]
 800ed78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	3308      	adds	r3, #8
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	7e12      	ldrb	r2, [r2, #24]
 800ed82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	3309      	adds	r3, #9
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	7e52      	ldrb	r2, [r2, #25]
 800ed8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	330a      	adds	r3, #10
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	7e92      	ldrb	r2, [r2, #26]
 800ed96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	330b      	adds	r3, #11
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	7ed2      	ldrb	r2, [r2, #27]
 800eda0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	330c      	adds	r3, #12
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	7f12      	ldrb	r2, [r2, #28]
 800edaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	330d      	adds	r3, #13
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	7f52      	ldrb	r2, [r2, #29]
 800edb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	330e      	adds	r3, #14
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	7f92      	ldrb	r2, [r2, #30]
 800edbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	330f      	adds	r3, #15
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	7fd2      	ldrb	r2, [r2, #31]
 800edc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	3310      	adds	r3, #16
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	f892 2020 	ldrb.w	r2, [r2, #32]
 800edd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	3311      	adds	r3, #17
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ede0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	3312      	adds	r3, #18
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800edec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	3313      	adds	r3, #19
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800edf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	3314      	adds	r3, #20
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ee04:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	3315      	adds	r3, #21
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ee10:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	3316      	adds	r3, #22
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ee1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	3317      	adds	r3, #23
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ee28:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	3318      	adds	r3, #24
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ee34:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	3319      	adds	r3, #25
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ee40:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	331a      	adds	r3, #26
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800ee4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	331b      	adds	r3, #27
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800ee58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	331c      	adds	r3, #28
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ee64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	331d      	adds	r3, #29
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ee70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	331e      	adds	r3, #30
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800ee7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	331f      	adds	r3, #31
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800ee88:	701a      	strb	r2, [r3, #0]
}
 800ee8a:	bf00      	nop
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr

0800ee96 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ee96:	b480      	push	{r7}
 800ee98:	b085      	sub	sp, #20
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	603a      	str	r2, [r7, #0]
 800eea0:	80fb      	strh	r3, [r7, #6]
 800eea2:	460b      	mov	r3, r1
 800eea4:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800eeae:	88fb      	ldrh	r3, [r7, #6]
 800eeb0:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	81fb      	strh	r3, [r7, #14]
 800eeb6:	e00e      	b.n	800eed6 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800eeb8:	88ba      	ldrh	r2, [r7, #4]
 800eeba:	89fb      	ldrh	r3, [r7, #14]
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	3b01      	subs	r3, #1
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	4413      	add	r3, r2
 800eec4:	89ba      	ldrh	r2, [r7, #12]
 800eec6:	b2d2      	uxtb	r2, r2
 800eec8:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800eeca:	89bb      	ldrh	r3, [r7, #12]
 800eecc:	0a1b      	lsrs	r3, r3, #8
 800eece:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800eed0:	89fb      	ldrh	r3, [r7, #14]
 800eed2:	3301      	adds	r3, #1
 800eed4:	81fb      	strh	r3, [r7, #14]
 800eed6:	89fa      	ldrh	r2, [r7, #14]
 800eed8:	88bb      	ldrh	r3, [r7, #4]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d3ec      	bcc.n	800eeb8 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800eede:	bf00      	nop
 800eee0:	3714      	adds	r7, #20
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b085      	sub	sp, #20
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	4603      	mov	r3, r0
 800eef2:	6039      	str	r1, [r7, #0]
 800eef4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800eef6:	2300      	movs	r3, #0
 800eef8:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800eefa:	e00a      	b.n	800ef12 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800eefc:	89fb      	ldrh	r3, [r7, #14]
 800eefe:	021b      	lsls	r3, r3, #8
 800ef00:	b21a      	sxth	r2, r3
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	1c59      	adds	r1, r3, #1
 800ef06:	6039      	str	r1, [r7, #0]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	b21b      	sxth	r3, r3
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	b21b      	sxth	r3, r3
 800ef10:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800ef12:	88fb      	ldrh	r3, [r7, #6]
 800ef14:	1e5a      	subs	r2, r3, #1
 800ef16:	80fa      	strh	r2, [r7, #6]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1ef      	bne.n	800eefc <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800ef1c:	89fb      	ldrh	r3, [r7, #14]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3714      	adds	r7, #20
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b085      	sub	sp, #20
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	4603      	mov	r3, r0
 800ef32:	603a      	str	r2, [r7, #0]
 800ef34:	80fb      	strh	r3, [r7, #6]
 800ef36:	460b      	mov	r3, r1
 800ef38:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800ef42:	88fb      	ldrh	r3, [r7, #6]
 800ef44:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800ef46:	2300      	movs	r3, #0
 800ef48:	81fb      	strh	r3, [r7, #14]
 800ef4a:	e00f      	b.n	800ef6c <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800ef4c:	88ba      	ldrh	r2, [r7, #4]
 800ef4e:	89fb      	ldrh	r3, [r7, #14]
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	3b01      	subs	r3, #1
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	4413      	add	r3, r2
 800ef58:	89ba      	ldrh	r2, [r7, #12]
 800ef5a:	b2d2      	uxtb	r2, r2
 800ef5c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800ef5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ef62:	121b      	asrs	r3, r3, #8
 800ef64:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800ef66:	89fb      	ldrh	r3, [r7, #14]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	81fb      	strh	r3, [r7, #14]
 800ef6c:	89fa      	ldrh	r2, [r7, #14]
 800ef6e:	88bb      	ldrh	r3, [r7, #4]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d3eb      	bcc.n	800ef4c <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800ef74:	bf00      	nop
 800ef76:	3714      	adds	r7, #20
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b085      	sub	sp, #20
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	4603      	mov	r3, r0
 800ef88:	6039      	str	r1, [r7, #0]
 800ef8a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	b25b      	sxtb	r3, r3
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	da0e      	bge.n	800efb8 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800ef9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef9e:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800efa0:	e00a      	b.n	800efb8 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800efa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800efa6:	021b      	lsls	r3, r3, #8
 800efa8:	b21a      	sxth	r2, r3
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	1c59      	adds	r1, r3, #1
 800efae:	6039      	str	r1, [r7, #0]
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	b21b      	sxth	r3, r3
 800efb4:	4313      	orrs	r3, r2
 800efb6:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800efb8:	88fb      	ldrh	r3, [r7, #6]
 800efba:	1e5a      	subs	r2, r3, #1
 800efbc:	80fa      	strh	r2, [r7, #6]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1ef      	bne.n	800efa2 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800efc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3714      	adds	r7, #20
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b087      	sub	sp, #28
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	60f8      	str	r0, [r7, #12]
 800efda:	460b      	mov	r3, r1
 800efdc:	607a      	str	r2, [r7, #4]
 800efde:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800efe0:	2300      	movs	r3, #0
 800efe2:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800efec:	2300      	movs	r3, #0
 800efee:	82fb      	strh	r3, [r7, #22]
 800eff0:	e00e      	b.n	800f010 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800eff2:	897a      	ldrh	r2, [r7, #10]
 800eff4:	8afb      	ldrh	r3, [r7, #22]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	3b01      	subs	r3, #1
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	4413      	add	r3, r2
 800effe:	693a      	ldr	r2, [r7, #16]
 800f000:	b2d2      	uxtb	r2, r2
 800f002:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	0a1b      	lsrs	r3, r3, #8
 800f008:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800f00a:	8afb      	ldrh	r3, [r7, #22]
 800f00c:	3301      	adds	r3, #1
 800f00e:	82fb      	strh	r3, [r7, #22]
 800f010:	8afa      	ldrh	r2, [r7, #22]
 800f012:	897b      	ldrh	r3, [r7, #10]
 800f014:	429a      	cmp	r2, r3
 800f016:	d3ec      	bcc.n	800eff2 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800f018:	bf00      	nop
 800f01a:	371c      	adds	r7, #28
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f024:	b480      	push	{r7}
 800f026:	b085      	sub	sp, #20
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	6039      	str	r1, [r7, #0]
 800f02e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800f030:	2300      	movs	r3, #0
 800f032:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800f034:	e007      	b.n	800f046 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	021a      	lsls	r2, r3, #8
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	1c59      	adds	r1, r3, #1
 800f03e:	6039      	str	r1, [r7, #0]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	4313      	orrs	r3, r2
 800f044:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800f046:	88fb      	ldrh	r3, [r7, #6]
 800f048:	1e5a      	subs	r2, r3, #1
 800f04a:	80fa      	strh	r2, [r7, #6]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1f2      	bne.n	800f036 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800f050:	68fb      	ldr	r3, [r7, #12]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800f05e:	b480      	push	{r7}
 800f060:	b085      	sub	sp, #20
 800f062:	af00      	add	r7, sp, #0
 800f064:	4603      	mov	r3, r0
 800f066:	6039      	str	r1, [r7, #0]
 800f068:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800f06a:	2300      	movs	r3, #0
 800f06c:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	b25b      	sxtb	r3, r3
 800f074:	2b00      	cmp	r3, #0
 800f076:	da0b      	bge.n	800f090 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800f078:	f04f 33ff 	mov.w	r3, #4294967295
 800f07c:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800f07e:	e007      	b.n	800f090 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	021a      	lsls	r2, r3, #8
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	1c59      	adds	r1, r3, #1
 800f088:	6039      	str	r1, [r7, #0]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	4313      	orrs	r3, r2
 800f08e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800f090:	88fb      	ldrh	r3, [r7, #6]
 800f092:	1e5a      	subs	r2, r3, #1
 800f094:	80fa      	strh	r2, [r7, #6]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1f2      	bne.n	800f080 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800f09a:	68fb      	ldr	r3, [r7, #12]
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3714      	adds	r7, #20
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	460a      	mov	r2, r1
 800f0b2:	80fb      	strh	r3, [r7, #6]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800f0c4:	88fb      	ldrh	r3, [r7, #6]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fb5b 	bl	800f782 <VL53L1_calc_pll_period_us>
 800f0cc:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800f0ce:	797b      	ldrb	r3, [r7, #5]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 fb6a 	bl	800f7aa <VL53L1_decode_vcsel_period>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	00db      	lsls	r3, r3, #3
 800f0e0:	4413      	add	r3, r2
 800f0e2:	021b      	lsls	r3, r3, #8
 800f0e4:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	099b      	lsrs	r3, r3, #6
 800f0ea:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800f0ec:	7cfa      	ldrb	r2, [r7, #19]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	fb02 f303 	mul.w	r3, r2, r3
 800f0f4:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	099b      	lsrs	r3, r3, #6
 800f0fa:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3718      	adds	r7, #24
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
	...

0800f108 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800f108:	b480      	push	{r7}
 800f10a:	b089      	sub	sp, #36	; 0x24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	4608      	mov	r0, r1
 800f112:	4611      	mov	r1, r2
 800f114:	461a      	mov	r2, r3
 800f116:	4603      	mov	r3, r0
 800f118:	817b      	strh	r3, [r7, #10]
 800f11a:	460b      	mov	r3, r1
 800f11c:	813b      	strh	r3, [r7, #8]
 800f11e:	4613      	mov	r3, r2
 800f120:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800f122:	2300      	movs	r3, #0
 800f124:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800f126:	2300      	movs	r3, #0
 800f128:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800f12e:	2300      	movs	r3, #0
 800f130:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800f132:	2300      	movs	r3, #0
 800f134:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	011b      	lsls	r3, r3, #4
 800f13a:	4a23      	ldr	r2, [pc, #140]	; (800f1c8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800f13c:	fb82 1203 	smull	r1, r2, r2, r3
 800f140:	1192      	asrs	r2, r2, #6
 800f142:	17db      	asrs	r3, r3, #31
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800f148:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	da03      	bge.n	800f158 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800f150:	897b      	ldrh	r3, [r7, #10]
 800f152:	425b      	negs	r3, r3
 800f154:	b29b      	uxth	r3, r3
 800f156:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800f158:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da03      	bge.n	800f168 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800f160:	893b      	ldrh	r3, [r7, #8]
 800f162:	425b      	negs	r3, r3
 800f164:	b29b      	uxth	r3, r3
 800f166:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800f168:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f16c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f170:	4413      	add	r3, r2
 800f172:	015b      	lsls	r3, r3, #5
 800f174:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	4a13      	ldr	r2, [pc, #76]	; (800f1c8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800f17a:	fb82 1203 	smull	r1, r2, r2, r3
 800f17e:	1192      	asrs	r2, r2, #6
 800f180:	17db      	asrs	r3, r3, #31
 800f182:	1ad3      	subs	r3, r2, r3
 800f184:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800f186:	697a      	ldr	r2, [r7, #20]
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	4413      	add	r3, r2
 800f18c:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800f18e:	79fa      	ldrb	r2, [r7, #7]
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	fb02 f303 	mul.w	r3, r2, r3
 800f196:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	3310      	adds	r3, #16
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	da00      	bge.n	800f1a2 <VL53L1_calc_range_ignore_threshold+0x9a>
 800f1a0:	331f      	adds	r3, #31
 800f1a2:	115b      	asrs	r3, r3, #5
 800f1a4:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1ac:	db03      	blt.n	800f1b6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800f1ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1b2:	83fb      	strh	r3, [r7, #30]
 800f1b4:	e001      	b.n	800f1ba <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800f1ba:	8bfb      	ldrh	r3, [r7, #30]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3724      	adds	r7, #36	; 0x24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr
 800f1c8:	10624dd3 	.word	0x10624dd3

0800f1cc <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	031a      	lsls	r2, r3, #12
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	085b      	lsrs	r3, r3, #1
 800f1e2:	441a      	add	r2, r3
	timeout_mclks   =
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1ea:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b084      	sub	sp, #16
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
 800f202:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800f204:	2300      	movs	r3, #0
 800f206:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800f208:	2300      	movs	r3, #0
 800f20a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
 800f20c:	6839      	ldr	r1, [r7, #0]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7ff ffdc 	bl	800f1cc <VL53L1_calc_timeout_mclks>
 800f214:	60f8      	str	r0, [r7, #12]
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);

	timeout_encoded =
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f000 f859 	bl	800f2ce <VL53L1_encode_timeout>
 800f21c:	4603      	mov	r3, r0
 800f21e:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800f220:	897b      	ldrh	r3, [r7, #10]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800f22a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f22c:	b087      	sub	sp, #28
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800f234:	2200      	movs	r2, #0
 800f236:	617a      	str	r2, [r7, #20]
	uint64_t tmp            = 0;
 800f238:	f04f 0100 	mov.w	r1, #0
 800f23c:	f04f 0200 	mov.w	r2, #0
 800f240:	e9c7 1202 	strd	r1, r2, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	4615      	mov	r5, r2
 800f248:	f04f 0600 	mov.w	r6, #0
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	4611      	mov	r1, r2
 800f250:	f04f 0200 	mov.w	r2, #0
 800f254:	fb01 fe06 	mul.w	lr, r1, r6
 800f258:	fb05 f002 	mul.w	r0, r5, r2
 800f25c:	4470      	add	r0, lr
 800f25e:	fba5 1201 	umull	r1, r2, r5, r1
 800f262:	4410      	add	r0, r2
 800f264:	4602      	mov	r2, r0
 800f266:	e9c7 1202 	strd	r1, r2, [r7, #8]
 800f26a:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp += 0x00800;
 800f26e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f272:	f511 6100 	adds.w	r1, r1, #2048	; 0x800
 800f276:	f142 0200 	adc.w	r2, r2, #0
 800f27a:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp  = tmp >> 12;
 800f27e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f282:	0b0b      	lsrs	r3, r1, #12
 800f284:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800f288:	0b14      	lsrs	r4, r2, #12
 800f28a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800f292:	697b      	ldr	r3, [r7, #20]
}
 800f294:	4618      	mov	r0, r3
 800f296:	371c      	adds	r7, #28
 800f298:	46bd      	mov	sp, r7
 800f29a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f29c <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	6039      	str	r1, [r7, #0]
 800f2a6:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
 800f2b0:	88fb      	ldrh	r3, [r7, #6]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 f837 	bl	800f326 <VL53L1_decode_timeout>
 800f2b8:	60f8      	str	r0, [r7, #12]
		VL53L1_decode_timeout(timeout_encoded);

	timeout_us    =
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f7ff ffb4 	bl	800f22a <VL53L1_calc_timeout_us>
 800f2c2:	60b8      	str	r0, [r7, #8]
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);

	LOG_FUNCTION_END(0);

	return timeout_us;
 800f2c4:	68bb      	ldr	r3, [r7, #8]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800f2ce:	b480      	push	{r7}
 800f2d0:	b087      	sub	sp, #28
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d017      	beq.n	800f318 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800f2ee:	e005      	b.n	800f2fc <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	085b      	lsrs	r3, r3, #1
 800f2f4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800f2f6:	89fb      	ldrh	r3, [r7, #14]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1f4      	bne.n	800f2f0 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800f306:	89fb      	ldrh	r3, [r7, #14]
 800f308:	021b      	lsls	r3, r3, #8
 800f30a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	b29b      	uxth	r3, r3
 800f310:	b2db      	uxtb	r3, r3
 800f312:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800f314:	4413      	add	r3, r2
 800f316:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800f318:	8afb      	ldrh	r3, [r7, #22]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	371c      	adds	r7, #28
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800f326:	b480      	push	{r7}
 800f328:	b085      	sub	sp, #20
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	4603      	mov	r3, r0
 800f32e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800f334:	88fb      	ldrh	r3, [r7, #6]
 800f336:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800f338:	88fa      	ldrh	r2, [r7, #6]
 800f33a:	0a12      	lsrs	r2, r2, #8
 800f33c:	b292      	uxth	r2, r2
 800f33e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800f340:	3301      	adds	r3, #1
 800f342:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800f344:	68fb      	ldr	r3, [r7, #12]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3714      	adds	r7, #20
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr

0800f352 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800f352:	b580      	push	{r7, lr}
 800f354:	b088      	sub	sp, #32
 800f356:	af00      	add	r7, sp, #0
 800f358:	60f8      	str	r0, [r7, #12]
 800f35a:	60b9      	str	r1, [r7, #8]
 800f35c:	607a      	str	r2, [r7, #4]
 800f35e:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f360:	2300      	movs	r3, #0
 800f362:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800f364:	2300      	movs	r3, #0
 800f366:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800f368:	2300      	movs	r3, #0
 800f36a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800f36c:	2300      	movs	r3, #0
 800f36e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800f370:	887b      	ldrh	r3, [r7, #2]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d102      	bne.n	800f37c <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800f376:	23f1      	movs	r3, #241	; 0xf1
 800f378:	77fb      	strb	r3, [r7, #31]
 800f37a:	e05d      	b.n	800f438 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800f37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37e:	799a      	ldrb	r2, [r3, #6]
		macro_period_us =
 800f380:	887b      	ldrh	r3, [r7, #2]
 800f382:	4611      	mov	r1, r2
 800f384:	4618      	mov	r0, r3
 800f386:	f7ff fe8f 	bl	800f0a8 <VL53L1_calc_macro_period_us>
 800f38a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 800f38c:	6979      	ldr	r1, [r7, #20]
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff ff1c 	bl	800f1cc <VL53L1_calc_timeout_mclks>
 800f394:	61b8      	str	r0, [r7, #24]
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	2bff      	cmp	r3, #255	; 0xff
 800f39a:	d901      	bls.n	800f3a0 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800f39c:	23ff      	movs	r3, #255	; 0xff
 800f39e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800f3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a6:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 800f3a8:	6979      	ldr	r1, [r7, #20]
 800f3aa:	68b8      	ldr	r0, [r7, #8]
 800f3ac:	f7ff ff25 	bl	800f1fa <VL53L1_calc_encoded_timeout>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f3b4:	8a7b      	ldrh	r3, [r7, #18]
 800f3b6:	0a1b      	lsrs	r3, r3, #8
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800f3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3be:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f3c0:	8a7b      	ldrh	r3, [r7, #18]
 800f3c2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800f3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c6:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 800f3c8:	6979      	ldr	r1, [r7, #20]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7ff ff15 	bl	800f1fa <VL53L1_calc_encoded_timeout>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f3d4:	8a7b      	ldrh	r3, [r7, #18]
 800f3d6:	0a1b      	lsrs	r3, r3, #8
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f3e0:	8a7b      	ldrh	r3, [r7, #18]
 800f3e2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800f3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ea:	7a5a      	ldrb	r2, [r3, #9]
		macro_period_us =
 800f3ec:	887b      	ldrh	r3, [r7, #2]
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff fe59 	bl	800f0a8 <VL53L1_calc_macro_period_us>
 800f3f6:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 800f3f8:	6979      	ldr	r1, [r7, #20]
 800f3fa:	68b8      	ldr	r0, [r7, #8]
 800f3fc:	f7ff fefd 	bl	800f1fa <VL53L1_calc_encoded_timeout>
 800f400:	4603      	mov	r3, r0
 800f402:	827b      	strh	r3, [r7, #18]
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f404:	8a7b      	ldrh	r3, [r7, #18]
 800f406:	0a1b      	lsrs	r3, r3, #8
 800f408:	b29b      	uxth	r3, r3
 800f40a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800f40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f410:	8a7b      	ldrh	r3, [r7, #18]
 800f412:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800f418:	6979      	ldr	r1, [r7, #20]
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff feed 	bl	800f1fa <VL53L1_calc_encoded_timeout>
 800f420:	4603      	mov	r3, r0
 800f422:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800f424:	8a7b      	ldrh	r3, [r7, #18]
 800f426:	0a1b      	lsrs	r3, r3, #8
 800f428:	b29b      	uxth	r3, r3
 800f42a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800f430:	8a7b      	ldrh	r3, [r7, #18]
 800f432:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800f434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f436:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800f438:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3720      	adds	r7, #32
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	4603      	mov	r3, r0
 800f44c:	603a      	str	r2, [r7, #0]
 800f44e:	71fb      	strb	r3, [r7, #7]
 800f450:	460b      	mov	r3, r1
 800f452:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800f454:	79fb      	ldrb	r3, [r7, #7]
 800f456:	2b07      	cmp	r3, #7
 800f458:	d90a      	bls.n	800f470 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800f45a:	79bb      	ldrb	r3, [r7, #6]
 800f45c:	00db      	lsls	r3, r3, #3
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	b2db      	uxtb	r3, r3
 800f466:	3b71      	subs	r3, #113	; 0x71
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800f46e:	e00a      	b.n	800f486 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800f470:	79bb      	ldrb	r3, [r7, #6]
 800f472:	f1c3 030f 	rsb	r3, r3, #15
 800f476:	b2db      	uxtb	r3, r3
 800f478:	00db      	lsls	r3, r3, #3
 800f47a:	b2da      	uxtb	r2, r3
 800f47c:	79fb      	ldrb	r3, [r7, #7]
 800f47e:	4413      	add	r3, r2
 800f480:	b2da      	uxtb	r2, r3
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	701a      	strb	r2, [r3, #0]
}
 800f486:	bf00      	nop
 800f488:	370c      	adds	r7, #12
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr

0800f492 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800f492:	b480      	push	{r7}
 800f494:	b085      	sub	sp, #20
 800f496:	af00      	add	r7, sp, #0
 800f498:	4603      	mov	r3, r0
 800f49a:	60b9      	str	r1, [r7, #8]
 800f49c:	607a      	str	r2, [r7, #4]
 800f49e:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800f4a0:	7bfb      	ldrb	r3, [r7, #15]
 800f4a2:	091b      	lsrs	r3, r3, #4
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	f003 030f 	and.w	r3, r3, #15
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	701a      	strb	r2, [r3, #0]

}
 800f4b6:	bf00      	nop
 800f4b8:	3714      	adds	r7, #20
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr

0800f4c2 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800f4c2:	b480      	push	{r7}
 800f4c4:	b083      	sub	sp, #12
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	603a      	str	r2, [r7, #0]
 800f4cc:	71fb      	strb	r3, [r7, #7]
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800f4d2:	79bb      	ldrb	r3, [r7, #6]
 800f4d4:	011b      	lsls	r3, r3, #4
 800f4d6:	b2da      	uxtb	r2, r3
 800f4d8:	79fb      	ldrb	r3, [r7, #7]
 800f4da:	4413      	add	r3, r2
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	701a      	strb	r2, [r3, #0]

}
 800f4e2:	bf00      	nop
 800f4e4:	370c      	adds	r7, #12
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800f4ee:	b480      	push	{r7}
 800f4f0:	b085      	sub	sp, #20
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	2203      	movs	r2, #3
 800f502:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2200      	movs	r2, #0
 800f51a:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2200      	movs	r2, #0
 800f522:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	2200      	movs	r2, #0
 800f52a:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	2200      	movs	r2, #0
 800f532:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2200      	movs	r2, #0
 800f53a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2200      	movs	r2, #0
 800f542:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800f546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr

0800f556 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800f556:	b480      	push	{r7}
 800f558:	b085      	sub	sp, #20
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f55e:	2300      	movs	r3, #0
 800f560:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	22ff      	movs	r2, #255	; 0xff
 800f56a:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	2200      	movs	r2, #0
 800f572:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	2200      	movs	r2, #0
 800f57a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	2200      	movs	r2, #0
 800f582:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d005      	beq.n	800f5b2 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 800f5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr

0800f5ca <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800f5ca:	b480      	push	{r7}
 800f5cc:	b087      	sub	sp, #28
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	60f8      	str	r0, [r7, #12]
 800f5d2:	60b9      	str	r1, [r7, #8]
 800f5d4:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2201      	movs	r2, #1
 800f5de:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	228b      	movs	r2, #139	; 0x8b
 800f5ea:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800f5f2:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 800f5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	371c      	adds	r7, #28
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800f60a:	b480      	push	{r7}
 800f60c:	b085      	sub	sp, #20
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f616:	2300      	movs	r3, #0
 800f618:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800f638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800f64a:	f003 0303 	and.w	r3, r3, #3
 800f64e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800f65a:	4413      	add	r3, r2
 800f65c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2201      	movs	r2, #1
 800f668:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800f684:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 800f694:	b480      	push	{r7}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f8b3 31de 	ldrh.w	r3, [r3, #478]	; 0x1de
 800f6aa:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800f6b2:	4413      	add	r3, r2
 800f6b4:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6bc:	d302      	bcc.n	800f6c4 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 800f6be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6c2:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	041b      	lsls	r3, r3, #16
 800f6c8:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d102      	bne.n	800f6da <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800f6d4:	23f1      	movs	r3, #241	; 0xf1
 800f6d6:	75fb      	strb	r3, [r7, #23]
 800f6d8:	e035      	b.n	800f746 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800f6e0:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6e8:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	693a      	ldr	r2, [r7, #16]
 800f6ee:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800f6f8:	041b      	lsls	r3, r3, #16
 800f6fa:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800f702:	2b00      	cmp	r3, #0
 800f704:	d102      	bne.n	800f70c <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800f706:	23f1      	movs	r3, #241	; 0xf1
 800f708:	75fb      	strb	r3, [r7, #23]
 800f70a:	e01c      	b.n	800f746 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
			utemp32a = utemp32a /
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	fbb2 f3f3 	udiv	r3, r2, r3
 800f718:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f720:	d302      	bcc.n	800f728 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 800f722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f726:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2202      	movs	r2, #2
 800f742:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 800f746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f74a:	f113 0f0f 	cmn.w	r3, #15
 800f74e:	d110      	bne.n	800f772 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f756:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2202      	movs	r2, #2
 800f76a:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 800f76e:	2300      	movs	r3, #0
 800f770:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f776:	4618      	mov	r0, r3
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800f782:	b480      	push	{r7}
 800f784:	b085      	sub	sp, #20
 800f786:	af00      	add	r7, sp, #0
 800f788:	4603      	mov	r3, r0
 800f78a:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800f790:	88fb      	ldrh	r3, [r7, #6]
 800f792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f796:	fb92 f3f3 	sdiv	r3, r2, r3
 800f79a:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800f79c:	68fb      	ldr	r3, [r7, #12]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800f7aa:	b480      	push	{r7}
 800f7ac:	b085      	sub	sp, #20
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800f7b8:	79fb      	ldrb	r3, [r7, #7]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	005b      	lsls	r3, r3, #1
 800f7c0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800f7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800f7de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	da10      	bge.n	800f808 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800f7e6:	7bfb      	ldrb	r3, [r7, #15]
 800f7e8:	43db      	mvns	r3, r3
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	f003 0307 	and.w	r3, r3, #7
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	3308      	adds	r3, #8
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800f7fa:	7bfb      	ldrb	r3, [r7, #15]
 800f7fc:	3b80      	subs	r3, #128	; 0x80
 800f7fe:	10db      	asrs	r3, r3, #3
 800f800:	b2da      	uxtb	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800f806:	e00c      	b.n	800f822 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800f808:	7bfb      	ldrb	r3, [r7, #15]
 800f80a:	f003 0307 	and.w	r3, r3, #7
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800f814:	7bfb      	ldrb	r3, [r7, #15]
 800f816:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800f81a:	10db      	asrs	r3, r3, #3
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	701a      	strb	r2, [r3, #0]
}
 800f822:	bf00      	nop
 800f824:	3714      	adds	r7, #20
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f82e:	b580      	push	{r7, lr}
 800f830:	b088      	sub	sp, #32
 800f832:	af02      	add	r7, sp, #8
 800f834:	60f8      	str	r0, [r7, #12]
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	330a      	adds	r3, #10
 800f83e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f84c:	b299      	uxth	r1, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	b29a      	uxth	r2, r3
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	4613      	mov	r3, r2
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	f7f2 fb25 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800f85e:	4603      	mov	r3, r0
 800f860:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f862:	693b      	ldr	r3, [r7, #16]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3718      	adds	r7, #24
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b088      	sub	sp, #32
 800f870:	af02      	add	r7, sp, #8
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	330a      	adds	r3, #10
 800f87c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800f88a:	f043 0301 	orr.w	r3, r3, #1
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	b299      	uxth	r1, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	b29a      	uxth	r2, r3
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	4613      	mov	r3, r2
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	f7f2 fc11 	bl	80020c4 <HAL_I2C_Master_Receive>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f8a6:	693b      	ldr	r3, [r7, #16]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3718      	adds	r7, #24
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	607a      	str	r2, [r7, #4]
 800f8ba:	603b      	str	r3, [r7, #0]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	2bff      	cmp	r3, #255	; 0xff
 800f8c8:	d902      	bls.n	800f8d0 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800f8ca:	f06f 0303 	mvn.w	r3, #3
 800f8ce:	e01d      	b.n	800f90c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800f8d0:	897b      	ldrh	r3, [r7, #10]
 800f8d2:	0a1b      	lsrs	r3, r3, #8
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	4b0e      	ldr	r3, [pc, #56]	; (800f914 <VL53L1_WriteMulti+0x64>)
 800f8da:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f8dc:	897b      	ldrh	r3, [r7, #10]
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	4b0c      	ldr	r3, [pc, #48]	; (800f914 <VL53L1_WriteMulti+0x64>)
 800f8e2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	6879      	ldr	r1, [r7, #4]
 800f8e8:	480b      	ldr	r0, [pc, #44]	; (800f918 <VL53L1_WriteMulti+0x68>)
 800f8ea:	f001 fd1b 	bl	8011324 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	3302      	adds	r3, #2
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	4907      	ldr	r1, [pc, #28]	; (800f914 <VL53L1_WriteMulti+0x64>)
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f7ff ff99 	bl	800f82e <_I2CWrite>
 800f8fc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f904:	23f3      	movs	r3, #243	; 0xf3
 800f906:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800f908:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3718      	adds	r7, #24
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	20000d5c 	.word	0x20000d5c
 800f918:	20000d5e 	.word	0x20000d5e

0800f91c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b086      	sub	sp, #24
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	607a      	str	r2, [r7, #4]
 800f926:	603b      	str	r3, [r7, #0]
 800f928:	460b      	mov	r3, r1
 800f92a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f92c:	2300      	movs	r3, #0
 800f92e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f930:	897b      	ldrh	r3, [r7, #10]
 800f932:	0a1b      	lsrs	r3, r3, #8
 800f934:	b29b      	uxth	r3, r3
 800f936:	b2da      	uxtb	r2, r3
 800f938:	4b11      	ldr	r3, [pc, #68]	; (800f980 <VL53L1_ReadMulti+0x64>)
 800f93a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800f93c:	897b      	ldrh	r3, [r7, #10]
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	4b0f      	ldr	r3, [pc, #60]	; (800f980 <VL53L1_ReadMulti+0x64>)
 800f942:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f944:	2202      	movs	r2, #2
 800f946:	490e      	ldr	r1, [pc, #56]	; (800f980 <VL53L1_ReadMulti+0x64>)
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff ff70 	bl	800f82e <_I2CWrite>
 800f94e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d002      	beq.n	800f95c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f956:	23f3      	movs	r3, #243	; 0xf3
 800f958:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f95a:	e00a      	b.n	800f972 <VL53L1_ReadMulti+0x56>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	6879      	ldr	r1, [r7, #4]
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f7ff ff83 	bl	800f86c <_I2CRead>
 800f966:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d001      	beq.n	800f972 <VL53L1_ReadMulti+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f96e:	23f3      	movs	r3, #243	; 0xf3
 800f970:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800f972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3718      	adds	r7, #24
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	20000d5c 	.word	0x20000d5c

0800f984 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800f984:	b580      	push	{r7, lr}
 800f986:	b086      	sub	sp, #24
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	460b      	mov	r3, r1
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f992:	2300      	movs	r3, #0
 800f994:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800f996:	897b      	ldrh	r3, [r7, #10]
 800f998:	0a1b      	lsrs	r3, r3, #8
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <VL53L1_RdByte+0x60>)
 800f9a0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800f9a2:	897b      	ldrh	r3, [r7, #10]
 800f9a4:	b2da      	uxtb	r2, r3
 800f9a6:	4b0f      	ldr	r3, [pc, #60]	; (800f9e4 <VL53L1_RdByte+0x60>)
 800f9a8:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f9aa:	2202      	movs	r2, #2
 800f9ac:	490d      	ldr	r1, [pc, #52]	; (800f9e4 <VL53L1_RdByte+0x60>)
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f7ff ff3d 	bl	800f82e <_I2CWrite>
 800f9b4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d002      	beq.n	800f9c2 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f9bc:	23f3      	movs	r3, #243	; 0xf3
 800f9be:	75fb      	strb	r3, [r7, #23]
        goto done;
 800f9c0:	e00a      	b.n	800f9d8 <VL53L1_RdByte+0x54>
    }
    status_int = _I2CRead(Dev, data, 1);
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	6879      	ldr	r1, [r7, #4]
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f7ff ff50 	bl	800f86c <_I2CRead>
 800f9cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800f9d4:	23f3      	movs	r3, #243	; 0xf3
 800f9d6:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800f9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3718      	adds	r7, #24
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	20000d5c 	.word	0x20000d5c

0800f9e8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800f9fa:	897b      	ldrh	r3, [r7, #10]
 800f9fc:	0a1b      	lsrs	r3, r3, #8
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	b2da      	uxtb	r2, r3
 800fa02:	4b18      	ldr	r3, [pc, #96]	; (800fa64 <VL53L1_RdWord+0x7c>)
 800fa04:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800fa06:	897b      	ldrh	r3, [r7, #10]
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	4b16      	ldr	r3, [pc, #88]	; (800fa64 <VL53L1_RdWord+0x7c>)
 800fa0c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fa0e:	2202      	movs	r2, #2
 800fa10:	4914      	ldr	r1, [pc, #80]	; (800fa64 <VL53L1_RdWord+0x7c>)
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f7ff ff0b 	bl	800f82e <_I2CWrite>
 800fa18:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fa20:	23f3      	movs	r3, #243	; 0xf3
 800fa22:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa24:	e017      	b.n	800fa56 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fa26:	2202      	movs	r2, #2
 800fa28:	490e      	ldr	r1, [pc, #56]	; (800fa64 <VL53L1_RdWord+0x7c>)
 800fa2a:	68f8      	ldr	r0, [r7, #12]
 800fa2c:	f7ff ff1e 	bl	800f86c <_I2CRead>
 800fa30:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800fa38:	23f3      	movs	r3, #243	; 0xf3
 800fa3a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fa3c:	e00b      	b.n	800fa56 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fa3e:	4b09      	ldr	r3, [pc, #36]	; (800fa64 <VL53L1_RdWord+0x7c>)
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	021b      	lsls	r3, r3, #8
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	4b06      	ldr	r3, [pc, #24]	; (800fa64 <VL53L1_RdWord+0x7c>)
 800fa4a:	785b      	ldrb	r3, [r3, #1]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	4413      	add	r3, r2
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800fa56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3718      	adds	r7, #24
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	20000d5c 	.word	0x20000d5c

0800fa68 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800fa70:	2300      	movs	r3, #0
 800fa72:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800fa7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b082      	sub	sp, #8
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7f0 fdec 	bl	8000674 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
	...

0800faa8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	4a06      	ldr	r2, [pc, #24]	; (800fad0 <VL53L1_WaitUs+0x28>)
 800fab6:	fb82 1203 	smull	r1, r2, r2, r3
 800faba:	1192      	asrs	r2, r2, #6
 800fabc:	17db      	asrs	r3, r3, #31
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7f0 fdd7 	bl	8000674 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	10624dd3 	.word	0x10624dd3

0800fad4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800fad4:	b590      	push	{r4, r7, lr}
 800fad6:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800fada:	af00      	add	r7, sp, #0
 800fadc:	f107 040c 	add.w	r4, r7, #12
 800fae0:	6020      	str	r0, [r4, #0]
 800fae2:	f107 0008 	add.w	r0, r7, #8
 800fae6:	6001      	str	r1, [r0, #0]
 800fae8:	4619      	mov	r1, r3
 800faea:	1dbb      	adds	r3, r7, #6
 800faec:	801a      	strh	r2, [r3, #0]
 800faee:	1d7b      	adds	r3, r7, #5
 800faf0:	460a      	mov	r2, r1
 800faf2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800faf4:	2300      	movs	r3, #0
 800faf6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800fb00:	2300      	movs	r3, #0
 800fb02:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800fb06:	2300      	movs	r3, #0
 800fb08:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800fb18:	f107 0310 	add.w	r3, r7, #16
 800fb1c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb20:	4935      	ldr	r1, [pc, #212]	; (800fbf8 <VL53L1_WaitValueMaskEx+0x124>)
 800fb22:	4618      	mov	r0, r3
 800fb24:	f002 f88f 	bl	8011c46 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800fb28:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7ff ff9b 	bl	800fa68 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800fb32:	e03f      	b.n	800fbb4 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800fb34:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d10b      	bne.n	800fb54 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800fb3c:	f207 2213 	addw	r2, r7, #531	; 0x213
 800fb40:	1dbb      	adds	r3, r7, #6
 800fb42:	8819      	ldrh	r1, [r3, #0]
 800fb44:	f107 030c 	add.w	r3, r7, #12
 800fb48:	6818      	ldr	r0, [r3, #0]
 800fb4a:	f7ff ff1b 	bl	800f984 <VL53L1_RdByte>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800fb54:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800fb58:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	1d7a      	adds	r2, r7, #5
 800fb62:	7812      	ldrb	r2, [r2, #0]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d102      	bne.n	800fb6e <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800fb6e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d112      	bne.n	800fb9c <VL53L1_WaitValueMaskEx+0xc8>
 800fb76:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10e      	bne.n	800fb9c <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800fb7e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00a      	beq.n	800fb9c <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800fb86:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800fb8a:	f107 030c 	add.w	r3, r7, #12
 800fb8e:	4611      	mov	r1, r2
 800fb90:	6818      	ldr	r0, [r3, #0]
 800fb92:	f7ff ff7a 	bl	800fa8a <VL53L1_WaitMs>
 800fb96:	4603      	mov	r3, r0
 800fb98:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800fb9c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7ff ff61 	bl	800fa68 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800fba6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800fbaa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800fbae:	1ad3      	subs	r3, r2, r3
 800fbb0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800fbb4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10a      	bne.n	800fbd2 <VL53L1_WaitValueMaskEx+0xfe>
 800fbbc:	f107 0308 	add.w	r3, r7, #8
 800fbc0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d203      	bcs.n	800fbd2 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800fbca:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0b0      	beq.n	800fb34 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800fbd2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d106      	bne.n	800fbe8 <VL53L1_WaitValueMaskEx+0x114>
 800fbda:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d102      	bne.n	800fbe8 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800fbe2:	23f9      	movs	r3, #249	; 0xf9
 800fbe4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800fbe8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd90      	pop	{r4, r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	080127cc 	.word	0x080127cc

0800fbfc <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	460b      	mov	r3, r1
 800fc06:	607a      	str	r2, [r7, #4]
 800fc08:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800fc0e:	897b      	ldrh	r3, [r7, #10]
 800fc10:	2b0a      	cmp	r3, #10
 800fc12:	d802      	bhi.n	800fc1a <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc14:	f06f 0309 	mvn.w	r3, #9
 800fc18:	e047      	b.n	800fcaa <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc22:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	7852      	ldrb	r2, [r2, #1]
 800fc30:	f002 020f 	and.w	r2, r2, #15
 800fc34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fc36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	7892      	ldrb	r2, [r2, #2]
 800fc40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fc44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fc46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800fc4c:	68fa      	ldr	r2, [r7, #12]
 800fc4e:	78d2      	ldrb	r2, [r2, #3]
 800fc50:	f002 0203 	and.w	r2, r2, #3
 800fc54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fc56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	7912      	ldrb	r2, [r2, #4]
 800fc60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fc64:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fc66:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	88d8      	ldrh	r0, [r3, #6]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	3305      	adds	r3, #5
 800fc70:	461a      	mov	r2, r3
 800fc72:	2102      	movs	r1, #2
 800fc74:	f7ff f90f 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fc80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fc8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	7a92      	ldrb	r2, [r2, #10]
 800fc94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fc98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fc9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800fca4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3718      	adds	r7, #24
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b086      	sub	sp, #24
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	4603      	mov	r3, r0
 800fcba:	60b9      	str	r1, [r7, #8]
 800fcbc:	607a      	str	r2, [r7, #4]
 800fcbe:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800fcc4:	89fb      	ldrh	r3, [r7, #14]
 800fcc6:	2b0a      	cmp	r3, #10
 800fcc8:	d802      	bhi.n	800fcd0 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fcca:	f06f 0309 	mvn.w	r3, #9
 800fcce:	e046      	b.n	800fd5e <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcd8:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	3301      	adds	r3, #1
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	f003 030f 	and.w	r3, r3, #15
 800fce8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	3302      	adds	r3, #2
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcf8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	3303      	adds	r3, #3
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	f003 0303 	and.w	r3, r3, #3
 800fd08:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	3304      	adds	r3, #4
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd18:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	3305      	adds	r3, #5
 800fd22:	4619      	mov	r1, r3
 800fd24:	2002      	movs	r0, #2
 800fd26:	f7ff f8e0 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	79da      	ldrb	r2, [r3, #7]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	7a1a      	ldrb	r2, [r3, #8]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	3309      	adds	r3, #9
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd4c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	7a9a      	ldrb	r2, [r3, #10]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800fd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3718      	adds	r7, #24
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800fd66:	b580      	push	{r7, lr}
 800fd68:	b086      	sub	sp, #24
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fd70:	2300      	movs	r3, #0
 800fd72:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800fd74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d108      	bne.n	800fd8e <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800fd7c:	f107 020c 	add.w	r2, r7, #12
 800fd80:	230b      	movs	r3, #11
 800fd82:	2101      	movs	r1, #1
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7ff fdc9 	bl	800f91c <VL53L1_ReadMulti>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800fd8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d108      	bne.n	800fda8 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800fd96:	f107 030c 	add.w	r3, r7, #12
 800fd9a:	683a      	ldr	r2, [r7, #0]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	200b      	movs	r0, #11
 800fda0:	f7ff ff87 	bl	800fcb2 <VL53L1_i2c_decode_static_nvm_managed>
 800fda4:	4603      	mov	r3, r0
 800fda6:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800fda8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3718      	adds	r7, #24
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	607a      	str	r2, [r7, #4]
 800fdc0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800fdc6:	897b      	ldrh	r3, [r7, #10]
 800fdc8:	2b16      	cmp	r3, #22
 800fdca:	d802      	bhi.n	800fdd2 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fdcc:	f06f 0309 	mvn.w	r3, #9
 800fdd0:	e076      	b.n	800fec0 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fde2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fdec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fdf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fe00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	7952      	ldrb	r2, [r2, #5]
 800fe0a:	f002 020f 	and.w	r2, r2, #15
 800fe0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fe10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800fe1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	79d2      	ldrb	r2, [r2, #7]
 800fe24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fe28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fe2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	7a12      	ldrb	r2, [r2, #8]
 800fe34:	f002 0203 	and.w	r2, r2, #3
 800fe38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fe3a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	8958      	ldrh	r0, [r3, #10]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	3309      	adds	r3, #9
 800fe44:	461a      	mov	r2, r3
 800fe46:	2102      	movs	r1, #2
 800fe48:	f7ff f825 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	330b      	adds	r3, #11
 800fe56:	461a      	mov	r2, r3
 800fe58:	2102      	movs	r1, #2
 800fe5a:	f7ff f866 	bl	800ef2a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	330d      	adds	r3, #13
 800fe68:	461a      	mov	r2, r3
 800fe6a:	2102      	movs	r1, #2
 800fe6c:	f7ff f85d 	bl	800ef2a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	8a18      	ldrh	r0, [r3, #16]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	330f      	adds	r3, #15
 800fe78:	461a      	mov	r2, r3
 800fe7a:	2102      	movs	r1, #2
 800fe7c:	f7ff f80b 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800fe86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe8a:	b218      	sxth	r0, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	3311      	adds	r3, #17
 800fe90:	461a      	mov	r2, r3
 800fe92:	2102      	movs	r1, #2
 800fe94:	f7ff f849 	bl	800ef2a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	3313      	adds	r3, #19
 800fea2:	461a      	mov	r2, r3
 800fea4:	2102      	movs	r1, #2
 800fea6:	f7ff f840 	bl	800ef2a <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	3315      	adds	r3, #21
 800feb4:	461a      	mov	r2, r3
 800feb6:	2102      	movs	r1, #2
 800feb8:	f7ff f837 	bl	800ef2a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800febc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3718      	adds	r7, #24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b086      	sub	sp, #24
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	607a      	str	r2, [r7, #4]
 800fed4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fed6:	2300      	movs	r3, #0
 800fed8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800feda:	89fb      	ldrh	r3, [r7, #14]
 800fedc:	2b16      	cmp	r3, #22
 800fede:	d802      	bhi.n	800fee6 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fee0:	f06f 0309 	mvn.w	r3, #9
 800fee4:	e079      	b.n	800ffda <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	785a      	ldrb	r2, [r3, #1]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	789a      	ldrb	r2, [r3, #2]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	78da      	ldrb	r2, [r3, #3]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	791a      	ldrb	r2, [r3, #4]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	3305      	adds	r3, #5
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	f003 030f 	and.w	r3, r3, #15
 800ff18:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	799a      	ldrb	r2, [r3, #6]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	3307      	adds	r3, #7
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff30:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	3308      	adds	r3, #8
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f003 0303 	and.w	r3, r3, #3
 800ff40:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	3309      	adds	r3, #9
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	2002      	movs	r0, #2
 800ff4e:	f7fe ffcc 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 800ff52:	4603      	mov	r3, r0
 800ff54:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	330b      	adds	r3, #11
 800ff5e:	4619      	mov	r1, r3
 800ff60:	2002      	movs	r0, #2
 800ff62:	f7ff f80d 	bl	800ef80 <VL53L1_i2c_decode_int16_t>
 800ff66:	4603      	mov	r3, r0
 800ff68:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	330d      	adds	r3, #13
 800ff72:	4619      	mov	r1, r3
 800ff74:	2002      	movs	r0, #2
 800ff76:	f7ff f803 	bl	800ef80 <VL53L1_i2c_decode_int16_t>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	330f      	adds	r3, #15
 800ff86:	4619      	mov	r1, r3
 800ff88:	2002      	movs	r0, #2
 800ff8a:	f7fe ffae 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	3311      	adds	r3, #17
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	2002      	movs	r0, #2
 800ff9e:	f7fe ffef 	bl	800ef80 <VL53L1_i2c_decode_int16_t>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ffa8:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	3313      	adds	r3, #19
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	2002      	movs	r0, #2
 800ffb6:	f7fe ffe3 	bl	800ef80 <VL53L1_i2c_decode_int16_t>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	3315      	adds	r3, #21
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	2002      	movs	r0, #2
 800ffca:	f7fe ffd9 	bl	800ef80 <VL53L1_i2c_decode_int16_t>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800ffd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3718      	adds	r7, #24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b088      	sub	sp, #32
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ffec:	2300      	movs	r3, #0
 800ffee:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800fff0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d108      	bne.n	801000a <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800fff8:	f107 0208 	add.w	r2, r7, #8
 800fffc:	2317      	movs	r3, #23
 800fffe:	210d      	movs	r1, #13
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff fc8b 	bl	800f91c <VL53L1_ReadMulti>
 8010006:	4603      	mov	r3, r0
 8010008:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 801000a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d108      	bne.n	8010024 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8010012:	f107 0308 	add.w	r3, r7, #8
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	4619      	mov	r1, r3
 801001a:	2017      	movs	r0, #23
 801001c:	f7ff ff54 	bl	800fec8 <VL53L1_i2c_decode_customer_nvm_managed>
 8010020:	4603      	mov	r3, r0
 8010022:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010024:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3720      	adds	r7, #32
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b086      	sub	sp, #24
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	460b      	mov	r3, r1
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801003e:	2300      	movs	r3, #0
 8010040:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8010042:	897b      	ldrh	r3, [r7, #10]
 8010044:	2b1f      	cmp	r3, #31
 8010046:	d802      	bhi.n	801004e <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010048:	f06f 0309 	mvn.w	r3, #9
 801004c:	e0cf      	b.n	80101ee <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	2102      	movs	r1, #2
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe ff1d 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	7892      	ldrb	r2, [r2, #2]
 8010064:	f002 0201 	and.w	r2, r2, #1
 8010068:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801006a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	78d2      	ldrb	r2, [r2, #3]
 8010074:	f002 020f 	and.w	r2, r2, #15
 8010078:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801007a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	7912      	ldrb	r2, [r2, #4]
 8010084:	f002 020f 	and.w	r2, r2, #15
 8010088:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801008a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	7952      	ldrb	r2, [r2, #5]
 8010094:	f002 021f 	and.w	r2, r2, #31
 8010098:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801009a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80100a0:	68fa      	ldr	r2, [r7, #12]
 80100a2:	7992      	ldrb	r2, [r2, #6]
 80100a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80100a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80100aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	79d2      	ldrb	r2, [r2, #7]
 80100b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80100b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80100ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	7a12      	ldrb	r2, [r2, #8]
 80100c4:	f002 0201 	and.w	r2, r2, #1
 80100c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80100ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80100d0:	68fa      	ldr	r2, [r7, #12]
 80100d2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80100d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	7a92      	ldrb	r2, [r2, #10]
 80100de:	f002 0201 	and.w	r2, r2, #1
 80100e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80100e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80100ea:	68fa      	ldr	r2, [r7, #12]
 80100ec:	7ad2      	ldrb	r2, [r2, #11]
 80100ee:	f002 0203 	and.w	r2, r2, #3
 80100f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80100f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	7b12      	ldrb	r2, [r2, #12]
 80100fe:	f002 021f 	and.w	r2, r2, #31
 8010102:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	7b52      	ldrb	r2, [r2, #13]
 801010e:	f002 0203 	and.w	r2, r2, #3
 8010112:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010114:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	7b92      	ldrb	r2, [r2, #14]
 801011e:	f002 0203 	and.w	r2, r2, #3
 8010122:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8010124:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	7bd2      	ldrb	r2, [r2, #15]
 801012e:	f002 0207 	and.w	r2, r2, #7
 8010132:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8010134:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	7c12      	ldrb	r2, [r2, #16]
 801013e:	f002 021f 	and.w	r2, r2, #31
 8010142:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8010144:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	7c52      	ldrb	r2, [r2, #17]
 801014e:	f002 0201 	and.w	r2, r2, #1
 8010152:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010154:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801015e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8010168:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8010172:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801017c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8010182:	68fa      	ldr	r2, [r7, #12]
 8010184:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8010186:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8010190:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	8b18      	ldrh	r0, [r3, #24]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	3318      	adds	r3, #24
 801019a:	461a      	mov	r2, r3
 801019c:	2102      	movs	r1, #2
 801019e:	f7fe fe7a 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80101aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80101b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	7f12      	ldrb	r2, [r2, #28]
 80101be:	f002 020f 	and.w	r2, r2, #15
 80101c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80101c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80101ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	7f92      	ldrb	r2, [r2, #30]
 80101d8:	f002 020f 	and.w	r2, r2, #15
 80101dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80101de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80101e8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80101ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b086      	sub	sp, #24
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	60f8      	str	r0, [r7, #12]
 80101fe:	460b      	mov	r3, r1
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010204:	2300      	movs	r3, #0
 8010206:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8010208:	897b      	ldrh	r3, [r7, #10]
 801020a:	2b15      	cmp	r3, #21
 801020c:	d802      	bhi.n	8010214 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801020e:	f06f 0309 	mvn.w	r3, #9
 8010212:	e070      	b.n	80102f6 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010224:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 801022e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8010234:	68fa      	ldr	r2, [r7, #12]
 8010236:	78d2      	ldrb	r2, [r2, #3]
 8010238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801023c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801023e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8010244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010248:	b298      	uxth	r0, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	3304      	adds	r3, #4
 801024e:	461a      	mov	r2, r3
 8010250:	2102      	movs	r1, #2
 8010252:	f7fe fe20 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	7992      	ldrb	r2, [r2, #6]
 801025e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010262:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010264:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 801026e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010278:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 801027e:	68fa      	ldr	r2, [r7, #12]
 8010280:	7a52      	ldrb	r2, [r2, #9]
 8010282:	f002 0201 	and.w	r2, r2, #1
 8010286:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010288:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	7a92      	ldrb	r2, [r2, #10]
 8010292:	f002 0207 	and.w	r2, r2, #7
 8010296:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010298:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	8998      	ldrh	r0, [r3, #12]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	330c      	adds	r3, #12
 80102a2:	461a      	mov	r2, r3
 80102a4:	2102      	movs	r1, #2
 80102a6:	f7fe fdf6 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	89d8      	ldrh	r0, [r3, #14]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	330e      	adds	r3, #14
 80102b2:	461a      	mov	r2, r3
 80102b4:	2102      	movs	r1, #2
 80102b6:	f7fe fdee 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	8a18      	ldrh	r0, [r3, #16]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	3310      	adds	r3, #16
 80102c2:	461a      	mov	r2, r3
 80102c4:	2102      	movs	r1, #2
 80102c6:	f7fe fde6 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80102d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80102dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80102e2:	68fa      	ldr	r2, [r7, #12]
 80102e4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80102e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80102f0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80102f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3718      	adds	r7, #24
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b086      	sub	sp, #24
 8010302:	af00      	add	r7, sp, #0
 8010304:	60f8      	str	r0, [r7, #12]
 8010306:	460b      	mov	r3, r1
 8010308:	607a      	str	r2, [r7, #4]
 801030a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801030c:	2300      	movs	r3, #0
 801030e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8010310:	897b      	ldrh	r3, [r7, #10]
 8010312:	2b16      	cmp	r3, #22
 8010314:	d802      	bhi.n	801031c <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010316:	f06f 0309 	mvn.w	r3, #9
 801031a:	e06e      	b.n	80103fa <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	f003 030f 	and.w	r3, r3, #15
 8010324:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8010332:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	7892      	ldrb	r2, [r2, #2]
 801033c:	f002 020f 	and.w	r2, r2, #15
 8010340:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010342:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 801034c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	7912      	ldrb	r2, [r2, #4]
 8010356:	f002 020f 	and.w	r2, r2, #15
 801035a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801035c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8010366:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	7992      	ldrb	r2, [r2, #6]
 8010370:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010374:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010376:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801037c:	68fa      	ldr	r2, [r7, #12]
 801037e:	79d2      	ldrb	r2, [r2, #7]
 8010380:	f002 020f 	and.w	r2, r2, #15
 8010384:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8010386:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010390:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8010396:	68fa      	ldr	r2, [r7, #12]
 8010398:	7a52      	ldrb	r2, [r2, #9]
 801039a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801039e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80103a0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	8958      	ldrh	r0, [r3, #10]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	330a      	adds	r3, #10
 80103aa:	461a      	mov	r2, r3
 80103ac:	2102      	movs	r1, #2
 80103ae:	f7fe fd72 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	8998      	ldrh	r0, [r3, #12]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	330c      	adds	r3, #12
 80103ba:	461a      	mov	r2, r3
 80103bc:	2102      	movs	r1, #2
 80103be:	f7fe fd6a 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80103ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80103d4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	6918      	ldr	r0, [r3, #16]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	3312      	adds	r3, #18
 80103de:	461a      	mov	r2, r3
 80103e0:	2104      	movs	r1, #4
 80103e2:	f7fe fdf6 	bl	800efd2 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	7d12      	ldrb	r2, [r2, #20]
 80103ee:	f002 0201 	and.w	r2, r2, #1
 80103f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80103f4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80103f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3718      	adds	r7, #24
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010402:	b580      	push	{r7, lr}
 8010404:	b086      	sub	sp, #24
 8010406:	af00      	add	r7, sp, #0
 8010408:	60f8      	str	r0, [r7, #12]
 801040a:	460b      	mov	r3, r1
 801040c:	607a      	str	r2, [r7, #4]
 801040e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010410:	2300      	movs	r3, #0
 8010412:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8010414:	897b      	ldrh	r3, [r7, #10]
 8010416:	2b11      	cmp	r3, #17
 8010418:	d802      	bhi.n	8010420 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801041a:	f06f 0309 	mvn.w	r3, #9
 801041e:	e071      	b.n	8010504 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	f003 0303 	and.w	r3, r3, #3
 8010428:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	8858      	ldrh	r0, [r3, #2]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	3301      	adds	r3, #1
 8010436:	461a      	mov	r2, r3
 8010438:	2102      	movs	r1, #2
 801043a:	f7fe fd2c 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	8898      	ldrh	r0, [r3, #4]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	3303      	adds	r3, #3
 8010446:	461a      	mov	r2, r3
 8010448:	2102      	movs	r1, #2
 801044a:	f7fe fd24 	bl	800ee96 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	7992      	ldrb	r2, [r2, #6]
 8010456:	f002 0201 	and.w	r2, r2, #1
 801045a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801045c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	79d2      	ldrb	r2, [r2, #7]
 8010466:	f002 0207 	and.w	r2, r2, #7
 801046a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801046c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8010472:	68fa      	ldr	r2, [r7, #12]
 8010474:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8010476:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 801047c:	68fa      	ldr	r2, [r7, #12]
 801047e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010480:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	7a92      	ldrb	r2, [r2, #10]
 801048a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801048e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010490:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	7ad2      	ldrb	r2, [r2, #11]
 801049a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801049e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80104a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80104a6:	68fa      	ldr	r2, [r7, #12]
 80104a8:	7b12      	ldrb	r2, [r2, #12]
 80104aa:	f002 0203 	and.w	r2, r2, #3
 80104ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80104b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	7b52      	ldrb	r2, [r2, #13]
 80104ba:	f002 0203 	and.w	r2, r2, #3
 80104be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80104c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	7b92      	ldrb	r2, [r2, #14]
 80104ca:	f002 020f 	and.w	r2, r2, #15
 80104ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80104d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80104d6:	68fa      	ldr	r2, [r7, #12]
 80104d8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80104da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80104e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80104ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	7c92      	ldrb	r2, [r2, #18]
 80104f8:	f002 0203 	and.w	r2, r2, #3
 80104fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80104fe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010500:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801050c:	b480      	push	{r7}
 801050e:	b087      	sub	sp, #28
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	460b      	mov	r3, r1
 8010516:	607a      	str	r2, [r7, #4]
 8010518:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801051a:	2300      	movs	r3, #0
 801051c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 801051e:	897b      	ldrh	r3, [r7, #10]
 8010520:	2b04      	cmp	r3, #4
 8010522:	d802      	bhi.n	801052a <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010524:	f06f 0309 	mvn.w	r3, #9
 8010528:	e025      	b.n	8010576 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	f003 0301 	and.w	r3, r3, #1
 8010532:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	7852      	ldrb	r2, [r2, #1]
 8010540:	f002 0201 	and.w	r2, r2, #1
 8010544:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8010546:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	7892      	ldrb	r2, [r2, #2]
 8010550:	f002 0201 	and.w	r2, r2, #1
 8010554:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8010556:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	78d2      	ldrb	r2, [r2, #3]
 8010560:	f002 0203 	and.w	r2, r2, #3
 8010564:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8010566:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010570:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010576:	4618      	mov	r0, r3
 8010578:	371c      	adds	r7, #28
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b084      	sub	sp, #16
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
 801058a:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801058c:	2300      	movs	r3, #0
 801058e:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8010590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d108      	bne.n	80105aa <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8010598:	f107 0308 	add.w	r3, r7, #8
 801059c:	461a      	mov	r2, r3
 801059e:	2105      	movs	r1, #5
 80105a0:	6838      	ldr	r0, [r7, #0]
 80105a2:	f7ff ffb3 	bl	801050c <VL53L1_i2c_encode_system_control>
 80105a6:	4603      	mov	r3, r0
 80105a8:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80105aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d108      	bne.n	80105c4 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 80105b2:	f107 0208 	add.w	r2, r7, #8
 80105b6:	2305      	movs	r3, #5
 80105b8:	2183      	movs	r1, #131	; 0x83
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7ff f978 	bl	800f8b0 <VL53L1_WriteMulti>
 80105c0:	4603      	mov	r3, r0
 80105c2:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80105c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b086      	sub	sp, #24
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
 80105dc:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80105de:	2300      	movs	r3, #0
 80105e0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80105e2:	89fb      	ldrh	r3, [r7, #14]
 80105e4:	2b2b      	cmp	r3, #43	; 0x2b
 80105e6:	d802      	bhi.n	80105ee <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80105e8:	f06f 0309 	mvn.w	r3, #9
 80105ec:	e0e2      	b.n	80107b4 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80105f6:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	785a      	ldrb	r2, [r3, #1]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	3302      	adds	r3, #2
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	f003 030f 	and.w	r3, r3, #15
 801060e:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	78da      	ldrb	r2, [r3, #3]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	3304      	adds	r3, #4
 8010620:	4619      	mov	r1, r3
 8010622:	2002      	movs	r0, #2
 8010624:	f7fe fc61 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010628:	4603      	mov	r3, r0
 801062a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	3306      	adds	r3, #6
 8010634:	4619      	mov	r1, r3
 8010636:	2002      	movs	r0, #2
 8010638:	f7fe fc57 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 801063c:	4603      	mov	r3, r0
 801063e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	3308      	adds	r3, #8
 8010648:	4619      	mov	r1, r3
 801064a:	2002      	movs	r0, #2
 801064c:	f7fe fc4d 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010650:	4603      	mov	r3, r0
 8010652:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	330a      	adds	r3, #10
 801065c:	4619      	mov	r1, r3
 801065e:	2002      	movs	r0, #2
 8010660:	f7fe fc43 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010664:	4603      	mov	r3, r0
 8010666:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	330c      	adds	r3, #12
 8010670:	4619      	mov	r1, r3
 8010672:	2002      	movs	r0, #2
 8010674:	f7fe fc39 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010678:	4603      	mov	r3, r0
 801067a:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	330e      	adds	r3, #14
 8010684:	4619      	mov	r1, r3
 8010686:	2002      	movs	r0, #2
 8010688:	f7fe fc2f 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	3310      	adds	r3, #16
 8010698:	4619      	mov	r1, r3
 801069a:	2002      	movs	r0, #2
 801069c:	f7fe fc25 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80106a0:	4603      	mov	r3, r0
 80106a2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	3312      	adds	r3, #18
 80106ac:	4619      	mov	r1, r3
 80106ae:	2002      	movs	r0, #2
 80106b0:	f7fe fc1b 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80106b4:	4603      	mov	r3, r0
 80106b6:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	3314      	adds	r3, #20
 80106c0:	4619      	mov	r1, r3
 80106c2:	2002      	movs	r0, #2
 80106c4:	f7fe fc11 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80106c8:	4603      	mov	r3, r0
 80106ca:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	3316      	adds	r3, #22
 80106d4:	4619      	mov	r1, r3
 80106d6:	2002      	movs	r0, #2
 80106d8:	f7fe fc07 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80106dc:	4603      	mov	r3, r0
 80106de:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	3318      	adds	r3, #24
 80106e8:	4619      	mov	r1, r3
 80106ea:	2002      	movs	r0, #2
 80106ec:	f7fe fbfd 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80106f0:	4603      	mov	r3, r0
 80106f2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	331a      	adds	r3, #26
 80106fc:	4619      	mov	r1, r3
 80106fe:	2002      	movs	r0, #2
 8010700:	f7fe fbf3 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010704:	4603      	mov	r3, r0
 8010706:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	331c      	adds	r3, #28
 8010710:	4619      	mov	r1, r3
 8010712:	2002      	movs	r0, #2
 8010714:	f7fe fbe9 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010718:	4603      	mov	r3, r0
 801071a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	331e      	adds	r3, #30
 8010724:	4619      	mov	r1, r3
 8010726:	2002      	movs	r0, #2
 8010728:	f7fe fbdf 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 801072c:	4603      	mov	r3, r0
 801072e:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	3320      	adds	r3, #32
 8010738:	4619      	mov	r1, r3
 801073a:	2002      	movs	r0, #2
 801073c:	f7fe fbd5 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010740:	4603      	mov	r3, r0
 8010742:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	3322      	adds	r3, #34	; 0x22
 801074c:	4619      	mov	r1, r3
 801074e:	2002      	movs	r0, #2
 8010750:	f7fe fbcb 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010754:	4603      	mov	r3, r0
 8010756:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	3324      	adds	r3, #36	; 0x24
 8010760:	4619      	mov	r1, r3
 8010762:	2002      	movs	r0, #2
 8010764:	f7fe fbc1 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010768:	4603      	mov	r3, r0
 801076a:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	3326      	adds	r3, #38	; 0x26
 8010774:	4619      	mov	r1, r3
 8010776:	2002      	movs	r0, #2
 8010778:	f7fe fbb7 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	3328      	adds	r3, #40	; 0x28
 8010788:	4619      	mov	r1, r3
 801078a:	2002      	movs	r0, #2
 801078c:	f7fe fbad 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010790:	4603      	mov	r3, r0
 8010792:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80107b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3718      	adds	r7, #24
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b086      	sub	sp, #24
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	4603      	mov	r3, r0
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
 80107c8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80107ca:	2300      	movs	r3, #0
 80107cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80107ce:	89fb      	ldrh	r3, [r7, #14]
 80107d0:	2b20      	cmp	r3, #32
 80107d2:	d802      	bhi.n	80107da <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80107d4:	f06f 0309 	mvn.w	r3, #9
 80107d8:	e04d      	b.n	8010876 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80107da:	68b9      	ldr	r1, [r7, #8]
 80107dc:	2004      	movs	r0, #4
 80107de:	f7fe fc21 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 80107e2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	3304      	adds	r3, #4
 80107ec:	4619      	mov	r1, r3
 80107ee:	2004      	movs	r0, #4
 80107f0:	f7fe fc18 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 80107f4:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	3308      	adds	r3, #8
 80107fe:	4619      	mov	r1, r3
 8010800:	2004      	movs	r0, #4
 8010802:	f7fe fc2c 	bl	800f05e <VL53L1_i2c_decode_int32_t>
 8010806:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	330c      	adds	r3, #12
 8010810:	4619      	mov	r1, r3
 8010812:	2004      	movs	r0, #4
 8010814:	f7fe fc06 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 8010818:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	3310      	adds	r3, #16
 8010822:	4619      	mov	r1, r3
 8010824:	2004      	movs	r0, #4
 8010826:	f7fe fbfd 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 801082a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	3314      	adds	r3, #20
 8010834:	4619      	mov	r1, r3
 8010836:	2004      	movs	r0, #4
 8010838:	f7fe fbf4 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 801083c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	3318      	adds	r3, #24
 8010846:	4619      	mov	r1, r3
 8010848:	2004      	movs	r0, #4
 801084a:	f7fe fc08 	bl	800f05e <VL53L1_i2c_decode_int32_t>
 801084e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	331c      	adds	r3, #28
 8010858:	4619      	mov	r1, r3
 801085a:	2004      	movs	r0, #4
 801085c:	f7fe fbe2 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 8010860:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	f893 2020 	ldrb.w	r2, [r3, #32]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8010872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010876:	4618      	mov	r0, r3
 8010878:	3718      	adds	r7, #24
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}

0801087e <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 801087e:	b580      	push	{r7, lr}
 8010880:	b086      	sub	sp, #24
 8010882:	af00      	add	r7, sp, #0
 8010884:	4603      	mov	r3, r0
 8010886:	60b9      	str	r1, [r7, #8]
 8010888:	607a      	str	r2, [r7, #4]
 801088a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801088c:	2300      	movs	r3, #0
 801088e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8010890:	89fb      	ldrh	r3, [r7, #14]
 8010892:	2b37      	cmp	r3, #55	; 0x37
 8010894:	d802      	bhi.n	801089c <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010896:	f06f 0309 	mvn.w	r3, #9
 801089a:	e15e      	b.n	8010b5a <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	2002      	movs	r0, #2
 80108a0:	f7fe fb23 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	3302      	adds	r3, #2
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108b6:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	3303      	adds	r3, #3
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108c6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	3304      	adds	r3, #4
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	f003 0303 	and.w	r3, r3, #3
 80108d6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	3305      	adds	r3, #5
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	f003 0301 	and.w	r3, r3, #1
 80108e6:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	3306      	adds	r3, #6
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108f6:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	3307      	adds	r3, #7
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010906:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	3308      	adds	r3, #8
 8010910:	4619      	mov	r1, r3
 8010912:	2002      	movs	r0, #2
 8010914:	f7fe fae9 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010918:	4603      	mov	r3, r0
 801091a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801091e:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	330a      	adds	r3, #10
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	f003 0303 	and.w	r3, r3, #3
 801092e:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	330b      	adds	r3, #11
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	f003 0303 	and.w	r3, r3, #3
 801093e:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	330c      	adds	r3, #12
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 030f 	and.w	r3, r3, #15
 801094e:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	330d      	adds	r3, #13
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f003 0307 	and.w	r3, r3, #7
 801095e:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	330e      	adds	r3, #14
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	330f      	adds	r3, #15
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	f003 0303 	and.w	r3, r3, #3
 801097e:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	7c1a      	ldrb	r2, [r3, #16]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	7c5a      	ldrb	r2, [r3, #17]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	3312      	adds	r3, #18
 8010998:	4619      	mov	r1, r3
 801099a:	2002      	movs	r0, #2
 801099c:	f7fe faa5 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80109a0:	4603      	mov	r3, r0
 80109a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80109a6:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	3316      	adds	r3, #22
 80109b0:	4619      	mov	r1, r3
 80109b2:	2002      	movs	r0, #2
 80109b4:	f7fe fa99 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80109b8:	4603      	mov	r3, r0
 80109ba:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	3318      	adds	r3, #24
 80109c4:	4619      	mov	r1, r3
 80109c6:	2002      	movs	r0, #2
 80109c8:	f7fe fa8f 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 80109cc:	4603      	mov	r3, r0
 80109ce:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	331a      	adds	r3, #26
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	f003 0301 	and.w	r3, r3, #1
 80109de:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	331b      	adds	r3, #27
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	f003 0307 	and.w	r3, r3, #7
 80109ee:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	7f1a      	ldrb	r2, [r3, #28]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	7f5a      	ldrb	r2, [r3, #29]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	331e      	adds	r3, #30
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a0e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	331f      	adds	r3, #31
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a1e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	3320      	adds	r3, #32
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 0303 	and.w	r3, r3, #3
 8010a2e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	3321      	adds	r3, #33	; 0x21
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f003 030f 	and.w	r3, r3, #15
 8010a3e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	3325      	adds	r3, #37	; 0x25
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	f003 0301 	and.w	r3, r3, #1
 8010a72:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	3326      	adds	r3, #38	; 0x26
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	f003 0303 	and.w	r3, r3, #3
 8010a84:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	3327      	adds	r3, #39	; 0x27
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	f003 031f 	and.w	r3, r3, #31
 8010a96:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	3328      	adds	r3, #40	; 0x28
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	f003 031f 	and.w	r3, r3, #31
 8010aa8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	3329      	adds	r3, #41	; 0x29
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	f003 031f 	and.w	r3, r3, #31
 8010aba:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	332a      	adds	r3, #42	; 0x2a
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	f003 0301 	and.w	r3, r3, #1
 8010acc:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	332b      	adds	r3, #43	; 0x2b
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	f003 0301 	and.w	r3, r3, #1
 8010ade:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	332c      	adds	r3, #44	; 0x2c
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	f003 0303 	and.w	r3, r3, #3
 8010af0:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	332d      	adds	r3, #45	; 0x2d
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b02:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	332e      	adds	r3, #46	; 0x2e
 8010b0e:	4619      	mov	r1, r3
 8010b10:	2004      	movs	r0, #4
 8010b12:	f7fe fa87 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 8010b16:	4603      	mov	r3, r0
 8010b18:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	3332      	adds	r3, #50	; 0x32
 8010b24:	4619      	mov	r1, r3
 8010b26:	2004      	movs	r0, #4
 8010b28:	f7fe fa7c 	bl	800f024 <VL53L1_i2c_decode_uint32_t>
 8010b2c:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	3336      	adds	r3, #54	; 0x36
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	f003 0301 	and.w	r3, r3, #1
 8010b3c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	3337      	adds	r3, #55	; 0x37
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	f003 0301 	and.w	r3, r3, #1
 8010b4e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8010b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3718      	adds	r7, #24
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b086      	sub	sp, #24
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	4603      	mov	r3, r0
 8010b6a:	60b9      	str	r1, [r7, #8]
 8010b6c:	607a      	str	r2, [r7, #4]
 8010b6e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010b70:	2300      	movs	r3, #0
 8010b72:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8010b74:	89fb      	ldrh	r3, [r7, #14]
 8010b76:	2b30      	cmp	r3, #48	; 0x30
 8010b78:	d802      	bhi.n	8010b80 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010b7a:	f06f 0309 	mvn.w	r3, #9
 8010b7e:	e112      	b.n	8010da6 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	785a      	ldrb	r2, [r3, #1]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	789a      	ldrb	r2, [r3, #2]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	3303      	adds	r3, #3
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	2002      	movs	r0, #2
 8010ba0:	f7fe f9a3 	bl	800eeea <VL53L1_i2c_decode_uint16_t>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	3305      	adds	r3, #5
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bb6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	3306      	adds	r3, #6
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	f003 0307 	and.w	r3, r3, #7
 8010bc6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	3307      	adds	r3, #7
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	f003 0307 	and.w	r3, r3, #7
 8010bd6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	3308      	adds	r3, #8
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010be6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	3309      	adds	r3, #9
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bf6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	330a      	adds	r3, #10
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	330b      	adds	r3, #11
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c16:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	330c      	adds	r3, #12
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	330d      	adds	r3, #13
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c36:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	330e      	adds	r3, #14
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c46:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	7bda      	ldrb	r2, [r3, #15]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	7c1a      	ldrb	r2, [r3, #16]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	7c5a      	ldrb	r2, [r3, #17]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	7c9a      	ldrb	r2, [r3, #18]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	7cda      	ldrb	r2, [r3, #19]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	7d1a      	ldrb	r2, [r3, #20]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	7d5a      	ldrb	r2, [r3, #21]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	7d9a      	ldrb	r2, [r3, #22]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	7dda      	ldrb	r2, [r3, #23]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	7e1a      	ldrb	r2, [r3, #24]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	7e5a      	ldrb	r2, [r3, #25]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	7e9a      	ldrb	r2, [r3, #26]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	7eda      	ldrb	r2, [r3, #27]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	7f1a      	ldrb	r2, [r3, #28]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	7f5a      	ldrb	r2, [r3, #29]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	7f9a      	ldrb	r2, [r3, #30]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	7fda      	ldrb	r2, [r3, #31]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8010da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}

08010dae <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b090      	sub	sp, #64	; 0x40
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
 8010db6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010db8:	2300      	movs	r3, #0
 8010dba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8010dbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d10a      	bne.n	8010ddc <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8010dc6:	f107 020c 	add.w	r2, r7, #12
 8010dca:	2331      	movs	r3, #49	; 0x31
 8010dcc:	f240 110f 	movw	r1, #271	; 0x10f
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7fe fda3 	bl	800f91c <VL53L1_ReadMulti>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8010ddc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d109      	bne.n	8010df8 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8010de4:	f107 030c 	add.w	r3, r7, #12
 8010de8:	683a      	ldr	r2, [r7, #0]
 8010dea:	4619      	mov	r1, r3
 8010dec:	2031      	movs	r0, #49	; 0x31
 8010dee:	f7ff feb8 	bl	8010b62 <VL53L1_i2c_decode_nvm_copy_data>
 8010df2:	4603      	mov	r3, r0
 8010df4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010df8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3740      	adds	r7, #64	; 0x40
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b086      	sub	sp, #24
 8010e08:	af02      	add	r7, sp, #8
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8010e12:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f7fe fe46 	bl	800faa8 <VL53L1_WaitUs>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8010e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d10b      	bne.n	8010e40 <VL53L1_poll_for_boot_completion+0x3c>
		status =
 8010e28:	2301      	movs	r3, #1
 8010e2a:	9301      	str	r3, [sp, #4]
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	9300      	str	r3, [sp, #0]
 8010e30:	2301      	movs	r3, #1
 8010e32:	22e5      	movs	r2, #229	; 0xe5
 8010e34:	6839      	ldr	r1, [r7, #0]
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7fe fe4c 	bl	800fad4 <VL53L1_WaitValueMaskEx>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8010e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d103      	bne.n	8010e50 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8010e48:	2103      	movs	r1, #3
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7fd fe06 	bl	800ea5c <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3710      	adds	r7, #16
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b088      	sub	sp, #32
 8010e60:	af02      	add	r7, sp, #8
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010e66:	2300      	movs	r3, #0
 8010e68:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8010e7c:	f003 0310 	and.w	r3, r3, #16
 8010e80:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010e82:	7bfb      	ldrb	r3, [r7, #15]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d102      	bne.n	8010e8e <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	75fb      	strb	r3, [r7, #23]
 8010e8c:	e001      	b.n	8010e92 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	75fb      	strb	r3, [r7, #23]

	status =
 8010e92:	7dfa      	ldrb	r2, [r7, #23]
 8010e94:	2301      	movs	r3, #1
 8010e96:	9301      	str	r3, [sp, #4]
 8010e98:	2301      	movs	r3, #1
 8010e9a:	9300      	str	r3, [sp, #0]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	2231      	movs	r2, #49	; 0x31
 8010ea0:	6839      	ldr	r1, [r7, #0]
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7fe fe16 	bl	800fad4 <VL53L1_WaitValueMaskEx>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010eac:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3718      	adds	r7, #24
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010ebe:	e003      	b.n	8010ec8 <LoopCopyDataInit>

08010ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010ec0:	4b0c      	ldr	r3, [pc, #48]	; (8010ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010ec6:	3104      	adds	r1, #4

08010ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010ec8:	480b      	ldr	r0, [pc, #44]	; (8010ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010eca:	4b0c      	ldr	r3, [pc, #48]	; (8010efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010ed0:	d3f6      	bcc.n	8010ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8010ed2:	4a0b      	ldr	r2, [pc, #44]	; (8010f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010ed4:	e002      	b.n	8010edc <LoopFillZerobss>

08010ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010ed8:	f842 3b04 	str.w	r3, [r2], #4

08010edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010edc:	4b09      	ldr	r3, [pc, #36]	; (8010f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010ee0:	d3f9      	bcc.n	8010ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010ee2:	f7f5 f93b 	bl	800615c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010ee6:	f000 f98d 	bl	8011204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010eea:	f7f4 fd33 	bl	8005954 <main>
  bx  lr    
 8010eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010ef0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8010ef4:	08012898 	.word	0x08012898
  ldr  r0, =_sdata
 8010ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010efc:	20000360 	.word	0x20000360
  ldr  r2, =_sbss
 8010f00:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 8010f04:	20000e60 	.word	0x20000e60

08010f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010f08:	e7fe      	b.n	8010f08 <ADC_IRQHandler>
	...

08010f0c <__sflush_r>:
 8010f0c:	898a      	ldrh	r2, [r1, #12]
 8010f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f12:	4605      	mov	r5, r0
 8010f14:	0710      	lsls	r0, r2, #28
 8010f16:	460c      	mov	r4, r1
 8010f18:	d45a      	bmi.n	8010fd0 <__sflush_r+0xc4>
 8010f1a:	684b      	ldr	r3, [r1, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	dc05      	bgt.n	8010f2c <__sflush_r+0x20>
 8010f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	dc02      	bgt.n	8010f2c <__sflush_r+0x20>
 8010f26:	2000      	movs	r0, #0
 8010f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f2e:	2e00      	cmp	r6, #0
 8010f30:	d0f9      	beq.n	8010f26 <__sflush_r+0x1a>
 8010f32:	2300      	movs	r3, #0
 8010f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f38:	682f      	ldr	r7, [r5, #0]
 8010f3a:	602b      	str	r3, [r5, #0]
 8010f3c:	d033      	beq.n	8010fa6 <__sflush_r+0x9a>
 8010f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	075a      	lsls	r2, r3, #29
 8010f44:	d505      	bpl.n	8010f52 <__sflush_r+0x46>
 8010f46:	6863      	ldr	r3, [r4, #4]
 8010f48:	1ac0      	subs	r0, r0, r3
 8010f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f4c:	b10b      	cbz	r3, 8010f52 <__sflush_r+0x46>
 8010f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f50:	1ac0      	subs	r0, r0, r3
 8010f52:	2300      	movs	r3, #0
 8010f54:	4602      	mov	r2, r0
 8010f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f58:	6a21      	ldr	r1, [r4, #32]
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	47b0      	blx	r6
 8010f5e:	1c43      	adds	r3, r0, #1
 8010f60:	89a3      	ldrh	r3, [r4, #12]
 8010f62:	d106      	bne.n	8010f72 <__sflush_r+0x66>
 8010f64:	6829      	ldr	r1, [r5, #0]
 8010f66:	291d      	cmp	r1, #29
 8010f68:	d84b      	bhi.n	8011002 <__sflush_r+0xf6>
 8010f6a:	4a2b      	ldr	r2, [pc, #172]	; (8011018 <__sflush_r+0x10c>)
 8010f6c:	40ca      	lsrs	r2, r1
 8010f6e:	07d6      	lsls	r6, r2, #31
 8010f70:	d547      	bpl.n	8011002 <__sflush_r+0xf6>
 8010f72:	2200      	movs	r2, #0
 8010f74:	6062      	str	r2, [r4, #4]
 8010f76:	04d9      	lsls	r1, r3, #19
 8010f78:	6922      	ldr	r2, [r4, #16]
 8010f7a:	6022      	str	r2, [r4, #0]
 8010f7c:	d504      	bpl.n	8010f88 <__sflush_r+0x7c>
 8010f7e:	1c42      	adds	r2, r0, #1
 8010f80:	d101      	bne.n	8010f86 <__sflush_r+0x7a>
 8010f82:	682b      	ldr	r3, [r5, #0]
 8010f84:	b903      	cbnz	r3, 8010f88 <__sflush_r+0x7c>
 8010f86:	6560      	str	r0, [r4, #84]	; 0x54
 8010f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f8a:	602f      	str	r7, [r5, #0]
 8010f8c:	2900      	cmp	r1, #0
 8010f8e:	d0ca      	beq.n	8010f26 <__sflush_r+0x1a>
 8010f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f94:	4299      	cmp	r1, r3
 8010f96:	d002      	beq.n	8010f9e <__sflush_r+0x92>
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f000 f9d7 	bl	801134c <_free_r>
 8010f9e:	2000      	movs	r0, #0
 8010fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8010fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa6:	6a21      	ldr	r1, [r4, #32]
 8010fa8:	2301      	movs	r3, #1
 8010faa:	4628      	mov	r0, r5
 8010fac:	47b0      	blx	r6
 8010fae:	1c41      	adds	r1, r0, #1
 8010fb0:	d1c6      	bne.n	8010f40 <__sflush_r+0x34>
 8010fb2:	682b      	ldr	r3, [r5, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d0c3      	beq.n	8010f40 <__sflush_r+0x34>
 8010fb8:	2b1d      	cmp	r3, #29
 8010fba:	d001      	beq.n	8010fc0 <__sflush_r+0xb4>
 8010fbc:	2b16      	cmp	r3, #22
 8010fbe:	d101      	bne.n	8010fc4 <__sflush_r+0xb8>
 8010fc0:	602f      	str	r7, [r5, #0]
 8010fc2:	e7b0      	b.n	8010f26 <__sflush_r+0x1a>
 8010fc4:	89a3      	ldrh	r3, [r4, #12]
 8010fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fca:	81a3      	strh	r3, [r4, #12]
 8010fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd0:	690f      	ldr	r7, [r1, #16]
 8010fd2:	2f00      	cmp	r7, #0
 8010fd4:	d0a7      	beq.n	8010f26 <__sflush_r+0x1a>
 8010fd6:	0793      	lsls	r3, r2, #30
 8010fd8:	680e      	ldr	r6, [r1, #0]
 8010fda:	bf08      	it	eq
 8010fdc:	694b      	ldreq	r3, [r1, #20]
 8010fde:	600f      	str	r7, [r1, #0]
 8010fe0:	bf18      	it	ne
 8010fe2:	2300      	movne	r3, #0
 8010fe4:	eba6 0807 	sub.w	r8, r6, r7
 8010fe8:	608b      	str	r3, [r1, #8]
 8010fea:	f1b8 0f00 	cmp.w	r8, #0
 8010fee:	dd9a      	ble.n	8010f26 <__sflush_r+0x1a>
 8010ff0:	4643      	mov	r3, r8
 8010ff2:	463a      	mov	r2, r7
 8010ff4:	6a21      	ldr	r1, [r4, #32]
 8010ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	47b0      	blx	r6
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	dc07      	bgt.n	8011010 <__sflush_r+0x104>
 8011000:	89a3      	ldrh	r3, [r4, #12]
 8011002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011006:	81a3      	strh	r3, [r4, #12]
 8011008:	f04f 30ff 	mov.w	r0, #4294967295
 801100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011010:	4407      	add	r7, r0
 8011012:	eba8 0800 	sub.w	r8, r8, r0
 8011016:	e7e8      	b.n	8010fea <__sflush_r+0xde>
 8011018:	20400001 	.word	0x20400001

0801101c <_fflush_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	690b      	ldr	r3, [r1, #16]
 8011020:	4605      	mov	r5, r0
 8011022:	460c      	mov	r4, r1
 8011024:	b1db      	cbz	r3, 801105e <_fflush_r+0x42>
 8011026:	b118      	cbz	r0, 8011030 <_fflush_r+0x14>
 8011028:	6983      	ldr	r3, [r0, #24]
 801102a:	b90b      	cbnz	r3, 8011030 <_fflush_r+0x14>
 801102c:	f000 f860 	bl	80110f0 <__sinit>
 8011030:	4b0c      	ldr	r3, [pc, #48]	; (8011064 <_fflush_r+0x48>)
 8011032:	429c      	cmp	r4, r3
 8011034:	d109      	bne.n	801104a <_fflush_r+0x2e>
 8011036:	686c      	ldr	r4, [r5, #4]
 8011038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801103c:	b17b      	cbz	r3, 801105e <_fflush_r+0x42>
 801103e:	4621      	mov	r1, r4
 8011040:	4628      	mov	r0, r5
 8011042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011046:	f7ff bf61 	b.w	8010f0c <__sflush_r>
 801104a:	4b07      	ldr	r3, [pc, #28]	; (8011068 <_fflush_r+0x4c>)
 801104c:	429c      	cmp	r4, r3
 801104e:	d101      	bne.n	8011054 <_fflush_r+0x38>
 8011050:	68ac      	ldr	r4, [r5, #8]
 8011052:	e7f1      	b.n	8011038 <_fflush_r+0x1c>
 8011054:	4b05      	ldr	r3, [pc, #20]	; (801106c <_fflush_r+0x50>)
 8011056:	429c      	cmp	r4, r3
 8011058:	bf08      	it	eq
 801105a:	68ec      	ldreq	r4, [r5, #12]
 801105c:	e7ec      	b.n	8011038 <_fflush_r+0x1c>
 801105e:	2000      	movs	r0, #0
 8011060:	bd38      	pop	{r3, r4, r5, pc}
 8011062:	bf00      	nop
 8011064:	08012810 	.word	0x08012810
 8011068:	08012830 	.word	0x08012830
 801106c:	080127f0 	.word	0x080127f0

08011070 <_cleanup_r>:
 8011070:	4901      	ldr	r1, [pc, #4]	; (8011078 <_cleanup_r+0x8>)
 8011072:	f000 b8a9 	b.w	80111c8 <_fwalk_reent>
 8011076:	bf00      	nop
 8011078:	0801101d 	.word	0x0801101d

0801107c <std.isra.0>:
 801107c:	2300      	movs	r3, #0
 801107e:	b510      	push	{r4, lr}
 8011080:	4604      	mov	r4, r0
 8011082:	6003      	str	r3, [r0, #0]
 8011084:	6043      	str	r3, [r0, #4]
 8011086:	6083      	str	r3, [r0, #8]
 8011088:	8181      	strh	r1, [r0, #12]
 801108a:	6643      	str	r3, [r0, #100]	; 0x64
 801108c:	81c2      	strh	r2, [r0, #14]
 801108e:	6103      	str	r3, [r0, #16]
 8011090:	6143      	str	r3, [r0, #20]
 8011092:	6183      	str	r3, [r0, #24]
 8011094:	4619      	mov	r1, r3
 8011096:	2208      	movs	r2, #8
 8011098:	305c      	adds	r0, #92	; 0x5c
 801109a:	f000 f94e 	bl	801133a <memset>
 801109e:	4b05      	ldr	r3, [pc, #20]	; (80110b4 <std.isra.0+0x38>)
 80110a0:	6263      	str	r3, [r4, #36]	; 0x24
 80110a2:	4b05      	ldr	r3, [pc, #20]	; (80110b8 <std.isra.0+0x3c>)
 80110a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80110a6:	4b05      	ldr	r3, [pc, #20]	; (80110bc <std.isra.0+0x40>)
 80110a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110aa:	4b05      	ldr	r3, [pc, #20]	; (80110c0 <std.isra.0+0x44>)
 80110ac:	6224      	str	r4, [r4, #32]
 80110ae:	6323      	str	r3, [r4, #48]	; 0x30
 80110b0:	bd10      	pop	{r4, pc}
 80110b2:	bf00      	nop
 80110b4:	08011bb1 	.word	0x08011bb1
 80110b8:	08011bd3 	.word	0x08011bd3
 80110bc:	08011c0b 	.word	0x08011c0b
 80110c0:	08011c2f 	.word	0x08011c2f

080110c4 <__sfmoreglue>:
 80110c4:	b570      	push	{r4, r5, r6, lr}
 80110c6:	1e4a      	subs	r2, r1, #1
 80110c8:	2568      	movs	r5, #104	; 0x68
 80110ca:	4355      	muls	r5, r2
 80110cc:	460e      	mov	r6, r1
 80110ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110d2:	f000 f989 	bl	80113e8 <_malloc_r>
 80110d6:	4604      	mov	r4, r0
 80110d8:	b140      	cbz	r0, 80110ec <__sfmoreglue+0x28>
 80110da:	2100      	movs	r1, #0
 80110dc:	e880 0042 	stmia.w	r0, {r1, r6}
 80110e0:	300c      	adds	r0, #12
 80110e2:	60a0      	str	r0, [r4, #8]
 80110e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110e8:	f000 f927 	bl	801133a <memset>
 80110ec:	4620      	mov	r0, r4
 80110ee:	bd70      	pop	{r4, r5, r6, pc}

080110f0 <__sinit>:
 80110f0:	6983      	ldr	r3, [r0, #24]
 80110f2:	b510      	push	{r4, lr}
 80110f4:	4604      	mov	r4, r0
 80110f6:	bb33      	cbnz	r3, 8011146 <__sinit+0x56>
 80110f8:	6483      	str	r3, [r0, #72]	; 0x48
 80110fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80110fc:	6503      	str	r3, [r0, #80]	; 0x50
 80110fe:	4b12      	ldr	r3, [pc, #72]	; (8011148 <__sinit+0x58>)
 8011100:	4a12      	ldr	r2, [pc, #72]	; (801114c <__sinit+0x5c>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	6282      	str	r2, [r0, #40]	; 0x28
 8011106:	4298      	cmp	r0, r3
 8011108:	bf04      	itt	eq
 801110a:	2301      	moveq	r3, #1
 801110c:	6183      	streq	r3, [r0, #24]
 801110e:	f000 f81f 	bl	8011150 <__sfp>
 8011112:	6060      	str	r0, [r4, #4]
 8011114:	4620      	mov	r0, r4
 8011116:	f000 f81b 	bl	8011150 <__sfp>
 801111a:	60a0      	str	r0, [r4, #8]
 801111c:	4620      	mov	r0, r4
 801111e:	f000 f817 	bl	8011150 <__sfp>
 8011122:	2200      	movs	r2, #0
 8011124:	60e0      	str	r0, [r4, #12]
 8011126:	2104      	movs	r1, #4
 8011128:	6860      	ldr	r0, [r4, #4]
 801112a:	f7ff ffa7 	bl	801107c <std.isra.0>
 801112e:	2201      	movs	r2, #1
 8011130:	2109      	movs	r1, #9
 8011132:	68a0      	ldr	r0, [r4, #8]
 8011134:	f7ff ffa2 	bl	801107c <std.isra.0>
 8011138:	2202      	movs	r2, #2
 801113a:	2112      	movs	r1, #18
 801113c:	68e0      	ldr	r0, [r4, #12]
 801113e:	f7ff ff9d 	bl	801107c <std.isra.0>
 8011142:	2301      	movs	r3, #1
 8011144:	61a3      	str	r3, [r4, #24]
 8011146:	bd10      	pop	{r4, pc}
 8011148:	08012850 	.word	0x08012850
 801114c:	08011071 	.word	0x08011071

08011150 <__sfp>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	4b1c      	ldr	r3, [pc, #112]	; (80111c4 <__sfp+0x74>)
 8011154:	681e      	ldr	r6, [r3, #0]
 8011156:	69b3      	ldr	r3, [r6, #24]
 8011158:	4607      	mov	r7, r0
 801115a:	b913      	cbnz	r3, 8011162 <__sfp+0x12>
 801115c:	4630      	mov	r0, r6
 801115e:	f7ff ffc7 	bl	80110f0 <__sinit>
 8011162:	3648      	adds	r6, #72	; 0x48
 8011164:	68b4      	ldr	r4, [r6, #8]
 8011166:	6873      	ldr	r3, [r6, #4]
 8011168:	3b01      	subs	r3, #1
 801116a:	d503      	bpl.n	8011174 <__sfp+0x24>
 801116c:	6833      	ldr	r3, [r6, #0]
 801116e:	b133      	cbz	r3, 801117e <__sfp+0x2e>
 8011170:	6836      	ldr	r6, [r6, #0]
 8011172:	e7f7      	b.n	8011164 <__sfp+0x14>
 8011174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011178:	b16d      	cbz	r5, 8011196 <__sfp+0x46>
 801117a:	3468      	adds	r4, #104	; 0x68
 801117c:	e7f4      	b.n	8011168 <__sfp+0x18>
 801117e:	2104      	movs	r1, #4
 8011180:	4638      	mov	r0, r7
 8011182:	f7ff ff9f 	bl	80110c4 <__sfmoreglue>
 8011186:	6030      	str	r0, [r6, #0]
 8011188:	2800      	cmp	r0, #0
 801118a:	d1f1      	bne.n	8011170 <__sfp+0x20>
 801118c:	230c      	movs	r3, #12
 801118e:	603b      	str	r3, [r7, #0]
 8011190:	4604      	mov	r4, r0
 8011192:	4620      	mov	r0, r4
 8011194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801119a:	81e3      	strh	r3, [r4, #14]
 801119c:	2301      	movs	r3, #1
 801119e:	81a3      	strh	r3, [r4, #12]
 80111a0:	6665      	str	r5, [r4, #100]	; 0x64
 80111a2:	6025      	str	r5, [r4, #0]
 80111a4:	60a5      	str	r5, [r4, #8]
 80111a6:	6065      	str	r5, [r4, #4]
 80111a8:	6125      	str	r5, [r4, #16]
 80111aa:	6165      	str	r5, [r4, #20]
 80111ac:	61a5      	str	r5, [r4, #24]
 80111ae:	2208      	movs	r2, #8
 80111b0:	4629      	mov	r1, r5
 80111b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111b6:	f000 f8c0 	bl	801133a <memset>
 80111ba:	6365      	str	r5, [r4, #52]	; 0x34
 80111bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80111be:	64a5      	str	r5, [r4, #72]	; 0x48
 80111c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80111c2:	e7e6      	b.n	8011192 <__sfp+0x42>
 80111c4:	08012850 	.word	0x08012850

080111c8 <_fwalk_reent>:
 80111c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111cc:	4680      	mov	r8, r0
 80111ce:	4689      	mov	r9, r1
 80111d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111d4:	2600      	movs	r6, #0
 80111d6:	b914      	cbnz	r4, 80111de <_fwalk_reent+0x16>
 80111d8:	4630      	mov	r0, r6
 80111da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111de:	68a5      	ldr	r5, [r4, #8]
 80111e0:	6867      	ldr	r7, [r4, #4]
 80111e2:	3f01      	subs	r7, #1
 80111e4:	d501      	bpl.n	80111ea <_fwalk_reent+0x22>
 80111e6:	6824      	ldr	r4, [r4, #0]
 80111e8:	e7f5      	b.n	80111d6 <_fwalk_reent+0xe>
 80111ea:	89ab      	ldrh	r3, [r5, #12]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d907      	bls.n	8011200 <_fwalk_reent+0x38>
 80111f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111f4:	3301      	adds	r3, #1
 80111f6:	d003      	beq.n	8011200 <_fwalk_reent+0x38>
 80111f8:	4629      	mov	r1, r5
 80111fa:	4640      	mov	r0, r8
 80111fc:	47c8      	blx	r9
 80111fe:	4306      	orrs	r6, r0
 8011200:	3568      	adds	r5, #104	; 0x68
 8011202:	e7ee      	b.n	80111e2 <_fwalk_reent+0x1a>

08011204 <__libc_init_array>:
 8011204:	b570      	push	{r4, r5, r6, lr}
 8011206:	4e0d      	ldr	r6, [pc, #52]	; (801123c <__libc_init_array+0x38>)
 8011208:	4c0d      	ldr	r4, [pc, #52]	; (8011240 <__libc_init_array+0x3c>)
 801120a:	1ba4      	subs	r4, r4, r6
 801120c:	10a4      	asrs	r4, r4, #2
 801120e:	2500      	movs	r5, #0
 8011210:	42a5      	cmp	r5, r4
 8011212:	d109      	bne.n	8011228 <__libc_init_array+0x24>
 8011214:	4e0b      	ldr	r6, [pc, #44]	; (8011244 <__libc_init_array+0x40>)
 8011216:	4c0c      	ldr	r4, [pc, #48]	; (8011248 <__libc_init_array+0x44>)
 8011218:	f001 f824 	bl	8012264 <_init>
 801121c:	1ba4      	subs	r4, r4, r6
 801121e:	10a4      	asrs	r4, r4, #2
 8011220:	2500      	movs	r5, #0
 8011222:	42a5      	cmp	r5, r4
 8011224:	d105      	bne.n	8011232 <__libc_init_array+0x2e>
 8011226:	bd70      	pop	{r4, r5, r6, pc}
 8011228:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801122c:	4798      	blx	r3
 801122e:	3501      	adds	r5, #1
 8011230:	e7ee      	b.n	8011210 <__libc_init_array+0xc>
 8011232:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011236:	4798      	blx	r3
 8011238:	3501      	adds	r5, #1
 801123a:	e7f2      	b.n	8011222 <__libc_init_array+0x1e>
 801123c:	08012890 	.word	0x08012890
 8011240:	08012890 	.word	0x08012890
 8011244:	08012890 	.word	0x08012890
 8011248:	08012894 	.word	0x08012894

0801124c <__swhatbuf_r>:
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	460e      	mov	r6, r1
 8011250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011254:	2900      	cmp	r1, #0
 8011256:	b090      	sub	sp, #64	; 0x40
 8011258:	4614      	mov	r4, r2
 801125a:	461d      	mov	r5, r3
 801125c:	da07      	bge.n	801126e <__swhatbuf_r+0x22>
 801125e:	2300      	movs	r3, #0
 8011260:	602b      	str	r3, [r5, #0]
 8011262:	89b3      	ldrh	r3, [r6, #12]
 8011264:	061a      	lsls	r2, r3, #24
 8011266:	d410      	bmi.n	801128a <__swhatbuf_r+0x3e>
 8011268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801126c:	e00e      	b.n	801128c <__swhatbuf_r+0x40>
 801126e:	aa01      	add	r2, sp, #4
 8011270:	f000 fde0 	bl	8011e34 <_fstat_r>
 8011274:	2800      	cmp	r0, #0
 8011276:	dbf2      	blt.n	801125e <__swhatbuf_r+0x12>
 8011278:	9a02      	ldr	r2, [sp, #8]
 801127a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801127e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011282:	425a      	negs	r2, r3
 8011284:	415a      	adcs	r2, r3
 8011286:	602a      	str	r2, [r5, #0]
 8011288:	e7ee      	b.n	8011268 <__swhatbuf_r+0x1c>
 801128a:	2340      	movs	r3, #64	; 0x40
 801128c:	2000      	movs	r0, #0
 801128e:	6023      	str	r3, [r4, #0]
 8011290:	b010      	add	sp, #64	; 0x40
 8011292:	bd70      	pop	{r4, r5, r6, pc}

08011294 <__smakebuf_r>:
 8011294:	898b      	ldrh	r3, [r1, #12]
 8011296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011298:	079d      	lsls	r5, r3, #30
 801129a:	4606      	mov	r6, r0
 801129c:	460c      	mov	r4, r1
 801129e:	d507      	bpl.n	80112b0 <__smakebuf_r+0x1c>
 80112a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112a4:	6023      	str	r3, [r4, #0]
 80112a6:	6123      	str	r3, [r4, #16]
 80112a8:	2301      	movs	r3, #1
 80112aa:	6163      	str	r3, [r4, #20]
 80112ac:	b002      	add	sp, #8
 80112ae:	bd70      	pop	{r4, r5, r6, pc}
 80112b0:	ab01      	add	r3, sp, #4
 80112b2:	466a      	mov	r2, sp
 80112b4:	f7ff ffca 	bl	801124c <__swhatbuf_r>
 80112b8:	9900      	ldr	r1, [sp, #0]
 80112ba:	4605      	mov	r5, r0
 80112bc:	4630      	mov	r0, r6
 80112be:	f000 f893 	bl	80113e8 <_malloc_r>
 80112c2:	b948      	cbnz	r0, 80112d8 <__smakebuf_r+0x44>
 80112c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112c8:	059a      	lsls	r2, r3, #22
 80112ca:	d4ef      	bmi.n	80112ac <__smakebuf_r+0x18>
 80112cc:	f023 0303 	bic.w	r3, r3, #3
 80112d0:	f043 0302 	orr.w	r3, r3, #2
 80112d4:	81a3      	strh	r3, [r4, #12]
 80112d6:	e7e3      	b.n	80112a0 <__smakebuf_r+0xc>
 80112d8:	4b0d      	ldr	r3, [pc, #52]	; (8011310 <__smakebuf_r+0x7c>)
 80112da:	62b3      	str	r3, [r6, #40]	; 0x28
 80112dc:	89a3      	ldrh	r3, [r4, #12]
 80112de:	6020      	str	r0, [r4, #0]
 80112e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112e4:	81a3      	strh	r3, [r4, #12]
 80112e6:	9b00      	ldr	r3, [sp, #0]
 80112e8:	6163      	str	r3, [r4, #20]
 80112ea:	9b01      	ldr	r3, [sp, #4]
 80112ec:	6120      	str	r0, [r4, #16]
 80112ee:	b15b      	cbz	r3, 8011308 <__smakebuf_r+0x74>
 80112f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112f4:	4630      	mov	r0, r6
 80112f6:	f000 fdaf 	bl	8011e58 <_isatty_r>
 80112fa:	b128      	cbz	r0, 8011308 <__smakebuf_r+0x74>
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	f023 0303 	bic.w	r3, r3, #3
 8011302:	f043 0301 	orr.w	r3, r3, #1
 8011306:	81a3      	strh	r3, [r4, #12]
 8011308:	89a3      	ldrh	r3, [r4, #12]
 801130a:	431d      	orrs	r5, r3
 801130c:	81a5      	strh	r5, [r4, #12]
 801130e:	e7cd      	b.n	80112ac <__smakebuf_r+0x18>
 8011310:	08011071 	.word	0x08011071

08011314 <malloc>:
 8011314:	4b02      	ldr	r3, [pc, #8]	; (8011320 <malloc+0xc>)
 8011316:	4601      	mov	r1, r0
 8011318:	6818      	ldr	r0, [r3, #0]
 801131a:	f000 b865 	b.w	80113e8 <_malloc_r>
 801131e:	bf00      	nop
 8011320:	200002fc 	.word	0x200002fc

08011324 <memcpy>:
 8011324:	b510      	push	{r4, lr}
 8011326:	1e43      	subs	r3, r0, #1
 8011328:	440a      	add	r2, r1
 801132a:	4291      	cmp	r1, r2
 801132c:	d100      	bne.n	8011330 <memcpy+0xc>
 801132e:	bd10      	pop	{r4, pc}
 8011330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011338:	e7f7      	b.n	801132a <memcpy+0x6>

0801133a <memset>:
 801133a:	4402      	add	r2, r0
 801133c:	4603      	mov	r3, r0
 801133e:	4293      	cmp	r3, r2
 8011340:	d100      	bne.n	8011344 <memset+0xa>
 8011342:	4770      	bx	lr
 8011344:	f803 1b01 	strb.w	r1, [r3], #1
 8011348:	e7f9      	b.n	801133e <memset+0x4>
	...

0801134c <_free_r>:
 801134c:	b538      	push	{r3, r4, r5, lr}
 801134e:	4605      	mov	r5, r0
 8011350:	2900      	cmp	r1, #0
 8011352:	d045      	beq.n	80113e0 <_free_r+0x94>
 8011354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011358:	1f0c      	subs	r4, r1, #4
 801135a:	2b00      	cmp	r3, #0
 801135c:	bfb8      	it	lt
 801135e:	18e4      	addlt	r4, r4, r3
 8011360:	f000 fdb6 	bl	8011ed0 <__malloc_lock>
 8011364:	4a1f      	ldr	r2, [pc, #124]	; (80113e4 <_free_r+0x98>)
 8011366:	6813      	ldr	r3, [r2, #0]
 8011368:	4610      	mov	r0, r2
 801136a:	b933      	cbnz	r3, 801137a <_free_r+0x2e>
 801136c:	6063      	str	r3, [r4, #4]
 801136e:	6014      	str	r4, [r2, #0]
 8011370:	4628      	mov	r0, r5
 8011372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011376:	f000 bdac 	b.w	8011ed2 <__malloc_unlock>
 801137a:	42a3      	cmp	r3, r4
 801137c:	d90c      	bls.n	8011398 <_free_r+0x4c>
 801137e:	6821      	ldr	r1, [r4, #0]
 8011380:	1862      	adds	r2, r4, r1
 8011382:	4293      	cmp	r3, r2
 8011384:	bf04      	itt	eq
 8011386:	681a      	ldreq	r2, [r3, #0]
 8011388:	685b      	ldreq	r3, [r3, #4]
 801138a:	6063      	str	r3, [r4, #4]
 801138c:	bf04      	itt	eq
 801138e:	1852      	addeq	r2, r2, r1
 8011390:	6022      	streq	r2, [r4, #0]
 8011392:	6004      	str	r4, [r0, #0]
 8011394:	e7ec      	b.n	8011370 <_free_r+0x24>
 8011396:	4613      	mov	r3, r2
 8011398:	685a      	ldr	r2, [r3, #4]
 801139a:	b10a      	cbz	r2, 80113a0 <_free_r+0x54>
 801139c:	42a2      	cmp	r2, r4
 801139e:	d9fa      	bls.n	8011396 <_free_r+0x4a>
 80113a0:	6819      	ldr	r1, [r3, #0]
 80113a2:	1858      	adds	r0, r3, r1
 80113a4:	42a0      	cmp	r0, r4
 80113a6:	d10b      	bne.n	80113c0 <_free_r+0x74>
 80113a8:	6820      	ldr	r0, [r4, #0]
 80113aa:	4401      	add	r1, r0
 80113ac:	1858      	adds	r0, r3, r1
 80113ae:	4282      	cmp	r2, r0
 80113b0:	6019      	str	r1, [r3, #0]
 80113b2:	d1dd      	bne.n	8011370 <_free_r+0x24>
 80113b4:	6810      	ldr	r0, [r2, #0]
 80113b6:	6852      	ldr	r2, [r2, #4]
 80113b8:	605a      	str	r2, [r3, #4]
 80113ba:	4401      	add	r1, r0
 80113bc:	6019      	str	r1, [r3, #0]
 80113be:	e7d7      	b.n	8011370 <_free_r+0x24>
 80113c0:	d902      	bls.n	80113c8 <_free_r+0x7c>
 80113c2:	230c      	movs	r3, #12
 80113c4:	602b      	str	r3, [r5, #0]
 80113c6:	e7d3      	b.n	8011370 <_free_r+0x24>
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	1821      	adds	r1, r4, r0
 80113cc:	428a      	cmp	r2, r1
 80113ce:	bf04      	itt	eq
 80113d0:	6811      	ldreq	r1, [r2, #0]
 80113d2:	6852      	ldreq	r2, [r2, #4]
 80113d4:	6062      	str	r2, [r4, #4]
 80113d6:	bf04      	itt	eq
 80113d8:	1809      	addeq	r1, r1, r0
 80113da:	6021      	streq	r1, [r4, #0]
 80113dc:	605c      	str	r4, [r3, #4]
 80113de:	e7c7      	b.n	8011370 <_free_r+0x24>
 80113e0:	bd38      	pop	{r3, r4, r5, pc}
 80113e2:	bf00      	nop
 80113e4:	200008f4 	.word	0x200008f4

080113e8 <_malloc_r>:
 80113e8:	b570      	push	{r4, r5, r6, lr}
 80113ea:	1ccd      	adds	r5, r1, #3
 80113ec:	f025 0503 	bic.w	r5, r5, #3
 80113f0:	3508      	adds	r5, #8
 80113f2:	2d0c      	cmp	r5, #12
 80113f4:	bf38      	it	cc
 80113f6:	250c      	movcc	r5, #12
 80113f8:	2d00      	cmp	r5, #0
 80113fa:	4606      	mov	r6, r0
 80113fc:	db01      	blt.n	8011402 <_malloc_r+0x1a>
 80113fe:	42a9      	cmp	r1, r5
 8011400:	d903      	bls.n	801140a <_malloc_r+0x22>
 8011402:	230c      	movs	r3, #12
 8011404:	6033      	str	r3, [r6, #0]
 8011406:	2000      	movs	r0, #0
 8011408:	bd70      	pop	{r4, r5, r6, pc}
 801140a:	f000 fd61 	bl	8011ed0 <__malloc_lock>
 801140e:	4a23      	ldr	r2, [pc, #140]	; (801149c <_malloc_r+0xb4>)
 8011410:	6814      	ldr	r4, [r2, #0]
 8011412:	4621      	mov	r1, r4
 8011414:	b991      	cbnz	r1, 801143c <_malloc_r+0x54>
 8011416:	4c22      	ldr	r4, [pc, #136]	; (80114a0 <_malloc_r+0xb8>)
 8011418:	6823      	ldr	r3, [r4, #0]
 801141a:	b91b      	cbnz	r3, 8011424 <_malloc_r+0x3c>
 801141c:	4630      	mov	r0, r6
 801141e:	f000 fb93 	bl	8011b48 <_sbrk_r>
 8011422:	6020      	str	r0, [r4, #0]
 8011424:	4629      	mov	r1, r5
 8011426:	4630      	mov	r0, r6
 8011428:	f000 fb8e 	bl	8011b48 <_sbrk_r>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d126      	bne.n	801147e <_malloc_r+0x96>
 8011430:	230c      	movs	r3, #12
 8011432:	6033      	str	r3, [r6, #0]
 8011434:	4630      	mov	r0, r6
 8011436:	f000 fd4c 	bl	8011ed2 <__malloc_unlock>
 801143a:	e7e4      	b.n	8011406 <_malloc_r+0x1e>
 801143c:	680b      	ldr	r3, [r1, #0]
 801143e:	1b5b      	subs	r3, r3, r5
 8011440:	d41a      	bmi.n	8011478 <_malloc_r+0x90>
 8011442:	2b0b      	cmp	r3, #11
 8011444:	d90f      	bls.n	8011466 <_malloc_r+0x7e>
 8011446:	600b      	str	r3, [r1, #0]
 8011448:	50cd      	str	r5, [r1, r3]
 801144a:	18cc      	adds	r4, r1, r3
 801144c:	4630      	mov	r0, r6
 801144e:	f000 fd40 	bl	8011ed2 <__malloc_unlock>
 8011452:	f104 000b 	add.w	r0, r4, #11
 8011456:	1d23      	adds	r3, r4, #4
 8011458:	f020 0007 	bic.w	r0, r0, #7
 801145c:	1ac3      	subs	r3, r0, r3
 801145e:	d01b      	beq.n	8011498 <_malloc_r+0xb0>
 8011460:	425a      	negs	r2, r3
 8011462:	50e2      	str	r2, [r4, r3]
 8011464:	bd70      	pop	{r4, r5, r6, pc}
 8011466:	428c      	cmp	r4, r1
 8011468:	bf0d      	iteet	eq
 801146a:	6863      	ldreq	r3, [r4, #4]
 801146c:	684b      	ldrne	r3, [r1, #4]
 801146e:	6063      	strne	r3, [r4, #4]
 8011470:	6013      	streq	r3, [r2, #0]
 8011472:	bf18      	it	ne
 8011474:	460c      	movne	r4, r1
 8011476:	e7e9      	b.n	801144c <_malloc_r+0x64>
 8011478:	460c      	mov	r4, r1
 801147a:	6849      	ldr	r1, [r1, #4]
 801147c:	e7ca      	b.n	8011414 <_malloc_r+0x2c>
 801147e:	1cc4      	adds	r4, r0, #3
 8011480:	f024 0403 	bic.w	r4, r4, #3
 8011484:	42a0      	cmp	r0, r4
 8011486:	d005      	beq.n	8011494 <_malloc_r+0xac>
 8011488:	1a21      	subs	r1, r4, r0
 801148a:	4630      	mov	r0, r6
 801148c:	f000 fb5c 	bl	8011b48 <_sbrk_r>
 8011490:	3001      	adds	r0, #1
 8011492:	d0cd      	beq.n	8011430 <_malloc_r+0x48>
 8011494:	6025      	str	r5, [r4, #0]
 8011496:	e7d9      	b.n	801144c <_malloc_r+0x64>
 8011498:	bd70      	pop	{r4, r5, r6, pc}
 801149a:	bf00      	nop
 801149c:	200008f4 	.word	0x200008f4
 80114a0:	200008f8 	.word	0x200008f8

080114a4 <__sfputc_r>:
 80114a4:	6893      	ldr	r3, [r2, #8]
 80114a6:	3b01      	subs	r3, #1
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	b410      	push	{r4}
 80114ac:	6093      	str	r3, [r2, #8]
 80114ae:	da09      	bge.n	80114c4 <__sfputc_r+0x20>
 80114b0:	6994      	ldr	r4, [r2, #24]
 80114b2:	42a3      	cmp	r3, r4
 80114b4:	db02      	blt.n	80114bc <__sfputc_r+0x18>
 80114b6:	b2cb      	uxtb	r3, r1
 80114b8:	2b0a      	cmp	r3, #10
 80114ba:	d103      	bne.n	80114c4 <__sfputc_r+0x20>
 80114bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114c0:	f000 bbd6 	b.w	8011c70 <__swbuf_r>
 80114c4:	6813      	ldr	r3, [r2, #0]
 80114c6:	1c58      	adds	r0, r3, #1
 80114c8:	6010      	str	r0, [r2, #0]
 80114ca:	7019      	strb	r1, [r3, #0]
 80114cc:	b2c8      	uxtb	r0, r1
 80114ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114d2:	4770      	bx	lr

080114d4 <__sfputs_r>:
 80114d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d6:	4606      	mov	r6, r0
 80114d8:	460f      	mov	r7, r1
 80114da:	4614      	mov	r4, r2
 80114dc:	18d5      	adds	r5, r2, r3
 80114de:	42ac      	cmp	r4, r5
 80114e0:	d101      	bne.n	80114e6 <__sfputs_r+0x12>
 80114e2:	2000      	movs	r0, #0
 80114e4:	e007      	b.n	80114f6 <__sfputs_r+0x22>
 80114e6:	463a      	mov	r2, r7
 80114e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ec:	4630      	mov	r0, r6
 80114ee:	f7ff ffd9 	bl	80114a4 <__sfputc_r>
 80114f2:	1c43      	adds	r3, r0, #1
 80114f4:	d1f3      	bne.n	80114de <__sfputs_r+0xa>
 80114f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080114f8 <_vfiprintf_r>:
 80114f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114fc:	b09d      	sub	sp, #116	; 0x74
 80114fe:	460c      	mov	r4, r1
 8011500:	4617      	mov	r7, r2
 8011502:	9303      	str	r3, [sp, #12]
 8011504:	4606      	mov	r6, r0
 8011506:	b118      	cbz	r0, 8011510 <_vfiprintf_r+0x18>
 8011508:	6983      	ldr	r3, [r0, #24]
 801150a:	b90b      	cbnz	r3, 8011510 <_vfiprintf_r+0x18>
 801150c:	f7ff fdf0 	bl	80110f0 <__sinit>
 8011510:	4b7c      	ldr	r3, [pc, #496]	; (8011704 <_vfiprintf_r+0x20c>)
 8011512:	429c      	cmp	r4, r3
 8011514:	d157      	bne.n	80115c6 <_vfiprintf_r+0xce>
 8011516:	6874      	ldr	r4, [r6, #4]
 8011518:	89a3      	ldrh	r3, [r4, #12]
 801151a:	0718      	lsls	r0, r3, #28
 801151c:	d55d      	bpl.n	80115da <_vfiprintf_r+0xe2>
 801151e:	6923      	ldr	r3, [r4, #16]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d05a      	beq.n	80115da <_vfiprintf_r+0xe2>
 8011524:	2300      	movs	r3, #0
 8011526:	9309      	str	r3, [sp, #36]	; 0x24
 8011528:	2320      	movs	r3, #32
 801152a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801152e:	2330      	movs	r3, #48	; 0x30
 8011530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011534:	f04f 0b01 	mov.w	fp, #1
 8011538:	46b8      	mov	r8, r7
 801153a:	4645      	mov	r5, r8
 801153c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011540:	2b00      	cmp	r3, #0
 8011542:	d155      	bne.n	80115f0 <_vfiprintf_r+0xf8>
 8011544:	ebb8 0a07 	subs.w	sl, r8, r7
 8011548:	d00b      	beq.n	8011562 <_vfiprintf_r+0x6a>
 801154a:	4653      	mov	r3, sl
 801154c:	463a      	mov	r2, r7
 801154e:	4621      	mov	r1, r4
 8011550:	4630      	mov	r0, r6
 8011552:	f7ff ffbf 	bl	80114d4 <__sfputs_r>
 8011556:	3001      	adds	r0, #1
 8011558:	f000 80c4 	beq.w	80116e4 <_vfiprintf_r+0x1ec>
 801155c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801155e:	4453      	add	r3, sl
 8011560:	9309      	str	r3, [sp, #36]	; 0x24
 8011562:	f898 3000 	ldrb.w	r3, [r8]
 8011566:	2b00      	cmp	r3, #0
 8011568:	f000 80bc 	beq.w	80116e4 <_vfiprintf_r+0x1ec>
 801156c:	2300      	movs	r3, #0
 801156e:	f04f 32ff 	mov.w	r2, #4294967295
 8011572:	9304      	str	r3, [sp, #16]
 8011574:	9307      	str	r3, [sp, #28]
 8011576:	9205      	str	r2, [sp, #20]
 8011578:	9306      	str	r3, [sp, #24]
 801157a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801157e:	931a      	str	r3, [sp, #104]	; 0x68
 8011580:	2205      	movs	r2, #5
 8011582:	7829      	ldrb	r1, [r5, #0]
 8011584:	4860      	ldr	r0, [pc, #384]	; (8011708 <_vfiprintf_r+0x210>)
 8011586:	f7ee fe2b 	bl	80001e0 <memchr>
 801158a:	f105 0801 	add.w	r8, r5, #1
 801158e:	9b04      	ldr	r3, [sp, #16]
 8011590:	2800      	cmp	r0, #0
 8011592:	d131      	bne.n	80115f8 <_vfiprintf_r+0x100>
 8011594:	06d9      	lsls	r1, r3, #27
 8011596:	bf44      	itt	mi
 8011598:	2220      	movmi	r2, #32
 801159a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801159e:	071a      	lsls	r2, r3, #28
 80115a0:	bf44      	itt	mi
 80115a2:	222b      	movmi	r2, #43	; 0x2b
 80115a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80115a8:	782a      	ldrb	r2, [r5, #0]
 80115aa:	2a2a      	cmp	r2, #42	; 0x2a
 80115ac:	d02c      	beq.n	8011608 <_vfiprintf_r+0x110>
 80115ae:	9a07      	ldr	r2, [sp, #28]
 80115b0:	2100      	movs	r1, #0
 80115b2:	200a      	movs	r0, #10
 80115b4:	46a8      	mov	r8, r5
 80115b6:	3501      	adds	r5, #1
 80115b8:	f898 3000 	ldrb.w	r3, [r8]
 80115bc:	3b30      	subs	r3, #48	; 0x30
 80115be:	2b09      	cmp	r3, #9
 80115c0:	d96d      	bls.n	801169e <_vfiprintf_r+0x1a6>
 80115c2:	b371      	cbz	r1, 8011622 <_vfiprintf_r+0x12a>
 80115c4:	e026      	b.n	8011614 <_vfiprintf_r+0x11c>
 80115c6:	4b51      	ldr	r3, [pc, #324]	; (801170c <_vfiprintf_r+0x214>)
 80115c8:	429c      	cmp	r4, r3
 80115ca:	d101      	bne.n	80115d0 <_vfiprintf_r+0xd8>
 80115cc:	68b4      	ldr	r4, [r6, #8]
 80115ce:	e7a3      	b.n	8011518 <_vfiprintf_r+0x20>
 80115d0:	4b4f      	ldr	r3, [pc, #316]	; (8011710 <_vfiprintf_r+0x218>)
 80115d2:	429c      	cmp	r4, r3
 80115d4:	bf08      	it	eq
 80115d6:	68f4      	ldreq	r4, [r6, #12]
 80115d8:	e79e      	b.n	8011518 <_vfiprintf_r+0x20>
 80115da:	4621      	mov	r1, r4
 80115dc:	4630      	mov	r0, r6
 80115de:	f000 fbab 	bl	8011d38 <__swsetup_r>
 80115e2:	2800      	cmp	r0, #0
 80115e4:	d09e      	beq.n	8011524 <_vfiprintf_r+0x2c>
 80115e6:	f04f 30ff 	mov.w	r0, #4294967295
 80115ea:	b01d      	add	sp, #116	; 0x74
 80115ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f0:	2b25      	cmp	r3, #37	; 0x25
 80115f2:	d0a7      	beq.n	8011544 <_vfiprintf_r+0x4c>
 80115f4:	46a8      	mov	r8, r5
 80115f6:	e7a0      	b.n	801153a <_vfiprintf_r+0x42>
 80115f8:	4a43      	ldr	r2, [pc, #268]	; (8011708 <_vfiprintf_r+0x210>)
 80115fa:	1a80      	subs	r0, r0, r2
 80115fc:	fa0b f000 	lsl.w	r0, fp, r0
 8011600:	4318      	orrs	r0, r3
 8011602:	9004      	str	r0, [sp, #16]
 8011604:	4645      	mov	r5, r8
 8011606:	e7bb      	b.n	8011580 <_vfiprintf_r+0x88>
 8011608:	9a03      	ldr	r2, [sp, #12]
 801160a:	1d11      	adds	r1, r2, #4
 801160c:	6812      	ldr	r2, [r2, #0]
 801160e:	9103      	str	r1, [sp, #12]
 8011610:	2a00      	cmp	r2, #0
 8011612:	db01      	blt.n	8011618 <_vfiprintf_r+0x120>
 8011614:	9207      	str	r2, [sp, #28]
 8011616:	e004      	b.n	8011622 <_vfiprintf_r+0x12a>
 8011618:	4252      	negs	r2, r2
 801161a:	f043 0302 	orr.w	r3, r3, #2
 801161e:	9207      	str	r2, [sp, #28]
 8011620:	9304      	str	r3, [sp, #16]
 8011622:	f898 3000 	ldrb.w	r3, [r8]
 8011626:	2b2e      	cmp	r3, #46	; 0x2e
 8011628:	d110      	bne.n	801164c <_vfiprintf_r+0x154>
 801162a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801162e:	2b2a      	cmp	r3, #42	; 0x2a
 8011630:	f108 0101 	add.w	r1, r8, #1
 8011634:	d137      	bne.n	80116a6 <_vfiprintf_r+0x1ae>
 8011636:	9b03      	ldr	r3, [sp, #12]
 8011638:	1d1a      	adds	r2, r3, #4
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	9203      	str	r2, [sp, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	bfb8      	it	lt
 8011642:	f04f 33ff 	movlt.w	r3, #4294967295
 8011646:	f108 0802 	add.w	r8, r8, #2
 801164a:	9305      	str	r3, [sp, #20]
 801164c:	4d31      	ldr	r5, [pc, #196]	; (8011714 <_vfiprintf_r+0x21c>)
 801164e:	f898 1000 	ldrb.w	r1, [r8]
 8011652:	2203      	movs	r2, #3
 8011654:	4628      	mov	r0, r5
 8011656:	f7ee fdc3 	bl	80001e0 <memchr>
 801165a:	b140      	cbz	r0, 801166e <_vfiprintf_r+0x176>
 801165c:	2340      	movs	r3, #64	; 0x40
 801165e:	1b40      	subs	r0, r0, r5
 8011660:	fa03 f000 	lsl.w	r0, r3, r0
 8011664:	9b04      	ldr	r3, [sp, #16]
 8011666:	4303      	orrs	r3, r0
 8011668:	9304      	str	r3, [sp, #16]
 801166a:	f108 0801 	add.w	r8, r8, #1
 801166e:	f898 1000 	ldrb.w	r1, [r8]
 8011672:	4829      	ldr	r0, [pc, #164]	; (8011718 <_vfiprintf_r+0x220>)
 8011674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011678:	2206      	movs	r2, #6
 801167a:	f108 0701 	add.w	r7, r8, #1
 801167e:	f7ee fdaf 	bl	80001e0 <memchr>
 8011682:	2800      	cmp	r0, #0
 8011684:	d034      	beq.n	80116f0 <_vfiprintf_r+0x1f8>
 8011686:	4b25      	ldr	r3, [pc, #148]	; (801171c <_vfiprintf_r+0x224>)
 8011688:	bb03      	cbnz	r3, 80116cc <_vfiprintf_r+0x1d4>
 801168a:	9b03      	ldr	r3, [sp, #12]
 801168c:	3307      	adds	r3, #7
 801168e:	f023 0307 	bic.w	r3, r3, #7
 8011692:	3308      	adds	r3, #8
 8011694:	9303      	str	r3, [sp, #12]
 8011696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011698:	444b      	add	r3, r9
 801169a:	9309      	str	r3, [sp, #36]	; 0x24
 801169c:	e74c      	b.n	8011538 <_vfiprintf_r+0x40>
 801169e:	fb00 3202 	mla	r2, r0, r2, r3
 80116a2:	2101      	movs	r1, #1
 80116a4:	e786      	b.n	80115b4 <_vfiprintf_r+0xbc>
 80116a6:	2300      	movs	r3, #0
 80116a8:	9305      	str	r3, [sp, #20]
 80116aa:	4618      	mov	r0, r3
 80116ac:	250a      	movs	r5, #10
 80116ae:	4688      	mov	r8, r1
 80116b0:	3101      	adds	r1, #1
 80116b2:	f898 2000 	ldrb.w	r2, [r8]
 80116b6:	3a30      	subs	r2, #48	; 0x30
 80116b8:	2a09      	cmp	r2, #9
 80116ba:	d903      	bls.n	80116c4 <_vfiprintf_r+0x1cc>
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d0c5      	beq.n	801164c <_vfiprintf_r+0x154>
 80116c0:	9005      	str	r0, [sp, #20]
 80116c2:	e7c3      	b.n	801164c <_vfiprintf_r+0x154>
 80116c4:	fb05 2000 	mla	r0, r5, r0, r2
 80116c8:	2301      	movs	r3, #1
 80116ca:	e7f0      	b.n	80116ae <_vfiprintf_r+0x1b6>
 80116cc:	ab03      	add	r3, sp, #12
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	4622      	mov	r2, r4
 80116d2:	4b13      	ldr	r3, [pc, #76]	; (8011720 <_vfiprintf_r+0x228>)
 80116d4:	a904      	add	r1, sp, #16
 80116d6:	4630      	mov	r0, r6
 80116d8:	f3af 8000 	nop.w
 80116dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80116e0:	4681      	mov	r9, r0
 80116e2:	d1d8      	bne.n	8011696 <_vfiprintf_r+0x19e>
 80116e4:	89a3      	ldrh	r3, [r4, #12]
 80116e6:	065b      	lsls	r3, r3, #25
 80116e8:	f53f af7d 	bmi.w	80115e6 <_vfiprintf_r+0xee>
 80116ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116ee:	e77c      	b.n	80115ea <_vfiprintf_r+0xf2>
 80116f0:	ab03      	add	r3, sp, #12
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	4622      	mov	r2, r4
 80116f6:	4b0a      	ldr	r3, [pc, #40]	; (8011720 <_vfiprintf_r+0x228>)
 80116f8:	a904      	add	r1, sp, #16
 80116fa:	4630      	mov	r0, r6
 80116fc:	f000 f888 	bl	8011810 <_printf_i>
 8011700:	e7ec      	b.n	80116dc <_vfiprintf_r+0x1e4>
 8011702:	bf00      	nop
 8011704:	08012810 	.word	0x08012810
 8011708:	08012854 	.word	0x08012854
 801170c:	08012830 	.word	0x08012830
 8011710:	080127f0 	.word	0x080127f0
 8011714:	0801285a 	.word	0x0801285a
 8011718:	0801285e 	.word	0x0801285e
 801171c:	00000000 	.word	0x00000000
 8011720:	080114d5 	.word	0x080114d5

08011724 <_printf_common>:
 8011724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011728:	4691      	mov	r9, r2
 801172a:	461f      	mov	r7, r3
 801172c:	688a      	ldr	r2, [r1, #8]
 801172e:	690b      	ldr	r3, [r1, #16]
 8011730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011734:	4293      	cmp	r3, r2
 8011736:	bfb8      	it	lt
 8011738:	4613      	movlt	r3, r2
 801173a:	f8c9 3000 	str.w	r3, [r9]
 801173e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011742:	4606      	mov	r6, r0
 8011744:	460c      	mov	r4, r1
 8011746:	b112      	cbz	r2, 801174e <_printf_common+0x2a>
 8011748:	3301      	adds	r3, #1
 801174a:	f8c9 3000 	str.w	r3, [r9]
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	0699      	lsls	r1, r3, #26
 8011752:	bf42      	ittt	mi
 8011754:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011758:	3302      	addmi	r3, #2
 801175a:	f8c9 3000 	strmi.w	r3, [r9]
 801175e:	6825      	ldr	r5, [r4, #0]
 8011760:	f015 0506 	ands.w	r5, r5, #6
 8011764:	d107      	bne.n	8011776 <_printf_common+0x52>
 8011766:	f104 0a19 	add.w	sl, r4, #25
 801176a:	68e3      	ldr	r3, [r4, #12]
 801176c:	f8d9 2000 	ldr.w	r2, [r9]
 8011770:	1a9b      	subs	r3, r3, r2
 8011772:	429d      	cmp	r5, r3
 8011774:	db29      	blt.n	80117ca <_printf_common+0xa6>
 8011776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801177a:	6822      	ldr	r2, [r4, #0]
 801177c:	3300      	adds	r3, #0
 801177e:	bf18      	it	ne
 8011780:	2301      	movne	r3, #1
 8011782:	0692      	lsls	r2, r2, #26
 8011784:	d42e      	bmi.n	80117e4 <_printf_common+0xc0>
 8011786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801178a:	4639      	mov	r1, r7
 801178c:	4630      	mov	r0, r6
 801178e:	47c0      	blx	r8
 8011790:	3001      	adds	r0, #1
 8011792:	d021      	beq.n	80117d8 <_printf_common+0xb4>
 8011794:	6823      	ldr	r3, [r4, #0]
 8011796:	68e5      	ldr	r5, [r4, #12]
 8011798:	f8d9 2000 	ldr.w	r2, [r9]
 801179c:	f003 0306 	and.w	r3, r3, #6
 80117a0:	2b04      	cmp	r3, #4
 80117a2:	bf08      	it	eq
 80117a4:	1aad      	subeq	r5, r5, r2
 80117a6:	68a3      	ldr	r3, [r4, #8]
 80117a8:	6922      	ldr	r2, [r4, #16]
 80117aa:	bf0c      	ite	eq
 80117ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117b0:	2500      	movne	r5, #0
 80117b2:	4293      	cmp	r3, r2
 80117b4:	bfc4      	itt	gt
 80117b6:	1a9b      	subgt	r3, r3, r2
 80117b8:	18ed      	addgt	r5, r5, r3
 80117ba:	f04f 0900 	mov.w	r9, #0
 80117be:	341a      	adds	r4, #26
 80117c0:	454d      	cmp	r5, r9
 80117c2:	d11b      	bne.n	80117fc <_printf_common+0xd8>
 80117c4:	2000      	movs	r0, #0
 80117c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ca:	2301      	movs	r3, #1
 80117cc:	4652      	mov	r2, sl
 80117ce:	4639      	mov	r1, r7
 80117d0:	4630      	mov	r0, r6
 80117d2:	47c0      	blx	r8
 80117d4:	3001      	adds	r0, #1
 80117d6:	d103      	bne.n	80117e0 <_printf_common+0xbc>
 80117d8:	f04f 30ff 	mov.w	r0, #4294967295
 80117dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e0:	3501      	adds	r5, #1
 80117e2:	e7c2      	b.n	801176a <_printf_common+0x46>
 80117e4:	18e1      	adds	r1, r4, r3
 80117e6:	1c5a      	adds	r2, r3, #1
 80117e8:	2030      	movs	r0, #48	; 0x30
 80117ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117ee:	4422      	add	r2, r4
 80117f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117f8:	3302      	adds	r3, #2
 80117fa:	e7c4      	b.n	8011786 <_printf_common+0x62>
 80117fc:	2301      	movs	r3, #1
 80117fe:	4622      	mov	r2, r4
 8011800:	4639      	mov	r1, r7
 8011802:	4630      	mov	r0, r6
 8011804:	47c0      	blx	r8
 8011806:	3001      	adds	r0, #1
 8011808:	d0e6      	beq.n	80117d8 <_printf_common+0xb4>
 801180a:	f109 0901 	add.w	r9, r9, #1
 801180e:	e7d7      	b.n	80117c0 <_printf_common+0x9c>

08011810 <_printf_i>:
 8011810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011814:	4617      	mov	r7, r2
 8011816:	7e0a      	ldrb	r2, [r1, #24]
 8011818:	b085      	sub	sp, #20
 801181a:	2a6e      	cmp	r2, #110	; 0x6e
 801181c:	4698      	mov	r8, r3
 801181e:	4606      	mov	r6, r0
 8011820:	460c      	mov	r4, r1
 8011822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011824:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8011828:	f000 80bc 	beq.w	80119a4 <_printf_i+0x194>
 801182c:	d81a      	bhi.n	8011864 <_printf_i+0x54>
 801182e:	2a63      	cmp	r2, #99	; 0x63
 8011830:	d02e      	beq.n	8011890 <_printf_i+0x80>
 8011832:	d80a      	bhi.n	801184a <_printf_i+0x3a>
 8011834:	2a00      	cmp	r2, #0
 8011836:	f000 80c8 	beq.w	80119ca <_printf_i+0x1ba>
 801183a:	2a58      	cmp	r2, #88	; 0x58
 801183c:	f000 808a 	beq.w	8011954 <_printf_i+0x144>
 8011840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011844:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8011848:	e02a      	b.n	80118a0 <_printf_i+0x90>
 801184a:	2a64      	cmp	r2, #100	; 0x64
 801184c:	d001      	beq.n	8011852 <_printf_i+0x42>
 801184e:	2a69      	cmp	r2, #105	; 0x69
 8011850:	d1f6      	bne.n	8011840 <_printf_i+0x30>
 8011852:	6821      	ldr	r1, [r4, #0]
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	f011 0f80 	tst.w	r1, #128	; 0x80
 801185a:	d023      	beq.n	80118a4 <_printf_i+0x94>
 801185c:	1d11      	adds	r1, r2, #4
 801185e:	6019      	str	r1, [r3, #0]
 8011860:	6813      	ldr	r3, [r2, #0]
 8011862:	e027      	b.n	80118b4 <_printf_i+0xa4>
 8011864:	2a73      	cmp	r2, #115	; 0x73
 8011866:	f000 80b4 	beq.w	80119d2 <_printf_i+0x1c2>
 801186a:	d808      	bhi.n	801187e <_printf_i+0x6e>
 801186c:	2a6f      	cmp	r2, #111	; 0x6f
 801186e:	d02a      	beq.n	80118c6 <_printf_i+0xb6>
 8011870:	2a70      	cmp	r2, #112	; 0x70
 8011872:	d1e5      	bne.n	8011840 <_printf_i+0x30>
 8011874:	680a      	ldr	r2, [r1, #0]
 8011876:	f042 0220 	orr.w	r2, r2, #32
 801187a:	600a      	str	r2, [r1, #0]
 801187c:	e003      	b.n	8011886 <_printf_i+0x76>
 801187e:	2a75      	cmp	r2, #117	; 0x75
 8011880:	d021      	beq.n	80118c6 <_printf_i+0xb6>
 8011882:	2a78      	cmp	r2, #120	; 0x78
 8011884:	d1dc      	bne.n	8011840 <_printf_i+0x30>
 8011886:	2278      	movs	r2, #120	; 0x78
 8011888:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801188c:	496e      	ldr	r1, [pc, #440]	; (8011a48 <_printf_i+0x238>)
 801188e:	e064      	b.n	801195a <_printf_i+0x14a>
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8011896:	1d11      	adds	r1, r2, #4
 8011898:	6019      	str	r1, [r3, #0]
 801189a:	6813      	ldr	r3, [r2, #0]
 801189c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80118a0:	2301      	movs	r3, #1
 80118a2:	e0a3      	b.n	80119ec <_printf_i+0x1dc>
 80118a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80118a8:	f102 0104 	add.w	r1, r2, #4
 80118ac:	6019      	str	r1, [r3, #0]
 80118ae:	d0d7      	beq.n	8011860 <_printf_i+0x50>
 80118b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	da03      	bge.n	80118c0 <_printf_i+0xb0>
 80118b8:	222d      	movs	r2, #45	; 0x2d
 80118ba:	425b      	negs	r3, r3
 80118bc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80118c0:	4962      	ldr	r1, [pc, #392]	; (8011a4c <_printf_i+0x23c>)
 80118c2:	220a      	movs	r2, #10
 80118c4:	e017      	b.n	80118f6 <_printf_i+0xe6>
 80118c6:	6820      	ldr	r0, [r4, #0]
 80118c8:	6819      	ldr	r1, [r3, #0]
 80118ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80118ce:	d003      	beq.n	80118d8 <_printf_i+0xc8>
 80118d0:	1d08      	adds	r0, r1, #4
 80118d2:	6018      	str	r0, [r3, #0]
 80118d4:	680b      	ldr	r3, [r1, #0]
 80118d6:	e006      	b.n	80118e6 <_printf_i+0xd6>
 80118d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80118dc:	f101 0004 	add.w	r0, r1, #4
 80118e0:	6018      	str	r0, [r3, #0]
 80118e2:	d0f7      	beq.n	80118d4 <_printf_i+0xc4>
 80118e4:	880b      	ldrh	r3, [r1, #0]
 80118e6:	4959      	ldr	r1, [pc, #356]	; (8011a4c <_printf_i+0x23c>)
 80118e8:	2a6f      	cmp	r2, #111	; 0x6f
 80118ea:	bf14      	ite	ne
 80118ec:	220a      	movne	r2, #10
 80118ee:	2208      	moveq	r2, #8
 80118f0:	2000      	movs	r0, #0
 80118f2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80118f6:	6865      	ldr	r5, [r4, #4]
 80118f8:	60a5      	str	r5, [r4, #8]
 80118fa:	2d00      	cmp	r5, #0
 80118fc:	f2c0 809c 	blt.w	8011a38 <_printf_i+0x228>
 8011900:	6820      	ldr	r0, [r4, #0]
 8011902:	f020 0004 	bic.w	r0, r0, #4
 8011906:	6020      	str	r0, [r4, #0]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d13f      	bne.n	801198c <_printf_i+0x17c>
 801190c:	2d00      	cmp	r5, #0
 801190e:	f040 8095 	bne.w	8011a3c <_printf_i+0x22c>
 8011912:	4675      	mov	r5, lr
 8011914:	2a08      	cmp	r2, #8
 8011916:	d10b      	bne.n	8011930 <_printf_i+0x120>
 8011918:	6823      	ldr	r3, [r4, #0]
 801191a:	07da      	lsls	r2, r3, #31
 801191c:	d508      	bpl.n	8011930 <_printf_i+0x120>
 801191e:	6923      	ldr	r3, [r4, #16]
 8011920:	6862      	ldr	r2, [r4, #4]
 8011922:	429a      	cmp	r2, r3
 8011924:	bfde      	ittt	le
 8011926:	2330      	movle	r3, #48	; 0x30
 8011928:	f805 3c01 	strble.w	r3, [r5, #-1]
 801192c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011930:	ebae 0305 	sub.w	r3, lr, r5
 8011934:	6123      	str	r3, [r4, #16]
 8011936:	f8cd 8000 	str.w	r8, [sp]
 801193a:	463b      	mov	r3, r7
 801193c:	aa03      	add	r2, sp, #12
 801193e:	4621      	mov	r1, r4
 8011940:	4630      	mov	r0, r6
 8011942:	f7ff feef 	bl	8011724 <_printf_common>
 8011946:	3001      	adds	r0, #1
 8011948:	d155      	bne.n	80119f6 <_printf_i+0x1e6>
 801194a:	f04f 30ff 	mov.w	r0, #4294967295
 801194e:	b005      	add	sp, #20
 8011950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011954:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8011958:	493c      	ldr	r1, [pc, #240]	; (8011a4c <_printf_i+0x23c>)
 801195a:	6822      	ldr	r2, [r4, #0]
 801195c:	6818      	ldr	r0, [r3, #0]
 801195e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8011962:	f100 0504 	add.w	r5, r0, #4
 8011966:	601d      	str	r5, [r3, #0]
 8011968:	d001      	beq.n	801196e <_printf_i+0x15e>
 801196a:	6803      	ldr	r3, [r0, #0]
 801196c:	e002      	b.n	8011974 <_printf_i+0x164>
 801196e:	0655      	lsls	r5, r2, #25
 8011970:	d5fb      	bpl.n	801196a <_printf_i+0x15a>
 8011972:	8803      	ldrh	r3, [r0, #0]
 8011974:	07d0      	lsls	r0, r2, #31
 8011976:	bf44      	itt	mi
 8011978:	f042 0220 	orrmi.w	r2, r2, #32
 801197c:	6022      	strmi	r2, [r4, #0]
 801197e:	b91b      	cbnz	r3, 8011988 <_printf_i+0x178>
 8011980:	6822      	ldr	r2, [r4, #0]
 8011982:	f022 0220 	bic.w	r2, r2, #32
 8011986:	6022      	str	r2, [r4, #0]
 8011988:	2210      	movs	r2, #16
 801198a:	e7b1      	b.n	80118f0 <_printf_i+0xe0>
 801198c:	4675      	mov	r5, lr
 801198e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011992:	fb02 3310 	mls	r3, r2, r0, r3
 8011996:	5ccb      	ldrb	r3, [r1, r3]
 8011998:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801199c:	4603      	mov	r3, r0
 801199e:	2800      	cmp	r0, #0
 80119a0:	d1f5      	bne.n	801198e <_printf_i+0x17e>
 80119a2:	e7b7      	b.n	8011914 <_printf_i+0x104>
 80119a4:	6808      	ldr	r0, [r1, #0]
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	6949      	ldr	r1, [r1, #20]
 80119aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80119ae:	d004      	beq.n	80119ba <_printf_i+0x1aa>
 80119b0:	1d10      	adds	r0, r2, #4
 80119b2:	6018      	str	r0, [r3, #0]
 80119b4:	6813      	ldr	r3, [r2, #0]
 80119b6:	6019      	str	r1, [r3, #0]
 80119b8:	e007      	b.n	80119ca <_printf_i+0x1ba>
 80119ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80119be:	f102 0004 	add.w	r0, r2, #4
 80119c2:	6018      	str	r0, [r3, #0]
 80119c4:	6813      	ldr	r3, [r2, #0]
 80119c6:	d0f6      	beq.n	80119b6 <_printf_i+0x1a6>
 80119c8:	8019      	strh	r1, [r3, #0]
 80119ca:	2300      	movs	r3, #0
 80119cc:	6123      	str	r3, [r4, #16]
 80119ce:	4675      	mov	r5, lr
 80119d0:	e7b1      	b.n	8011936 <_printf_i+0x126>
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	1d11      	adds	r1, r2, #4
 80119d6:	6019      	str	r1, [r3, #0]
 80119d8:	6815      	ldr	r5, [r2, #0]
 80119da:	6862      	ldr	r2, [r4, #4]
 80119dc:	2100      	movs	r1, #0
 80119de:	4628      	mov	r0, r5
 80119e0:	f7ee fbfe 	bl	80001e0 <memchr>
 80119e4:	b108      	cbz	r0, 80119ea <_printf_i+0x1da>
 80119e6:	1b40      	subs	r0, r0, r5
 80119e8:	6060      	str	r0, [r4, #4]
 80119ea:	6863      	ldr	r3, [r4, #4]
 80119ec:	6123      	str	r3, [r4, #16]
 80119ee:	2300      	movs	r3, #0
 80119f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119f4:	e79f      	b.n	8011936 <_printf_i+0x126>
 80119f6:	6923      	ldr	r3, [r4, #16]
 80119f8:	462a      	mov	r2, r5
 80119fa:	4639      	mov	r1, r7
 80119fc:	4630      	mov	r0, r6
 80119fe:	47c0      	blx	r8
 8011a00:	3001      	adds	r0, #1
 8011a02:	d0a2      	beq.n	801194a <_printf_i+0x13a>
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	079b      	lsls	r3, r3, #30
 8011a08:	d507      	bpl.n	8011a1a <_printf_i+0x20a>
 8011a0a:	2500      	movs	r5, #0
 8011a0c:	f104 0919 	add.w	r9, r4, #25
 8011a10:	68e3      	ldr	r3, [r4, #12]
 8011a12:	9a03      	ldr	r2, [sp, #12]
 8011a14:	1a9b      	subs	r3, r3, r2
 8011a16:	429d      	cmp	r5, r3
 8011a18:	db05      	blt.n	8011a26 <_printf_i+0x216>
 8011a1a:	68e0      	ldr	r0, [r4, #12]
 8011a1c:	9b03      	ldr	r3, [sp, #12]
 8011a1e:	4298      	cmp	r0, r3
 8011a20:	bfb8      	it	lt
 8011a22:	4618      	movlt	r0, r3
 8011a24:	e793      	b.n	801194e <_printf_i+0x13e>
 8011a26:	2301      	movs	r3, #1
 8011a28:	464a      	mov	r2, r9
 8011a2a:	4639      	mov	r1, r7
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	47c0      	blx	r8
 8011a30:	3001      	adds	r0, #1
 8011a32:	d08a      	beq.n	801194a <_printf_i+0x13a>
 8011a34:	3501      	adds	r5, #1
 8011a36:	e7eb      	b.n	8011a10 <_printf_i+0x200>
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d1a7      	bne.n	801198c <_printf_i+0x17c>
 8011a3c:	780b      	ldrb	r3, [r1, #0]
 8011a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a46:	e765      	b.n	8011914 <_printf_i+0x104>
 8011a48:	08012876 	.word	0x08012876
 8011a4c:	08012865 	.word	0x08012865

08011a50 <iprintf>:
 8011a50:	b40f      	push	{r0, r1, r2, r3}
 8011a52:	4b0a      	ldr	r3, [pc, #40]	; (8011a7c <iprintf+0x2c>)
 8011a54:	b513      	push	{r0, r1, r4, lr}
 8011a56:	681c      	ldr	r4, [r3, #0]
 8011a58:	b124      	cbz	r4, 8011a64 <iprintf+0x14>
 8011a5a:	69a3      	ldr	r3, [r4, #24]
 8011a5c:	b913      	cbnz	r3, 8011a64 <iprintf+0x14>
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f7ff fb46 	bl	80110f0 <__sinit>
 8011a64:	ab05      	add	r3, sp, #20
 8011a66:	9a04      	ldr	r2, [sp, #16]
 8011a68:	68a1      	ldr	r1, [r4, #8]
 8011a6a:	9301      	str	r3, [sp, #4]
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f7ff fd43 	bl	80114f8 <_vfiprintf_r>
 8011a72:	b002      	add	sp, #8
 8011a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a78:	b004      	add	sp, #16
 8011a7a:	4770      	bx	lr
 8011a7c:	200002fc 	.word	0x200002fc

08011a80 <_puts_r>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	460e      	mov	r6, r1
 8011a84:	4605      	mov	r5, r0
 8011a86:	b118      	cbz	r0, 8011a90 <_puts_r+0x10>
 8011a88:	6983      	ldr	r3, [r0, #24]
 8011a8a:	b90b      	cbnz	r3, 8011a90 <_puts_r+0x10>
 8011a8c:	f7ff fb30 	bl	80110f0 <__sinit>
 8011a90:	69ab      	ldr	r3, [r5, #24]
 8011a92:	68ac      	ldr	r4, [r5, #8]
 8011a94:	b913      	cbnz	r3, 8011a9c <_puts_r+0x1c>
 8011a96:	4628      	mov	r0, r5
 8011a98:	f7ff fb2a 	bl	80110f0 <__sinit>
 8011a9c:	4b23      	ldr	r3, [pc, #140]	; (8011b2c <_puts_r+0xac>)
 8011a9e:	429c      	cmp	r4, r3
 8011aa0:	d117      	bne.n	8011ad2 <_puts_r+0x52>
 8011aa2:	686c      	ldr	r4, [r5, #4]
 8011aa4:	89a3      	ldrh	r3, [r4, #12]
 8011aa6:	071b      	lsls	r3, r3, #28
 8011aa8:	d51d      	bpl.n	8011ae6 <_puts_r+0x66>
 8011aaa:	6923      	ldr	r3, [r4, #16]
 8011aac:	b1db      	cbz	r3, 8011ae6 <_puts_r+0x66>
 8011aae:	3e01      	subs	r6, #1
 8011ab0:	68a3      	ldr	r3, [r4, #8]
 8011ab2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	60a3      	str	r3, [r4, #8]
 8011aba:	b9e9      	cbnz	r1, 8011af8 <_puts_r+0x78>
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	da2e      	bge.n	8011b1e <_puts_r+0x9e>
 8011ac0:	4622      	mov	r2, r4
 8011ac2:	210a      	movs	r1, #10
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f000 f8d3 	bl	8011c70 <__swbuf_r>
 8011aca:	3001      	adds	r0, #1
 8011acc:	d011      	beq.n	8011af2 <_puts_r+0x72>
 8011ace:	200a      	movs	r0, #10
 8011ad0:	bd70      	pop	{r4, r5, r6, pc}
 8011ad2:	4b17      	ldr	r3, [pc, #92]	; (8011b30 <_puts_r+0xb0>)
 8011ad4:	429c      	cmp	r4, r3
 8011ad6:	d101      	bne.n	8011adc <_puts_r+0x5c>
 8011ad8:	68ac      	ldr	r4, [r5, #8]
 8011ada:	e7e3      	b.n	8011aa4 <_puts_r+0x24>
 8011adc:	4b15      	ldr	r3, [pc, #84]	; (8011b34 <_puts_r+0xb4>)
 8011ade:	429c      	cmp	r4, r3
 8011ae0:	bf08      	it	eq
 8011ae2:	68ec      	ldreq	r4, [r5, #12]
 8011ae4:	e7de      	b.n	8011aa4 <_puts_r+0x24>
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	4628      	mov	r0, r5
 8011aea:	f000 f925 	bl	8011d38 <__swsetup_r>
 8011aee:	2800      	cmp	r0, #0
 8011af0:	d0dd      	beq.n	8011aae <_puts_r+0x2e>
 8011af2:	f04f 30ff 	mov.w	r0, #4294967295
 8011af6:	bd70      	pop	{r4, r5, r6, pc}
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	da04      	bge.n	8011b06 <_puts_r+0x86>
 8011afc:	69a2      	ldr	r2, [r4, #24]
 8011afe:	4293      	cmp	r3, r2
 8011b00:	db06      	blt.n	8011b10 <_puts_r+0x90>
 8011b02:	290a      	cmp	r1, #10
 8011b04:	d004      	beq.n	8011b10 <_puts_r+0x90>
 8011b06:	6823      	ldr	r3, [r4, #0]
 8011b08:	1c5a      	adds	r2, r3, #1
 8011b0a:	6022      	str	r2, [r4, #0]
 8011b0c:	7019      	strb	r1, [r3, #0]
 8011b0e:	e7cf      	b.n	8011ab0 <_puts_r+0x30>
 8011b10:	4622      	mov	r2, r4
 8011b12:	4628      	mov	r0, r5
 8011b14:	f000 f8ac 	bl	8011c70 <__swbuf_r>
 8011b18:	3001      	adds	r0, #1
 8011b1a:	d1c9      	bne.n	8011ab0 <_puts_r+0x30>
 8011b1c:	e7e9      	b.n	8011af2 <_puts_r+0x72>
 8011b1e:	6823      	ldr	r3, [r4, #0]
 8011b20:	200a      	movs	r0, #10
 8011b22:	1c5a      	adds	r2, r3, #1
 8011b24:	6022      	str	r2, [r4, #0]
 8011b26:	7018      	strb	r0, [r3, #0]
 8011b28:	bd70      	pop	{r4, r5, r6, pc}
 8011b2a:	bf00      	nop
 8011b2c:	08012810 	.word	0x08012810
 8011b30:	08012830 	.word	0x08012830
 8011b34:	080127f0 	.word	0x080127f0

08011b38 <puts>:
 8011b38:	4b02      	ldr	r3, [pc, #8]	; (8011b44 <puts+0xc>)
 8011b3a:	4601      	mov	r1, r0
 8011b3c:	6818      	ldr	r0, [r3, #0]
 8011b3e:	f7ff bf9f 	b.w	8011a80 <_puts_r>
 8011b42:	bf00      	nop
 8011b44:	200002fc 	.word	0x200002fc

08011b48 <_sbrk_r>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	4c06      	ldr	r4, [pc, #24]	; (8011b64 <_sbrk_r+0x1c>)
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	4605      	mov	r5, r0
 8011b50:	4608      	mov	r0, r1
 8011b52:	6023      	str	r3, [r4, #0]
 8011b54:	f000 fb78 	bl	8012248 <_sbrk>
 8011b58:	1c43      	adds	r3, r0, #1
 8011b5a:	d102      	bne.n	8011b62 <_sbrk_r+0x1a>
 8011b5c:	6823      	ldr	r3, [r4, #0]
 8011b5e:	b103      	cbz	r3, 8011b62 <_sbrk_r+0x1a>
 8011b60:	602b      	str	r3, [r5, #0]
 8011b62:	bd38      	pop	{r3, r4, r5, pc}
 8011b64:	20000e5c 	.word	0x20000e5c

08011b68 <siprintf>:
 8011b68:	b40e      	push	{r1, r2, r3}
 8011b6a:	b500      	push	{lr}
 8011b6c:	b09c      	sub	sp, #112	; 0x70
 8011b6e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011b72:	ab1d      	add	r3, sp, #116	; 0x74
 8011b74:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011b78:	9002      	str	r0, [sp, #8]
 8011b7a:	9006      	str	r0, [sp, #24]
 8011b7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b80:	480a      	ldr	r0, [pc, #40]	; (8011bac <siprintf+0x44>)
 8011b82:	9104      	str	r1, [sp, #16]
 8011b84:	9107      	str	r1, [sp, #28]
 8011b86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b8e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011b92:	6800      	ldr	r0, [r0, #0]
 8011b94:	9301      	str	r3, [sp, #4]
 8011b96:	a902      	add	r1, sp, #8
 8011b98:	f000 fa1e 	bl	8011fd8 <_svfiprintf_r>
 8011b9c:	9b02      	ldr	r3, [sp, #8]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	701a      	strb	r2, [r3, #0]
 8011ba2:	b01c      	add	sp, #112	; 0x70
 8011ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ba8:	b003      	add	sp, #12
 8011baa:	4770      	bx	lr
 8011bac:	200002fc 	.word	0x200002fc

08011bb0 <__sread>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb8:	f000 fb02 	bl	80121c0 <_read_r>
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	bfab      	itete	ge
 8011bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8011bc4:	181b      	addge	r3, r3, r0
 8011bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011bca:	bfac      	ite	ge
 8011bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8011bce:	81a3      	strhlt	r3, [r4, #12]
 8011bd0:	bd10      	pop	{r4, pc}

08011bd2 <__swrite>:
 8011bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd6:	461f      	mov	r7, r3
 8011bd8:	898b      	ldrh	r3, [r1, #12]
 8011bda:	05db      	lsls	r3, r3, #23
 8011bdc:	4605      	mov	r5, r0
 8011bde:	460c      	mov	r4, r1
 8011be0:	4616      	mov	r6, r2
 8011be2:	d505      	bpl.n	8011bf0 <__swrite+0x1e>
 8011be4:	2302      	movs	r3, #2
 8011be6:	2200      	movs	r2, #0
 8011be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bec:	f000 f944 	bl	8011e78 <_lseek_r>
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bfa:	81a3      	strh	r3, [r4, #12]
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	463b      	mov	r3, r7
 8011c00:	4628      	mov	r0, r5
 8011c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c06:	f000 b885 	b.w	8011d14 <_write_r>

08011c0a <__sseek>:
 8011c0a:	b510      	push	{r4, lr}
 8011c0c:	460c      	mov	r4, r1
 8011c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c12:	f000 f931 	bl	8011e78 <_lseek_r>
 8011c16:	1c43      	adds	r3, r0, #1
 8011c18:	89a3      	ldrh	r3, [r4, #12]
 8011c1a:	bf15      	itete	ne
 8011c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c26:	81a3      	strheq	r3, [r4, #12]
 8011c28:	bf18      	it	ne
 8011c2a:	81a3      	strhne	r3, [r4, #12]
 8011c2c:	bd10      	pop	{r4, pc}

08011c2e <__sclose>:
 8011c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c32:	f000 b8ef 	b.w	8011e14 <_close_r>

08011c36 <strcpy>:
 8011c36:	4603      	mov	r3, r0
 8011c38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c3c:	f803 2b01 	strb.w	r2, [r3], #1
 8011c40:	2a00      	cmp	r2, #0
 8011c42:	d1f9      	bne.n	8011c38 <strcpy+0x2>
 8011c44:	4770      	bx	lr

08011c46 <strncpy>:
 8011c46:	b570      	push	{r4, r5, r6, lr}
 8011c48:	4604      	mov	r4, r0
 8011c4a:	b902      	cbnz	r2, 8011c4e <strncpy+0x8>
 8011c4c:	bd70      	pop	{r4, r5, r6, pc}
 8011c4e:	4623      	mov	r3, r4
 8011c50:	f811 5b01 	ldrb.w	r5, [r1], #1
 8011c54:	f803 5b01 	strb.w	r5, [r3], #1
 8011c58:	1e56      	subs	r6, r2, #1
 8011c5a:	b91d      	cbnz	r5, 8011c64 <strncpy+0x1e>
 8011c5c:	4414      	add	r4, r2
 8011c5e:	42a3      	cmp	r3, r4
 8011c60:	d103      	bne.n	8011c6a <strncpy+0x24>
 8011c62:	bd70      	pop	{r4, r5, r6, pc}
 8011c64:	461c      	mov	r4, r3
 8011c66:	4632      	mov	r2, r6
 8011c68:	e7ef      	b.n	8011c4a <strncpy+0x4>
 8011c6a:	f803 5b01 	strb.w	r5, [r3], #1
 8011c6e:	e7f6      	b.n	8011c5e <strncpy+0x18>

08011c70 <__swbuf_r>:
 8011c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c72:	460e      	mov	r6, r1
 8011c74:	4614      	mov	r4, r2
 8011c76:	4605      	mov	r5, r0
 8011c78:	b118      	cbz	r0, 8011c82 <__swbuf_r+0x12>
 8011c7a:	6983      	ldr	r3, [r0, #24]
 8011c7c:	b90b      	cbnz	r3, 8011c82 <__swbuf_r+0x12>
 8011c7e:	f7ff fa37 	bl	80110f0 <__sinit>
 8011c82:	4b21      	ldr	r3, [pc, #132]	; (8011d08 <__swbuf_r+0x98>)
 8011c84:	429c      	cmp	r4, r3
 8011c86:	d12a      	bne.n	8011cde <__swbuf_r+0x6e>
 8011c88:	686c      	ldr	r4, [r5, #4]
 8011c8a:	69a3      	ldr	r3, [r4, #24]
 8011c8c:	60a3      	str	r3, [r4, #8]
 8011c8e:	89a3      	ldrh	r3, [r4, #12]
 8011c90:	071a      	lsls	r2, r3, #28
 8011c92:	d52e      	bpl.n	8011cf2 <__swbuf_r+0x82>
 8011c94:	6923      	ldr	r3, [r4, #16]
 8011c96:	b363      	cbz	r3, 8011cf2 <__swbuf_r+0x82>
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	6820      	ldr	r0, [r4, #0]
 8011c9c:	1ac0      	subs	r0, r0, r3
 8011c9e:	6963      	ldr	r3, [r4, #20]
 8011ca0:	b2f6      	uxtb	r6, r6
 8011ca2:	4298      	cmp	r0, r3
 8011ca4:	4637      	mov	r7, r6
 8011ca6:	db04      	blt.n	8011cb2 <__swbuf_r+0x42>
 8011ca8:	4621      	mov	r1, r4
 8011caa:	4628      	mov	r0, r5
 8011cac:	f7ff f9b6 	bl	801101c <_fflush_r>
 8011cb0:	bb28      	cbnz	r0, 8011cfe <__swbuf_r+0x8e>
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	3b01      	subs	r3, #1
 8011cb6:	60a3      	str	r3, [r4, #8]
 8011cb8:	6823      	ldr	r3, [r4, #0]
 8011cba:	1c5a      	adds	r2, r3, #1
 8011cbc:	6022      	str	r2, [r4, #0]
 8011cbe:	701e      	strb	r6, [r3, #0]
 8011cc0:	6963      	ldr	r3, [r4, #20]
 8011cc2:	3001      	adds	r0, #1
 8011cc4:	4298      	cmp	r0, r3
 8011cc6:	d004      	beq.n	8011cd2 <__swbuf_r+0x62>
 8011cc8:	89a3      	ldrh	r3, [r4, #12]
 8011cca:	07db      	lsls	r3, r3, #31
 8011ccc:	d519      	bpl.n	8011d02 <__swbuf_r+0x92>
 8011cce:	2e0a      	cmp	r6, #10
 8011cd0:	d117      	bne.n	8011d02 <__swbuf_r+0x92>
 8011cd2:	4621      	mov	r1, r4
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f7ff f9a1 	bl	801101c <_fflush_r>
 8011cda:	b190      	cbz	r0, 8011d02 <__swbuf_r+0x92>
 8011cdc:	e00f      	b.n	8011cfe <__swbuf_r+0x8e>
 8011cde:	4b0b      	ldr	r3, [pc, #44]	; (8011d0c <__swbuf_r+0x9c>)
 8011ce0:	429c      	cmp	r4, r3
 8011ce2:	d101      	bne.n	8011ce8 <__swbuf_r+0x78>
 8011ce4:	68ac      	ldr	r4, [r5, #8]
 8011ce6:	e7d0      	b.n	8011c8a <__swbuf_r+0x1a>
 8011ce8:	4b09      	ldr	r3, [pc, #36]	; (8011d10 <__swbuf_r+0xa0>)
 8011cea:	429c      	cmp	r4, r3
 8011cec:	bf08      	it	eq
 8011cee:	68ec      	ldreq	r4, [r5, #12]
 8011cf0:	e7cb      	b.n	8011c8a <__swbuf_r+0x1a>
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f000 f81f 	bl	8011d38 <__swsetup_r>
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	d0cc      	beq.n	8011c98 <__swbuf_r+0x28>
 8011cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8011d02:	4638      	mov	r0, r7
 8011d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d06:	bf00      	nop
 8011d08:	08012810 	.word	0x08012810
 8011d0c:	08012830 	.word	0x08012830
 8011d10:	080127f0 	.word	0x080127f0

08011d14 <_write_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4c07      	ldr	r4, [pc, #28]	; (8011d34 <_write_r+0x20>)
 8011d18:	4605      	mov	r5, r0
 8011d1a:	4608      	mov	r0, r1
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	2200      	movs	r2, #0
 8011d20:	6022      	str	r2, [r4, #0]
 8011d22:	461a      	mov	r2, r3
 8011d24:	f7f3 f86e 	bl	8004e04 <_write>
 8011d28:	1c43      	adds	r3, r0, #1
 8011d2a:	d102      	bne.n	8011d32 <_write_r+0x1e>
 8011d2c:	6823      	ldr	r3, [r4, #0]
 8011d2e:	b103      	cbz	r3, 8011d32 <_write_r+0x1e>
 8011d30:	602b      	str	r3, [r5, #0]
 8011d32:	bd38      	pop	{r3, r4, r5, pc}
 8011d34:	20000e5c 	.word	0x20000e5c

08011d38 <__swsetup_r>:
 8011d38:	4b32      	ldr	r3, [pc, #200]	; (8011e04 <__swsetup_r+0xcc>)
 8011d3a:	b570      	push	{r4, r5, r6, lr}
 8011d3c:	681d      	ldr	r5, [r3, #0]
 8011d3e:	4606      	mov	r6, r0
 8011d40:	460c      	mov	r4, r1
 8011d42:	b125      	cbz	r5, 8011d4e <__swsetup_r+0x16>
 8011d44:	69ab      	ldr	r3, [r5, #24]
 8011d46:	b913      	cbnz	r3, 8011d4e <__swsetup_r+0x16>
 8011d48:	4628      	mov	r0, r5
 8011d4a:	f7ff f9d1 	bl	80110f0 <__sinit>
 8011d4e:	4b2e      	ldr	r3, [pc, #184]	; (8011e08 <__swsetup_r+0xd0>)
 8011d50:	429c      	cmp	r4, r3
 8011d52:	d10f      	bne.n	8011d74 <__swsetup_r+0x3c>
 8011d54:	686c      	ldr	r4, [r5, #4]
 8011d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d5a:	b29a      	uxth	r2, r3
 8011d5c:	0715      	lsls	r5, r2, #28
 8011d5e:	d42c      	bmi.n	8011dba <__swsetup_r+0x82>
 8011d60:	06d0      	lsls	r0, r2, #27
 8011d62:	d411      	bmi.n	8011d88 <__swsetup_r+0x50>
 8011d64:	2209      	movs	r2, #9
 8011d66:	6032      	str	r2, [r6, #0]
 8011d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d6c:	81a3      	strh	r3, [r4, #12]
 8011d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d72:	bd70      	pop	{r4, r5, r6, pc}
 8011d74:	4b25      	ldr	r3, [pc, #148]	; (8011e0c <__swsetup_r+0xd4>)
 8011d76:	429c      	cmp	r4, r3
 8011d78:	d101      	bne.n	8011d7e <__swsetup_r+0x46>
 8011d7a:	68ac      	ldr	r4, [r5, #8]
 8011d7c:	e7eb      	b.n	8011d56 <__swsetup_r+0x1e>
 8011d7e:	4b24      	ldr	r3, [pc, #144]	; (8011e10 <__swsetup_r+0xd8>)
 8011d80:	429c      	cmp	r4, r3
 8011d82:	bf08      	it	eq
 8011d84:	68ec      	ldreq	r4, [r5, #12]
 8011d86:	e7e6      	b.n	8011d56 <__swsetup_r+0x1e>
 8011d88:	0751      	lsls	r1, r2, #29
 8011d8a:	d512      	bpl.n	8011db2 <__swsetup_r+0x7a>
 8011d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d8e:	b141      	cbz	r1, 8011da2 <__swsetup_r+0x6a>
 8011d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d94:	4299      	cmp	r1, r3
 8011d96:	d002      	beq.n	8011d9e <__swsetup_r+0x66>
 8011d98:	4630      	mov	r0, r6
 8011d9a:	f7ff fad7 	bl	801134c <_free_r>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	6363      	str	r3, [r4, #52]	; 0x34
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011da8:	81a3      	strh	r3, [r4, #12]
 8011daa:	2300      	movs	r3, #0
 8011dac:	6063      	str	r3, [r4, #4]
 8011dae:	6923      	ldr	r3, [r4, #16]
 8011db0:	6023      	str	r3, [r4, #0]
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f043 0308 	orr.w	r3, r3, #8
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	6923      	ldr	r3, [r4, #16]
 8011dbc:	b94b      	cbnz	r3, 8011dd2 <__swsetup_r+0x9a>
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dc8:	d003      	beq.n	8011dd2 <__swsetup_r+0x9a>
 8011dca:	4621      	mov	r1, r4
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f7ff fa61 	bl	8011294 <__smakebuf_r>
 8011dd2:	89a2      	ldrh	r2, [r4, #12]
 8011dd4:	f012 0301 	ands.w	r3, r2, #1
 8011dd8:	d00c      	beq.n	8011df4 <__swsetup_r+0xbc>
 8011dda:	2300      	movs	r3, #0
 8011ddc:	60a3      	str	r3, [r4, #8]
 8011dde:	6963      	ldr	r3, [r4, #20]
 8011de0:	425b      	negs	r3, r3
 8011de2:	61a3      	str	r3, [r4, #24]
 8011de4:	6923      	ldr	r3, [r4, #16]
 8011de6:	b953      	cbnz	r3, 8011dfe <__swsetup_r+0xc6>
 8011de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011df0:	d1ba      	bne.n	8011d68 <__swsetup_r+0x30>
 8011df2:	bd70      	pop	{r4, r5, r6, pc}
 8011df4:	0792      	lsls	r2, r2, #30
 8011df6:	bf58      	it	pl
 8011df8:	6963      	ldrpl	r3, [r4, #20]
 8011dfa:	60a3      	str	r3, [r4, #8]
 8011dfc:	e7f2      	b.n	8011de4 <__swsetup_r+0xac>
 8011dfe:	2000      	movs	r0, #0
 8011e00:	e7f7      	b.n	8011df2 <__swsetup_r+0xba>
 8011e02:	bf00      	nop
 8011e04:	200002fc 	.word	0x200002fc
 8011e08:	08012810 	.word	0x08012810
 8011e0c:	08012830 	.word	0x08012830
 8011e10:	080127f0 	.word	0x080127f0

08011e14 <_close_r>:
 8011e14:	b538      	push	{r3, r4, r5, lr}
 8011e16:	4c06      	ldr	r4, [pc, #24]	; (8011e30 <_close_r+0x1c>)
 8011e18:	2300      	movs	r3, #0
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	4608      	mov	r0, r1
 8011e1e:	6023      	str	r3, [r4, #0]
 8011e20:	f000 f9ea 	bl	80121f8 <_close>
 8011e24:	1c43      	adds	r3, r0, #1
 8011e26:	d102      	bne.n	8011e2e <_close_r+0x1a>
 8011e28:	6823      	ldr	r3, [r4, #0]
 8011e2a:	b103      	cbz	r3, 8011e2e <_close_r+0x1a>
 8011e2c:	602b      	str	r3, [r5, #0]
 8011e2e:	bd38      	pop	{r3, r4, r5, pc}
 8011e30:	20000e5c 	.word	0x20000e5c

08011e34 <_fstat_r>:
 8011e34:	b538      	push	{r3, r4, r5, lr}
 8011e36:	4c07      	ldr	r4, [pc, #28]	; (8011e54 <_fstat_r+0x20>)
 8011e38:	2300      	movs	r3, #0
 8011e3a:	4605      	mov	r5, r0
 8011e3c:	4608      	mov	r0, r1
 8011e3e:	4611      	mov	r1, r2
 8011e40:	6023      	str	r3, [r4, #0]
 8011e42:	f000 f9e1 	bl	8012208 <_fstat>
 8011e46:	1c43      	adds	r3, r0, #1
 8011e48:	d102      	bne.n	8011e50 <_fstat_r+0x1c>
 8011e4a:	6823      	ldr	r3, [r4, #0]
 8011e4c:	b103      	cbz	r3, 8011e50 <_fstat_r+0x1c>
 8011e4e:	602b      	str	r3, [r5, #0]
 8011e50:	bd38      	pop	{r3, r4, r5, pc}
 8011e52:	bf00      	nop
 8011e54:	20000e5c 	.word	0x20000e5c

08011e58 <_isatty_r>:
 8011e58:	b538      	push	{r3, r4, r5, lr}
 8011e5a:	4c06      	ldr	r4, [pc, #24]	; (8011e74 <_isatty_r+0x1c>)
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	4605      	mov	r5, r0
 8011e60:	4608      	mov	r0, r1
 8011e62:	6023      	str	r3, [r4, #0]
 8011e64:	f000 f9d8 	bl	8012218 <_isatty>
 8011e68:	1c43      	adds	r3, r0, #1
 8011e6a:	d102      	bne.n	8011e72 <_isatty_r+0x1a>
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	b103      	cbz	r3, 8011e72 <_isatty_r+0x1a>
 8011e70:	602b      	str	r3, [r5, #0]
 8011e72:	bd38      	pop	{r3, r4, r5, pc}
 8011e74:	20000e5c 	.word	0x20000e5c

08011e78 <_lseek_r>:
 8011e78:	b538      	push	{r3, r4, r5, lr}
 8011e7a:	4c07      	ldr	r4, [pc, #28]	; (8011e98 <_lseek_r+0x20>)
 8011e7c:	4605      	mov	r5, r0
 8011e7e:	4608      	mov	r0, r1
 8011e80:	4611      	mov	r1, r2
 8011e82:	2200      	movs	r2, #0
 8011e84:	6022      	str	r2, [r4, #0]
 8011e86:	461a      	mov	r2, r3
 8011e88:	f000 f9ce 	bl	8012228 <_lseek>
 8011e8c:	1c43      	adds	r3, r0, #1
 8011e8e:	d102      	bne.n	8011e96 <_lseek_r+0x1e>
 8011e90:	6823      	ldr	r3, [r4, #0]
 8011e92:	b103      	cbz	r3, 8011e96 <_lseek_r+0x1e>
 8011e94:	602b      	str	r3, [r5, #0]
 8011e96:	bd38      	pop	{r3, r4, r5, pc}
 8011e98:	20000e5c 	.word	0x20000e5c

08011e9c <memmove>:
 8011e9c:	4288      	cmp	r0, r1
 8011e9e:	b510      	push	{r4, lr}
 8011ea0:	eb01 0302 	add.w	r3, r1, r2
 8011ea4:	d803      	bhi.n	8011eae <memmove+0x12>
 8011ea6:	1e42      	subs	r2, r0, #1
 8011ea8:	4299      	cmp	r1, r3
 8011eaa:	d10c      	bne.n	8011ec6 <memmove+0x2a>
 8011eac:	bd10      	pop	{r4, pc}
 8011eae:	4298      	cmp	r0, r3
 8011eb0:	d2f9      	bcs.n	8011ea6 <memmove+0xa>
 8011eb2:	1881      	adds	r1, r0, r2
 8011eb4:	1ad2      	subs	r2, r2, r3
 8011eb6:	42d3      	cmn	r3, r2
 8011eb8:	d100      	bne.n	8011ebc <memmove+0x20>
 8011eba:	bd10      	pop	{r4, pc}
 8011ebc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ec0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011ec4:	e7f7      	b.n	8011eb6 <memmove+0x1a>
 8011ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011eca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011ece:	e7eb      	b.n	8011ea8 <memmove+0xc>

08011ed0 <__malloc_lock>:
 8011ed0:	4770      	bx	lr

08011ed2 <__malloc_unlock>:
 8011ed2:	4770      	bx	lr

08011ed4 <_realloc_r>:
 8011ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ed6:	4607      	mov	r7, r0
 8011ed8:	4614      	mov	r4, r2
 8011eda:	460e      	mov	r6, r1
 8011edc:	b921      	cbnz	r1, 8011ee8 <_realloc_r+0x14>
 8011ede:	4611      	mov	r1, r2
 8011ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ee4:	f7ff ba80 	b.w	80113e8 <_malloc_r>
 8011ee8:	b922      	cbnz	r2, 8011ef4 <_realloc_r+0x20>
 8011eea:	f7ff fa2f 	bl	801134c <_free_r>
 8011eee:	4625      	mov	r5, r4
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ef4:	f000 f976 	bl	80121e4 <_malloc_usable_size_r>
 8011ef8:	4284      	cmp	r4, r0
 8011efa:	d90f      	bls.n	8011f1c <_realloc_r+0x48>
 8011efc:	4621      	mov	r1, r4
 8011efe:	4638      	mov	r0, r7
 8011f00:	f7ff fa72 	bl	80113e8 <_malloc_r>
 8011f04:	4605      	mov	r5, r0
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d0f2      	beq.n	8011ef0 <_realloc_r+0x1c>
 8011f0a:	4631      	mov	r1, r6
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	f7ff fa09 	bl	8011324 <memcpy>
 8011f12:	4631      	mov	r1, r6
 8011f14:	4638      	mov	r0, r7
 8011f16:	f7ff fa19 	bl	801134c <_free_r>
 8011f1a:	e7e9      	b.n	8011ef0 <_realloc_r+0x1c>
 8011f1c:	4635      	mov	r5, r6
 8011f1e:	e7e7      	b.n	8011ef0 <_realloc_r+0x1c>

08011f20 <__ssputs_r>:
 8011f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f24:	688e      	ldr	r6, [r1, #8]
 8011f26:	429e      	cmp	r6, r3
 8011f28:	4682      	mov	sl, r0
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	4691      	mov	r9, r2
 8011f2e:	4698      	mov	r8, r3
 8011f30:	d835      	bhi.n	8011f9e <__ssputs_r+0x7e>
 8011f32:	898a      	ldrh	r2, [r1, #12]
 8011f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f38:	d031      	beq.n	8011f9e <__ssputs_r+0x7e>
 8011f3a:	6825      	ldr	r5, [r4, #0]
 8011f3c:	6909      	ldr	r1, [r1, #16]
 8011f3e:	1a6f      	subs	r7, r5, r1
 8011f40:	6965      	ldr	r5, [r4, #20]
 8011f42:	2302      	movs	r3, #2
 8011f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f48:	fb95 f5f3 	sdiv	r5, r5, r3
 8011f4c:	f108 0301 	add.w	r3, r8, #1
 8011f50:	443b      	add	r3, r7
 8011f52:	429d      	cmp	r5, r3
 8011f54:	bf38      	it	cc
 8011f56:	461d      	movcc	r5, r3
 8011f58:	0553      	lsls	r3, r2, #21
 8011f5a:	d531      	bpl.n	8011fc0 <__ssputs_r+0xa0>
 8011f5c:	4629      	mov	r1, r5
 8011f5e:	f7ff fa43 	bl	80113e8 <_malloc_r>
 8011f62:	4606      	mov	r6, r0
 8011f64:	b950      	cbnz	r0, 8011f7c <__ssputs_r+0x5c>
 8011f66:	230c      	movs	r3, #12
 8011f68:	f8ca 3000 	str.w	r3, [sl]
 8011f6c:	89a3      	ldrh	r3, [r4, #12]
 8011f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f72:	81a3      	strh	r3, [r4, #12]
 8011f74:	f04f 30ff 	mov.w	r0, #4294967295
 8011f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f7c:	463a      	mov	r2, r7
 8011f7e:	6921      	ldr	r1, [r4, #16]
 8011f80:	f7ff f9d0 	bl	8011324 <memcpy>
 8011f84:	89a3      	ldrh	r3, [r4, #12]
 8011f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f8e:	81a3      	strh	r3, [r4, #12]
 8011f90:	6126      	str	r6, [r4, #16]
 8011f92:	6165      	str	r5, [r4, #20]
 8011f94:	443e      	add	r6, r7
 8011f96:	1bed      	subs	r5, r5, r7
 8011f98:	6026      	str	r6, [r4, #0]
 8011f9a:	60a5      	str	r5, [r4, #8]
 8011f9c:	4646      	mov	r6, r8
 8011f9e:	4546      	cmp	r6, r8
 8011fa0:	bf28      	it	cs
 8011fa2:	4646      	movcs	r6, r8
 8011fa4:	4632      	mov	r2, r6
 8011fa6:	4649      	mov	r1, r9
 8011fa8:	6820      	ldr	r0, [r4, #0]
 8011faa:	f7ff ff77 	bl	8011e9c <memmove>
 8011fae:	68a3      	ldr	r3, [r4, #8]
 8011fb0:	1b9b      	subs	r3, r3, r6
 8011fb2:	60a3      	str	r3, [r4, #8]
 8011fb4:	6823      	ldr	r3, [r4, #0]
 8011fb6:	441e      	add	r6, r3
 8011fb8:	6026      	str	r6, [r4, #0]
 8011fba:	2000      	movs	r0, #0
 8011fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc0:	462a      	mov	r2, r5
 8011fc2:	f7ff ff87 	bl	8011ed4 <_realloc_r>
 8011fc6:	4606      	mov	r6, r0
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d1e1      	bne.n	8011f90 <__ssputs_r+0x70>
 8011fcc:	6921      	ldr	r1, [r4, #16]
 8011fce:	4650      	mov	r0, sl
 8011fd0:	f7ff f9bc 	bl	801134c <_free_r>
 8011fd4:	e7c7      	b.n	8011f66 <__ssputs_r+0x46>
	...

08011fd8 <_svfiprintf_r>:
 8011fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	b09d      	sub	sp, #116	; 0x74
 8011fde:	4680      	mov	r8, r0
 8011fe0:	9303      	str	r3, [sp, #12]
 8011fe2:	898b      	ldrh	r3, [r1, #12]
 8011fe4:	061c      	lsls	r4, r3, #24
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	4616      	mov	r6, r2
 8011fea:	d50f      	bpl.n	801200c <_svfiprintf_r+0x34>
 8011fec:	690b      	ldr	r3, [r1, #16]
 8011fee:	b96b      	cbnz	r3, 801200c <_svfiprintf_r+0x34>
 8011ff0:	2140      	movs	r1, #64	; 0x40
 8011ff2:	f7ff f9f9 	bl	80113e8 <_malloc_r>
 8011ff6:	6028      	str	r0, [r5, #0]
 8011ff8:	6128      	str	r0, [r5, #16]
 8011ffa:	b928      	cbnz	r0, 8012008 <_svfiprintf_r+0x30>
 8011ffc:	230c      	movs	r3, #12
 8011ffe:	f8c8 3000 	str.w	r3, [r8]
 8012002:	f04f 30ff 	mov.w	r0, #4294967295
 8012006:	e0c5      	b.n	8012194 <_svfiprintf_r+0x1bc>
 8012008:	2340      	movs	r3, #64	; 0x40
 801200a:	616b      	str	r3, [r5, #20]
 801200c:	2300      	movs	r3, #0
 801200e:	9309      	str	r3, [sp, #36]	; 0x24
 8012010:	2320      	movs	r3, #32
 8012012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012016:	2330      	movs	r3, #48	; 0x30
 8012018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801201c:	f04f 0b01 	mov.w	fp, #1
 8012020:	4637      	mov	r7, r6
 8012022:	463c      	mov	r4, r7
 8012024:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012028:	2b00      	cmp	r3, #0
 801202a:	d13c      	bne.n	80120a6 <_svfiprintf_r+0xce>
 801202c:	ebb7 0a06 	subs.w	sl, r7, r6
 8012030:	d00b      	beq.n	801204a <_svfiprintf_r+0x72>
 8012032:	4653      	mov	r3, sl
 8012034:	4632      	mov	r2, r6
 8012036:	4629      	mov	r1, r5
 8012038:	4640      	mov	r0, r8
 801203a:	f7ff ff71 	bl	8011f20 <__ssputs_r>
 801203e:	3001      	adds	r0, #1
 8012040:	f000 80a3 	beq.w	801218a <_svfiprintf_r+0x1b2>
 8012044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012046:	4453      	add	r3, sl
 8012048:	9309      	str	r3, [sp, #36]	; 0x24
 801204a:	783b      	ldrb	r3, [r7, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	f000 809c 	beq.w	801218a <_svfiprintf_r+0x1b2>
 8012052:	2300      	movs	r3, #0
 8012054:	f04f 32ff 	mov.w	r2, #4294967295
 8012058:	9304      	str	r3, [sp, #16]
 801205a:	9307      	str	r3, [sp, #28]
 801205c:	9205      	str	r2, [sp, #20]
 801205e:	9306      	str	r3, [sp, #24]
 8012060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012064:	931a      	str	r3, [sp, #104]	; 0x68
 8012066:	2205      	movs	r2, #5
 8012068:	7821      	ldrb	r1, [r4, #0]
 801206a:	4850      	ldr	r0, [pc, #320]	; (80121ac <_svfiprintf_r+0x1d4>)
 801206c:	f7ee f8b8 	bl	80001e0 <memchr>
 8012070:	1c67      	adds	r7, r4, #1
 8012072:	9b04      	ldr	r3, [sp, #16]
 8012074:	b9d8      	cbnz	r0, 80120ae <_svfiprintf_r+0xd6>
 8012076:	06d9      	lsls	r1, r3, #27
 8012078:	bf44      	itt	mi
 801207a:	2220      	movmi	r2, #32
 801207c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012080:	071a      	lsls	r2, r3, #28
 8012082:	bf44      	itt	mi
 8012084:	222b      	movmi	r2, #43	; 0x2b
 8012086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801208a:	7822      	ldrb	r2, [r4, #0]
 801208c:	2a2a      	cmp	r2, #42	; 0x2a
 801208e:	d016      	beq.n	80120be <_svfiprintf_r+0xe6>
 8012090:	9a07      	ldr	r2, [sp, #28]
 8012092:	2100      	movs	r1, #0
 8012094:	200a      	movs	r0, #10
 8012096:	4627      	mov	r7, r4
 8012098:	3401      	adds	r4, #1
 801209a:	783b      	ldrb	r3, [r7, #0]
 801209c:	3b30      	subs	r3, #48	; 0x30
 801209e:	2b09      	cmp	r3, #9
 80120a0:	d951      	bls.n	8012146 <_svfiprintf_r+0x16e>
 80120a2:	b1c9      	cbz	r1, 80120d8 <_svfiprintf_r+0x100>
 80120a4:	e011      	b.n	80120ca <_svfiprintf_r+0xf2>
 80120a6:	2b25      	cmp	r3, #37	; 0x25
 80120a8:	d0c0      	beq.n	801202c <_svfiprintf_r+0x54>
 80120aa:	4627      	mov	r7, r4
 80120ac:	e7b9      	b.n	8012022 <_svfiprintf_r+0x4a>
 80120ae:	4a3f      	ldr	r2, [pc, #252]	; (80121ac <_svfiprintf_r+0x1d4>)
 80120b0:	1a80      	subs	r0, r0, r2
 80120b2:	fa0b f000 	lsl.w	r0, fp, r0
 80120b6:	4318      	orrs	r0, r3
 80120b8:	9004      	str	r0, [sp, #16]
 80120ba:	463c      	mov	r4, r7
 80120bc:	e7d3      	b.n	8012066 <_svfiprintf_r+0x8e>
 80120be:	9a03      	ldr	r2, [sp, #12]
 80120c0:	1d11      	adds	r1, r2, #4
 80120c2:	6812      	ldr	r2, [r2, #0]
 80120c4:	9103      	str	r1, [sp, #12]
 80120c6:	2a00      	cmp	r2, #0
 80120c8:	db01      	blt.n	80120ce <_svfiprintf_r+0xf6>
 80120ca:	9207      	str	r2, [sp, #28]
 80120cc:	e004      	b.n	80120d8 <_svfiprintf_r+0x100>
 80120ce:	4252      	negs	r2, r2
 80120d0:	f043 0302 	orr.w	r3, r3, #2
 80120d4:	9207      	str	r2, [sp, #28]
 80120d6:	9304      	str	r3, [sp, #16]
 80120d8:	783b      	ldrb	r3, [r7, #0]
 80120da:	2b2e      	cmp	r3, #46	; 0x2e
 80120dc:	d10e      	bne.n	80120fc <_svfiprintf_r+0x124>
 80120de:	787b      	ldrb	r3, [r7, #1]
 80120e0:	2b2a      	cmp	r3, #42	; 0x2a
 80120e2:	f107 0101 	add.w	r1, r7, #1
 80120e6:	d132      	bne.n	801214e <_svfiprintf_r+0x176>
 80120e8:	9b03      	ldr	r3, [sp, #12]
 80120ea:	1d1a      	adds	r2, r3, #4
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	9203      	str	r2, [sp, #12]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	bfb8      	it	lt
 80120f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80120f8:	3702      	adds	r7, #2
 80120fa:	9305      	str	r3, [sp, #20]
 80120fc:	4c2c      	ldr	r4, [pc, #176]	; (80121b0 <_svfiprintf_r+0x1d8>)
 80120fe:	7839      	ldrb	r1, [r7, #0]
 8012100:	2203      	movs	r2, #3
 8012102:	4620      	mov	r0, r4
 8012104:	f7ee f86c 	bl	80001e0 <memchr>
 8012108:	b138      	cbz	r0, 801211a <_svfiprintf_r+0x142>
 801210a:	2340      	movs	r3, #64	; 0x40
 801210c:	1b00      	subs	r0, r0, r4
 801210e:	fa03 f000 	lsl.w	r0, r3, r0
 8012112:	9b04      	ldr	r3, [sp, #16]
 8012114:	4303      	orrs	r3, r0
 8012116:	9304      	str	r3, [sp, #16]
 8012118:	3701      	adds	r7, #1
 801211a:	7839      	ldrb	r1, [r7, #0]
 801211c:	4825      	ldr	r0, [pc, #148]	; (80121b4 <_svfiprintf_r+0x1dc>)
 801211e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012122:	2206      	movs	r2, #6
 8012124:	1c7e      	adds	r6, r7, #1
 8012126:	f7ee f85b 	bl	80001e0 <memchr>
 801212a:	2800      	cmp	r0, #0
 801212c:	d035      	beq.n	801219a <_svfiprintf_r+0x1c2>
 801212e:	4b22      	ldr	r3, [pc, #136]	; (80121b8 <_svfiprintf_r+0x1e0>)
 8012130:	b9fb      	cbnz	r3, 8012172 <_svfiprintf_r+0x19a>
 8012132:	9b03      	ldr	r3, [sp, #12]
 8012134:	3307      	adds	r3, #7
 8012136:	f023 0307 	bic.w	r3, r3, #7
 801213a:	3308      	adds	r3, #8
 801213c:	9303      	str	r3, [sp, #12]
 801213e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012140:	444b      	add	r3, r9
 8012142:	9309      	str	r3, [sp, #36]	; 0x24
 8012144:	e76c      	b.n	8012020 <_svfiprintf_r+0x48>
 8012146:	fb00 3202 	mla	r2, r0, r2, r3
 801214a:	2101      	movs	r1, #1
 801214c:	e7a3      	b.n	8012096 <_svfiprintf_r+0xbe>
 801214e:	2300      	movs	r3, #0
 8012150:	9305      	str	r3, [sp, #20]
 8012152:	4618      	mov	r0, r3
 8012154:	240a      	movs	r4, #10
 8012156:	460f      	mov	r7, r1
 8012158:	3101      	adds	r1, #1
 801215a:	783a      	ldrb	r2, [r7, #0]
 801215c:	3a30      	subs	r2, #48	; 0x30
 801215e:	2a09      	cmp	r2, #9
 8012160:	d903      	bls.n	801216a <_svfiprintf_r+0x192>
 8012162:	2b00      	cmp	r3, #0
 8012164:	d0ca      	beq.n	80120fc <_svfiprintf_r+0x124>
 8012166:	9005      	str	r0, [sp, #20]
 8012168:	e7c8      	b.n	80120fc <_svfiprintf_r+0x124>
 801216a:	fb04 2000 	mla	r0, r4, r0, r2
 801216e:	2301      	movs	r3, #1
 8012170:	e7f1      	b.n	8012156 <_svfiprintf_r+0x17e>
 8012172:	ab03      	add	r3, sp, #12
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	462a      	mov	r2, r5
 8012178:	4b10      	ldr	r3, [pc, #64]	; (80121bc <_svfiprintf_r+0x1e4>)
 801217a:	a904      	add	r1, sp, #16
 801217c:	4640      	mov	r0, r8
 801217e:	f3af 8000 	nop.w
 8012182:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012186:	4681      	mov	r9, r0
 8012188:	d1d9      	bne.n	801213e <_svfiprintf_r+0x166>
 801218a:	89ab      	ldrh	r3, [r5, #12]
 801218c:	065b      	lsls	r3, r3, #25
 801218e:	f53f af38 	bmi.w	8012002 <_svfiprintf_r+0x2a>
 8012192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012194:	b01d      	add	sp, #116	; 0x74
 8012196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801219a:	ab03      	add	r3, sp, #12
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	462a      	mov	r2, r5
 80121a0:	4b06      	ldr	r3, [pc, #24]	; (80121bc <_svfiprintf_r+0x1e4>)
 80121a2:	a904      	add	r1, sp, #16
 80121a4:	4640      	mov	r0, r8
 80121a6:	f7ff fb33 	bl	8011810 <_printf_i>
 80121aa:	e7ea      	b.n	8012182 <_svfiprintf_r+0x1aa>
 80121ac:	08012854 	.word	0x08012854
 80121b0:	0801285a 	.word	0x0801285a
 80121b4:	0801285e 	.word	0x0801285e
 80121b8:	00000000 	.word	0x00000000
 80121bc:	08011f21 	.word	0x08011f21

080121c0 <_read_r>:
 80121c0:	b538      	push	{r3, r4, r5, lr}
 80121c2:	4c07      	ldr	r4, [pc, #28]	; (80121e0 <_read_r+0x20>)
 80121c4:	4605      	mov	r5, r0
 80121c6:	4608      	mov	r0, r1
 80121c8:	4611      	mov	r1, r2
 80121ca:	2200      	movs	r2, #0
 80121cc:	6022      	str	r2, [r4, #0]
 80121ce:	461a      	mov	r2, r3
 80121d0:	f000 f832 	bl	8012238 <_read>
 80121d4:	1c43      	adds	r3, r0, #1
 80121d6:	d102      	bne.n	80121de <_read_r+0x1e>
 80121d8:	6823      	ldr	r3, [r4, #0]
 80121da:	b103      	cbz	r3, 80121de <_read_r+0x1e>
 80121dc:	602b      	str	r3, [r5, #0]
 80121de:	bd38      	pop	{r3, r4, r5, pc}
 80121e0:	20000e5c 	.word	0x20000e5c

080121e4 <_malloc_usable_size_r>:
 80121e4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80121e8:	2800      	cmp	r0, #0
 80121ea:	f1a0 0004 	sub.w	r0, r0, #4
 80121ee:	bfbc      	itt	lt
 80121f0:	580b      	ldrlt	r3, [r1, r0]
 80121f2:	18c0      	addlt	r0, r0, r3
 80121f4:	4770      	bx	lr
	...

080121f8 <_close>:
 80121f8:	4b02      	ldr	r3, [pc, #8]	; (8012204 <_close+0xc>)
 80121fa:	2258      	movs	r2, #88	; 0x58
 80121fc:	601a      	str	r2, [r3, #0]
 80121fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012202:	4770      	bx	lr
 8012204:	20000e5c 	.word	0x20000e5c

08012208 <_fstat>:
 8012208:	4b02      	ldr	r3, [pc, #8]	; (8012214 <_fstat+0xc>)
 801220a:	2258      	movs	r2, #88	; 0x58
 801220c:	601a      	str	r2, [r3, #0]
 801220e:	f04f 30ff 	mov.w	r0, #4294967295
 8012212:	4770      	bx	lr
 8012214:	20000e5c 	.word	0x20000e5c

08012218 <_isatty>:
 8012218:	4b02      	ldr	r3, [pc, #8]	; (8012224 <_isatty+0xc>)
 801221a:	2258      	movs	r2, #88	; 0x58
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	2000      	movs	r0, #0
 8012220:	4770      	bx	lr
 8012222:	bf00      	nop
 8012224:	20000e5c 	.word	0x20000e5c

08012228 <_lseek>:
 8012228:	4b02      	ldr	r3, [pc, #8]	; (8012234 <_lseek+0xc>)
 801222a:	2258      	movs	r2, #88	; 0x58
 801222c:	601a      	str	r2, [r3, #0]
 801222e:	f04f 30ff 	mov.w	r0, #4294967295
 8012232:	4770      	bx	lr
 8012234:	20000e5c 	.word	0x20000e5c

08012238 <_read>:
 8012238:	4b02      	ldr	r3, [pc, #8]	; (8012244 <_read+0xc>)
 801223a:	2258      	movs	r2, #88	; 0x58
 801223c:	601a      	str	r2, [r3, #0]
 801223e:	f04f 30ff 	mov.w	r0, #4294967295
 8012242:	4770      	bx	lr
 8012244:	20000e5c 	.word	0x20000e5c

08012248 <_sbrk>:
 8012248:	4b04      	ldr	r3, [pc, #16]	; (801225c <_sbrk+0x14>)
 801224a:	6819      	ldr	r1, [r3, #0]
 801224c:	4602      	mov	r2, r0
 801224e:	b909      	cbnz	r1, 8012254 <_sbrk+0xc>
 8012250:	4903      	ldr	r1, [pc, #12]	; (8012260 <_sbrk+0x18>)
 8012252:	6019      	str	r1, [r3, #0]
 8012254:	6818      	ldr	r0, [r3, #0]
 8012256:	4402      	add	r2, r0
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	4770      	bx	lr
 801225c:	200008fc 	.word	0x200008fc
 8012260:	20000e60 	.word	0x20000e60

08012264 <_init>:
 8012264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012266:	bf00      	nop
 8012268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801226a:	bc08      	pop	{r3}
 801226c:	469e      	mov	lr, r3
 801226e:	4770      	bx	lr

08012270 <_fini>:
 8012270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012272:	bf00      	nop
 8012274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012276:	bc08      	pop	{r3}
 8012278:	469e      	mov	lr, r3
 801227a:	4770      	bx	lr
