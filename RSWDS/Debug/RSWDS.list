
RSWDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08010344  08010344  00020344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010704  08010704  00020704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801070c  0801070c  0002070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010710  08010710  00020710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000358  20000000  08010714  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000910  20000358  08010a6c  00030358  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c68  08010a6c  00030c68  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b604  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004d86  00000000  00000000  0006b98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000019b8  00000000  00000000  00070718  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017a0  00000000  00000000  000720d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cdaf  00000000  00000000  00073870  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000bd23  00000000  00000000  0008061f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008c342  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000074c0  00000000  00000000  0008c3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  00093880  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014b  00000000  00000000  00093904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801032c 	.word	0x0801032c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0801032c 	.word	0x0801032c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b97a 	b.w	8000d20 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	468c      	mov	ip, r1
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	9e08      	ldr	r6, [sp, #32]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d151      	bne.n	8000af8 <__udivmoddi4+0xb4>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d96d      	bls.n	8000b36 <__udivmoddi4+0xf2>
 8000a5a:	fab2 fe82 	clz	lr, r2
 8000a5e:	f1be 0f00 	cmp.w	lr, #0
 8000a62:	d00b      	beq.n	8000a7c <__udivmoddi4+0x38>
 8000a64:	f1ce 0c20 	rsb	ip, lr, #32
 8000a68:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a70:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a74:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a78:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a80:	0c25      	lsrs	r5, r4, #16
 8000a82:	fbbc f8fa 	udiv	r8, ip, sl
 8000a86:	fa1f f987 	uxth.w	r9, r7
 8000a8a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a92:	fb08 f309 	mul.w	r3, r8, r9
 8000a96:	42ab      	cmp	r3, r5
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x6c>
 8000a9a:	19ed      	adds	r5, r5, r7
 8000a9c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000aa0:	f080 8123 	bcs.w	8000cea <__udivmoddi4+0x2a6>
 8000aa4:	42ab      	cmp	r3, r5
 8000aa6:	f240 8120 	bls.w	8000cea <__udivmoddi4+0x2a6>
 8000aaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000aae:	443d      	add	r5, r7
 8000ab0:	1aed      	subs	r5, r5, r3
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ab8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000abc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac0:	fb00 f909 	mul.w	r9, r0, r9
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x98>
 8000ac8:	19e4      	adds	r4, r4, r7
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ace:	f080 810a 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad2:	45a1      	cmp	r9, r4
 8000ad4:	f240 8107 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	443c      	add	r4, r7
 8000adc:	eba4 0409 	sub.w	r4, r4, r9
 8000ae0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d061      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000aea:	fa24 f40e 	lsr.w	r4, r4, lr
 8000aee:	2300      	movs	r3, #0
 8000af0:	6034      	str	r4, [r6, #0]
 8000af2:	6073      	str	r3, [r6, #4]
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0xc8>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d054      	beq.n	8000baa <__udivmoddi4+0x166>
 8000b00:	2100      	movs	r1, #0
 8000b02:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b06:	4608      	mov	r0, r1
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	fab3 f183 	clz	r1, r3
 8000b10:	2900      	cmp	r1, #0
 8000b12:	f040 808e 	bne.w	8000c32 <__udivmoddi4+0x1ee>
 8000b16:	42ab      	cmp	r3, r5
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xdc>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80fa 	bhi.w	8000d14 <__udivmoddi4+0x2d0>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb65 0503 	sbc.w	r5, r5, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	46ac      	mov	ip, r5
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d03f      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000b2e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	b912      	cbnz	r2, 8000b3e <__udivmoddi4+0xfa>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b3e:	fab7 fe87 	clz	lr, r7
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d134      	bne.n	8000bb2 <__udivmoddi4+0x16e>
 8000b48:	1beb      	subs	r3, r5, r7
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	2101      	movs	r1, #1
 8000b52:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b56:	0c25      	lsrs	r5, r4, #16
 8000b58:	fb02 3318 	mls	r3, r2, r8, r3
 8000b5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b60:	fb0c f308 	mul.w	r3, ip, r8
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x134>
 8000b68:	19ed      	adds	r5, r5, r7
 8000b6a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x132>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	f200 80d1 	bhi.w	8000d18 <__udivmoddi4+0x2d4>
 8000b76:	4680      	mov	r8, r0
 8000b78:	1aed      	subs	r5, r5, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b80:	fb02 5510 	mls	r5, r2, r0, r5
 8000b84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b88:	fb0c fc00 	mul.w	ip, ip, r0
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x15c>
 8000b90:	19e4      	adds	r4, r4, r7
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x15a>
 8000b98:	45a4      	cmp	ip, r4
 8000b9a:	f200 80b8 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba8:	e79d      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000baa:	4631      	mov	r1, r6
 8000bac:	4630      	mov	r0, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	f1ce 0420 	rsb	r4, lr, #32
 8000bb6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bba:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bbe:	fa20 f804 	lsr.w	r8, r0, r4
 8000bc2:	0c3a      	lsrs	r2, r7, #16
 8000bc4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bc8:	ea48 0803 	orr.w	r8, r8, r3
 8000bcc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bd4:	fb02 4411 	mls	r4, r2, r1, r4
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000be0:	fb01 f30c 	mul.w	r3, r1, ip
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x1bc>
 8000bec:	19ed      	adds	r5, r5, r7
 8000bee:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf2:	f080 808a 	bcs.w	8000d0a <__udivmoddi4+0x2c6>
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	f240 8087 	bls.w	8000d0a <__udivmoddi4+0x2c6>
 8000bfc:	3902      	subs	r1, #2
 8000bfe:	443d      	add	r5, r7
 8000c00:	1aeb      	subs	r3, r5, r3
 8000c02:	fa1f f588 	uxth.w	r5, r8
 8000c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c0a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c12:	fb00 f30c 	mul.w	r3, r0, ip
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x1e6>
 8000c1a:	19ed      	adds	r5, r5, r7
 8000c1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c20:	d26f      	bcs.n	8000d02 <__udivmoddi4+0x2be>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0x2be>
 8000c26:	3802      	subs	r0, #2
 8000c28:	443d      	add	r5, r7
 8000c2a:	1aeb      	subs	r3, r5, r3
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	e78f      	b.n	8000b52 <__udivmoddi4+0x10e>
 8000c32:	f1c1 0720 	rsb	r7, r1, #32
 8000c36:	fa22 f807 	lsr.w	r8, r2, r7
 8000c3a:	408b      	lsls	r3, r1
 8000c3c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c40:	ea48 0303 	orr.w	r3, r8, r3
 8000c44:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c52:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c56:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c5a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c5e:	fa1f f883 	uxth.w	r8, r3
 8000c62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c66:	fb09 f408 	mul.w	r4, r9, r8
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c70:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x244>
 8000c76:	18ed      	adds	r5, r5, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	d243      	bcs.n	8000d06 <__udivmoddi4+0x2c2>
 8000c7e:	42ac      	cmp	r4, r5
 8000c80:	d941      	bls.n	8000d06 <__udivmoddi4+0x2c2>
 8000c82:	f1a9 0902 	sub.w	r9, r9, #2
 8000c86:	441d      	add	r5, r3
 8000c88:	1b2d      	subs	r5, r5, r4
 8000c8a:	fa1f fe8e 	uxth.w	lr, lr
 8000c8e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c92:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c9a:	fb00 f808 	mul.w	r8, r0, r8
 8000c9e:	45a0      	cmp	r8, r4
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x26e>
 8000ca2:	18e4      	adds	r4, r4, r3
 8000ca4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ca8:	d229      	bcs.n	8000cfe <__udivmoddi4+0x2ba>
 8000caa:	45a0      	cmp	r8, r4
 8000cac:	d927      	bls.n	8000cfe <__udivmoddi4+0x2ba>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	441c      	add	r4, r3
 8000cb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	454c      	cmp	r4, r9
 8000cc0:	46c6      	mov	lr, r8
 8000cc2:	464d      	mov	r5, r9
 8000cc4:	d315      	bcc.n	8000cf2 <__udivmoddi4+0x2ae>
 8000cc6:	d012      	beq.n	8000cee <__udivmoddi4+0x2aa>
 8000cc8:	b156      	cbz	r6, 8000ce0 <__udivmoddi4+0x29c>
 8000cca:	ebba 030e 	subs.w	r3, sl, lr
 8000cce:	eb64 0405 	sbc.w	r4, r4, r5
 8000cd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd6:	40cb      	lsrs	r3, r1
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	40cc      	lsrs	r4, r1
 8000cdc:	6037      	str	r7, [r6, #0]
 8000cde:	6074      	str	r4, [r6, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e6f8      	b.n	8000adc <__udivmoddi4+0x98>
 8000cea:	4690      	mov	r8, r2
 8000cec:	e6e0      	b.n	8000ab0 <__udivmoddi4+0x6c>
 8000cee:	45c2      	cmp	sl, r8
 8000cf0:	d2ea      	bcs.n	8000cc8 <__udivmoddi4+0x284>
 8000cf2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cf6:	eb69 0503 	sbc.w	r5, r9, r3
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7e4      	b.n	8000cc8 <__udivmoddi4+0x284>
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e7d7      	b.n	8000cb2 <__udivmoddi4+0x26e>
 8000d02:	4640      	mov	r0, r8
 8000d04:	e791      	b.n	8000c2a <__udivmoddi4+0x1e6>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e7be      	b.n	8000c88 <__udivmoddi4+0x244>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	e778      	b.n	8000c00 <__udivmoddi4+0x1bc>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	e745      	b.n	8000ba0 <__udivmoddi4+0x15c>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e708      	b.n	8000b2a <__udivmoddi4+0xe6>
 8000d18:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1c:	443d      	add	r5, r7
 8000d1e:	e72b      	b.n	8000b78 <__udivmoddi4+0x134>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 fba9 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f003 fc5c 	bl	8004614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fbc1 	bl	800150e <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 fb89 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000014 	.word	0x20000014
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000000 	.word	0x20000000

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000004 	.word	0x20000004
 8000dec:	200003bc 	.word	0x200003bc

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200003bc 	.word	0x200003bc

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_Delay+0x40>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f7      	bcc.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e033      	b.n	8000eca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f002 ff13 	bl	8003ca4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e92:	f023 0302 	bic.w	r3, r3, #2
 8000e96:	f043 0202 	orr.w	r2, r3, #2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f93c 	bl	800111c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f023 0303 	bic.w	r3, r3, #3
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eba:	e001      	b.n	8000ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ed4:	b490      	push	{r4, r7}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0x1c>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e107      	b.n	8001100 <HAL_ADC_ConfigChannel+0x22c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b09      	cmp	r3, #9
 8000efe:	d926      	bls.n	8000f4e <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68d9      	ldr	r1, [r3, #12]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4403      	add	r3, r0
 8000f18:	3b1e      	subs	r3, #30
 8000f1a:	2007      	movs	r0, #7
 8000f1c:	fa00 f303 	lsl.w	r3, r0, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	400b      	ands	r3, r1
 8000f24:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68d9      	ldr	r1, [r3, #12]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	4623      	mov	r3, r4
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4423      	add	r3, r4
 8000f42:	3b1e      	subs	r3, #30
 8000f44:	fa00 f303 	lsl.w	r3, r0, r3
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	60d3      	str	r3, [r2, #12]
 8000f4c:	e023      	b.n	8000f96 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6919      	ldr	r1, [r3, #16]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4603      	mov	r3, r0
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4403      	add	r3, r0
 8000f66:	2007      	movs	r0, #7
 8000f68:	fa00 f303 	lsl.w	r3, r0, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	400b      	ands	r3, r1
 8000f70:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6919      	ldr	r1, [r3, #16]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	6898      	ldr	r0, [r3, #8]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	461c      	mov	r4, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4423      	add	r3, r4
 8000f8e:	fa00 f303 	lsl.w	r3, r0, r3
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d824      	bhi.n	8000fe8 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3b05      	subs	r3, #5
 8000fb4:	221f      	movs	r2, #31
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4003      	ands	r3, r0
 8000fbe:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	3b05      	subs	r3, #5
 8000fde:	fa04 f303 	lsl.w	r3, r4, r3
 8000fe2:	4303      	orrs	r3, r0
 8000fe4:	634b      	str	r3, [r1, #52]	; 0x34
 8000fe6:	e04c      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d824      	bhi.n	800103a <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	3b23      	subs	r3, #35	; 0x23
 8001006:	221f      	movs	r2, #31
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	4003      	ands	r3, r0
 8001010:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	461c      	mov	r4, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b23      	subs	r3, #35	; 0x23
 8001030:	fa04 f303 	lsl.w	r3, r4, r3
 8001034:	4303      	orrs	r3, r0
 8001036:	630b      	str	r3, [r1, #48]	; 0x30
 8001038:	e023      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3b41      	subs	r3, #65	; 0x41
 8001050:	221f      	movs	r2, #31
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	4003      	ands	r3, r0
 800105a:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461c      	mov	r4, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b41      	subs	r3, #65	; 0x41
 800107a:	fa04 f303 	lsl.w	r3, r4, r3
 800107e:	4303      	orrs	r3, r0
 8001080:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_ADC_ConfigChannel+0x238>)
 8001084:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_ADC_ConfigChannel+0x23c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d109      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b12      	cmp	r3, #18
 8001096:	d105      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_ADC_ConfigChannel+0x23c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d123      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x222>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d003      	beq.n	80010be <HAL_ADC_ConfigChannel+0x1ea>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b11      	cmp	r3, #17
 80010bc:	d11b      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b10      	cmp	r3, #16
 80010d0:	d111      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_ADC_ConfigChannel+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_ADC_ConfigChannel+0x244>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	0c9a      	lsrs	r2, r3, #18
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010e8:	e002      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bc90      	pop	{r4, r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40012300 	.word	0x40012300
 8001110:	40012000 	.word	0x40012000
 8001114:	20000014 	.word	0x20000014
 8001118:	431bde83 	.word	0x431bde83

0800111c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001124:	4b78      	ldr	r3, [pc, #480]	; (8001308 <ADC_Init+0x1ec>)
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	431a      	orrs	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	6852      	ldr	r2, [r2, #4]
 800114c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001150:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	6851      	ldr	r1, [r2, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6912      	ldr	r2, [r2, #16]
 8001160:	0212      	lsls	r2, r2, #8
 8001162:	430a      	orrs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	6852      	ldr	r2, [r2, #4]
 8001170:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	6851      	ldr	r1, [r2, #4]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6892      	ldr	r2, [r2, #8]
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	6892      	ldr	r2, [r2, #8]
 8001192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	6891      	ldr	r1, [r2, #8]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68d2      	ldr	r2, [r2, #12]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	4a57      	ldr	r2, [pc, #348]	; (800130c <ADC_Init+0x1f0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d022      	beq.n	80011fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	6892      	ldr	r2, [r2, #8]
 80011be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	6891      	ldr	r1, [r2, #8]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011d2:	430a      	orrs	r2, r1
 80011d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6892      	ldr	r2, [r2, #8]
 80011e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	6891      	ldr	r1, [r2, #8]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011f4:	430a      	orrs	r2, r1
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e00f      	b.n	800121a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	6892      	ldr	r2, [r2, #8]
 8001204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	6892      	ldr	r2, [r2, #8]
 8001214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001218:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	6892      	ldr	r2, [r2, #8]
 8001224:	f022 0202 	bic.w	r2, r2, #2
 8001228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	6891      	ldr	r1, [r2, #8]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6992      	ldr	r2, [r2, #24]
 8001238:	0052      	lsls	r2, r2, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d01b      	beq.n	800127e <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6852      	ldr	r2, [r2, #4]
 8001250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001254:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	6852      	ldr	r2, [r2, #4]
 8001260:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001264:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	6851      	ldr	r1, [r2, #4]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001274:	3a01      	subs	r2, #1
 8001276:	0352      	lsls	r2, r2, #13
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	e007      	b.n	800128e <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	6852      	ldr	r2, [r2, #4]
 8001288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800128c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001298:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	69d2      	ldr	r2, [r2, #28]
 80012ac:	3a01      	subs	r2, #1
 80012ae:	0512      	lsls	r2, r2, #20
 80012b0:	430a      	orrs	r2, r1
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	6892      	ldr	r2, [r2, #8]
 80012be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	6891      	ldr	r1, [r2, #8]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012d2:	0252      	lsls	r2, r2, #9
 80012d4:	430a      	orrs	r2, r1
 80012d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	6892      	ldr	r2, [r2, #8]
 80012e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	6891      	ldr	r1, [r2, #8]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6952      	ldr	r2, [r2, #20]
 80012f6:	0292      	lsls	r2, r2, #10
 80012f8:	430a      	orrs	r2, r1
 80012fa:	609a      	str	r2, [r3, #8]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40012300 	.word	0x40012300
 800130c:	0f000001 	.word	0x0f000001

08001310 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800137e:	4909      	ldr	r1, [pc, #36]	; (80013a4 <NVIC_EnableIRQ+0x30>)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	f002 021f 	and.w	r2, r2, #31
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da0b      	bge.n	80013d4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	490d      	ldr	r1, [pc, #52]	; (80013f4 <NVIC_SetPriority+0x4c>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	3b04      	subs	r3, #4
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d2:	e009      	b.n	80013e8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	4908      	ldr	r1, [pc, #32]	; (80013f8 <NVIC_SetPriority+0x50>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	e000e100 	.word	0xe000e100

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	2201      	movs	r2, #1
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	401a      	ands	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001442:	2101      	movs	r1, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	1e59      	subs	r1, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff2f 	bl	8001310 <NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff44 	bl	8001358 <NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff37 	bl	8001374 <NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d106      	bne.n	8001544 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001542:	e005      	b.n	8001550 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0304 	bic.w	r3, r3, #4
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001564:	f000 f802 	bl	800156c <HAL_SYSTICK_Callback>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fc32 	bl	8000df0 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e099      	b.n	80016cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b8:	e00f      	b.n	80015da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ba:	f7ff fc19 	bl	8000df0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d908      	bls.n	80015da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e078      	b.n	80016cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e8      	bne.n	80015ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_DMA_Init+0x158>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2b04      	cmp	r3, #4
 8001632:	d107      	bne.n	8001644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4313      	orrs	r3, r2
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f023 0307 	bic.w	r3, r3, #7
 800165a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b04      	cmp	r3, #4
 800166c:	d117      	bne.n	800169e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00e      	beq.n	800169e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f9e9 	bl	8001a58 <DMA_CheckFifoParam>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800169a:	2301      	movs	r3, #1
 800169c:	e016      	b.n	80016cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f9a0 	bl	80019ec <DMA_CalcBaseAndBitshift>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	223f      	movs	r2, #63	; 0x3f
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f010803f 	.word	0xf010803f

080016d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_DMA_IRQHandler+0x258>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a92      	ldr	r2, [pc, #584]	; (8001934 <HAL_DMA_IRQHandler+0x25c>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a9b      	lsrs	r3, r3, #10
 80016f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	2208      	movs	r2, #8
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01a      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2208      	movs	r2, #8
 8001732:	409a      	lsls	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2201      	movs	r2, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d012      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2204      	movs	r2, #4
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00b      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2204      	movs	r2, #4
 800179e:	409a      	lsls	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f043 0204 	orr.w	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2210      	movs	r2, #16
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d043      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03c      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2210      	movs	r2, #16
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d018      	beq.n	800181a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
 8001806:	e01f      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e016      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	f022 0208 	bic.w	r2, r2, #8
 8001836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2220      	movs	r2, #32
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 808e 	beq.w	8001976 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8086 	beq.w	8001976 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2220      	movs	r2, #32
 8001870:	409a      	lsls	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b05      	cmp	r3, #5
 8001880:	d136      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	f022 0216 	bic.w	r2, r2, #22
 8001890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	6952      	ldr	r2, [r2, #20]
 800189c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <HAL_DMA_IRQHandler+0x1da>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f022 0208 	bic.w	r2, r2, #8
 80018c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	223f      	movs	r2, #63	; 0x3f
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d07d      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
        }
        return;
 80018ee:	e078      	b.n	80019e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d108      	bne.n	800191e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	2b00      	cmp	r3, #0
 8001912:	d030      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e02b      	b.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d027      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
 800192e:	e022      	b.n	8001976 <HAL_DMA_IRQHandler+0x29e>
 8001930:	20000014 	.word	0x20000014
 8001934:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	f022 0210 	bic.w	r2, r2, #16
 8001954:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	2b00      	cmp	r3, #0
 800197c:	d032      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d022      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2205      	movs	r2, #5
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d807      	bhi.n	80019be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f2      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x2ca>
 80019bc:	e000      	b.n	80019c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
 80019e0:	e000      	b.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019e2:	bf00      	nop
    }
  }
}
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop

080019ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3b10      	subs	r3, #16
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <DMA_CalcBaseAndBitshift+0x64>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <DMA_CalcBaseAndBitshift+0x68>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d909      	bls.n	8001a2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a2c:	e007      	b.n	8001a3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	aaaaaaab 	.word	0xaaaaaaab
 8001a54:	0801064c 	.word	0x0801064c

08001a58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11f      	bne.n	8001ab2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d855      	bhi.n	8001b24 <DMA_CheckFifoParam+0xcc>
 8001a78:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <DMA_CheckFifoParam+0x28>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa3 	.word	0x08001aa3
 8001a88:	08001a91 	.word	0x08001a91
 8001a8c:	08001b25 	.word	0x08001b25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d045      	beq.n	8001b28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa0:	e042      	b.n	8001b28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aaa:	d13f      	bne.n	8001b2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab0:	e03c      	b.n	8001b2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d121      	bne.n	8001b00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d836      	bhi.n	8001b30 <DMA_CheckFifoParam+0xd8>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <DMA_CheckFifoParam+0x70>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001adf 	.word	0x08001adf
 8001ad0:	08001ad9 	.word	0x08001ad9
 8001ad4:	08001af1 	.word	0x08001af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
      break;
 8001adc:	e02f      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d024      	beq.n	8001b34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aee:	e021      	b.n	8001b34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af8:	d11e      	bne.n	8001b38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001afe:	e01b      	b.n	8001b38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d902      	bls.n	8001b0c <DMA_CheckFifoParam+0xb4>
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d003      	beq.n	8001b12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b0a:	e018      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b10:	e015      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00e      	beq.n	8001b3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
      break;
 8001b22:	e00b      	b.n	8001b3c <DMA_CheckFifoParam+0xe4>
      break;
 8001b24:	bf00      	nop
 8001b26:	e00a      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b28:	bf00      	nop
 8001b2a:	e008      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b2c:	bf00      	nop
 8001b2e:	e006      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b30:	bf00      	nop
 8001b32:	e004      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b34:	bf00      	nop
 8001b36:	e002      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;   
 8001b38:	bf00      	nop
 8001b3a:	e000      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b3c:	bf00      	nop
    }
  } 
  
  return status; 
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e159      	b.n	8001e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8148 	bne.w	8001e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x4a>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	69b9      	ldr	r1, [r7, #24]
 8001bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d00b      	beq.n	8001c32 <HAL_GPIO_Init+0xe6>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c26:	2b11      	cmp	r3, #17
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d130      	bne.n	8001c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a2 	beq.w	8001e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cd8:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <HAL_GPIO_Init+0x2ec>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x202>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x1fe>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a46      	ldr	r2, [pc, #280]	; (8001e40 <HAL_GPIO_Init+0x2f4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a45      	ldr	r2, [pc, #276]	; (8001e44 <HAL_GPIO_Init+0x2f8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x1f6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a44      	ldr	r2, [pc, #272]	; (8001e48 <HAL_GPIO_Init+0x2fc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x1f2>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d60:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d92:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	f67f aea2 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 f8fe 	bl	8004070 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0c8      	b.n	800202c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f002 f85c 	bl	8003f6c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f001 faf6 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4a57      	ldr	r2, [pc, #348]	; (8002034 <HAL_I2C_Init+0x1b4>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9b      	lsrs	r3, r3, #18
 8001edc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4952      	ldr	r1, [pc, #328]	; (8002038 <HAL_I2C_Init+0x1b8>)
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	d802      	bhi.n	8001efa <HAL_I2C_Init+0x7a>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	e009      	b.n	8001f0e <HAL_I2C_Init+0x8e>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_I2C_Init+0x1bc>)
 8001f06:	fba1 1303 	umull	r1, r3, r1, r3
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a47      	ldr	r2, [pc, #284]	; (8002038 <HAL_I2C_Init+0x1b8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d812      	bhi.n	8001f44 <HAL_I2C_Init+0xc4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d906      	bls.n	8001f40 <HAL_I2C_Init+0xc0>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	e045      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e043      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10f      	bne.n	8001f6c <HAL_I2C_Init+0xec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e010      	b.n	8001f8e <HAL_I2C_Init+0x10e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009a      	lsls	r2, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x116>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01a      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_I2C_Init+0x134>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb2:	e00b      	b.n	8001fcc <HAL_I2C_Init+0x14c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009a      	lsls	r2, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fcc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	69d1      	ldr	r1, [r2, #28]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6a12      	ldr	r2, [r2, #32]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6911      	ldr	r1, [r2, #16]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68d2      	ldr	r2, [r2, #12]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6951      	ldr	r1, [r2, #20]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6992      	ldr	r2, [r2, #24]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	431bde83 	.word	0x431bde83
 8002038:	000186a0 	.word	0x000186a0
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	460b      	mov	r3, r1
 800204e:	817b      	strh	r3, [r7, #10]
 8002050:	4613      	mov	r3, r2
 8002052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002058:	f7fe feca 	bl	8000df0 <HAL_GetTick>
 800205c:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	f040 80ee 	bne.w	8002248 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2319      	movs	r3, #25
 8002072:	2201      	movs	r2, #1
 8002074:	4977      	ldr	r1, [pc, #476]	; (8002254 <HAL_I2C_Master_Transmit+0x214>)
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fc6c 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
 8002084:	e0e1      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_I2C_Master_Transmit+0x54>
 8002090:	2302      	movs	r3, #2
 8002092:	e0da      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d007      	beq.n	80020ba <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2221      	movs	r2, #33	; 0x21
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2210      	movs	r2, #16
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	893a      	ldrh	r2, [r7, #8]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a5a      	ldr	r2, [pc, #360]	; (8002258 <HAL_I2C_Master_Transmit+0x218>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020fc:	8979      	ldrh	r1, [r7, #10]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fadc 	bl	80026c0 <I2C_MasterRequestWrite>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00f      	beq.n	800212e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b04      	cmp	r3, #4
 8002114:	d105      	bne.n	8002122 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e093      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e08d      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8002144:	e066      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fcc1 	bl	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00f      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2b04      	cmp	r3, #4
 800215c:	d109      	bne.n	8002172 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e069      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c58      	adds	r0, r3, #1
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	6248      	str	r0, [r1, #36]	; 0x24
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d119      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x1a4>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c58      	adds	r0, r3, #1
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	6248      	str	r0, [r1, #36]	; 0x24
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	6a39      	ldr	r1, [r7, #32]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fcaf 	bl	8002b4c <I2C_WaitOnBTFFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00f      	beq.n	8002214 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d109      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e01c      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e01a      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d194      	bne.n	8002146 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	00100002 	.word	0x00100002
 8002258:	ffff0000 	.word	0xffff0000

0800225c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
 800226c:	4613      	mov	r3, r2
 800226e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002274:	f7fe fdbc 	bl	8000df0 <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	f040 8215 	bne.w	80026b2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	4985      	ldr	r1, [pc, #532]	; (80024a8 <HAL_I2C_Master_Receive+0x24c>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb5e 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e208      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Receive+0x54>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e201      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2222      	movs	r2, #34	; 0x22
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2210      	movs	r2, #16
 80022f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a68      	ldr	r2, [pc, #416]	; (80024ac <HAL_I2C_Master_Receive+0x250>)
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fa50 	bl	80027c4 <I2C_MasterRequestRead>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00f      	beq.n	800234a <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b04      	cmp	r3, #4
 8002330:	d105      	bne.n	800233e <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1ba      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1b4      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e188      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e168      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11b      	bne.n	80023fa <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	e148      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002420:	e134      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	2b03      	cmp	r3, #3
 8002428:	f200 80eb 	bhi.w	8002602 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b01      	cmp	r3, #1
 8002432:	d127      	bne.n	8002484 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fbc4 	bl	8002bc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	2b20      	cmp	r3, #32
 800244a:	d101      	bne.n	8002450 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e131      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e12f      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	1c59      	adds	r1, r3, #1
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6251      	str	r1, [r2, #36]	; 0x24
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	6912      	ldr	r2, [r2, #16]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002482:	e103      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b02      	cmp	r3, #2
 800248a:	d14a      	bne.n	8002522 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	2200      	movs	r2, #0
 8002494:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_I2C_Master_Receive+0x254>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa5c 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e106      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
 80024a6:	bf00      	nop
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000
 80024b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c59      	adds	r1, r3, #1
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6251      	str	r1, [r2, #36]	; 0x24
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	6912      	ldr	r2, [r2, #16]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	6251      	str	r1, [r2, #36]	; 0x24
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	6912      	ldr	r2, [r2, #16]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002520:	e0b4      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	2200      	movs	r2, #0
 800252a:	4964      	ldr	r1, [pc, #400]	; (80026bc <HAL_I2C_Master_Receive+0x460>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fa11 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0bb      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c59      	adds	r1, r3, #1
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	6251      	str	r1, [r2, #36]	; 0x24
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6912      	ldr	r2, [r2, #16]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	2200      	movs	r2, #0
 8002582:	494e      	ldr	r1, [pc, #312]	; (80026bc <HAL_I2C_Master_Receive+0x460>)
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f9e5 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e08f      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	1c59      	adds	r1, r3, #1
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	6251      	str	r1, [r2, #36]	; 0x24
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	6912      	ldr	r2, [r2, #16]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c59      	adds	r1, r3, #1
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6251      	str	r1, [r2, #36]	; 0x24
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	6912      	ldr	r2, [r2, #16]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002600:	e044      	b.n	800268c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fadd 	bl	8002bc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b20      	cmp	r3, #32
 8002618:	d101      	bne.n	800261e <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e04a      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e048      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	6251      	str	r1, [r2, #36]	; 0x24
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	6912      	ldr	r2, [r2, #16]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d116      	bne.n	800268c <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	6251      	str	r1, [r2, #36]	; 0x24
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	6912      	ldr	r2, [r2, #16]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f aec6 	bne.w	8002422 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3728      	adds	r7, #40	; 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00010004 	.word	0x00010004

080026c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d006      	beq.n	80026ea <I2C_MasterRequestWrite+0x2a>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d003      	beq.n	80026ea <I2C_MasterRequestWrite+0x2a>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e8:	d108      	bne.n	80026fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00b      	b.n	8002714 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b12      	cmp	r3, #18
 8002702:	d107      	bne.n	8002714 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f917 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e040      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002738:	d107      	bne.n	800274a <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	897a      	ldrh	r2, [r7, #10]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	e021      	b.n	800278e <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	897a      	ldrh	r2, [r7, #10]
 8002750:	11d2      	asrs	r2, r2, #7
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 0206 	and.w	r2, r2, #6
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f062 020f 	orn	r2, r2, #15
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4915      	ldr	r1, [pc, #84]	; (80027bc <I2C_MasterRequestWrite+0xfc>)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f944 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b04      	cmp	r3, #4
 800277a:	d101      	bne.n	8002780 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e018      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e016      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	897a      	ldrh	r2, [r7, #10]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	490b      	ldr	r1, [pc, #44]	; (80027c0 <I2C_MasterRequestWrite+0x100>)
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f92e 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d101      	bne.n	80027ac <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e002      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e000      	b.n	80027b2 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	00010008 	.word	0x00010008
 80027c0:	00010002 	.word	0x00010002

080027c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	460b      	mov	r3, r1
 80027d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d006      	beq.n	80027fe <I2C_MasterRequestRead+0x3a>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d003      	beq.n	80027fe <I2C_MasterRequestRead+0x3a>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e00b      	b.n	8002828 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	2b11      	cmp	r3, #17
 8002816:	d107      	bne.n	8002828 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f88d 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e07f      	b.n	8002944 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800284c:	d108      	bne.n	8002860 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	897a      	ldrh	r2, [r7, #10]
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	611a      	str	r2, [r3, #16]
 800285e:	e05f      	b.n	8002920 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	897a      	ldrh	r2, [r7, #10]
 8002866:	11d2      	asrs	r2, r2, #7
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 0206 	and.w	r2, r2, #6
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f062 020f 	orn	r2, r2, #15
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4933      	ldr	r1, [pc, #204]	; (800294c <I2C_MasterRequestRead+0x188>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f8b9 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b04      	cmp	r3, #4
 8002890:	d101      	bne.n	8002896 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e056      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e054      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	897a      	ldrh	r2, [r7, #10]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4929      	ldr	r1, [pc, #164]	; (8002950 <I2C_MasterRequestRead+0x18c>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f8a3 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d101      	bne.n	80028c2 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e040      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e03e      	b.n	8002944 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f82b 	bl	8002954 <I2C_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e01d      	b.n	8002944 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	897a      	ldrh	r2, [r7, #10]
 800290e:	11d2      	asrs	r2, r2, #7
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 0206 	and.w	r2, r2, #6
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f062 020e 	orn	r2, r2, #14
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	490a      	ldr	r1, [pc, #40]	; (8002950 <I2C_MasterRequestRead+0x18c>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f865 	bl	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b04      	cmp	r3, #4
 8002938:	d101      	bne.n	800293e <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e002      	b.n	8002944 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e000      	b.n	8002944 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00010008 	.word	0x00010008
 8002950:	00010002 	.word	0x00010002

08002954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002964:	e01f      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d01b      	beq.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002974:	f7fe fa3c 	bl	8000df0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad2      	subs	r2, r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d910      	bls.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e023      	b.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10d      	bne.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x78>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	e00c      	b.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x92>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0bc      	beq.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a04:	e040      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d11c      	bne.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a2e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2204      	movs	r2, #4
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e03c      	b.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d017      	beq.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002a5e:	f7fe f9c7 	bl	8000df0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e020      	b.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10c      	bne.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e00b      	b.n	8002ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d19e      	bne.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ade:	e029      	b.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f8ba 	bl	8002c5a <I2C_IsAcknowledgeFailed>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e029      	b.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d01d      	beq.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002afe:	f7fe f977 	bl	8000df0 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d912      	bls.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d1ce      	bne.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b58:	e029      	b.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f87d 	bl	8002c5a <I2C_IsAcknowledgeFailed>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e029      	b.n	8002bbe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d01d      	beq.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b78:	f7fe f93a 	bl	8000df0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d912      	bls.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e007      	b.n	8002bbe <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d1ce      	bne.n	8002b5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd2:	e036      	b.n	8002c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d114      	bne.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0210 	mvn.w	r2, #16
 8002bea:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e022      	b.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002c12:	f7fe f8ed 	bl	8000df0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d90f      	bls.n	8002c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e007      	b.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d1c1      	bne.n	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d114      	bne.n	8002c9c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c7a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e22d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d075      	beq.n	8002db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cca:	4ba3      	ldr	r3, [pc, #652]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4ba0      	ldr	r3, [pc, #640]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b9d      	ldr	r3, [pc, #628]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d10b      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	4b99      	ldr	r3, [pc, #612]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x108>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d157      	bne.n	8002db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e208      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d106      	bne.n	8002d20 <HAL_RCC_OscConfig+0x74>
 8002d12:	4a91      	ldr	r2, [pc, #580]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	4b90      	ldr	r3, [pc, #576]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01d      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x98>
 8002d2a:	4a8b      	ldr	r2, [pc, #556]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	4b8a      	ldr	r3, [pc, #552]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4a88      	ldr	r2, [pc, #544]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	4b87      	ldr	r3, [pc, #540]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d44:	4a84      	ldr	r2, [pc, #528]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d46:	4b84      	ldr	r3, [pc, #528]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4a81      	ldr	r2, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d52:	4b81      	ldr	r3, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe f844 	bl	8000df0 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe f840 	bl	8000df0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1cd      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0xc0>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f830 	bl	8000df0 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe f82c 	bl	8000df0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1b9      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0xe8>
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b62      	ldr	r3, [pc, #392]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b5f      	ldr	r3, [pc, #380]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b5c      	ldr	r3, [pc, #368]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e18d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4956      	ldr	r1, [pc, #344]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	4b55      	ldr	r3, [pc, #340]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <HAL_RCC_OscConfig+0x2b0>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fd ffe5 	bl	8000df0 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fd ffe1 	bl	8000df0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e16e      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4943      	ldr	r1, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_OscConfig+0x2b0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fd ffc4 	bl	8000df0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fd ffc0 	bl	8000df0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e14d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d030      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_RCC_OscConfig+0x2b4>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fd ffa4 	bl	8000df0 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fd ffa0 	bl	8000df0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e12d      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x200>
 8002eca:	e015      	b.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_OscConfig+0x2b4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fd ff8d 	bl	8000df0 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fd ff89 	bl	8000df0 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e116      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80a0 	beq.w	8003046 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x2b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d121      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_RCC_OscConfig+0x2b8>)
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCC_OscConfig+0x2b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fd ff4f 	bl	8000df0 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e011      	b.n	8002f7a <HAL_RCC_OscConfig+0x2ce>
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	42470000 	.word	0x42470000
 8002f60:	42470e80 	.word	0x42470e80
 8002f64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fd ff42 	bl	8000df0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0cf      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
 8002f8e:	4a66      	ldr	r2, [pc, #408]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002f90:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	e01c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x32a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d10c      	bne.n	8002fbe <HAL_RCC_OscConfig+0x312>
 8002fa4:	4a60      	ldr	r2, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fa6:	4b60      	ldr	r3, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb0:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	e00b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x32a>
 8002fbe:	4a5a      	ldr	r2, [pc, #360]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fcc:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d015      	beq.n	800300a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fd ff07 	bl	8000df0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fd ff03 	bl	8000df0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e08e      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ee      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x33a>
 8003008:	e014      	b.n	8003034 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fd fef1 	bl	8000df0 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fd feed 	bl	8000df0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e078      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ee      	bne.n	8003012 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 800303c:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d064      	beq.n	8003118 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b08      	cmp	r3, #8
 8003058:	d05c      	beq.n	8003114 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d141      	bne.n	80030e6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_RCC_OscConfig+0x480>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fd fec2 	bl	8000df0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7fd febe 	bl	8000df0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04b      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308e:	4926      	ldr	r1, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	019b      	lsls	r3, r3, #6
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	3b01      	subs	r3, #1
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	061b      	lsls	r3, r3, #24
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_RCC_OscConfig+0x480>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fd fe97 	bl	8000df0 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fd fe93 	bl	8000df0 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e020      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x41a>
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_OscConfig+0x480>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd fe80 	bl	8000df0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fd fe7c 	bl	8000df0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e009      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCC_OscConfig+0x47c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x448>
 8003112:	e001      	b.n	8003118 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40007000 	.word	0x40007000
 8003128:	40023800 	.word	0x40023800
 800312c:	42470060 	.word	0x42470060

08003130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ca      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 020f 	and.w	r2, r3, #15
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20c      	bcs.n	800316c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0b6      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	4b58      	ldr	r3, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	4b52      	ldr	r3, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a8:	494f      	ldr	r1, [pc, #316]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d044      	beq.n	8003250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d119      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07d      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06d      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e065      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4936      	ldr	r1, [pc, #216]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 0203 	bic.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003220:	f7fd fde6 	bl	8000df0 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fd fde2 	bl	8000df0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e04d      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d90c      	bls.n	8003278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 020f 	and.w	r2, r3, #15
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e030      	b.n	80032da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4918      	ldr	r1, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a2:	4911      	ldr	r1, [pc, #68]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b6:	f000 f81d 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032ba:	4601      	mov	r1, r0
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	5cd3      	ldrb	r3, [r2, r3]
 80032ca:	fa21 f303 	lsr.w	r3, r1, r3
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fd fd48 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	08010654 	.word	0x08010654
 80032f0:	20000014 	.word	0x20000014

080032f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	b08f      	sub	sp, #60	; 0x3c
 80032fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003300:	2300      	movs	r3, #0
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330c:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b04      	cmp	r3, #4
 8003316:	d007      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x34>
 8003318:	2b08      	cmp	r3, #8
 800331a:	d008      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x3a>
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 80b2 	bne.w	8003486 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8003326:	e0b1      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003328:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800332c:	e0ae      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800332e:	4b5a      	ldr	r3, [pc, #360]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003338:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d04e      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003344:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	f04f 0400 	mov.w	r4, #0
 800334e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	ea01 0103 	and.w	r1, r1, r3
 800335a:	ea02 0204 	and.w	r2, r2, r4
 800335e:	460b      	mov	r3, r1
 8003360:	4614      	mov	r4, r2
 8003362:	0160      	lsls	r0, r4, #5
 8003364:	6278      	str	r0, [r7, #36]	; 0x24
 8003366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003368:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800336c:	6278      	str	r0, [r7, #36]	; 0x24
 800336e:	015b      	lsls	r3, r3, #5
 8003370:	623b      	str	r3, [r7, #32]
 8003372:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003376:	1a5b      	subs	r3, r3, r1
 8003378:	eb64 0402 	sbc.w	r4, r4, r2
 800337c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003380:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003384:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003388:	ebb8 0803 	subs.w	r8, r8, r3
 800338c:	eb69 0904 	sbc.w	r9, r9, r4
 8003390:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80033a8:	eb18 0801 	adds.w	r8, r8, r1
 80033ac:	eb49 0902 	adc.w	r9, r9, r2
 80033b0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80033c8:	4640      	mov	r0, r8
 80033ca:	4649      	mov	r1, r9
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	f7fd fb1d 	bl	8000a14 <__aeabi_uldivmod>
 80033da:	4603      	mov	r3, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
 80033e0:	e043      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	ea01 0103 	and.w	r1, r1, r3
 80033f8:	ea02 0204 	and.w	r2, r2, r4
 80033fc:	460b      	mov	r3, r1
 80033fe:	4614      	mov	r4, r2
 8003400:	0160      	lsls	r0, r4, #5
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003414:	1a5b      	subs	r3, r3, r1
 8003416:	eb64 0402 	sbc.w	r4, r4, r2
 800341a:	01a6      	lsls	r6, r4, #6
 800341c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003420:	019d      	lsls	r5, r3, #6
 8003422:	1aed      	subs	r5, r5, r3
 8003424:	eb66 0604 	sbc.w	r6, r6, r4
 8003428:	00f3      	lsls	r3, r6, #3
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	e897 0060 	ldmia.w	r7, {r5, r6}
 800343c:	186d      	adds	r5, r5, r1
 800343e:	eb46 0602 	adc.w	r6, r6, r2
 8003442:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003446:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800344a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800344e:	4655      	mov	r5, sl
 8003450:	465e      	mov	r6, fp
 8003452:	4628      	mov	r0, r5
 8003454:	4631      	mov	r1, r6
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	f04f 0400 	mov.w	r4, #0
 800345c:	461a      	mov	r2, r3
 800345e:	4623      	mov	r3, r4
 8003460:	f7fd fad8 	bl	8000a14 <__aeabi_uldivmod>
 8003464:	4603      	mov	r3, r0
 8003466:	460c      	mov	r4, r1
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0c1b      	lsrs	r3, r3, #16
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	3301      	adds	r3, #1
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800347a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003484:	e002      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800348a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800348e:	4618      	mov	r0, r3
 8003490:	373c      	adds	r7, #60	; 0x3c
 8003492:	46bd      	mov	sp, r7
 8003494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000014 	.word	0x20000014

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c4:	4601      	mov	r1, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0a9b      	lsrs	r3, r3, #10
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	08010664 	.word	0x08010664

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffdc 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034ec:	4601      	mov	r1, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0b5b      	lsrs	r3, r3, #13
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4a03      	ldr	r2, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	08010664 	.word	0x08010664

0800350c <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e03f      	b.n	800359e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f001 fa1a 	bl	800496c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f90b 	bl	800376c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6912      	ldr	r2, [r2, #16]
 8003560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	6952      	ldr	r2, [r2, #20]
 8003570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003574:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	68d2      	ldr	r2, [r2, #12]
 8003580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003584:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af02      	add	r7, sp, #8
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 8082 	bne.w	80036cc <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Transmit+0x2e>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e07a      	b.n	80036ce <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Transmit+0x40>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e073      	b.n	80036ce <HAL_UART_Transmit+0x128>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	; 0x21
 80035f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035fc:	f7fd fbf8 	bl	8000df0 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800360e:	e041      	b.n	8003694 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	d121      	bne.n	800366c <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2200      	movs	r2, #0
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f84f 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e045      	b.n	80036ce <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003652:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3302      	adds	r3, #2
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	e017      	b.n	8003694 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3301      	adds	r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	e013      	b.n	8003694 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f82d 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e023      	b.n	80036ce <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1b8      	bne.n	8003610 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f814 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e00a      	b.n	80036ce <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80036e6:	e02c      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d028      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f6:	f7fd fb7b 	bl	8000df0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad2      	subs	r2, r2, r3
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	429a      	cmp	r2, r3
 8003704:	d91d      	bls.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	68d2      	ldr	r2, [r2, #12]
 8003710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003714:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	6952      	ldr	r2, [r2, #20]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	401a      	ands	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0c3      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003786:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037a8:	f023 030c 	bic.w	r3, r3, #12
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fc:	f040 80e4 	bne.w	80039c8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4aab      	ldr	r2, [pc, #684]	; (8003ab4 <UART_SetConfig+0x348>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <UART_SetConfig+0xa8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4aaa      	ldr	r2, [pc, #680]	; (8003ab8 <UART_SetConfig+0x34c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d16c      	bne.n	80038ee <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681c      	ldr	r4, [r3, #0]
 8003818:	f7ff fe64 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 800381c:	4602      	mov	r2, r0
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4aa2      	ldr	r2, [pc, #648]	; (8003abc <UART_SetConfig+0x350>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	011d      	lsls	r5, r3, #4
 800383c:	f7ff fe52 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003840:	4602      	mov	r2, r0
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb2 f6f3 	udiv	r6, r2, r3
 8003856:	f7ff fe45 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 800385a:	4602      	mov	r2, r0
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	4a92      	ldr	r2, [pc, #584]	; (8003abc <UART_SetConfig+0x350>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2264      	movs	r2, #100	; 0x64
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	1af3      	subs	r3, r6, r3
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	3332      	adds	r3, #50	; 0x32
 8003884:	4a8d      	ldr	r2, [pc, #564]	; (8003abc <UART_SetConfig+0x350>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003892:	441d      	add	r5, r3
 8003894:	f7ff fe26 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003898:	4602      	mov	r2, r0
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	441a      	add	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80038ae:	f7ff fe19 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <UART_SetConfig+0x350>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2264      	movs	r2, #100	; 0x64
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	1af3      	subs	r3, r6, r3
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a77      	ldr	r2, [pc, #476]	; (8003abc <UART_SetConfig+0x350>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	442b      	add	r3, r5
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	e154      	b.n	8003b98 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	f7ff fde3 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4a6b      	ldr	r2, [pc, #428]	; (8003abc <UART_SetConfig+0x350>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	011d      	lsls	r5, r3, #4
 8003916:	f7ff fdd1 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 800391a:	4602      	mov	r2, r0
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003930:	f7ff fdc4 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003934:	4602      	mov	r2, r0
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009a      	lsls	r2, r3, #2
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	4a5c      	ldr	r2, [pc, #368]	; (8003abc <UART_SetConfig+0x350>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2264      	movs	r2, #100	; 0x64
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	1af3      	subs	r3, r6, r3
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a57      	ldr	r2, [pc, #348]	; (8003abc <UART_SetConfig+0x350>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800396c:	441d      	add	r5, r3
 800396e:	f7ff fda5 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003972:	4602      	mov	r2, r0
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fbb2 f6f3 	udiv	r6, r2, r3
 8003988:	f7ff fd98 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 800398c:	4602      	mov	r2, r0
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4a46      	ldr	r2, [pc, #280]	; (8003abc <UART_SetConfig+0x350>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2264      	movs	r2, #100	; 0x64
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	1af3      	subs	r3, r6, r3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a41      	ldr	r2, [pc, #260]	; (8003abc <UART_SetConfig+0x350>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	442b      	add	r3, r5
 80039c4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80039c6:	e0e7      	b.n	8003b98 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <UART_SetConfig+0x348>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <UART_SetConfig+0x270>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <UART_SetConfig+0x34c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d171      	bne.n	8003ac0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	f7ff fd80 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009a      	lsls	r2, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	4a30      	ldr	r2, [pc, #192]	; (8003abc <UART_SetConfig+0x350>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	011d      	lsls	r5, r3, #4
 8003a04:	f7ff fd6e 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a1e:	f7ff fd61 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <UART_SetConfig+0x350>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2264      	movs	r2, #100	; 0x64
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	1af3      	subs	r3, r6, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	3332      	adds	r3, #50	; 0x32
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <UART_SetConfig+0x350>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a58:	441d      	add	r5, r3
 8003a5a:	f7ff fd43 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009a      	lsls	r2, r3, #2
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a74:	f7ff fd36 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <UART_SetConfig+0x350>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2264      	movs	r2, #100	; 0x64
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	1af3      	subs	r3, r6, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a06      	ldr	r2, [pc, #24]	; (8003abc <UART_SetConfig+0x350>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	442b      	add	r3, r5
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	e071      	b.n	8003b98 <UART_SetConfig+0x42c>
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40011400 	.word	0x40011400
 8003abc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681c      	ldr	r4, [r3, #0]
 8003ac4:	f7ff fcfa 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <UART_SetConfig+0x434>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	011d      	lsls	r5, r3, #4
 8003ae8:	f7ff fce8 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b02:	f7ff fcdb 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	; 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1af3      	subs	r3, r6, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3c:	441d      	add	r5, r3
 8003b3e:	f7ff fcbd 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b58:	f7ff fcb0 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009a      	lsls	r2, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2264      	movs	r2, #100	; 0x64
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	1af3      	subs	r3, r6, r3
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	442b      	add	r3, r5
 8003b94:	60a3      	str	r3, [r4, #8]
}
 8003b96:	e7ff      	b.n	8003b98 <UART_SetConfig+0x42c>
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba0:	51eb851f 	.word	0x51eb851f

08003ba4 <lidar_init>:
#include "TFMini.h"

bool lidar_init() {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	lidar_raw_values = malloc(number_of_characters*sizeof(uint8_t));
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <lidar_init+0x34>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00b fdd3 	bl	800f758 <malloc>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <lidar_init+0x38>)
 8003bb8:	601a      	str	r2, [r3, #0]

	if (lidar_raw_values == NULL) {
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <lidar_init+0x38>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <lidar_init+0x28>
		printf("lidar malloc failed\r\n");
 8003bc2:	4807      	ldr	r0, [pc, #28]	; (8003be0 <lidar_init+0x3c>)
 8003bc4:	f00c f9da 	bl	800ff7c <puts>
		return false;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e003      	b.n	8003bd4 <lidar_init+0x30>
	}
	printf("lidar malloc succeeded\r\n");
 8003bcc:	4805      	ldr	r0, [pc, #20]	; (8003be4 <lidar_init+0x40>)
 8003bce:	f00c f9d5 	bl	800ff7c <puts>
	return true;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000008 	.word	0x20000008
 8003bdc:	200003c0 	.word	0x200003c0
 8003be0:	08010344 	.word	0x08010344
 8003be4:	0801035c 	.word	0x0801035c

08003be8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003bf0:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <MX_ADC1_Init+0xb0>)
 8003bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003bf6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c0e:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <MX_ADC1_Init+0xb4>)
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c28:	2202      	movs	r2, #2
 8003c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c38:	4816      	ldr	r0, [pc, #88]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c3a:	f7fd f907 	bl	8000e4c <HAL_ADC_Init>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c44:	214a      	movs	r1, #74	; 0x4a
 8003c46:	4816      	ldr	r0, [pc, #88]	; (8003ca0 <MX_ADC1_Init+0xb8>)
 8003c48:	f000 fcbe 	bl	80045c8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8003c4c:	230a      	movs	r3, #10
 8003c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003c54:	2307      	movs	r3, #7
 8003c56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c58:	463b      	mov	r3, r7
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	480d      	ldr	r0, [pc, #52]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c5e:	f7fd f939 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c68:	2154      	movs	r1, #84	; 0x54
 8003c6a:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <MX_ADC1_Init+0xb8>)
 8003c6c:	f000 fcac 	bl	80045c8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Rank = 2;
 8003c70:	2302      	movs	r3, #2
 8003c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c74:	463b      	mov	r3, r7
 8003c76:	4619      	mov	r1, r3
 8003c78:	4806      	ldr	r0, [pc, #24]	; (8003c94 <MX_ADC1_Init+0xac>)
 8003c7a:	f7fd f92b 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <MX_ADC1_Init+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c84:	215c      	movs	r1, #92	; 0x5c
 8003c86:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <MX_ADC1_Init+0xb8>)
 8003c88:	f000 fc9e 	bl	80045c8 <_Error_Handler>
  }

}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200003c4 	.word	0x200003c4
 8003c98:	40012000 	.word	0x40012000
 8003c9c:	0f000001 	.word	0x0f000001
 8003ca0:	08010410 	.word	0x08010410

08003ca4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a29      	ldr	r2, [pc, #164]	; (8003d58 <HAL_ADC_MspInit+0xb4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d14b      	bne.n	8003d4e <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <HAL_ADC_MspInit+0xb8>)
 8003cbc:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <HAL_ADC_MspInit+0xb8>)
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc6:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <HAL_ADC_MspInit+0xb8>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cde:	f107 030c 	add.w	r3, r7, #12
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	481e      	ldr	r0, [pc, #120]	; (8003d60 <HAL_ADC_MspInit+0xbc>)
 8003ce6:	f7fd ff31 	bl	8001b4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_ADC_MspInit+0xc4>)
 8003cee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d2e:	480d      	ldr	r0, [pc, #52]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d30:	f7fd fc24 	bl	800157c <HAL_DMA_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_ADC_MspInit+0x9e>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003d3a:	2184      	movs	r1, #132	; 0x84
 8003d3c:	480b      	ldr	r0, [pc, #44]	; (8003d6c <HAL_ADC_MspInit+0xc8>)
 8003d3e:	f000 fc43 	bl	80045c8 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <HAL_ADC_MspInit+0xc0>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d4e:	bf00      	nop
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40012000 	.word	0x40012000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020800 	.word	0x40020800
 8003d64:	2000040c 	.word	0x2000040c
 8003d68:	40026410 	.word	0x40026410
 8003d6c:	08010410 	.word	0x08010410

08003d70 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <MX_DMA_Init+0x4c>)
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <MX_DMA_Init+0x4c>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d84:	6313      	str	r3, [r2, #48]	; 0x30
 8003d86:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <MX_DMA_Init+0x4c>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	2038      	movs	r0, #56	; 0x38
 8003d98:	f7fd fb8f 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003d9c:	2038      	movs	r0, #56	; 0x38
 8003d9e:	f7fd fba8 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003da2:	2200      	movs	r2, #0
 8003da4:	2100      	movs	r1, #0
 8003da6:	2039      	movs	r0, #57	; 0x39
 8003da8:	f7fd fb87 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003dac:	2039      	movs	r0, #57	; 0x39
 8003dae:	f7fd fba0 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dcc:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f043 0304 	orr.w	r3, r3, #4
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <MX_GPIO_Init+0xd0>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e3c:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <MX_GPIO_Init+0xd4>)
 8003e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4813      	ldr	r0, [pc, #76]	; (8003e98 <MX_GPIO_Init+0xd8>)
 8003e4c:	f7fd fe7e 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin|VL53L0X_INT_Pin;
 8003e50:	2330      	movs	r3, #48	; 0x30
 8003e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <MX_GPIO_Init+0xdc>)
 8003e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4619      	mov	r1, r3
 8003e62:	480f      	ldr	r0, [pc, #60]	; (8003ea0 <MX_GPIO_Init+0xe0>)
 8003e64:	f7fd fe72 	bl	8001b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	200a      	movs	r0, #10
 8003e6e:	f7fd fb24 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003e72:	200a      	movs	r0, #10
 8003e74:	f7fd fb3d 	bl	80014f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2017      	movs	r0, #23
 8003e7e:	f7fd fb1c 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e82:	2017      	movs	r0, #23
 8003e84:	f7fd fb35 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 8003e88:	bf00      	nop
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	10110000 	.word	0x10110000
 8003e98:	40020800 	.word	0x40020800
 8003e9c:	10210000 	.word	0x10210000
 8003ea0:	40020000 	.word	0x40020000

08003ea4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <MX_I2C1_Init+0x58>)
 8003eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <MX_I2C1_Init+0x5c>)
 8003eb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ec6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <MX_I2C1_Init+0x54>)
 8003ee2:	f7fd ffcd 	bl	8001e80 <HAL_I2C_Init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003eec:	2143      	movs	r1, #67	; 0x43
 8003eee:	4805      	ldr	r0, [pc, #20]	; (8003f04 <MX_I2C1_Init+0x60>)
 8003ef0:	f000 fb6a 	bl	80045c8 <_Error_Handler>
  }

}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200004c0 	.word	0x200004c0
 8003efc:	40005400 	.word	0x40005400
 8003f00:	00061a80 	.word	0x00061a80
 8003f04:	08010420 	.word	0x08010420

08003f08 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <MX_I2C3_Init+0x58>)
 8003f10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <MX_I2C3_Init+0x5c>)
 8003f16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003f44:	4805      	ldr	r0, [pc, #20]	; (8003f5c <MX_I2C3_Init+0x54>)
 8003f46:	f7fd ff9b 	bl	8001e80 <HAL_I2C_Init>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f50:	2156      	movs	r1, #86	; 0x56
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <MX_I2C3_Init+0x60>)
 8003f54:	f000 fb38 	bl	80045c8 <_Error_Handler>
  }

}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	2000046c 	.word	0x2000046c
 8003f60:	40005c00 	.word	0x40005c00
 8003f64:	00061a80 	.word	0x00061a80
 8003f68:	08010420 	.word	0x08010420

08003f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_I2C_MspInit+0xc4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d11f      	bne.n	8003fbe <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f84:	2312      	movs	r3, #18
 8003f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f90:	2304      	movs	r3, #4
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4826      	ldr	r0, [pc, #152]	; (8004034 <HAL_I2C_MspInit+0xc8>)
 8003f9c:	f7fd fdd6 	bl	8001b4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	4a24      	ldr	r2, [pc, #144]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fae:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb0:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003fbc:	e034      	b.n	8004028 <HAL_I2C_MspInit+0xbc>
  else if(i2cHandle->Instance==I2C3)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_I2C_MspInit+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d12f      	bne.n	8004028 <HAL_I2C_MspInit+0xbc>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fce:	2312      	movs	r3, #18
 8003fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fda:	2304      	movs	r3, #4
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4816      	ldr	r0, [pc, #88]	; (8004040 <HAL_I2C_MspInit+0xd4>)
 8003fe6:	f7fd fdb1 	bl	8001b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ff0:	2312      	movs	r3, #18
 8003ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	4619      	mov	r1, r3
 8004006:	480f      	ldr	r0, [pc, #60]	; (8004044 <HAL_I2C_MspInit+0xd8>)
 8004008:	f7fd fda0 	bl	8001b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800401a:	6413      	str	r3, [r2, #64]	; 0x40
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_I2C_MspInit+0xcc>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	bf00      	nop
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40005400 	.word	0x40005400
 8004034:	40020400 	.word	0x40020400
 8004038:	40023800 	.word	0x40023800
 800403c:	40005c00 	.word	0x40005c00
 8004040:	40020800 	.word	0x40020800
 8004044:	40020000 	.word	0x40020000

08004048 <_write>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	b29a      	uxth	r2, r3
 8004058:	2332      	movs	r3, #50	; 0x32
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4803      	ldr	r0, [pc, #12]	; (800406c <_write+0x24>)
 800405e:	f7ff faa2 	bl	80035a6 <HAL_UART_Transmit>
	return len;
 8004062:	687b      	ldr	r3, [r7, #4]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000ae4 	.word	0x20000ae4

08004070 <HAL_GPIO_EXTI_Callback>:
VL53L0X_Dev_t dev2;
VL53L0X_DEV Dev2 = &dev2;
int status, status2, ting = 0;
volatile int VL53L0X_callback_counter, VL53L1X_callback_counter;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == VL53L0X_INT_Pin) {
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b20      	cmp	r3, #32
 800407e:	d104      	bne.n	800408a <HAL_GPIO_EXTI_Callback+0x1a>
		++VL53L0X_callback_counter;
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004088:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == VL53L1X_INT_Pin) {
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b10      	cmp	r3, #16
 800408e:	d104      	bne.n	800409a <HAL_GPIO_EXTI_Callback+0x2a>
		++VL53L1X_callback_counter;
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8004098:	6013      	str	r3, [r2, #0]
	}
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200008bc 	.word	0x200008bc
 80040ac:	200008cc 	.word	0x200008cc

080040b0 <AutonomousLowPowerRangingTest>:

void AutonomousLowPowerRangingTest(void) {
 80040b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af04      	add	r7, sp, #16

	static VL53L1_RangingMeasurementData_t RangingData;
	if (ting == 0) {
 80040b8:	4b57      	ldr	r3, [pc, #348]	; (8004218 <AutonomousLowPowerRangingTest+0x168>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d157      	bne.n	8004170 <AutonomousLowPowerRangingTest+0xc0>
		status = VL53L1_WaitDeviceBooted(Dev);
 80040c0:	4b56      	ldr	r3, [pc, #344]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f005 fe29 	bl	8009d1c <VL53L1_WaitDeviceBooted>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b54      	ldr	r3, [pc, #336]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 80040d0:	601a      	str	r2, [r3, #0]
		status = VL53L1_DataInit(Dev);
 80040d2:	4b52      	ldr	r3, [pc, #328]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f005 fda4 	bl	8009c24 <VL53L1_DataInit>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 80040e2:	601a      	str	r2, [r3, #0]
		status = VL53L1_StaticInit(Dev);
 80040e4:	4b4d      	ldr	r3, [pc, #308]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f005 fdf0 	bl	8009cce <VL53L1_StaticInit>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b4b      	ldr	r3, [pc, #300]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 80040f4:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetPresetMode(Dev, VL53L1_PRESETMODE_AUTONOMOUS);
 80040f6:	4b49      	ldr	r3, [pc, #292]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2103      	movs	r1, #3
 80040fc:	4618      	mov	r0, r3
 80040fe:	f005 fef2 	bl	8009ee6 <VL53L1_SetPresetMode>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	4b46      	ldr	r3, [pc, #280]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004108:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 800410a:	4b44      	ldr	r3, [pc, #272]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2103      	movs	r1, #3
 8004110:	4618      	mov	r0, r3
 8004112:	f005 ff30 	bl	8009f76 <VL53L1_SetDistanceMode>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 800411c:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 70000);
 800411e:	4b3f      	ldr	r3, [pc, #252]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4940      	ldr	r1, [pc, #256]	; (8004224 <AutonomousLowPowerRangingTest+0x174>)
 8004124:	4618      	mov	r0, r3
 8004126:	f005 ffad 	bl	800a084 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	4b3c      	ldr	r3, [pc, #240]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004130:	601a      	str	r2, [r3, #0]
		status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 400);
 8004132:	4b3a      	ldr	r3, [pc, #232]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800413a:	4618      	mov	r0, r3
 800413c:	f006 f920 	bl	800a380 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	4b36      	ldr	r3, [pc, #216]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004146:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8004148:	2064      	movs	r0, #100	; 0x64
 800414a:	f7fc fe5d 	bl	8000e08 <HAL_Delay>
		status = VL53L1_StartMeasurement(Dev);
 800414e:	4b33      	ldr	r3, [pc, #204]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f006 fa8a 	bl	800a66c <VL53L1_StartMeasurement>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	4b30      	ldr	r3, [pc, #192]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 800415e:	601a      	str	r2, [r3, #0]

		if (status) {
 8004160:	4b2f      	ldr	r3, [pc, #188]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <AutonomousLowPowerRangingTest+0xc0>
			printf("VL53L1_StartMeasurement failed \r\n");
 8004168:	482f      	ldr	r0, [pc, #188]	; (8004228 <AutonomousLowPowerRangingTest+0x178>)
 800416a:	f00b ff07 	bl	800ff7c <puts>
			while (1)
 800416e:	e7fe      	b.n	800416e <AutonomousLowPowerRangingTest+0xbe>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004170:	bf30      	wfi
	if (interruptModeQuestionMark == 0) {
		//do // interrupt mode
		//{
		__WFI();

		if (VL53L1X_callback_counter != 0) {
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <AutonomousLowPowerRangingTest+0x17c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d043      	beq.n	8004202 <AutonomousLowPowerRangingTest+0x152>
			VL53L1X_callback_counter = 0;
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <AutonomousLowPowerRangingTest+0x17c>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
			status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8004180:	4b26      	ldr	r3, [pc, #152]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	492a      	ldr	r1, [pc, #168]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 8004186:	4618      	mov	r0, r3
 8004188:	f006 fd54 	bl	800ac34 <VL53L1_GetRangingMeasurementData>
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	4b23      	ldr	r3, [pc, #140]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004192:	601a      	str	r2, [r3, #0]
			if (status == 0) {
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d129      	bne.n	80041f0 <AutonomousLowPowerRangingTest+0x140>
				printf("VL53L1X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 800419e:	7edb      	ldrb	r3, [r3, #27]
 80041a0:	461e      	mov	r6, r3
 80041a2:	4b23      	ldr	r3, [pc, #140]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 80041a4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80041a8:	4698      	mov	r8, r3
						RangingData.SignalRateRtnMegaCps / 65536.0, RangingData.AmbientRateRtnMegaCps / 65336.0);
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 80041ac:	689b      	ldr	r3, [r3, #8]
				printf("VL53L1X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc f9a8 	bl	8000504 <__aeabi_ui2d>
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <AutonomousLowPowerRangingTest+0x184>)
 80041ba:	f7fc fb43 	bl	8000844 <__aeabi_ddiv>
 80041be:	4603      	mov	r3, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	4625      	mov	r5, r4
 80041c4:	461c      	mov	r4, r3
						RangingData.SignalRateRtnMegaCps / 65536.0, RangingData.AmbientRateRtnMegaCps / 65336.0);
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <AutonomousLowPowerRangingTest+0x180>)
 80041c8:	68db      	ldr	r3, [r3, #12]
				printf("VL53L1X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f99a 	bl	8000504 <__aeabi_ui2d>
 80041d0:	a30f      	add	r3, pc, #60	; (adr r3, 8004210 <AutonomousLowPowerRangingTest+0x160>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc fb35 	bl	8000844 <__aeabi_ddiv>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041e2:	e9cd 4500 	strd	r4, r5, [sp]
 80041e6:	4642      	mov	r2, r8
 80041e8:	4631      	mov	r1, r6
 80041ea:	4813      	ldr	r0, [pc, #76]	; (8004238 <AutonomousLowPowerRangingTest+0x188>)
 80041ec:	f00b fe52 	bl	800fe94 <iprintf>
			}
			status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <AutonomousLowPowerRangingTest+0x16c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f006 fb2f 	bl	800a858 <VL53L1_ClearInterruptAndStartMeasurement>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <AutonomousLowPowerRangingTest+0x170>)
 8004200:	601a      	str	r2, [r3, #0]
			}
		} while (1);
	}

//  return status;
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420a:	bf00      	nop
 800420c:	f3af 8000 	nop.w
 8004210:	00000000 	.word	0x00000000
 8004214:	40efe700 	.word	0x40efe700
 8004218:	20000374 	.word	0x20000374
 800421c:	2000000c 	.word	0x2000000c
 8004220:	200008d0 	.word	0x200008d0
 8004224:	00011170 	.word	0x00011170
 8004228:	08010430 	.word	0x08010430
 800422c:	200008cc 	.word	0x200008cc
 8004230:	20000378 	.word	0x20000378
 8004234:	40f00000 	.word	0x40f00000
 8004238:	08010454 	.word	0x08010454
 800423c:	00000000 	.word	0x00000000

08004240 <AutonomousLowPowerRangingTest2>:

void AutonomousLowPowerRangingTest2(void) {
 8004240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af04      	add	r7, sp, #16

	static VL53L0X_RangingMeasurementData_t RangingData;

	status2 = VL53L0X_WaitDeviceBooted(Dev2);
 8004248:	4b5b      	ldr	r3, [pc, #364]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 ff17 	bl	8005080 <VL53L0X_WaitDeviceBooted>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	4b59      	ldr	r3, [pc, #356]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 8004258:	601a      	str	r2, [r3, #0]
	status2 = VL53L0X_DataInit(Dev2);
 800425a:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fc28 	bl	8004ab4 <VL53L0X_DataInit>
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	4b54      	ldr	r3, [pc, #336]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 800426a:	601a      	str	r2, [r3, #0]
	status2 = VL53L0X_StaticInit(Dev2);
 800426c:	4b52      	ldr	r3, [pc, #328]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fd83 	bl	8004d7c <VL53L0X_StaticInit>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	4b50      	ldr	r3, [pc, #320]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 800427c:	601a      	str	r2, [r3, #0]
	status2 = VL53L0X_SetDeviceMode(Dev2, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800427e:	4b4e      	ldr	r3, [pc, #312]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f000 ff99 	bl	80051bc <VL53L0X_SetDeviceMode>
 800428a:	4603      	mov	r3, r0
 800428c:	461a      	mov	r2, r3
 800428e:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 8004290:	601a      	str	r2, [r3, #0]
	//status = VL53L0X_SetDistanceMode(Dev2, VL53L1_DISTANCEMODE_LONG);
	status2 = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev2, 33000);
 8004292:	4b49      	ldr	r3, [pc, #292]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800429a:	4618      	mov	r0, r3
 800429c:	f001 f808 	bl	80052b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b45      	ldr	r3, [pc, #276]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 80042a6:	601a      	str	r2, [r3, #0]
	//status2 = VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev2, 100);

	FixPoint1616_t signalLimit = (FixPoint1616_t) (0.1 * 65536);
 80042a8:	f641 1399 	movw	r3, #6553	; 0x1999
 80042ac:	607b      	str	r3, [r7, #4]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t) (60 * 65536);
 80042ae:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80042b2:	603b      	str	r3, [r7, #0]

	status2 = VL53L0X_SetLimitCheckValue(Dev2,
 80042b4:	4b40      	ldr	r3, [pc, #256]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fac3 	bl	8005848 <VL53L0X_SetLimitCheckValue>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 80042c8:	601a      	str	r2, [r3, #0]
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);

	status2 = VL53L0X_SetLimitCheckValue(Dev2,
 80042ca:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fab8 	bl	8005848 <VL53L0X_SetLimitCheckValue>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 80042de:	601a      	str	r2, [r3, #0]
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);

	status2 = VL53L0X_SetVcselPulsePeriod(Dev2, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80042e0:	4b35      	ldr	r3, [pc, #212]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2212      	movs	r2, #18
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 f807 	bl	80052fc <VL53L0X_SetVcselPulsePeriod>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b32      	ldr	r3, [pc, #200]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 80042f4:	601a      	str	r2, [r3, #0]

	status2 = VL53L0X_SetVcselPulsePeriod(Dev2, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	220e      	movs	r2, #14
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fffc 	bl	80052fc <VL53L0X_SetVcselPulsePeriod>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 800430a:	601a      	str	r2, [r3, #0]
	status2 = VL53L0X_StartMeasurement(Dev2);
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f001 fc55 	bl	8005bc0 <VL53L0X_StartMeasurement>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	4b28      	ldr	r3, [pc, #160]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 800431c:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 800431e:	2064      	movs	r0, #100	; 0x64
 8004320:	f7fc fd72 	bl	8000e08 <HAL_Delay>

	if (status2) {
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <AutonomousLowPowerRangingTest2+0xf4>
		printf("VL53L0_StartMeasurement failed \r\n");
 800432c:	4824      	ldr	r0, [pc, #144]	; (80043c0 <AutonomousLowPowerRangingTest2+0x180>)
 800432e:	f00b fe25 	bl	800ff7c <puts>
		while (1)
 8004332:	e7fe      	b.n	8004332 <AutonomousLowPowerRangingTest2+0xf2>
 8004334:	bf30      	wfi

	if (interruptModeQuestionMark == 0) {

		__WFI();

		status2 = VL53L0X_PerformSingleRangingMeasurement(Dev2, &RangingData);
 8004336:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <AutonomousLowPowerRangingTest2+0x178>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4922      	ldr	r1, [pc, #136]	; (80043c4 <AutonomousLowPowerRangingTest2+0x184>)
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fe65 	bl	800600c <VL53L0X_PerformSingleRangingMeasurement>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 8004348:	601a      	str	r2, [r3, #0]
		if (status2 == 0) {
 800434a:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <AutonomousLowPowerRangingTest2+0x17c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d128      	bne.n	80043a4 <AutonomousLowPowerRangingTest2+0x164>
			printf("VL53L0X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter, RangingData.SignalRateRtnMegaCps / 65536.0,
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <AutonomousLowPowerRangingTest2+0x184>)
 8004354:	7e1b      	ldrb	r3, [r3, #24]
 8004356:	461e      	mov	r6, r3
 8004358:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <AutonomousLowPowerRangingTest2+0x184>)
 800435a:	891b      	ldrh	r3, [r3, #8]
 800435c:	4698      	mov	r8, r3
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <AutonomousLowPowerRangingTest2+0x184>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc f8ce 	bl	8000504 <__aeabi_ui2d>
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <AutonomousLowPowerRangingTest2+0x188>)
 800436e:	f7fc fa69 	bl	8000844 <__aeabi_ddiv>
 8004372:	4603      	mov	r3, r0
 8004374:	460c      	mov	r4, r1
 8004376:	4625      	mov	r5, r4
 8004378:	461c      	mov	r4, r3
					RangingData.AmbientRateRtnMegaCps / 65336.0);
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <AutonomousLowPowerRangingTest2+0x184>)
 800437c:	691b      	ldr	r3, [r3, #16]
			printf("VL53L0X: %d,%d,%.2f,%.2f\r\n", RangingData.RangeStatus, RangingData.RangeMilliMeter, RangingData.SignalRateRtnMegaCps / 65536.0,
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f8c0 	bl	8000504 <__aeabi_ui2d>
 8004384:	a30a      	add	r3, pc, #40	; (adr r3, 80043b0 <AutonomousLowPowerRangingTest2+0x170>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f7fc fa5b 	bl	8000844 <__aeabi_ddiv>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004396:	e9cd 4500 	strd	r4, r5, [sp]
 800439a:	4642      	mov	r2, r8
 800439c:	4631      	mov	r1, r6
 800439e:	480b      	ldr	r0, [pc, #44]	; (80043cc <AutonomousLowPowerRangingTest2+0x18c>)
 80043a0:	f00b fd78 	bl	800fe94 <iprintf>
		}

//  return status;
	}
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ae:	bf00      	nop
 80043b0:	00000000 	.word	0x00000000
 80043b4:	40efe700 	.word	0x40efe700
 80043b8:	20000010 	.word	0x20000010
 80043bc:	200008c4 	.word	0x200008c4
 80043c0:	08010470 	.word	0x08010470
 80043c4:	20000394 	.word	0x20000394
 80043c8:	40f00000 	.word	0x40f00000
 80043cc:	08010494 	.word	0x08010494

080043d0 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80043d6:	f7fc fca5 	bl	8000d24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80043da:	f000 f87b 	bl	80044d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80043de:	f7ff fcef 	bl	8003dc0 <MX_GPIO_Init>
	MX_DMA_Init();
 80043e2:	f7ff fcc5 	bl	8003d70 <MX_DMA_Init>
	MX_ADC1_Init();
 80043e6:	f7ff fbff 	bl	8003be8 <MX_ADC1_Init>
	MX_I2C1_Init();
 80043ea:	f7ff fd5b 	bl	8003ea4 <MX_I2C1_Init>
	MX_USART6_UART_Init();
 80043ee:	f000 fa8f 	bl	8004910 <MX_USART6_UART_Init>
	MX_I2C3_Init();
 80043f2:	f7ff fd89 	bl	8003f08 <MX_I2C3_Init>
	MX_USART2_UART_Init();
 80043f6:	f000 fa5d 	bl	80048b4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("Program has been started\r\n");
 80043fa:	482d      	ldr	r0, [pc, #180]	; (80044b0 <main+0xe0>)
 80043fc:	f00b fdbe 	bl	800ff7c <puts>
	PSD_init();
 8004400:	f000 f8e8 	bl	80045d4 <PSD_init>
	lidar_init();
 8004404:	f7ff fbce 	bl	8003ba4 <lidar_init>
	stopwatch_init();
 8004408:	f000 f9de 	bl	80047c8 <stopwatch_init>

	set_stopwatch_blocking_time(0, 0);
 800440c:	2100      	movs	r1, #0
 800440e:	2000      	movs	r0, #0
 8004410:	f000 fa38 	bl	8004884 <set_stopwatch_blocking_time>
	set_stopwatch_blocking_time(1, 0);
 8004414:	2100      	movs	r1, #0
 8004416:	2001      	movs	r0, #1
 8004418:	f000 fa34 	bl	8004884 <set_stopwatch_blocking_time>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	dev.I2cDevAddr = 0x52;
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <main+0xe4>)
 800441e:	2252      	movs	r2, #82	; 0x52
 8004420:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	dev.I2cHandle = &hi2c3;
 8004424:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <main+0xe4>)
 8004426:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <main+0xe8>)
 8004428:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	dev.comms_speed_khz = 400;
 800442c:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <main+0xe4>)
 800442e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004432:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
	dev2.I2cDevAddr = 0x52;
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <main+0xec>)
 8004438:	2252      	movs	r2, #82	; 0x52
 800443a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	dev2.i2c_handle = &hi2c1;
 800443e:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <main+0xec>)
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <main+0xf0>)
 8004442:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	dev2.comms_speed_khz = 400;
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <main+0xec>)
 8004448:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800444c:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	uint8_t byteData;
	uint16_t wordData;
	VL53L1_RdByte(Dev, 0x010F, &byteData);
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <main+0xf4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1dfa      	adds	r2, r7, #7
 8004456:	f240 110f 	movw	r1, #271	; 0x10f
 800445a:	4618      	mov	r0, r3
 800445c:	f009 fce2 	bl	800de24 <VL53L1_RdByte>
	printf("VL53L1X Model_ID: %02X\n\r", byteData);
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	4619      	mov	r1, r3
 8004464:	4818      	ldr	r0, [pc, #96]	; (80044c8 <main+0xf8>)
 8004466:	f00b fd15 	bl	800fe94 <iprintf>
	VL53L1_RdByte(Dev, 0x0110, &byteData);
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <main+0xf4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	1dfa      	adds	r2, r7, #7
 8004470:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004474:	4618      	mov	r0, r3
 8004476:	f009 fcd5 	bl	800de24 <VL53L1_RdByte>
	printf("VL53L1X Module_Type: %02X\n\r", byteData);
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	4619      	mov	r1, r3
 800447e:	4813      	ldr	r0, [pc, #76]	; (80044cc <main+0xfc>)
 8004480:	f00b fd08 	bl	800fe94 <iprintf>
	VL53L1_RdWord(Dev, 0x010F, &wordData);
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <main+0xf4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1d3a      	adds	r2, r7, #4
 800448a:	f240 110f 	movw	r1, #271	; 0x10f
 800448e:	4618      	mov	r0, r3
 8004490:	f009 fcfa 	bl	800de88 <VL53L1_RdWord>
	printf("VL53L1X: %02X\n\r", wordData);
 8004494:	88bb      	ldrh	r3, [r7, #4]
 8004496:	4619      	mov	r1, r3
 8004498:	480d      	ldr	r0, [pc, #52]	; (80044d0 <main+0x100>)
 800449a:	f00b fcfb 	bl	800fe94 <iprintf>

	while (1) {
		AutonomousLowPowerRangingTest();
 800449e:	f7ff fe07 	bl	80040b0 <AutonomousLowPowerRangingTest>
		AutonomousLowPowerRangingTest2();
 80044a2:	f7ff fecd 	bl	8004240 <AutonomousLowPowerRangingTest2>
		HAL_Delay(300);
 80044a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80044aa:	f7fc fcad 	bl	8000e08 <HAL_Delay>
		AutonomousLowPowerRangingTest();
 80044ae:	e7f6      	b.n	800449e <main+0xce>
 80044b0:	080104b0 	.word	0x080104b0
 80044b4:	20000514 	.word	0x20000514
 80044b8:	2000046c 	.word	0x2000046c
 80044bc:	200008d4 	.word	0x200008d4
 80044c0:	200004c0 	.word	0x200004c0
 80044c4:	2000000c 	.word	0x2000000c
 80044c8:	080104cc 	.word	0x080104cc
 80044cc:	080104e8 	.word	0x080104e8
 80044d0:	08010504 	.word	0x08010504

080044d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b094      	sub	sp, #80	; 0x50
 80044d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <SystemClock_Config+0xe4>)
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <SystemClock_Config+0xe4>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ea:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <SystemClock_Config+0xe4>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80044f6:	2300      	movs	r3, #0
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	4a30      	ldr	r2, [pc, #192]	; (80045bc <SystemClock_Config+0xe8>)
 80044fc:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <SystemClock_Config+0xe8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <SystemClock_Config+0xe8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004516:	2302      	movs	r3, #2
 8004518:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800451a:	2301      	movs	r3, #1
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800451e:	2310      	movs	r3, #16
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004522:	2302      	movs	r3, #2
 8004524:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004526:	2300      	movs	r3, #0
 8004528:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800452a:	2310      	movs	r3, #16
 800452c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800452e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004532:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004534:	2304      	movs	r3, #4
 8004536:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004538:	2307      	movs	r3, #7
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800453c:	f107 0320 	add.w	r3, r7, #32
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fbb3 	bl	8002cac <HAL_RCC_OscConfig>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <SystemClock_Config+0x82>
		_Error_Handler(__FILE__, __LINE__);
 800454c:	f240 1147 	movw	r1, #327	; 0x147
 8004550:	481b      	ldr	r0, [pc, #108]	; (80045c0 <SystemClock_Config+0xec>)
 8004552:	f000 f839 	bl	80045c8 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004556:	230f      	movs	r3, #15
 8004558:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800455a:	2302      	movs	r3, #2
 800455c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004566:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800456c:	f107 030c 	add.w	r3, r7, #12
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fddc 	bl	8003130 <HAL_RCC_ClockConfig>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <SystemClock_Config+0xb4>
		_Error_Handler(__FILE__, __LINE__);
 800457e:	f240 1153 	movw	r1, #339	; 0x153
 8004582:	480f      	ldr	r0, [pc, #60]	; (80045c0 <SystemClock_Config+0xec>)
 8004584:	f000 f820 	bl	80045c8 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8004588:	f7fe ff8c 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <SystemClock_Config+0xf0>)
 8004590:	fba3 2302 	umull	r2, r3, r3, r2
 8004594:	099b      	lsrs	r3, r3, #6
 8004596:	4618      	mov	r0, r3
 8004598:	f7fc ffb9 	bl	800150e <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800459c:	2004      	movs	r0, #4
 800459e:	f7fc ffc3 	bl	8001528 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	f04f 30ff 	mov.w	r0, #4294967295
 80045aa:	f7fc ff86 	bl	80014ba <HAL_NVIC_SetPriority>
}
 80045ae:	bf00      	nop
 80045b0:	3750      	adds	r7, #80	; 0x50
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40007000 	.word	0x40007000
 80045c0:	08010514 	.word	0x08010514
 80045c4:	10624dd3 	.word	0x10624dd3

080045c8 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80045d2:	e7fe      	b.n	80045d2 <_Error_Handler+0xa>

080045d4 <PSD_init>:
#include "psd.h"

bool PSD_init() {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
	psd_raw_values = malloc(number_of_sensors * sizeof(uint16_t));
 80045d8:	2302      	movs	r3, #2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4618      	mov	r0, r3
 80045de:	f00b f8bb 	bl	800f758 <malloc>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <PSD_init+0x34>)
 80045e8:	601a      	str	r2, [r3, #0]

	if (psd_raw_values == NULL) {
 80045ea:	4b07      	ldr	r3, [pc, #28]	; (8004608 <PSD_init+0x34>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <PSD_init+0x28>
		printf("psd malloc failed\r\n");
 80045f2:	4806      	ldr	r0, [pc, #24]	; (800460c <PSD_init+0x38>)
 80045f4:	f00b fcc2 	bl	800ff7c <puts>
		return false;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e003      	b.n	8004604 <PSD_init+0x30>
	}
	printf("psd malloc succeeded\r\n");
 80045fc:	4804      	ldr	r0, [pc, #16]	; (8004610 <PSD_init+0x3c>)
 80045fe:	f00b fcbd 	bl	800ff7c <puts>
	return true;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200008c0 	.word	0x200008c0
 800460c:	08010524 	.word	0x08010524
 8004610:	08010538 	.word	0x08010538

08004614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <HAL_MspInit+0xa0>)
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_MspInit+0xa0>)
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004628:	6453      	str	r3, [r2, #68]	; 0x44
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_MspInit+0xa0>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_MspInit+0xa0>)
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_MspInit+0xa0>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_MspInit+0xa0>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004652:	2007      	movs	r0, #7
 8004654:	f7fc ff26 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004658:	2200      	movs	r2, #0
 800465a:	2100      	movs	r1, #0
 800465c:	f06f 000b 	mvn.w	r0, #11
 8004660:	f7fc ff2b 	bl	80014ba <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004664:	2200      	movs	r2, #0
 8004666:	2100      	movs	r1, #0
 8004668:	f06f 000a 	mvn.w	r0, #10
 800466c:	f7fc ff25 	bl	80014ba <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004670:	2200      	movs	r2, #0
 8004672:	2100      	movs	r1, #0
 8004674:	f06f 0009 	mvn.w	r0, #9
 8004678:	f7fc ff1f 	bl	80014ba <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800467c:	2200      	movs	r2, #0
 800467e:	2100      	movs	r1, #0
 8004680:	f06f 0004 	mvn.w	r0, #4
 8004684:	f7fc ff19 	bl	80014ba <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004688:	2200      	movs	r2, #0
 800468a:	2100      	movs	r1, #0
 800468c:	f06f 0003 	mvn.w	r0, #3
 8004690:	f7fc ff13 	bl	80014ba <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004694:	2200      	movs	r2, #0
 8004696:	2100      	movs	r1, #0
 8004698:	f06f 0001 	mvn.w	r0, #1
 800469c:	f7fc ff0d 	bl	80014ba <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80046a0:	2200      	movs	r2, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	f7fc ff07 	bl	80014ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800

080046b8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ca:	e7fe      	b.n	80046ca <HardFault_Handler+0x4>

080046cc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d0:	e7fe      	b.n	80046d0 <MemManage_Handler+0x4>

080046d2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046d6:	e7fe      	b.n	80046d6 <BusFault_Handler+0x4>

080046d8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046dc:	e7fe      	b.n	80046dc <UsageFault_Handler+0x4>

080046de <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80046fa:	b480      	push	{r7}
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800470c:	f7fc fb5c 	bl	8000dc8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004710:	f7fc ff26 	bl	8001560 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}

08004718 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800471c:	2010      	movs	r0, #16
 800471e:	f7fd fb97 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}

08004726 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800472a:	2020      	movs	r0, #32
 800472c:	f7fd fb90 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}

08004734 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004738:	4802      	ldr	r0, [pc, #8]	; (8004744 <DMA2_Stream0_IRQHandler+0x10>)
 800473a:	f7fc ffcd 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	2000040c 	.word	0x2000040c

08004748 <DMA2_Stream1_IRQHandler>:

/**
* @brief This function handles DMA2 stream1 global interrupt.
*/
void DMA2_Stream1_IRQHandler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800474c:	4802      	ldr	r0, [pc, #8]	; (8004758 <DMA2_Stream1_IRQHandler+0x10>)
 800474e:	f7fc ffc3 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004752:	bf00      	nop
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000a44 	.word	0x20000a44

0800475c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <SystemInit+0x60>)
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <SystemInit+0x60>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800476c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004770:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <SystemInit+0x64>)
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <SystemInit+0x64>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <SystemInit+0x64>)
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004782:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <SystemInit+0x64>)
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <SystemInit+0x64>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800478c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004790:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <SystemInit+0x64>)
 8004794:	4a0b      	ldr	r2, [pc, #44]	; (80047c4 <SystemInit+0x68>)
 8004796:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <SystemInit+0x64>)
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <SystemInit+0x64>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <SystemInit+0x64>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <SystemInit+0x60>)
 80047ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047b0:	609a      	str	r2, [r3, #8]
#endif
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000ed00 	.word	0xe000ed00
 80047c0:	40023800 	.word	0x40023800
 80047c4:	24003010 	.word	0x24003010

080047c8 <stopwatch_init>:
#include "timer.h"

bool stopwatch_init() {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
	stopwatch = malloc(number_of_stopwatches * sizeof(uint16_t));
 80047ce:	2302      	movs	r3, #2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	f00a ffc0 	bl	800f758 <malloc>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	4b24      	ldr	r3, [pc, #144]	; (8004870 <stopwatch_init+0xa8>)
 80047de:	601a      	str	r2, [r3, #0]
	is_stopwatch_on = malloc(number_of_stopwatches * sizeof(bool));
 80047e0:	2302      	movs	r3, #2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f00a ffb8 	bl	800f758 <malloc>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <stopwatch_init+0xac>)
 80047ee:	601a      	str	r2, [r3, #0]
	stopwatch_lock_time = malloc(number_of_stopwatches * sizeof(uint16_t));
 80047f0:	2302      	movs	r3, #2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f00a ffaf 	bl	800f758 <malloc>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <stopwatch_init+0xb0>)
 8004800:	601a      	str	r2, [r3, #0]

	if (stopwatch == NULL || is_stopwatch_on == NULL
 8004802:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <stopwatch_init+0xa8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <stopwatch_init+0x52>
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <stopwatch_init+0xac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <stopwatch_init+0x52>
			|| stopwatch_lock_time == NULL) {
 8004812:	4b19      	ldr	r3, [pc, #100]	; (8004878 <stopwatch_init+0xb0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <stopwatch_init+0x5c>
		printf("stopwatch malloc failed\r\n");
 800481a:	4818      	ldr	r0, [pc, #96]	; (800487c <stopwatch_init+0xb4>)
 800481c:	f00b fbae 	bl	800ff7c <puts>
		return false;
 8004820:	2300      	movs	r3, #0
 8004822:	e021      	b.n	8004868 <stopwatch_init+0xa0>
	}

	for(uint8_t i = 0; i<number_of_stopwatches; ++i)
 8004824:	2300      	movs	r3, #0
 8004826:	71fb      	strb	r3, [r7, #7]
 8004828:	e016      	b.n	8004858 <stopwatch_init+0x90>
	{
		stopwatch[i] = 0;
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <stopwatch_init+0xa8>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	2200      	movs	r2, #0
 8004836:	801a      	strh	r2, [r3, #0]
		is_stopwatch_on[i] = false;
 8004838:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <stopwatch_init+0xac>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	4413      	add	r3, r2
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
		stopwatch_lock_time[i] = 0;
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <stopwatch_init+0xb0>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	2200      	movs	r2, #0
 8004850:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<number_of_stopwatches; ++i)
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	3301      	adds	r3, #1
 8004856:	71fb      	strb	r3, [r7, #7]
 8004858:	2202      	movs	r2, #2
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	4293      	cmp	r3, r2
 800485e:	d3e4      	bcc.n	800482a <stopwatch_init+0x62>
	}

	printf("stopwatch malloc succeeded\r\n");
 8004860:	4807      	ldr	r0, [pc, #28]	; (8004880 <stopwatch_init+0xb8>)
 8004862:	f00b fb8b 	bl	800ff7c <puts>
	return true;
 8004866:	2301      	movs	r3, #1
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000a40 	.word	0x20000a40
 8004874:	200008c8 	.word	0x200008c8
 8004878:	200008b8 	.word	0x200008b8
 800487c:	08010584 	.word	0x08010584
 8004880:	080105a0 	.word	0x080105a0

08004884 <set_stopwatch_blocking_time>:

bool is_locked(uint8_t _stopwatch_number) {
	return is_stopwatch_on[_stopwatch_number];
}

void set_stopwatch_blocking_time(uint8_t _stopwatch_number, uint16_t _blocking_time) {
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	460a      	mov	r2, r1
 800488e:	71fb      	strb	r3, [r7, #7]
 8004890:	4613      	mov	r3, r2
 8004892:	80bb      	strh	r3, [r7, #4]
	stopwatch_lock_time[_stopwatch_number] = _blocking_time;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <set_stopwatch_blocking_time+0x2c>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	88ba      	ldrh	r2, [r7, #4]
 80048a0:	801a      	strh	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	200008b8 	.word	0x200008b8

080048b4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <MX_USART2_UART_Init+0x54>)
 80048bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048da:	220c      	movs	r2, #12
 80048dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e4:	4b07      	ldr	r3, [pc, #28]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048ea:	4806      	ldr	r0, [pc, #24]	; (8004904 <MX_USART2_UART_Init+0x50>)
 80048ec:	f7fe fe0e 	bl	800350c <HAL_UART_Init>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048f6:	2145      	movs	r1, #69	; 0x45
 80048f8:	4804      	ldr	r0, [pc, #16]	; (800490c <MX_USART2_UART_Init+0x58>)
 80048fa:	f7ff fe65 	bl	80045c8 <_Error_Handler>
  }

}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000ae4 	.word	0x20000ae4
 8004908:	40004400 	.word	0x40004400
 800490c:	080105fc 	.word	0x080105fc

08004910 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <MX_USART6_UART_Init+0x50>)
 8004916:	4a13      	ldr	r2, [pc, #76]	; (8004964 <MX_USART6_UART_Init+0x54>)
 8004918:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <MX_USART6_UART_Init+0x50>)
 800491c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004920:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <MX_USART6_UART_Init+0x50>)
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <MX_USART6_UART_Init+0x50>)
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <MX_USART6_UART_Init+0x50>)
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <MX_USART6_UART_Init+0x50>)
 8004936:	2204      	movs	r2, #4
 8004938:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <MX_USART6_UART_Init+0x50>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <MX_USART6_UART_Init+0x50>)
 8004942:	2200      	movs	r2, #0
 8004944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004946:	4806      	ldr	r0, [pc, #24]	; (8004960 <MX_USART6_UART_Init+0x50>)
 8004948:	f7fe fde0 	bl	800350c <HAL_UART_Init>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <MX_USART6_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004952:	2158      	movs	r1, #88	; 0x58
 8004954:	4804      	ldr	r0, [pc, #16]	; (8004968 <MX_USART6_UART_Init+0x58>)
 8004956:	f7ff fe37 	bl	80045c8 <_Error_Handler>
  }

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000aa4 	.word	0x20000aa4
 8004964:	40011400 	.word	0x40011400
 8004968:	080105fc 	.word	0x080105fc

0800496c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3c      	ldr	r2, [pc, #240]	; (8004a6c <HAL_UART_MspInit+0x100>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d11e      	bne.n	80049bc <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <HAL_UART_MspInit+0x104>)
 8004984:	4b3a      	ldr	r3, [pc, #232]	; (8004a70 <HAL_UART_MspInit+0x104>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498c:	6413      	str	r3, [r2, #64]	; 0x40
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_UART_MspInit+0x104>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800499a:	230c      	movs	r3, #12
 800499c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499e:	2302      	movs	r3, #2
 80049a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a6:	2303      	movs	r3, #3
 80049a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049aa:	2307      	movs	r3, #7
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ae:	f107 0314 	add.w	r3, r7, #20
 80049b2:	4619      	mov	r1, r3
 80049b4:	482f      	ldr	r0, [pc, #188]	; (8004a74 <HAL_UART_MspInit+0x108>)
 80049b6:	f7fd f8c9 	bl	8001b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80049ba:	e053      	b.n	8004a64 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART6)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <HAL_UART_MspInit+0x10c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d14e      	bne.n	8004a64 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <HAL_UART_MspInit+0x104>)
 80049cc:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <HAL_UART_MspInit+0x104>)
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	f043 0320 	orr.w	r3, r3, #32
 80049d4:	6453      	str	r3, [r2, #68]	; 0x44
 80049d6:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <HAL_UART_MspInit+0x104>)
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049e2:	23c0      	movs	r3, #192	; 0xc0
 80049e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ee:	2303      	movs	r3, #3
 80049f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049f2:	2308      	movs	r3, #8
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	4619      	mov	r1, r3
 80049fc:	481f      	ldr	r0, [pc, #124]	; (8004a7c <HAL_UART_MspInit+0x110>)
 80049fe:	f7fd f8a5 	bl	8001b4c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_UART_MspInit+0x118>)
 8004a06:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a0a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004a0e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a10:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a16:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a1c:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a22:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a24:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004a30:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a36:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004a44:	480e      	ldr	r0, [pc, #56]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a46:	f7fc fd99 	bl	800157c <HAL_DMA_Init>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_UART_MspInit+0xec>
      _Error_Handler(__FILE__, __LINE__);
 8004a50:	2199      	movs	r1, #153	; 0x99
 8004a52:	480d      	ldr	r0, [pc, #52]	; (8004a88 <HAL_UART_MspInit+0x11c>)
 8004a54:	f7ff fdb8 	bl	80045c8 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a5e:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <HAL_UART_MspInit+0x114>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004a64:	bf00      	nop
 8004a66:	3728      	adds	r7, #40	; 0x28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40004400 	.word	0x40004400
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40020000 	.word	0x40020000
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	40020800 	.word	0x40020800
 8004a80:	20000a44 	.word	0x20000a44
 8004a84:	40026428 	.word	0x40026428
 8004a88:	080105fc 	.word	0x080105fc

08004a8c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004a9a:	6839      	ldr	r1, [r7, #0]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 fc9f 	bl	80063e0 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004ab4:	b5b0      	push	{r4, r5, r7, lr}
 8004ab6:	b096      	sub	sp, #88	; 0x58
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004ac2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2188      	movs	r1, #136	; 0x88
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f004 ffa4 	bl	8009a1c <VL53L0X_WrByte>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ae8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004af2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a9e      	ldr	r2, [pc, #632]	; (8004d74 <VL53L0X_DataInit+0x2c0>)
 8004afa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a9d      	ldr	r2, [pc, #628]	; (8004d78 <VL53L0X_DataInit+0x2c4>)
 8004b02:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004b0c:	f107 0310 	add.w	r3, r7, #16
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fac2 	bl	800509c <VL53L0X_GetDeviceParameters>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004b1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d112      	bne.n	8004b4c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004b26:	2300      	movs	r3, #0
 8004b28:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f103 0410 	add.w	r4, r3, #16
 8004b34:	f107 0510 	add.w	r5, r7, #16
 8004b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2264      	movs	r2, #100	; 0x64
 8004b50:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004b5a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b64:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004b6e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f004 ff4c 	bl	8009a1c <VL53L0X_WrByte>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b92:	2201      	movs	r2, #1
 8004b94:	21ff      	movs	r1, #255	; 0xff
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f004 ff40 	bl	8009a1c <VL53L0X_WrByte>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f004 ff34 	bl	8009a1c <VL53L0X_WrByte>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004bc2:	f107 030f 	add.w	r3, r7, #15
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2191      	movs	r1, #145	; 0x91
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f004 ffac 	bl	8009b28 <VL53L0X_RdByte>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004bde:	7bfa      	ldrb	r2, [r7, #15]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004be6:	2201      	movs	r2, #1
 8004be8:	2100      	movs	r1, #0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f004 ff16 	bl	8009a1c <VL53L0X_WrByte>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	21ff      	movs	r1, #255	; 0xff
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f004 ff0a 	bl	8009a1c <VL53L0X_WrByte>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004c16:	2200      	movs	r2, #0
 8004c18:	2180      	movs	r1, #128	; 0x80
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f004 fefe 	bl	8009a1c <VL53L0X_WrByte>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c2e:	2300      	movs	r3, #0
 8004c30:	653b      	str	r3, [r7, #80]	; 0x50
 8004c32:	e014      	b.n	8004c5e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004c34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d114      	bne.n	8004c66 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2201      	movs	r2, #1
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fd4f 	bl	80056e8 <VL53L0X_SetLimitCheckEnable>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	dde7      	ble.n	8004c34 <VL53L0X_DataInit+0x180>
 8004c64:	e000      	b.n	8004c68 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004c66:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004c68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c70:	2200      	movs	r2, #0
 8004c72:	2102      	movs	r1, #2
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fd37 	bl	80056e8 <VL53L0X_SetLimitCheckEnable>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d107      	bne.n	8004c98 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2103      	movs	r1, #3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fd2b 	bl	80056e8 <VL53L0X_SetLimitCheckEnable>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d107      	bne.n	8004cb0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fd1f 	bl	80056e8 <VL53L0X_SetLimitCheckEnable>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004cb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2105      	movs	r1, #5
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fd13 	bl	80056e8 <VL53L0X_SetLimitCheckEnable>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004cc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d108      	bne.n	8004ce2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cd0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fdb6 	bl	8005848 <VL53L0X_SetLimitCheckValue>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ce2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d108      	bne.n	8004cfc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cee:	2101      	movs	r1, #1
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fda9 	bl	8005848 <VL53L0X_SetLimitCheckValue>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d108      	bne.n	8004d16 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d04:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004d08:	2102      	movs	r1, #2
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fd9c 	bl	8005848 <VL53L0X_SetLimitCheckValue>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d107      	bne.n	8004d2e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2103      	movs	r1, #3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fd90 	bl	8005848 <VL53L0X_SetLimitCheckValue>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	2101      	movs	r1, #1
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f004 fe6a 	bl	8009a1c <VL53L0X_WrByte>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004d56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004d66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3758      	adds	r7, #88	; 0x58
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bdb0      	pop	{r4, r5, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	00016b85 	.word	0x00016b85
 8004d78:	000970a4 	.word	0x000970a4

08004d7c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004d7c:	b5b0      	push	{r4, r5, r7, lr}
 8004d7e:	b09e      	sub	sp, #120	; 0x78
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004d8a:	f107 031c 	add.w	r3, r7, #28
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f00a fcf3 	bl	800f77e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004db8:	2101      	movs	r1, #1
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f002 fa67 	bl	800728e <VL53L0X_get_info_from_device>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004dcc:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004dd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d80d      	bhi.n	8004dfc <VL53L0X_StaticInit+0x80>
 8004de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d102      	bne.n	8004dee <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d806      	bhi.n	8004dfc <VL53L0X_StaticInit+0x80>
 8004dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d90b      	bls.n	8004e14 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004dfc:	f107 0218 	add.w	r2, r7, #24
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4619      	mov	r1, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 fce6 	bl	80067d8 <VL53L0X_perform_ref_spad_management>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004e12:	e009      	b.n	8004e28 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 fee7 	bl	8006bf0 <VL53L0X_set_reference_spads>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004e28:	4b94      	ldr	r3, [pc, #592]	; (800507c <VL53L0X_StaticInit+0x300>)
 8004e2a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004e2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004e3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004e3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e4e:	e001      	b.n	8004e54 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004e50:	4b8a      	ldr	r3, [pc, #552]	; (800507c <VL53L0X_StaticInit+0x300>)
 8004e52:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004e54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004e5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f003 fdb8 	bl	80089d4 <VL53L0X_load_tuning_settings>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2304      	movs	r3, #4
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 f8f5 	bl	800606c <VL53L0X_SetGpioConfig>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e88:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d121      	bne.n	8004ed4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e90:	2201      	movs	r2, #1
 8004e92:	21ff      	movs	r1, #255	; 0xff
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f004 fdc1 	bl	8009a1c <VL53L0X_WrByte>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004ea0:	f107 031a 	add.w	r3, r7, #26
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2184      	movs	r1, #132	; 0x84
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f004 fe5e 	bl	8009b6a <VL53L0X_RdWord>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	21ff      	movs	r1, #255	; 0xff
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f004 fdab 	bl	8009a1c <VL53L0X_WrByte>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ed4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004edc:	8b7b      	ldrh	r3, [r7, #26]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004ee8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004ef0:	f107 031c 	add.w	r3, r7, #28
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8d0 	bl	800509c <VL53L0X_GetDeviceParameters>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004f02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d110      	bne.n	8004f2c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004f0a:	f107 0319 	add.w	r3, r7, #25
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f9ae 	bl	8005272 <VL53L0X_GetFractionEnable>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004f1c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004f24:	7e7a      	ldrb	r2, [r7, #25]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004f2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10e      	bne.n	8004f52 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0410 	add.w	r4, r3, #16
 8004f3a:	f107 051c 	add.w	r5, r7, #28
 8004f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d111      	bne.n	8004f7e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004f5a:	f107 0319 	add.w	r3, r7, #25
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2101      	movs	r1, #1
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f004 fde0 	bl	8009b28 <VL53L0X_RdByte>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004f6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004f76:	7e7a      	ldrb	r2, [r7, #25]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004f7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f86:	2200      	movs	r2, #0
 8004f88:	2100      	movs	r1, #0
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f9e6 	bl	800535c <VL53L0X_SetSequenceStepEnable>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004f96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9da 	bl	800535c <VL53L0X_SetSequenceStepEnable>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004fae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004fc6:	f107 0313 	add.w	r3, r7, #19
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2100      	movs	r1, #0
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9ac 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fe2:	7cfa      	ldrb	r2, [r7, #19]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004ff2:	f107 0313 	add.w	r3, r7, #19
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f996 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005006:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800500e:	7cfa      	ldrb	r2, [r7, #19]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005016:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800501e:	f107 030c 	add.w	r3, r7, #12
 8005022:	461a      	mov	r2, r3
 8005024:	2103      	movs	r1, #3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f002 feb2 	bl	8007d90 <get_sequence_step_timeout>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005032:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005042:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800504a:	f107 030c 	add.w	r3, r7, #12
 800504e:	461a      	mov	r2, r3
 8005050:	2104      	movs	r1, #4
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f002 fe9c 	bl	8007d90 <get_sequence_step_timeout>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800505e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800506e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005072:	4618      	mov	r0, r3
 8005074:	3770      	adds	r7, #112	; 0x70
 8005076:	46bd      	mov	sp, r7
 8005078:	bdb0      	pop	{r4, r5, r7, pc}
 800507a:	bf00      	nop
 800507c:	20000018 	.word	0x20000018

08005080 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005088:	239d      	movs	r3, #157	; 0x9d
 800508a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800508c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8cc 	bl	800524c <VL53L0X_GetDeviceMode>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80050b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa92 	bl	80055f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80050d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80050de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	3310      	adds	r3, #16
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fac8 	bl	8005682 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80050f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fcc1 	bl	8004a8c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800510a:	4603      	mov	r3, r0
 800510c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800510e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d134      	bne.n	8005180 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005116:	2300      	movs	r3, #0
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	e02a      	b.n	8005172 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800511c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d12a      	bne.n	800517a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	b299      	uxth	r1, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	3308      	adds	r3, #8
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	4413      	add	r3, r2
 8005132:	3304      	adds	r3, #4
 8005134:	461a      	mov	r2, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fbe8 	bl	800590c <VL53L0X_GetLimitCheckValue>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	4313      	orrs	r3, r2
 8005144:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d117      	bne.n	800517e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	b299      	uxth	r1, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3318      	adds	r3, #24
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	4413      	add	r3, r2
 800515a:	461a      	mov	r2, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb4f 	bl	8005800 <VL53L0X_GetLimitCheckEnable>
 8005162:	4603      	mov	r3, r0
 8005164:	461a      	mov	r2, r3
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	4313      	orrs	r3, r2
 800516a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	3301      	adds	r3, #1
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b05      	cmp	r3, #5
 8005176:	ddd1      	ble.n	800511c <VL53L0X_GetDeviceParameters+0x80>
 8005178:	e002      	b.n	8005180 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800517e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d107      	bne.n	8005198 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	333c      	adds	r3, #60	; 0x3c
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fc4a 	bl	8005a28 <VL53L0X_GetWrapAroundCheckEnable>
 8005194:	4603      	mov	r3, r0
 8005196:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f895 	bl	80052d6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	2b15      	cmp	r3, #21
 80051d0:	d832      	bhi.n	8005238 <VL53L0X_SetDeviceMode+0x7c>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <VL53L0X_SetDeviceMode+0x1c>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005231 	.word	0x08005231
 80051e0:	08005239 	.word	0x08005239
 80051e4:	08005231 	.word	0x08005231
 80051e8:	08005239 	.word	0x08005239
 80051ec:	08005239 	.word	0x08005239
 80051f0:	08005239 	.word	0x08005239
 80051f4:	08005239 	.word	0x08005239
 80051f8:	08005239 	.word	0x08005239
 80051fc:	08005239 	.word	0x08005239
 8005200:	08005239 	.word	0x08005239
 8005204:	08005239 	.word	0x08005239
 8005208:	08005239 	.word	0x08005239
 800520c:	08005239 	.word	0x08005239
 8005210:	08005239 	.word	0x08005239
 8005214:	08005239 	.word	0x08005239
 8005218:	08005239 	.word	0x08005239
 800521c:	08005239 	.word	0x08005239
 8005220:	08005239 	.word	0x08005239
 8005224:	08005239 	.word	0x08005239
 8005228:	08005231 	.word	0x08005231
 800522c:	08005231 	.word	0x08005231
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	741a      	strb	r2, [r3, #16]
		break;
 8005236:	e001      	b.n	800523c <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005238:	23f8      	movs	r3, #248	; 0xf8
 800523a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800523c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7c1a      	ldrb	r2, [r3, #16]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	2109      	movs	r1, #9
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f004 fc4f 	bl	8009b28 <VL53L0X_RdByte>
 800528a:	4603      	mov	r3, r0
 800528c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800528e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80052a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f003 f9f6 	bl	80086b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80052ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f003 fac3 	bl	8008872 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80052f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
 8005308:	4613      	mov	r3, r2
 800530a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005310:	78ba      	ldrb	r2, [r7, #2]
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f002 ff0d 	bl	8008136 <VL53L0X_set_vcsel_pulse_period>
 800531c:	4603      	mov	r3, r0
 800531e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	460b      	mov	r3, r1
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4619      	mov	r1, r3
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f003 f97d 	bl	8008644 <VL53L0X_get_vcsel_pulse_period>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800534e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
 8005368:	4613      	mov	r3, r2
 800536a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800536c:	2300      	movs	r3, #0
 800536e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005378:	f107 030f 	add.w	r3, r7, #15
 800537c:	461a      	mov	r2, r3
 800537e:	2101      	movs	r1, #1
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f004 fbd1 	bl	8009b28 <VL53L0X_RdByte>
 8005386:	4603      	mov	r3, r0
 8005388:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800538e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d159      	bne.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8005396:	78bb      	ldrb	r3, [r7, #2]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d12b      	bne.n	80053f4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d825      	bhi.n	80053ee <VL53L0X_SetSequenceStepEnable+0x92>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053bd 	.word	0x080053bd
 80053ac:	080053c7 	.word	0x080053c7
 80053b0:	080053d1 	.word	0x080053d1
 80053b4:	080053db 	.word	0x080053db
 80053b8:	080053e5 	.word	0x080053e5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80053bc:	7dbb      	ldrb	r3, [r7, #22]
 80053be:	f043 0310 	orr.w	r3, r3, #16
 80053c2:	75bb      	strb	r3, [r7, #22]
				break;
 80053c4:	e041      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80053c6:	7dbb      	ldrb	r3, [r7, #22]
 80053c8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80053cc:	75bb      	strb	r3, [r7, #22]
				break;
 80053ce:	e03c      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80053d0:	7dbb      	ldrb	r3, [r7, #22]
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	75bb      	strb	r3, [r7, #22]
				break;
 80053d8:	e037      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80053da:	7dbb      	ldrb	r3, [r7, #22]
 80053dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e0:	75bb      	strb	r3, [r7, #22]
				break;
 80053e2:	e032      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80053e4:	7dbb      	ldrb	r3, [r7, #22]
 80053e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053ea:	75bb      	strb	r3, [r7, #22]
				break;
 80053ec:	e02d      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80053ee:	23fc      	movs	r3, #252	; 0xfc
 80053f0:	75fb      	strb	r3, [r7, #23]
 80053f2:	e02a      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d825      	bhi.n	8005446 <VL53L0X_SetSequenceStepEnable+0xea>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005415 	.word	0x08005415
 8005404:	0800541f 	.word	0x0800541f
 8005408:	08005429 	.word	0x08005429
 800540c:	08005433 	.word	0x08005433
 8005410:	0800543d 	.word	0x0800543d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005414:	7dbb      	ldrb	r3, [r7, #22]
 8005416:	f023 0310 	bic.w	r3, r3, #16
 800541a:	75bb      	strb	r3, [r7, #22]
				break;
 800541c:	e015      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800541e:	7dbb      	ldrb	r3, [r7, #22]
 8005420:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005424:	75bb      	strb	r3, [r7, #22]
				break;
 8005426:	e010      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005428:	7dbb      	ldrb	r3, [r7, #22]
 800542a:	f023 0304 	bic.w	r3, r3, #4
 800542e:	75bb      	strb	r3, [r7, #22]
				break;
 8005430:	e00b      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005432:	7dbb      	ldrb	r3, [r7, #22]
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005438:	75bb      	strb	r3, [r7, #22]
				break;
 800543a:	e006      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800543c:	7dbb      	ldrb	r3, [r7, #22]
 800543e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005442:	75bb      	strb	r3, [r7, #22]
				break;
 8005444:	e001      	b.n	800544a <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005446:	23fc      	movs	r3, #252	; 0xfc
 8005448:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	7dba      	ldrb	r2, [r7, #22]
 800544e:	429a      	cmp	r2, r3
 8005450:	d01e      	beq.n	8005490 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800545a:	7dbb      	ldrb	r3, [r7, #22]
 800545c:	461a      	mov	r2, r3
 800545e:	2101      	movs	r1, #1
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f004 fadb 	bl	8009a1c <VL53L0X_WrByte>
 8005466:	4603      	mov	r3, r0
 8005468:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800546a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	7dba      	ldrb	r2, [r7, #22]
 8005476:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800547a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005488:	6939      	ldr	r1, [r7, #16]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff10 	bl	80052b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	72fb      	strb	r3, [r7, #11]
 80054aa:	4613      	mov	r3, r2
 80054ac:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80054b8:	7afb      	ldrb	r3, [r7, #11]
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d836      	bhi.n	800552c <sequence_step_enabled+0x90>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <sequence_step_enabled+0x28>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054d9 	.word	0x080054d9
 80054c8:	080054eb 	.word	0x080054eb
 80054cc:	080054fd 	.word	0x080054fd
 80054d0:	0800550f 	.word	0x0800550f
 80054d4:	08005521 	.word	0x08005521
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80054d8:	7abb      	ldrb	r3, [r7, #10]
 80054da:	111b      	asrs	r3, r3, #4
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	701a      	strb	r2, [r3, #0]
		break;
 80054e8:	e022      	b.n	8005530 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80054ea:	7abb      	ldrb	r3, [r7, #10]
 80054ec:	10db      	asrs	r3, r3, #3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	701a      	strb	r2, [r3, #0]
		break;
 80054fa:	e019      	b.n	8005530 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80054fc:	7abb      	ldrb	r3, [r7, #10]
 80054fe:	109b      	asrs	r3, r3, #2
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	b2da      	uxtb	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	701a      	strb	r2, [r3, #0]
		break;
 800550c:	e010      	b.n	8005530 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800550e:	7abb      	ldrb	r3, [r7, #10]
 8005510:	119b      	asrs	r3, r3, #6
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	b2da      	uxtb	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	701a      	strb	r2, [r3, #0]
		break;
 800551e:	e007      	b.n	8005530 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005520:	7abb      	ldrb	r3, [r7, #10]
 8005522:	09db      	lsrs	r3, r3, #7
 8005524:	b2da      	uxtb	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	701a      	strb	r2, [r3, #0]
		break;
 800552a:	e001      	b.n	8005530 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800552c:	23fc      	movs	r3, #252	; 0xfc
 800552e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005552:	f107 030e 	add.w	r3, r7, #14
 8005556:	461a      	mov	r2, r3
 8005558:	2101      	movs	r1, #1
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f004 fae4 	bl	8009b28 <VL53L0X_RdByte>
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800556c:	7bba      	ldrb	r2, [r7, #14]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2100      	movs	r1, #0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ff92 	bl	800549c <sequence_step_enabled>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800557c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005584:	7bba      	ldrb	r2, [r7, #14]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	3302      	adds	r3, #2
 800558a:	2101      	movs	r1, #1
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff85 	bl	800549c <sequence_step_enabled>
 8005592:	4603      	mov	r3, r0
 8005594:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800559e:	7bba      	ldrb	r2, [r7, #14]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	2102      	movs	r1, #2
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff ff78 	bl	800549c <sequence_step_enabled>
 80055ac:	4603      	mov	r3, r0
 80055ae:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d108      	bne.n	80055ca <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80055b8:	7bba      	ldrb	r2, [r7, #14]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3303      	adds	r3, #3
 80055be:	2103      	movs	r1, #3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff6b 	bl	800549c <sequence_step_enabled>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80055d2:	7bba      	ldrb	r2, [r7, #14]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	3304      	adds	r3, #4
 80055d8:	2104      	movs	r1, #4
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff ff5e 	bl	800549c <sequence_step_enabled>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	461a      	mov	r2, r3
 8005604:	21f8      	movs	r1, #248	; 0xf8
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f004 faaf 	bl	8009b6a <VL53L0X_RdWord>
 800560c:	4603      	mov	r3, r0
 800560e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005618:	f107 0308 	add.w	r3, r7, #8
 800561c:	461a      	mov	r2, r3
 800561e:	2104      	movs	r1, #4
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f004 fac3 	bl	8009bac <VL53L0X_RdDWord>
 8005626:	4603      	mov	r3, r0
 8005628:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10c      	bne.n	800564c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005632:	89bb      	ldrh	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	89ba      	ldrh	r2, [r7, #12]
 800563c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800564c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7f1b      	ldrb	r3, [r3, #28]
 800566a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	7bba      	ldrb	r2, [r7, #14]
 8005670:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800568c:	2300      	movs	r3, #0
 800568e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005690:	f107 030e 	add.w	r3, r7, #14
 8005694:	461a      	mov	r2, r3
 8005696:	2120      	movs	r1, #32
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f004 fa66 	bl	8009b6a <VL53L0X_RdWord>
 800569e:	4603      	mov	r3, r0
 80056a0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80056a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d118      	bne.n	80056dc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80056aa:	89fb      	ldrh	r3, [r7, #14]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	771a      	strb	r2, [r3, #28]
 80056c2:	e00b      	b.n	80056dc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80056c4:	89fb      	ldrh	r3, [r7, #14]
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80056dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	807b      	strh	r3, [r7, #2]
 80056f4:	4613      	mov	r3, r2
 80056f6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005708:	887b      	ldrh	r3, [r7, #2]
 800570a:	2b05      	cmp	r3, #5
 800570c:	d902      	bls.n	8005714 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800570e:	23fc      	movs	r3, #252	; 0xfc
 8005710:	75fb      	strb	r3, [r7, #23]
 8005712:	e05b      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005714:	787b      	ldrb	r3, [r7, #1]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005722:	2301      	movs	r3, #1
 8005724:	73bb      	strb	r3, [r7, #14]
 8005726:	e00a      	b.n	800573e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	330c      	adds	r3, #12
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	2b05      	cmp	r3, #5
 8005742:	d841      	bhi.n	80057c8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <VL53L0X_SetLimitCheckEnable+0x64>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005765 	.word	0x08005765
 8005750:	0800576f 	.word	0x0800576f
 8005754:	08005785 	.word	0x08005785
 8005758:	0800578f 	.word	0x0800578f
 800575c:	08005799 	.word	0x08005799
 8005760:	080057b1 	.word	0x080057b1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800576c:	e02e      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	2144      	movs	r1, #68	; 0x44
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f004 f971 	bl	8009a60 <VL53L0X_WrWord>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]

			break;
 8005782:	e023      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7bfa      	ldrb	r2, [r7, #15]
 8005788:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800578c:	e01e      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005796:	e019      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005798:	7bbb      	ldrb	r3, [r7, #14]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800579e:	7b7b      	ldrb	r3, [r7, #13]
 80057a0:	22fe      	movs	r2, #254	; 0xfe
 80057a2:	2160      	movs	r1, #96	; 0x60
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f004 f97d 	bl	8009aa4 <VL53L0X_UpdateByte>
 80057aa:	4603      	mov	r3, r0
 80057ac:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80057ae:	e00d      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80057b0:	7bbb      	ldrb	r3, [r7, #14]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80057b6:	7b7b      	ldrb	r3, [r7, #13]
 80057b8:	22ef      	movs	r2, #239	; 0xef
 80057ba:	2160      	movs	r1, #96	; 0x60
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f004 f971 	bl	8009aa4 <VL53L0X_UpdateByte>
 80057c2:	4603      	mov	r3, r0
 80057c4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80057c6:	e001      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057c8:	23fc      	movs	r3, #252	; 0xfc
 80057ca:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80057cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10f      	bne.n	80057f4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80057d4:	787b      	ldrb	r3, [r7, #1]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80057e6:	e005      	b.n	80057f4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	460b      	mov	r3, r1
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	2b05      	cmp	r3, #5
 8005816:	d905      	bls.n	8005824 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005818:	23fc      	movs	r3, #252	; 0xfc
 800581a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e008      	b.n	8005836 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005824:	897b      	ldrh	r3, [r7, #10]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800582e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7dba      	ldrb	r2, [r7, #22]
 8005834:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800583a:	4618      	mov	r0, r3
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	460b      	mov	r3, r1
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800585a:	897b      	ldrh	r3, [r7, #10]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005864:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005866:	7dbb      	ldrb	r3, [r7, #22]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d107      	bne.n	800587c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800586c:	897b      	ldrh	r3, [r7, #10]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	330c      	adds	r3, #12
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e040      	b.n	80058fe <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800587c:	897b      	ldrh	r3, [r7, #10]
 800587e:	2b05      	cmp	r3, #5
 8005880:	d830      	bhi.n	80058e4 <VL53L0X_SetLimitCheckValue+0x9c>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <VL53L0X_SetLimitCheckValue+0x40>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058a1 	.word	0x080058a1
 800588c:	080058a9 	.word	0x080058a9
 8005890:	080058bf 	.word	0x080058bf
 8005894:	080058c7 	.word	0x080058c7
 8005898:	080058cf 	.word	0x080058cf
 800589c:	080058cf 	.word	0x080058cf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80058a6:	e01f      	b.n	80058e8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	2144      	movs	r1, #68	; 0x44
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f004 f8d4 	bl	8009a60 <VL53L0X_WrWord>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80058bc:	e014      	b.n	80058e8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80058c4:	e010      	b.n	80058e8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80058cc:	e00c      	b.n	80058e8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	2164      	movs	r1, #100	; 0x64
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f004 f8c1 	bl	8009a60 <VL53L0X_WrWord>
 80058de:	4603      	mov	r3, r0
 80058e0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80058e2:	e001      	b.n	80058e8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058e4:	23fc      	movs	r3, #252	; 0xfc
 80058e6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80058e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058f0:	897b      	ldrh	r3, [r7, #10]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	330c      	adds	r3, #12
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	460b      	mov	r3, r1
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800591a:	2300      	movs	r3, #0
 800591c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005922:	897b      	ldrh	r3, [r7, #10]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d847      	bhi.n	80059b8 <VL53L0X_GetLimitCheckValue+0xac>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <VL53L0X_GetLimitCheckValue+0x24>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005949 	.word	0x08005949
 8005934:	08005955 	.word	0x08005955
 8005938:	0800597b 	.word	0x0800597b
 800593c:	08005987 	.word	0x08005987
 8005940:	08005993 	.word	0x08005993
 8005944:	08005993 	.word	0x08005993

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	77bb      	strb	r3, [r7, #30]
		break;
 8005952:	e033      	b.n	80059bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005954:	f107 0316 	add.w	r3, r7, #22
 8005958:	461a      	mov	r2, r3
 800595a:	2144      	movs	r1, #68	; 0x44
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f004 f904 	bl	8009b6a <VL53L0X_RdWord>
 8005962:	4603      	mov	r3, r0
 8005964:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005966:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800596e:	8afb      	ldrh	r3, [r7, #22]
 8005970:	025b      	lsls	r3, r3, #9
 8005972:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005974:	2301      	movs	r3, #1
 8005976:	77bb      	strb	r3, [r7, #30]
		break;
 8005978:	e020      	b.n	80059bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	77bb      	strb	r3, [r7, #30]
		break;
 8005984:	e01a      	b.n	80059bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	77bb      	strb	r3, [r7, #30]
		break;
 8005990:	e014      	b.n	80059bc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005992:	f107 0316 	add.w	r3, r7, #22
 8005996:	461a      	mov	r2, r3
 8005998:	2164      	movs	r1, #100	; 0x64
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f004 f8e5 	bl	8009b6a <VL53L0X_RdWord>
 80059a0:	4603      	mov	r3, r0
 80059a2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80059a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80059ac:	8afb      	ldrh	r3, [r7, #22]
 80059ae:	025b      	lsls	r3, r3, #9
 80059b0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	77bb      	strb	r3, [r7, #30]
		break;
 80059b6:	e001      	b.n	80059bc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059b8:	23fc      	movs	r3, #252	; 0xfc
 80059ba:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d12a      	bne.n	8005a1a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80059c4:	7fbb      	ldrb	r3, [r7, #30]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d124      	bne.n	8005a14 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d110      	bne.n	80059f2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	330c      	adds	r3, #12
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80059e4:	897b      	ldrh	r3, [r7, #10]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80059f0:	e013      	b.n	8005a1a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80059f8:	897b      	ldrh	r3, [r7, #10]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	330c      	adds	r3, #12
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005a06:	897b      	ldrh	r3, [r7, #10]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005a12:	e002      	b.n	8005a1a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop

08005a28 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005a36:	f107 030e 	add.w	r3, r7, #14
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f004 f872 	bl	8009b28 <VL53L0X_RdByte>
 8005a44:	4603      	mov	r3, r0
 8005a46:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10e      	bne.n	8005a6e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005a50:	7bba      	ldrb	r2, [r7, #14]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	da03      	bge.n	8005a68 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a98:	f107 030e 	add.w	r3, r7, #14
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fbd4 	bl	800524c <VL53L0X_GetDeviceMode>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f882 	bl	8005bc0 <VL53L0X_StartMeasurement>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fb13 	bl	80070f4 <VL53L0X_measurement_poll_for_completion>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005ada:	7bbb      	ldrb	r3, [r7, #14]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005b0a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005b0c:	7dbb      	ldrb	r3, [r7, #22]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d005      	beq.n	8005b1e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005b12:	7dbb      	ldrb	r3, [r7, #22]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d002      	beq.n	8005b1e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005b18:	7dbb      	ldrb	r3, [r7, #22]
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d147      	bne.n	8005bae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005b1e:	f107 030c 	add.w	r3, r7, #12
 8005b22:	f107 0210 	add.w	r2, r7, #16
 8005b26:	2101      	movs	r1, #1
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fbc1 	bl	80062b0 <VL53L0X_GetInterruptThresholds>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005b38:	d803      	bhi.n	8005b42 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005b3a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005b3c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005b40:	d935      	bls.n	8005bae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d131      	bne.n	8005bae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d006      	beq.n	8005b5e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b50:	491a      	ldr	r1, [pc, #104]	; (8005bbc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f002 ff3e 	bl	80089d4 <VL53L0X_load_tuning_settings>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]
 8005b5c:	e027      	b.n	8005bae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b5e:	2204      	movs	r2, #4
 8005b60:	21ff      	movs	r1, #255	; 0xff
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f003 ff5a 	bl	8009a1c <VL53L0X_WrByte>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b72:	2200      	movs	r2, #0
 8005b74:	2170      	movs	r1, #112	; 0x70
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f003 ff50 	bl	8009a1c <VL53L0X_WrByte>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b86:	2200      	movs	r2, #0
 8005b88:	21ff      	movs	r1, #255	; 0xff
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f003 ff46 	bl	8009a1c <VL53L0X_WrByte>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f003 ff3c 	bl	8009a1c <VL53L0X_WrByte>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005bae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	2000010c 	.word	0x2000010c

08005bc0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005bd0:	f107 030e 	add.w	r3, r7, #14
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff fb38 	bl	800524c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f003 ff1b 	bl	8009a1c <VL53L0X_WrByte>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005bea:	2201      	movs	r2, #1
 8005bec:	21ff      	movs	r1, #255	; 0xff
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f003 ff14 	bl	8009a1c <VL53L0X_WrByte>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f003 ff0d 	bl	8009a1c <VL53L0X_WrByte>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2191      	movs	r1, #145	; 0x91
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f003 ff03 	bl	8009a1c <VL53L0X_WrByte>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f003 fefc 	bl	8009a1c <VL53L0X_WrByte>
 8005c24:	4603      	mov	r3, r0
 8005c26:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	21ff      	movs	r1, #255	; 0xff
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f003 fef5 	bl	8009a1c <VL53L0X_WrByte>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c36:	2200      	movs	r2, #0
 8005c38:	2180      	movs	r1, #128	; 0x80
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f003 feee 	bl	8009a1c <VL53L0X_WrByte>
 8005c40:	4603      	mov	r3, r0
 8005c42:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d037      	beq.n	8005cba <VL53L0X_StartMeasurement+0xfa>
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d04f      	beq.n	8005cee <VL53L0X_StartMeasurement+0x12e>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d167      	bne.n	8005d22 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005c52:	2201      	movs	r2, #1
 8005c54:	2100      	movs	r1, #0
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f003 fee0 	bl	8009a1c <VL53L0X_WrByte>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d15d      	bne.n	8005d28 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8005c76:	f107 030d 	add.w	r3, r7, #13
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f003 ff52 	bl	8009b28 <VL53L0X_RdByte>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005c8e:	7b7a      	ldrb	r2, [r7, #13]
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	4013      	ands	r3, r2
 8005c94:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c96:	7bfa      	ldrb	r2, [r7, #15]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d107      	bne.n	8005cac <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8005c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d103      	bne.n	8005cac <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005caa:	d3e1      	bcc.n	8005c70 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005cb2:	d339      	bcc.n	8005d28 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005cb4:	23f9      	movs	r3, #249	; 0xf9
 8005cb6:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005cb8:	e036      	b.n	8005d28 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ff15 	bl	8005af4 <VL53L0X_CheckAndLoadInterruptSettings>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005cce:	2202      	movs	r2, #2
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f003 fea2 	bl	8009a1c <VL53L0X_WrByte>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d123      	bne.n	8005d2c <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005cec:	e01e      	b.n	8005d2c <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d105      	bne.n	8005d02 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fefb 	bl	8005af4 <VL53L0X_CheckAndLoadInterruptSettings>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005d02:	2204      	movs	r2, #4
 8005d04:	2100      	movs	r1, #0
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f003 fe88 	bl	8009a1c <VL53L0X_WrByte>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10b      	bne.n	8005d30 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005d20:	e006      	b.n	8005d30 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005d22:	23f8      	movs	r3, #248	; 0xf8
 8005d24:	75fb      	strb	r3, [r7, #23]
 8005d26:	e004      	b.n	8005d32 <VL53L0X_StartMeasurement+0x172>
		break;
 8005d28:	bf00      	nop
 8005d2a:	e002      	b.n	8005d32 <VL53L0X_StartMeasurement+0x172>
		break;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <VL53L0X_StartMeasurement+0x172>
		break;
 8005d30:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005d52:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d112      	bne.n	8005d80 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb1b 	bl	800639c <VL53L0X_GetInterruptMaskStatus>
 8005d66:	4603      	mov	r3, r0
 8005d68:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d103      	bne.n	8005d78 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e01c      	b.n	8005db2 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e018      	b.n	8005db2 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005d80:	f107 030d 	add.w	r3, r7, #13
 8005d84:	461a      	mov	r2, r3
 8005d86:	2114      	movs	r1, #20
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f003 fecd 	bl	8009b28 <VL53L0X_RdByte>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005d9a:	7b7b      	ldrb	r3, [r7, #13]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2201      	movs	r2, #1
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	e002      	b.n	8005db2 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005dc0:	b5b0      	push	{r4, r5, r7, lr}
 8005dc2:	b096      	sub	sp, #88	; 0x58
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005dd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005dd4:	230c      	movs	r3, #12
 8005dd6:	2114      	movs	r1, #20
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f003 fdf6 	bl	80099ca <VL53L0X_ReadMulti>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005de4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f040 80d2 	bne.w	8005f92 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2200      	movs	r2, #0
 8005df2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005dfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005e16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	025b      	lsls	r3, r3, #9
 8005e2c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e32:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005e34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005e4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e4e:	025b      	lsls	r3, r3, #9
 8005e50:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	4413      	add	r3, r2
 8005e68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e72:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005e74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005e82:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005e8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e94:	d047      	beq.n	8005f26 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005e96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e98:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005e9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ea0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ea4:	4a58      	ldr	r2, [pc, #352]	; (8006008 <VL53L0X_GetRangingMeasurementData+0x248>)
 8005ea6:	fb82 1203 	smull	r1, r2, r2, r3
 8005eaa:	1192      	asrs	r2, r2, #6
 8005eac:	17db      	asrs	r3, r3, #31
 8005eae:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005eb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7f1b      	ldrb	r3, [r3, #28]
 8005ebe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d02d      	beq.n	8005f26 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005eca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ecc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005ed0:	fb02 f303 	mul.w	r3, r2, r3
 8005ed4:	121b      	asrs	r3, r3, #8
 8005ed6:	461a      	mov	r2, r3
				if ((SignalRate
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d10d      	bne.n	8005efa <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8005ede:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8005ee6:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005eea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005eee:	e016      	b.n	8005f1e <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8005ef0:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005ef4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ef8:	e011      	b.n	8005f1e <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005efa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f00:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005f04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f06:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005f0e:	121b      	asrs	r3, r3, #8
 8005f10:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f14:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005f1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005f1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005f26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005f2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005f3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	75da      	strb	r2, [r3, #23]
 8005f48:	e006      	b.n	8005f58 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f50:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2200      	movs	r2, #0
 8005f56:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005f58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f5c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005f60:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f003 f9d8 	bl	8009324 <VL53L0X_get_pal_range_status>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005f82:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005f8a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f92:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d12f      	bne.n	8005ffa <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f107 040c 	add.w	r4, r7, #12
 8005fa0:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fac:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005fb4:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005fc2:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005fc8:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005fce:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005fd4:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005fda:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005fe0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005fea:	f107 050c 	add.w	r5, r7, #12
 8005fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ffa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3750      	adds	r7, #80	; 0x50
 8006002:	46bd      	mov	sp, r7
 8006004:	bdb0      	pop	{r4, r5, r7, pc}
 8006006:	bf00      	nop
 8006008:	10624dd3 	.word	0x10624dd3

0800600c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800601a:	2100      	movs	r1, #0
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff f8cd 	bl	80051bc <VL53L0X_SetDeviceMode>
 8006022:	4603      	mov	r3, r0
 8006024:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fd2c 	bl	8005a8c <VL53L0X_PerformSingleMeasurement>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff febc 	bl	8005dc0 <VL53L0X_GetRangingMeasurementData>
 8006048:	4603      	mov	r3, r0
 800604a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800604c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006054:	2100      	movs	r1, #0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f960 	bl	800631c <VL53L0X_ClearInterruptMask>
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	4603      	mov	r3, r0
 800607c:	70fb      	strb	r3, [r7, #3]
 800607e:	460b      	mov	r3, r1
 8006080:	70bb      	strb	r3, [r7, #2]
 8006082:	4613      	mov	r3, r2
 8006084:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006090:	23f6      	movs	r3, #246	; 0xf6
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	e105      	b.n	80062a2 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006096:	78bb      	ldrb	r3, [r7, #2]
 8006098:	2b14      	cmp	r3, #20
 800609a:	d110      	bne.n	80060be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800609c:	7e3b      	ldrb	r3, [r7, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80060a2:	2310      	movs	r3, #16
 80060a4:	73bb      	strb	r3, [r7, #14]
 80060a6:	e001      	b.n	80060ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80060ac:	7bbb      	ldrb	r3, [r7, #14]
 80060ae:	461a      	mov	r2, r3
 80060b0:	2184      	movs	r1, #132	; 0x84
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f003 fcb2 	bl	8009a1c <VL53L0X_WrByte>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	e0f1      	b.n	80062a2 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80060be:	78bb      	ldrb	r3, [r7, #2]
 80060c0:	2b15      	cmp	r3, #21
 80060c2:	f040 8097 	bne.w	80061f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80060c6:	2201      	movs	r2, #1
 80060c8:	21ff      	movs	r1, #255	; 0xff
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f003 fca6 	bl	8009a1c <VL53L0X_WrByte>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80060da:	2200      	movs	r2, #0
 80060dc:	2100      	movs	r1, #0
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f003 fc9c 	bl	8009a1c <VL53L0X_WrByte>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80060ee:	2200      	movs	r2, #0
 80060f0:	21ff      	movs	r1, #255	; 0xff
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f003 fc92 	bl	8009a1c <VL53L0X_WrByte>
 80060f8:	4603      	mov	r3, r0
 80060fa:	461a      	mov	r2, r3
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	4313      	orrs	r3, r2
 8006100:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006102:	2201      	movs	r2, #1
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f003 fc88 	bl	8009a1c <VL53L0X_WrByte>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	4313      	orrs	r3, r2
 8006114:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006116:	2202      	movs	r2, #2
 8006118:	2185      	movs	r1, #133	; 0x85
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f003 fc7e 	bl	8009a1c <VL53L0X_WrByte>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	4313      	orrs	r3, r2
 8006128:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800612a:	2204      	movs	r2, #4
 800612c:	21ff      	movs	r1, #255	; 0xff
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f003 fc74 	bl	8009a1c <VL53L0X_WrByte>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	4313      	orrs	r3, r2
 800613c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800613e:	2200      	movs	r2, #0
 8006140:	21cd      	movs	r1, #205	; 0xcd
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f003 fc6a 	bl	8009a1c <VL53L0X_WrByte>
 8006148:	4603      	mov	r3, r0
 800614a:	461a      	mov	r2, r3
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	4313      	orrs	r3, r2
 8006150:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006152:	2211      	movs	r2, #17
 8006154:	21cc      	movs	r1, #204	; 0xcc
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f003 fc60 	bl	8009a1c <VL53L0X_WrByte>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	4313      	orrs	r3, r2
 8006164:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006166:	2207      	movs	r2, #7
 8006168:	21ff      	movs	r1, #255	; 0xff
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f003 fc56 	bl	8009a1c <VL53L0X_WrByte>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	4313      	orrs	r3, r2
 8006178:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800617a:	2200      	movs	r2, #0
 800617c:	21be      	movs	r1, #190	; 0xbe
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f003 fc4c 	bl	8009a1c <VL53L0X_WrByte>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	4313      	orrs	r3, r2
 800618c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800618e:	2206      	movs	r2, #6
 8006190:	21ff      	movs	r1, #255	; 0xff
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f003 fc42 	bl	8009a1c <VL53L0X_WrByte>
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	4313      	orrs	r3, r2
 80061a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80061a2:	2209      	movs	r2, #9
 80061a4:	21cc      	movs	r1, #204	; 0xcc
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f003 fc38 	bl	8009a1c <VL53L0X_WrByte>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061b6:	2200      	movs	r2, #0
 80061b8:	21ff      	movs	r1, #255	; 0xff
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f003 fc2e 	bl	8009a1c <VL53L0X_WrByte>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80061ca:	2201      	movs	r2, #1
 80061cc:	21ff      	movs	r1, #255	; 0xff
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f003 fc24 	bl	8009a1c <VL53L0X_WrByte>
 80061d4:	4603      	mov	r3, r0
 80061d6:	461a      	mov	r2, r3
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	4313      	orrs	r3, r2
 80061dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f003 fc1a 	bl	8009a1c <VL53L0X_WrByte>
 80061e8:	4603      	mov	r3, r0
 80061ea:	461a      	mov	r2, r3
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	73fb      	strb	r3, [r7, #15]
 80061f2:	e056      	b.n	80062a2 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80061f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d120      	bne.n	800623e <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80061fc:	787b      	ldrb	r3, [r7, #1]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d81b      	bhi.n	800623a <VL53L0X_SetGpioConfig+0x1ce>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <VL53L0X_SetGpioConfig+0x19c>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	0800621d 	.word	0x0800621d
 800620c:	08006223 	.word	0x08006223
 8006210:	08006229 	.word	0x08006229
 8006214:	0800622f 	.word	0x0800622f
 8006218:	08006235 	.word	0x08006235
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800621c:	2300      	movs	r3, #0
 800621e:	73bb      	strb	r3, [r7, #14]
				break;
 8006220:	e00d      	b.n	800623e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006222:	2301      	movs	r3, #1
 8006224:	73bb      	strb	r3, [r7, #14]
				break;
 8006226:	e00a      	b.n	800623e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006228:	2302      	movs	r3, #2
 800622a:	73bb      	strb	r3, [r7, #14]
				break;
 800622c:	e007      	b.n	800623e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800622e:	2303      	movs	r3, #3
 8006230:	73bb      	strb	r3, [r7, #14]
				break;
 8006232:	e004      	b.n	800623e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006234:	2304      	movs	r3, #4
 8006236:	73bb      	strb	r3, [r7, #14]
				break;
 8006238:	e001      	b.n	800623e <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800623a:	23f5      	movs	r3, #245	; 0xf5
 800623c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800623e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d107      	bne.n	8006256 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	461a      	mov	r2, r3
 800624a:	210a      	movs	r1, #10
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f003 fbe5 	bl	8009a1c <VL53L0X_WrByte>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800625e:	7e3b      	ldrb	r3, [r7, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	73bb      	strb	r3, [r7, #14]
 8006268:	e001      	b.n	800626e <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800626a:	2310      	movs	r3, #16
 800626c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	22ef      	movs	r2, #239	; 0xef
 8006272:	2184      	movs	r1, #132	; 0x84
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f003 fc15 	bl	8009aa4 <VL53L0X_UpdateByte>
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800627e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d103      	bne.n	800628e <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	787a      	ldrb	r2, [r7, #1]
 800628a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800628e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d105      	bne.n	80062a2 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006296:	2100      	movs	r1, #0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f83f 	bl	800631c <VL53L0X_ClearInterruptMask>
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop

080062b0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	460b      	mov	r3, r1
 80062be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80062c4:	f107 0314 	add.w	r3, r7, #20
 80062c8:	461a      	mov	r2, r3
 80062ca:	210e      	movs	r1, #14
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f003 fc4c 	bl	8009b6a <VL53L0X_RdWord>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80062d6:	8abb      	ldrh	r3, [r7, #20]
 80062d8:	045b      	lsls	r3, r3, #17
 80062da:	461a      	mov	r2, r3
 80062dc:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <VL53L0X_GetInterruptThresholds+0x68>)
 80062de:	4013      	ands	r3, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80062e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10f      	bne.n	800630c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80062ec:	f107 0314 	add.w	r3, r7, #20
 80062f0:	461a      	mov	r2, r3
 80062f2:	210c      	movs	r1, #12
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f003 fc38 	bl	8009b6a <VL53L0X_RdWord>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80062fe:	8abb      	ldrh	r3, [r7, #20]
 8006300:	045b      	lsls	r3, r3, #17
 8006302:	461a      	mov	r2, r3
 8006304:	4b04      	ldr	r3, [pc, #16]	; (8006318 <VL53L0X_GetInterruptThresholds+0x68>)
 8006306:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800630c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	1ffe0000 	.word	0x1ffe0000

0800631c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800632e:	2201      	movs	r2, #1
 8006330:	210b      	movs	r1, #11
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f003 fb72 	bl	8009a1c <VL53L0X_WrByte>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800633c:	2200      	movs	r2, #0
 800633e:	210b      	movs	r1, #11
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f003 fb6b 	bl	8009a1c <VL53L0X_WrByte>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	4313      	orrs	r3, r2
 800634e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006350:	f107 030d 	add.w	r3, r7, #13
 8006354:	461a      	mov	r2, r3
 8006356:	2113      	movs	r1, #19
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f003 fbe5 	bl	8009b28 <VL53L0X_RdByte>
 800635e:	4603      	mov	r3, r0
 8006360:	461a      	mov	r2, r3
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	4313      	orrs	r3, r2
 8006366:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	3301      	adds	r3, #1
 800636c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800636e:	7b7b      	ldrb	r3, [r7, #13]
 8006370:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d803      	bhi.n	8006386 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800637e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0d3      	beq.n	800632e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800638c:	23f4      	movs	r3, #244	; 0xf4
 800638e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80063aa:	f107 030e 	add.w	r3, r7, #14
 80063ae:	461a      	mov	r2, r3
 80063b0:	2113      	movs	r1, #19
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f003 fbb8 	bl	8009b28 <VL53L0X_RdByte>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	f003 0207 	and.w	r2, r3, #7
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	f003 0318 	and.w	r3, r3, #24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80063d0:	23fa      	movs	r3, #250	; 0xfa
 80063d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80063d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80063ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80063f2:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80063f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f8:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80063fa:	f107 0308 	add.w	r3, r7, #8
 80063fe:	461a      	mov	r2, r3
 8006400:	2128      	movs	r1, #40	; 0x28
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f003 fbb1 	bl	8009b6a <VL53L0X_RdWord>
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800640c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11e      	bne.n	8006452 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8006414:	893b      	ldrh	r3, [r7, #8]
 8006416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641a:	b29b      	uxth	r3, r3
 800641c:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800641e:	893b      	ldrh	r3, [r7, #8]
 8006420:	461a      	mov	r2, r3
 8006422:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006426:	429a      	cmp	r2, r3
 8006428:	dd0b      	ble.n	8006442 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800642a:	893a      	ldrh	r2, [r7, #8]
 800642c:	897b      	ldrh	r3, [r7, #10]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	b29b      	uxth	r3, r3
 8006432:	b21b      	sxth	r3, r3
 8006434:	461a      	mov	r2, r3
					* 250;
 8006436:	23fa      	movs	r3, #250	; 0xfa
 8006438:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e007      	b.n	8006452 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006442:	893b      	ldrh	r3, [r7, #8]
 8006444:	b21b      	sxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	23fa      	movs	r3, #250	; 0xfa
 800644a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800645e:	b480      	push	{r7}
 8006460:	b08b      	sub	sp, #44	; 0x2c
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800646c:	2308      	movs	r3, #8
 800646e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	fbb3 f2f2 	udiv	r2, r3, r2
 800648e:	69b9      	ldr	r1, [r7, #24]
 8006490:	fb01 f202 	mul.w	r2, r1, r2
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
 800649c:	e030      	b.n	8006500 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	4413      	add	r3, r2
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d11e      	bne.n	80064f2 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80064b4:	7ffa      	ldrb	r2, [r7, #31]
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	fa42 f303 	asr.w	r3, r2, r3
 80064bc:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80064c2:	e016      	b.n	80064f2 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <get_next_good_spad+0x88>
				success = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	fb02 f203 	mul.w	r2, r2, r3
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	4413      	add	r3, r2
 80064de:	461a      	mov	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	601a      	str	r2, [r3, #0]
				break;
 80064e4:	e009      	b.n	80064fa <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	3301      	adds	r3, #1
 80064f0:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80064f2:	6a3a      	ldr	r2, [r7, #32]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d3e4      	bcc.n	80064c4 <get_next_good_spad+0x66>
				coarseIndex++) {
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	3301      	adds	r3, #1
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	429a      	cmp	r2, r3
 8006506:	d202      	bcs.n	800650e <get_next_good_spad+0xb0>
 8006508:	7fbb      	ldrb	r3, [r7, #30]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0c7      	beq.n	800649e <get_next_good_spad+0x40>
		}
	}
}
 800650e:	bf00      	nop
 8006510:	372c      	adds	r7, #44	; 0x2c
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
	...

0800651c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	099b      	lsrs	r3, r3, #6
 800652c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <is_aperture+0x30>)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <is_aperture+0x22>
		isAperture = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	200002c4 	.word	0x200002c4

08006550 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006550:	b480      	push	{r7}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800655c:	2300      	movs	r3, #0
 800655e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006560:	2308      	movs	r3, #8
 8006562:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	fbb3 f2f2 	udiv	r2, r3, r2
 8006576:	69b9      	ldr	r1, [r7, #24]
 8006578:	fb01 f202 	mul.w	r2, r1, r2
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	429a      	cmp	r2, r3
 8006586:	d302      	bcc.n	800658e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006588:	23ce      	movs	r3, #206	; 0xce
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e010      	b.n	80065b0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	440a      	add	r2, r1
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	b251      	sxtb	r1, r2
 800659e:	2001      	movs	r0, #1
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	fa00 f202 	lsl.w	r2, r0, r2
 80065a6:	b252      	sxtb	r2, r2
 80065a8:	430a      	orrs	r2, r1
 80065aa:	b252      	sxtb	r2, r2
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]

	return status;
 80065b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3724      	adds	r7, #36	; 0x24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80065ca:	2306      	movs	r3, #6
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	21b0      	movs	r1, #176	; 0xb0
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f003 f9cf 	bl	8009974 <VL53L0X_WriteMulti>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80065da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80065f0:	2306      	movs	r3, #6
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	21b0      	movs	r1, #176	; 0xb0
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f003 f9e7 	bl	80099ca <VL53L0X_ReadMulti>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	460b      	mov	r3, r1
 800661a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800661c:	2300      	movs	r3, #0
 800661e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006624:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006628:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800662a:	2300      	movs	r3, #0
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
 800662e:	e02b      	b.n	8006688 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006630:	f107 031c 	add.w	r3, r7, #28
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ff10 	bl	800645e <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d103      	bne.n	800664e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006646:	23ce      	movs	r3, #206	; 0xce
 8006648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800664c:	e020      	b.n	8006690 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	461a      	mov	r2, r3
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	4413      	add	r3, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff ff60 	bl	800651c <is_aperture>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	4293      	cmp	r3, r2
 8006664:	d003      	beq.n	800666e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006666:	23ce      	movs	r3, #206	; 0xce
 8006668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800666c:	e010      	b.n	8006690 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006676:	6838      	ldr	r0, [r7, #0]
 8006678:	f7ff ff6a 	bl	8006550 <enable_spad_bit>
		currentSpad++;
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	3301      	adds	r3, #1
 8006680:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	3301      	adds	r3, #1
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
 8006688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800668a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668c:	429a      	cmp	r2, r3
 800668e:	d3cf      	bcc.n	8006630 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006696:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ff8d 	bl	80065c0 <set_ref_spad_map>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80066ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d121      	bne.n	80066f8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	4619      	mov	r1, r3
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff ff93 	bl	80065e6 <get_ref_spad_map>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80066ca:	e011      	b.n	80066f0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	4413      	add	r3, r2
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	f107 0114 	add.w	r1, r7, #20
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	440b      	add	r3, r1
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d003      	beq.n	80066ea <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066e2:	23ce      	movs	r3, #206	; 0xce
 80066e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80066e8:	e006      	b.n	80066f8 <enable_ref_spads+0xec>
			}
			i++;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	3301      	adds	r3, #1
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80066f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d3e9      	bcc.n	80066cc <enable_ref_spads+0xc0>
		}
	}
	return status;
 80066f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3730      	adds	r7, #48	; 0x30
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	; 0x28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800670e:	2300      	movs	r3, #0
 8006710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006728:	2b00      	cmp	r3, #0
 800672a:	d107      	bne.n	800673c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800672c:	22c0      	movs	r2, #192	; 0xc0
 800672e:	2101      	movs	r1, #1
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f003 f973 	bl	8009a1c <VL53L0X_WrByte>
 8006736:	4603      	mov	r3, r0
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800673c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006740:	2b00      	cmp	r3, #0
 8006742:	d108      	bne.n	8006756 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fc5e 	bl	800600c <VL53L0X_PerformSingleRangingMeasurement>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800675e:	2201      	movs	r2, #1
 8006760:	21ff      	movs	r1, #255	; 0xff
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f003 f95a 	bl	8009a1c <VL53L0X_WrByte>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800676e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006772:	2b00      	cmp	r3, #0
 8006774:	d107      	bne.n	8006786 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	21b6      	movs	r1, #182	; 0xb6
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f003 f9f5 	bl	8009b6a <VL53L0X_RdWord>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800678e:	2200      	movs	r2, #0
 8006790:	21ff      	movs	r1, #255	; 0xff
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f003 f942 	bl	8009a1c <VL53L0X_WrByte>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800679e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d112      	bne.n	80067cc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80067a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067aa:	461a      	mov	r2, r3
 80067ac:	2101      	movs	r1, #1
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f003 f934 	bl	8009a1c <VL53L0X_WrByte>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80067ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80067cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3728      	adds	r7, #40	; 0x28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b09d      	sub	sp, #116	; 0x74
 80067dc:	af06      	add	r7, sp, #24
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80067ea:	23b4      	movs	r3, #180	; 0xb4
 80067ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80067f0:	2303      	movs	r3, #3
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80067f4:	232c      	movs	r3, #44	; 0x2c
 80067f6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006804:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006808:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006812:	2306      	movs	r3, #6
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800683c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800683e:	2300      	movs	r3, #0
 8006840:	64bb      	str	r3, [r7, #72]	; 0x48
 8006842:	e009      	b.n	8006858 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006848:	4413      	add	r3, r2
 800684a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006854:	3301      	adds	r3, #1
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
 8006858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	429a      	cmp	r2, r3
 800685e:	d3f1      	bcc.n	8006844 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006860:	2201      	movs	r2, #1
 8006862:	21ff      	movs	r1, #255	; 0xff
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f003 f8d9 	bl	8009a1c <VL53L0X_WrByte>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006870:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006878:	2200      	movs	r2, #0
 800687a:	214f      	movs	r1, #79	; 0x4f
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f003 f8cd 	bl	8009a1c <VL53L0X_WrByte>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006888:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800688c:	2b00      	cmp	r3, #0
 800688e:	d107      	bne.n	80068a0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006890:	222c      	movs	r2, #44	; 0x2c
 8006892:	214e      	movs	r1, #78	; 0x4e
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f003 f8c1 	bl	8009a1c <VL53L0X_WrByte>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80068a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d107      	bne.n	80068b8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80068a8:	2200      	movs	r2, #0
 80068aa:	21ff      	movs	r1, #255	; 0xff
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f003 f8b5 	bl	8009a1c <VL53L0X_WrByte>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80068b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80068c0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80068c4:	461a      	mov	r2, r3
 80068c6:	21b6      	movs	r1, #182	; 0xb6
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f003 f8a7 	bl	8009a1c <VL53L0X_WrByte>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80068d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d107      	bne.n	80068ec <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80068dc:	2200      	movs	r2, #0
 80068de:	2180      	movs	r1, #128	; 0x80
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f003 f89b 	bl	8009a1c <VL53L0X_WrByte>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80068ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80068f4:	f107 0210 	add.w	r2, r7, #16
 80068f8:	f107 0111 	add.w	r1, r7, #17
 80068fc:	2300      	movs	r3, #0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fbbb 	bl	800707a <VL53L0X_perform_ref_calibration>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800690a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800690e:	2b00      	cmp	r3, #0
 8006910:	d121      	bne.n	8006956 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006918:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800691e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006920:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800692e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006932:	f107 0218 	add.w	r2, r7, #24
 8006936:	9204      	str	r2, [sp, #16]
 8006938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800693a:	9203      	str	r2, [sp, #12]
 800693c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800693e:	9202      	str	r2, [sp, #8]
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4623      	mov	r3, r4
 8006948:	4602      	mov	r2, r0
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fe5e 	bl	800660c <enable_ref_spads>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006956:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800695a:	2b00      	cmp	r3, #0
 800695c:	d174      	bne.n	8006a48 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006962:	f107 0312 	add.w	r3, r7, #18
 8006966:	4619      	mov	r1, r3
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff fecb 	bl	8006704 <perform_ref_signal_measurement>
 800696e:	4603      	mov	r3, r0
 8006970:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006974:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006978:	2b00      	cmp	r3, #0
 800697a:	d161      	bne.n	8006a40 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800697c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800697e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006980:	429a      	cmp	r2, r3
 8006982:	d25d      	bcs.n	8006a40 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006984:	2300      	movs	r3, #0
 8006986:	64bb      	str	r3, [r7, #72]	; 0x48
 8006988:	e009      	b.n	800699e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698e:	4413      	add	r3, r2
 8006990:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699a:	3301      	adds	r3, #1
 800699c:	64bb      	str	r3, [r7, #72]	; 0x48
 800699e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d3f1      	bcc.n	800698a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80069a6:	e002      	b.n	80069ae <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80069a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069aa:	3301      	adds	r3, #1
 80069ac:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80069ae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80069b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b4:	4413      	add	r3, r2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fdb0 	bl	800651c <is_aperture>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d103      	bne.n	80069ca <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80069c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d3ee      	bcc.n	80069a8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80069ca:	2301      	movs	r3, #1
 80069cc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80069ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80069de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80069e2:	f107 0218 	add.w	r2, r7, #24
 80069e6:	9204      	str	r2, [sp, #16]
 80069e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ea:	9203      	str	r2, [sp, #12]
 80069ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069ee:	9202      	str	r2, [sp, #8]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4623      	mov	r3, r4
 80069f8:	4602      	mov	r2, r0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff fe06 	bl	800660c <enable_ref_spads>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006a06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11b      	bne.n	8006a46 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006a12:	f107 0312 	add.w	r3, r7, #18
 8006a16:	4619      	mov	r1, r3
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fe73 	bl	8006704 <perform_ref_signal_measurement>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10c      	bne.n	8006a46 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006a2c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d208      	bcs.n	8006a46 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006a3e:	e002      	b.n	8006a46 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a44:	e000      	b.n	8006a48 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a46:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 80af 	bne.w	8006bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006a52:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a56:	429a      	cmp	r2, r3
 8006a58:	f240 80aa 	bls.w	8006bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006a6c:	f107 031c 	add.w	r3, r7, #28
 8006a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a72:	4618      	mov	r0, r3
 8006a74:	f008 fe78 	bl	800f768 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006a78:	8a7b      	ldrh	r3, [r7, #18]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bfb8      	it	lt
 8006a84:	425b      	neglt	r3, r3
 8006a86:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006a8e:	e086      	b.n	8006b9e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006a96:	f107 0314 	add.w	r3, r7, #20
 8006a9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a9e:	f7ff fcde 	bl	800645e <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d103      	bne.n	8006ab2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006aaa:	23ce      	movs	r3, #206	; 0xce
 8006aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006ab0:	e07e      	b.n	8006bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006ab2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fd2e 	bl	800651c <is_aperture>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d003      	beq.n	8006ad2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006ad0:	e06e      	b.n	8006bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006ae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff fd32 	bl	8006550 <enable_spad_bit>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006af2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10c      	bne.n	8006b14 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006afc:	3301      	adds	r3, #1
 8006afe:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fd59 	bl	80065c0 <set_ref_spad_map>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006b14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d146      	bne.n	8006baa <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006b1c:	f107 0312 	add.w	r3, r7, #18
 8006b20:	4619      	mov	r1, r3
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff fdee 	bl	8006704 <perform_ref_signal_measurement>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006b2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d13b      	bne.n	8006bae <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006b36:	8a7b      	ldrh	r3, [r7, #18]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bfb8      	it	lt
 8006b42:	425b      	neglt	r3, r3
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006b46:	8a7b      	ldrh	r3, [r7, #18]
 8006b48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d21c      	bcs.n	8006b88 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d914      	bls.n	8006b80 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006b56:	f107 031c 	add.w	r3, r7, #28
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff fd2f 	bl	80065c0 <set_ref_spad_map>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006b6e:	f107 011c 	add.w	r1, r7, #28
 8006b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b74:	4618      	mov	r0, r3
 8006b76:	f008 fdf7 	bl	800f768 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e00a      	b.n	8006b9e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006b92:	f107 031c 	add.w	r3, r7, #28
 8006b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f008 fde5 	bl	800f768 <memcpy>
		while (!complete) {
 8006b9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f43f af74 	beq.w	8006a90 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006ba8:	e002      	b.n	8006bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006bae:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006bb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d115      	bne.n	8006be4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bbc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006bc4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	781a      	ldrb	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006be4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	375c      	adds	r7, #92	; 0x5c
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd90      	pop	{r4, r7, pc}

08006bf0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b093      	sub	sp, #76	; 0x4c
 8006bf4:	af06      	add	r7, sp, #24
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006c08:	23b4      	movs	r3, #180	; 0xb4
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006c0e:	2306      	movs	r3, #6
 8006c10:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006c12:	232c      	movs	r3, #44	; 0x2c
 8006c14:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c16:	2201      	movs	r2, #1
 8006c18:	21ff      	movs	r1, #255	; 0xff
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f002 fefe 	bl	8009a1c <VL53L0X_WrByte>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006c2e:	2200      	movs	r2, #0
 8006c30:	214f      	movs	r1, #79	; 0x4f
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f002 fef2 	bl	8009a1c <VL53L0X_WrByte>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006c3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d107      	bne.n	8006c56 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006c46:	222c      	movs	r2, #44	; 0x2c
 8006c48:	214e      	movs	r1, #78	; 0x4e
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f002 fee6 	bl	8009a1c <VL53L0X_WrByte>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006c56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d107      	bne.n	8006c6e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c5e:	2200      	movs	r2, #0
 8006c60:	21ff      	movs	r1, #255	; 0xff
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f002 feda 	bl	8009a1c <VL53L0X_WrByte>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	21b6      	movs	r1, #182	; 0xb6
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f002 fecc 	bl	8009a1c <VL53L0X_WrByte>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8e:	e009      	b.n	8006ca4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d3f1      	bcc.n	8006c90 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d011      	beq.n	8006cd6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006cb2:	e002      	b.n	8006cba <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006cba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	4413      	add	r3, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fc2a 	bl	800651c <is_aperture>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <VL53L0X_set_reference_spads+0xe6>
 8006cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d3ee      	bcc.n	8006cb4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ce6:	79f9      	ldrb	r1, [r7, #7]
 8006ce8:	f107 0214 	add.w	r2, r7, #20
 8006cec:	9204      	str	r2, [sp, #16]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	9203      	str	r2, [sp, #12]
 8006cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf4:	9202      	str	r2, [sp, #8]
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	4602      	mov	r2, r0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff fc83 	bl	800660c <enable_ref_spads>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10c      	bne.n	8006d2e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	79fa      	ldrb	r2, [r7, #7]
 8006d2a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006d2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3734      	adds	r7, #52	; 0x34
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd90      	pop	{r4, r7, pc}

08006d3a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f002 fe5c 	bl	8009a1c <VL53L0X_WrByte>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f9bf 	bl	80070f4 <VL53L0X_measurement_poll_for_completion>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d105      	bne.n	8006d8e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006d82:	2100      	movs	r1, #0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fac9 	bl	800631c <VL53L0X_ClearInterruptMask>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006d96:	2200      	movs	r2, #0
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f002 fe3e 	bl	8009a1c <VL53L0X_WrByte>
 8006da0:	4603      	mov	r3, r0
 8006da2:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	70fb      	strb	r3, [r7, #3]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70bb      	strb	r3, [r7, #2]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	21ff      	movs	r1, #255	; 0xff
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f002 fe20 	bl	8009a1c <VL53L0X_WrByte>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	461a      	mov	r2, r3
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006de6:	2200      	movs	r2, #0
 8006de8:	2100      	movs	r1, #0
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f002 fe16 	bl	8009a1c <VL53L0X_WrByte>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	21ff      	movs	r1, #255	; 0xff
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f002 fe0c 	bl	8009a1c <VL53L0X_WrByte>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01e      	beq.n	8006e52 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	21cb      	movs	r1, #203	; 0xcb
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 fe81 	bl	8009b28 <VL53L0X_RdByte>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d02a      	beq.n	8006e8e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006e38:	f107 030e 	add.w	r3, r7, #14
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	21ee      	movs	r1, #238	; 0xee
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f002 fe71 	bl	8009b28 <VL53L0X_RdByte>
 8006e46:	4603      	mov	r3, r0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e01d      	b.n	8006e8e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006e52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006e5a:	78bb      	ldrb	r3, [r7, #2]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	21cb      	movs	r1, #203	; 0xcb
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 fddb 	bl	8009a1c <VL53L0X_WrByte>
 8006e66:	4603      	mov	r3, r0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006e78:	787b      	ldrb	r3, [r7, #1]
 8006e7a:	2280      	movs	r2, #128	; 0x80
 8006e7c:	21ee      	movs	r1, #238	; 0xee
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f002 fe10 	bl	8009aa4 <VL53L0X_UpdateByte>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e8e:	2201      	movs	r2, #1
 8006e90:	21ff      	movs	r1, #255	; 0xff
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f002 fdc2 	bl	8009a1c <VL53L0X_WrByte>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 fdb8 	bl	8009a1c <VL53L0X_WrByte>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	21ff      	movs	r1, #255	; 0xff
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f002 fdae 	bl	8009a1c <VL53L0X_WrByte>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	f023 0310 	bic.w	r3, r3, #16
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	701a      	strb	r2, [r3, #0]

	return Status;
 8006ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b08a      	sub	sp, #40	; 0x28
 8006ee6:	af04      	add	r7, sp, #16
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	4611      	mov	r1, r2
 8006eee:	461a      	mov	r2, r3
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	71fb      	strb	r3, [r7, #7]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006f0c:	79bb      	ldrb	r3, [r7, #6]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006f18:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f002 fd7c 	bl	8009a1c <VL53L0X_WrByte>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d105      	bne.n	8006f3c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006f30:	2140      	movs	r1, #64	; 0x40
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff ff01 	bl	8006d3a <VL53L0X_perform_single_ref_calibration>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d115      	bne.n	8006f70 <VL53L0X_perform_vhv_calibration+0x8e>
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d112      	bne.n	8006f70 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006f4a:	7d39      	ldrb	r1, [r7, #20]
 8006f4c:	7d7a      	ldrb	r2, [r7, #21]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9303      	str	r3, [sp, #12]
 8006f52:	2301      	movs	r3, #1
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	f107 0313 	add.w	r3, r7, #19
 8006f5a:	9301      	str	r3, [sp, #4]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	460b      	mov	r3, r1
 8006f62:	2101      	movs	r1, #1
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff ff23 	bl	8006db0 <VL53L0X_ref_calibration_io>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]
 8006f6e:	e002      	b.n	8006f76 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d112      	bne.n	8006fa4 <VL53L0X_perform_vhv_calibration+0xc2>
 8006f7e:	79bb      	ldrb	r3, [r7, #6]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f84:	7dbb      	ldrb	r3, [r7, #22]
 8006f86:	461a      	mov	r2, r3
 8006f88:	2101      	movs	r1, #1
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f002 fd46 	bl	8009a1c <VL53L0X_WrByte>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d103      	bne.n	8006fa4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	7dba      	ldrb	r2, [r7, #22]
 8006fa0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08a      	sub	sp, #40	; 0x28
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4611      	mov	r1, r2
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	71fb      	strb	r3, [r7, #7]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006fd6:	79bb      	ldrb	r3, [r7, #6]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006fe2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f002 fd17 	bl	8009a1c <VL53L0X_WrByte>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d105      	bne.n	8007006 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fe9c 	bl	8006d3a <VL53L0X_perform_single_ref_calibration>
 8007002:	4603      	mov	r3, r0
 8007004:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d115      	bne.n	800703a <VL53L0X_perform_phase_calibration+0x8a>
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d112      	bne.n	800703a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007014:	7d39      	ldrb	r1, [r7, #20]
 8007016:	7d7a      	ldrb	r2, [r7, #21]
 8007018:	2301      	movs	r3, #1
 800701a:	9303      	str	r3, [sp, #12]
 800701c:	2300      	movs	r3, #0
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	f107 0313 	add.w	r3, r7, #19
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	460b      	mov	r3, r1
 800702c:	2101      	movs	r1, #1
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f7ff febe 	bl	8006db0 <VL53L0X_ref_calibration_io>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]
 8007038:	e002      	b.n	8007040 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d112      	bne.n	800706e <VL53L0X_perform_phase_calibration+0xbe>
 8007048:	79bb      	ldrb	r3, [r7, #6]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00f      	beq.n	800706e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800704e:	7dbb      	ldrb	r3, [r7, #22]
 8007050:	461a      	mov	r2, r3
 8007052:	2101      	movs	r1, #1
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f002 fce1 	bl	8009a1c <VL53L0X_WrByte>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800705e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	7dba      	ldrb	r2, [r7, #22]
 800706a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800706e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b086      	sub	sp, #24
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007088:	2300      	movs	r3, #0
 800708a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007096:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	2300      	movs	r3, #0
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff ff1f 	bl	8006ee2 <VL53L0X_perform_vhv_calibration>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80070a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	2300      	movs	r3, #0
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7ff ff7a 	bl	8006fb0 <VL53L0X_perform_phase_calibration>
 80070bc:	4603      	mov	r3, r0
 80070be:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80070c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10f      	bne.n	80070e8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070c8:	7dbb      	ldrb	r3, [r7, #22]
 80070ca:	461a      	mov	r2, r3
 80070cc:	2101      	movs	r1, #1
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f002 fca4 	bl	8009a1c <VL53L0X_WrByte>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80070d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d103      	bne.n	80070e8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	7dba      	ldrb	r2, [r7, #22]
 80070e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80070e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007108:	f107 030f 	add.w	r3, r7, #15
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fe fe15 	bl	8005d3e <VL53L0X_GetMeasurementDataReady>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d110      	bne.n	8007142 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d00f      	beq.n	8007146 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3301      	adds	r3, #1
 800712a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007132:	d302      	bcc.n	800713a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007134:	23f9      	movs	r3, #249	; 0xf9
 8007136:	75fb      	strb	r3, [r7, #23]
			break;
 8007138:	e006      	b.n	8007148 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f002 fd58 	bl	8009bf0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007140:	e7e2      	b.n	8007108 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007146:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007148:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	3301      	adds	r3, #1
 8007166:	b2db      	uxtb	r3, r3
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	4603      	mov	r3, r0
 8007182:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	085b      	lsrs	r3, r3, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80071ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071b0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80071b2:	e002      	b.n	80071ba <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	089b      	lsrs	r3, r3, #2
 80071b8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d8f8      	bhi.n	80071b4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80071c2:	e017      	b.n	80071f4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d80b      	bhi.n	80071e8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	085a      	lsrs	r2, r3, #1
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4413      	add	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e002      	b.n	80071ee <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	089b      	lsrs	r3, r3, #2
 80071f2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e4      	bne.n	80071c4 <VL53L0X_isqrt+0x24>
	}

	return res;
 80071fa:	68fb      	ldr	r3, [r7, #12]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007210:	2300      	movs	r3, #0
 8007212:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007214:	2200      	movs	r2, #0
 8007216:	2183      	movs	r1, #131	; 0x83
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f002 fbff 	bl	8009a1c <VL53L0X_WrByte>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	4313      	orrs	r3, r2
 8007226:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11e      	bne.n	800726e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007234:	f107 030f 	add.w	r3, r7, #15
 8007238:	461a      	mov	r2, r3
 800723a:	2183      	movs	r1, #131	; 0x83
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 fc73 	bl	8009b28 <VL53L0X_RdByte>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <VL53L0X_device_read_strobe+0x5a>
 800724c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	3301      	adds	r3, #1
 8007258:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007260:	d3e8      	bcc.n	8007234 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007268:	d301      	bcc.n	800726e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800726a:	23f9      	movs	r3, #249	; 0xf9
 800726c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800726e:	2201      	movs	r2, #1
 8007270:	2183      	movs	r1, #131	; 0x83
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 fbd2 	bl	8009a1c <VL53L0X_WrByte>
 8007278:	4603      	mov	r3, r0
 800727a:	461a      	mov	r2, r3
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	4313      	orrs	r3, r2
 8007280:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007282:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b098      	sub	sp, #96	; 0x60
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800729a:	2300      	movs	r3, #0
 800729c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80072be:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80072c2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80072d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80072da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072de:	2b07      	cmp	r3, #7
 80072e0:	f000 8408 	beq.w	8007af4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80072e4:	2201      	movs	r2, #1
 80072e6:	2180      	movs	r1, #128	; 0x80
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f002 fb97 	bl	8009a1c <VL53L0X_WrByte>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80072fc:	2201      	movs	r2, #1
 80072fe:	21ff      	movs	r1, #255	; 0xff
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 fb8b 	bl	8009a1c <VL53L0X_WrByte>
 8007306:	4603      	mov	r3, r0
 8007308:	461a      	mov	r2, r3
 800730a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800730e:	4313      	orrs	r3, r2
 8007310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f002 fb7f 	bl	8009a1c <VL53L0X_WrByte>
 800731e:	4603      	mov	r3, r0
 8007320:	461a      	mov	r2, r3
 8007322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007326:	4313      	orrs	r3, r2
 8007328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800732c:	2206      	movs	r2, #6
 800732e:	21ff      	movs	r1, #255	; 0xff
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f002 fb73 	bl	8009a1c <VL53L0X_WrByte>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733e:	4313      	orrs	r3, r2
 8007340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007344:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007348:	461a      	mov	r2, r3
 800734a:	2183      	movs	r1, #131	; 0x83
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f002 fbeb 	bl	8009b28 <VL53L0X_RdByte>
 8007352:	4603      	mov	r3, r0
 8007354:	461a      	mov	r2, r3
 8007356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800735a:	4313      	orrs	r3, r2
 800735c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007364:	f043 0304 	orr.w	r3, r3, #4
 8007368:	b2db      	uxtb	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	2183      	movs	r1, #131	; 0x83
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f002 fb54 	bl	8009a1c <VL53L0X_WrByte>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800737c:	4313      	orrs	r3, r2
 800737e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007382:	2207      	movs	r2, #7
 8007384:	21ff      	movs	r1, #255	; 0xff
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 fb48 	bl	8009a1c <VL53L0X_WrByte>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007394:	4313      	orrs	r3, r2
 8007396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800739a:	2201      	movs	r2, #1
 800739c:	2181      	movs	r1, #129	; 0x81
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f002 fb3c 	bl	8009a1c <VL53L0X_WrByte>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f002 fc1c 	bl	8009bf0 <VL53L0X_PollingDelay>
 80073b8:	4603      	mov	r3, r0
 80073ba:	461a      	mov	r2, r3
 80073bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80073c6:	2201      	movs	r2, #1
 80073c8:	2180      	movs	r1, #128	; 0x80
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f002 fb26 	bl	8009a1c <VL53L0X_WrByte>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d8:	4313      	orrs	r3, r2
 80073da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8098 	beq.w	800751a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80073ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073ee:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f040 8091 	bne.w	800751a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80073f8:	226b      	movs	r2, #107	; 0x6b
 80073fa:	2194      	movs	r1, #148	; 0x94
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 fb0d 	bl	8009a1c <VL53L0X_WrByte>
 8007402:	4603      	mov	r3, r0
 8007404:	461a      	mov	r2, r3
 8007406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800740a:	4313      	orrs	r3, r2
 800740c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff fef9 	bl	8007208 <VL53L0X_device_read_strobe>
 8007416:	4603      	mov	r3, r0
 8007418:	461a      	mov	r2, r3
 800741a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800741e:	4313      	orrs	r3, r2
 8007420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007428:	461a      	mov	r2, r3
 800742a:	2190      	movs	r1, #144	; 0x90
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f002 fbbd 	bl	8009bac <VL53L0X_RdDWord>
 8007432:	4603      	mov	r3, r0
 8007434:	461a      	mov	r2, r3
 8007436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743a:	4313      	orrs	r3, r2
 800743c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	0bdb      	lsrs	r3, r3, #15
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800745c:	2224      	movs	r2, #36	; 0x24
 800745e:	2194      	movs	r1, #148	; 0x94
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f002 fadb 	bl	8009a1c <VL53L0X_WrByte>
 8007466:	4603      	mov	r3, r0
 8007468:	461a      	mov	r2, r3
 800746a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800746e:	4313      	orrs	r3, r2
 8007470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fec7 	bl	8007208 <VL53L0X_device_read_strobe>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007482:	4313      	orrs	r3, r2
 8007484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800748c:	461a      	mov	r2, r3
 800748e:	2190      	movs	r1, #144	; 0x90
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f002 fb8b 	bl	8009bac <VL53L0X_RdDWord>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800749e:	4313      	orrs	r3, r2
 80074a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	0a1b      	lsrs	r3, r3, #8
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80074c2:	2225      	movs	r2, #37	; 0x25
 80074c4:	2194      	movs	r1, #148	; 0x94
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f002 faa8 	bl	8009a1c <VL53L0X_WrByte>
 80074cc:	4603      	mov	r3, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff fe94 	bl	8007208 <VL53L0X_device_read_strobe>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074f2:	461a      	mov	r2, r3
 80074f4:	2190      	movs	r1, #144	; 0x90
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 fb58 	bl	8009bac <VL53L0X_RdDWord>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007504:	4313      	orrs	r3, r2
 8007506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	0e1b      	lsrs	r3, r3, #24
 800750e:	b2db      	uxtb	r3, r3
 8007510:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	b2db      	uxtb	r3, r3
 8007518:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8189 	beq.w	8007838 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007526:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800752a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 8182 	bne.w	8007838 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007534:	2202      	movs	r2, #2
 8007536:	2194      	movs	r1, #148	; 0x94
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f002 fa6f 	bl	8009a1c <VL53L0X_WrByte>
 800753e:	4603      	mov	r3, r0
 8007540:	461a      	mov	r2, r3
 8007542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007546:	4313      	orrs	r3, r2
 8007548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fe5b 	bl	8007208 <VL53L0X_device_read_strobe>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800755a:	4313      	orrs	r3, r2
 800755c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007560:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007564:	461a      	mov	r2, r3
 8007566:	2190      	movs	r1, #144	; 0x90
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 fadd 	bl	8009b28 <VL53L0X_RdByte>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007576:	4313      	orrs	r3, r2
 8007578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800757c:	227b      	movs	r2, #123	; 0x7b
 800757e:	2194      	movs	r1, #148	; 0x94
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f002 fa4b 	bl	8009a1c <VL53L0X_WrByte>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800758e:	4313      	orrs	r3, r2
 8007590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff fe37 	bl	8007208 <VL53L0X_device_read_strobe>
 800759a:	4603      	mov	r3, r0
 800759c:	461a      	mov	r2, r3
 800759e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80075a8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80075ac:	461a      	mov	r2, r3
 80075ae:	2190      	movs	r1, #144	; 0x90
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f002 fab9 	bl	8009b28 <VL53L0X_RdByte>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461a      	mov	r2, r3
 80075ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075be:	4313      	orrs	r3, r2
 80075c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80075c4:	2277      	movs	r2, #119	; 0x77
 80075c6:	2194      	movs	r1, #148	; 0x94
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f002 fa27 	bl	8009a1c <VL53L0X_WrByte>
 80075ce:	4603      	mov	r3, r0
 80075d0:	461a      	mov	r2, r3
 80075d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fe13 	bl	8007208 <VL53L0X_device_read_strobe>
 80075e2:	4603      	mov	r3, r0
 80075e4:	461a      	mov	r2, r3
 80075e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80075f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075f4:	461a      	mov	r2, r3
 80075f6:	2190      	movs	r1, #144	; 0x90
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 fad7 	bl	8009bac <VL53L0X_RdDWord>
 80075fe:	4603      	mov	r3, r0
 8007600:	461a      	mov	r2, r3
 8007602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007606:	4313      	orrs	r3, r2
 8007608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	0e5b      	lsrs	r3, r3, #25
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007616:	b2db      	uxtb	r3, r3
 8007618:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	0c9b      	lsrs	r3, r3, #18
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007624:	b2db      	uxtb	r3, r3
 8007626:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	0adb      	lsrs	r3, r3, #11
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007632:	b2db      	uxtb	r3, r3
 8007634:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	091b      	lsrs	r3, r3, #4
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007640:	b2db      	uxtb	r3, r3
 8007642:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	b2db      	uxtb	r3, r3
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007650:	b2db      	uxtb	r3, r3
 8007652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007656:	2278      	movs	r2, #120	; 0x78
 8007658:	2194      	movs	r1, #148	; 0x94
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f002 f9de 	bl	8009a1c <VL53L0X_WrByte>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007668:	4313      	orrs	r3, r2
 800766a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fdca 	bl	8007208 <VL53L0X_device_read_strobe>
 8007674:	4603      	mov	r3, r0
 8007676:	461a      	mov	r2, r3
 8007678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800767c:	4313      	orrs	r3, r2
 800767e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007686:	461a      	mov	r2, r3
 8007688:	2190      	movs	r1, #144	; 0x90
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f002 fa8e 	bl	8009bac <VL53L0X_RdDWord>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007698:	4313      	orrs	r3, r2
 800769a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	0f5b      	lsrs	r3, r3, #29
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80076aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076ae:	4413      	add	r3, r2
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	0d9b      	lsrs	r3, r3, #22
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	0bdb      	lsrs	r3, r3, #15
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	019b      	lsls	r3, r3, #6
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80076fe:	2279      	movs	r2, #121	; 0x79
 8007700:	2194      	movs	r1, #148	; 0x94
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f002 f98a 	bl	8009a1c <VL53L0X_WrByte>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007710:	4313      	orrs	r3, r2
 8007712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff fd76 	bl	8007208 <VL53L0X_device_read_strobe>
 800771c:	4603      	mov	r3, r0
 800771e:	461a      	mov	r2, r3
 8007720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007724:	4313      	orrs	r3, r2
 8007726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800772a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800772e:	461a      	mov	r2, r3
 8007730:	2190      	movs	r1, #144	; 0x90
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f002 fa3a 	bl	8009bac <VL53L0X_RdDWord>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007740:	4313      	orrs	r3, r2
 8007742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	0e9b      	lsrs	r3, r3, #26
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007752:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007756:	4413      	add	r3, r2
 8007758:	b2db      	uxtb	r3, r3
 800775a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	0cdb      	lsrs	r3, r3, #19
 8007760:	b2db      	uxtb	r3, r3
 8007762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007766:	b2db      	uxtb	r3, r3
 8007768:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	0b1b      	lsrs	r3, r3, #12
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007774:	b2db      	uxtb	r3, r3
 8007776:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007782:	b2db      	uxtb	r3, r3
 8007784:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	b2db      	uxtb	r3, r3
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007798:	227a      	movs	r2, #122	; 0x7a
 800779a:	2194      	movs	r1, #148	; 0x94
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f002 f93d 	bl	8009a1c <VL53L0X_WrByte>
 80077a2:	4603      	mov	r3, r0
 80077a4:	461a      	mov	r2, r3
 80077a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077aa:	4313      	orrs	r3, r2
 80077ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff fd29 	bl	8007208 <VL53L0X_device_read_strobe>
 80077b6:	4603      	mov	r3, r0
 80077b8:	461a      	mov	r2, r3
 80077ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077be:	4313      	orrs	r3, r2
 80077c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077c8:	461a      	mov	r2, r3
 80077ca:	2190      	movs	r1, #144	; 0x90
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f002 f9ed 	bl	8009bac <VL53L0X_RdDWord>
 80077d2:	4603      	mov	r3, r0
 80077d4:	461a      	mov	r2, r3
 80077d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077da:	4313      	orrs	r3, r2
 80077dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	0f9b      	lsrs	r3, r3, #30
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ea:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80077ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077f0:	4413      	add	r3, r2
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	0ddb      	lsrs	r3, r3, #23
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007800:	b2db      	uxtb	r3, r3
 8007802:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	0c1b      	lsrs	r3, r3, #16
 8007808:	b2db      	uxtb	r3, r3
 800780a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780e:	b2db      	uxtb	r3, r3
 8007810:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	0a5b      	lsrs	r3, r3, #9
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	089b      	lsrs	r3, r3, #2
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007832:	2300      	movs	r3, #0
 8007834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 80f1 	beq.w	8007a26 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007844:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007848:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 80ea 	bne.w	8007a26 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007852:	227b      	movs	r2, #123	; 0x7b
 8007854:	2194      	movs	r1, #148	; 0x94
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f002 f8e0 	bl	8009a1c <VL53L0X_WrByte>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007864:	4313      	orrs	r3, r2
 8007866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fccc 	bl	8007208 <VL53L0X_device_read_strobe>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007878:	4313      	orrs	r3, r2
 800787a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800787e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007882:	461a      	mov	r2, r3
 8007884:	2190      	movs	r1, #144	; 0x90
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f002 f990 	bl	8009bac <VL53L0X_RdDWord>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007894:	4313      	orrs	r3, r2
 8007896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800789a:	227c      	movs	r2, #124	; 0x7c
 800789c:	2194      	movs	r1, #148	; 0x94
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f002 f8bc 	bl	8009a1c <VL53L0X_WrByte>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff fca8 	bl	8007208 <VL53L0X_device_read_strobe>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80078c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ca:	461a      	mov	r2, r3
 80078cc:	2190      	movs	r1, #144	; 0x90
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f002 f96c 	bl	8009bac <VL53L0X_RdDWord>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078dc:	4313      	orrs	r3, r2
 80078de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80078e2:	2273      	movs	r2, #115	; 0x73
 80078e4:	2194      	movs	r1, #148	; 0x94
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f002 f898 	bl	8009a1c <VL53L0X_WrByte>
 80078ec:	4603      	mov	r3, r0
 80078ee:	461a      	mov	r2, r3
 80078f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fc84 	bl	8007208 <VL53L0X_device_read_strobe>
 8007900:	4603      	mov	r3, r0
 8007902:	461a      	mov	r2, r3
 8007904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007908:	4313      	orrs	r3, r2
 800790a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800790e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007912:	461a      	mov	r2, r3
 8007914:	2190      	movs	r1, #144	; 0x90
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f002 f948 	bl	8009bac <VL53L0X_RdDWord>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007924:	4313      	orrs	r3, r2
 8007926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800792e:	b29b      	uxth	r3, r3
 8007930:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007932:	2274      	movs	r2, #116	; 0x74
 8007934:	2194      	movs	r1, #148	; 0x94
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f002 f870 	bl	8009a1c <VL53L0X_WrByte>
 800793c:	4603      	mov	r3, r0
 800793e:	461a      	mov	r2, r3
 8007940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007944:	4313      	orrs	r3, r2
 8007946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff fc5c 	bl	8007208 <VL53L0X_device_read_strobe>
 8007950:	4603      	mov	r3, r0
 8007952:	461a      	mov	r2, r3
 8007954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007958:	4313      	orrs	r3, r2
 800795a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800795e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007962:	461a      	mov	r2, r3
 8007964:	2190      	movs	r1, #144	; 0x90
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f002 f920 	bl	8009bac <VL53L0X_RdDWord>
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007974:	4313      	orrs	r3, r2
 8007976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800797e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007980:	4313      	orrs	r3, r2
 8007982:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007984:	2275      	movs	r2, #117	; 0x75
 8007986:	2194      	movs	r1, #148	; 0x94
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f002 f847 	bl	8009a1c <VL53L0X_WrByte>
 800798e:	4603      	mov	r3, r0
 8007990:	461a      	mov	r2, r3
 8007992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007996:	4313      	orrs	r3, r2
 8007998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fc33 	bl	8007208 <VL53L0X_device_read_strobe>
 80079a2:	4603      	mov	r3, r0
 80079a4:	461a      	mov	r2, r3
 80079a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079b4:	461a      	mov	r2, r3
 80079b6:	2190      	movs	r1, #144	; 0x90
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f002 f8f7 	bl	8009bac <VL53L0X_RdDWord>
 80079be:	4603      	mov	r3, r0
 80079c0:	461a      	mov	r2, r3
 80079c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80079d4:	2276      	movs	r2, #118	; 0x76
 80079d6:	2194      	movs	r1, #148	; 0x94
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f002 f81f 	bl	8009a1c <VL53L0X_WrByte>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff fc0b 	bl	8007208 <VL53L0X_device_read_strobe>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a04:	461a      	mov	r2, r3
 8007a06:	2190      	movs	r1, #144	; 0x90
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f002 f8cf 	bl	8009bac <VL53L0X_RdDWord>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a22:	4313      	orrs	r3, r2
 8007a24:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007a26:	2200      	movs	r2, #0
 8007a28:	2181      	movs	r1, #129	; 0x81
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fff6 	bl	8009a1c <VL53L0X_WrByte>
 8007a30:	4603      	mov	r3, r0
 8007a32:	461a      	mov	r2, r3
 8007a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007a3e:	2206      	movs	r2, #6
 8007a40:	21ff      	movs	r1, #255	; 0xff
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 ffea 	bl	8009a1c <VL53L0X_WrByte>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a50:	4313      	orrs	r3, r2
 8007a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007a56:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	2183      	movs	r1, #131	; 0x83
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f002 f862 	bl	8009b28 <VL53L0X_RdByte>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007a72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a76:	f023 0304 	bic.w	r3, r3, #4
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	2183      	movs	r1, #131	; 0x83
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 ffcb 	bl	8009a1c <VL53L0X_WrByte>
 8007a86:	4603      	mov	r3, r0
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a94:	2201      	movs	r2, #1
 8007a96:	21ff      	movs	r1, #255	; 0xff
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 ffbf 	bl	8009a1c <VL53L0X_WrByte>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007aac:	2201      	movs	r2, #1
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 ffb3 	bl	8009a1c <VL53L0X_WrByte>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	21ff      	movs	r1, #255	; 0xff
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 ffa7 	bl	8009a1c <VL53L0X_WrByte>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007adc:	2200      	movs	r2, #0
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 ff9b 	bl	8009a1c <VL53L0X_WrByte>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007af4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f040 808f 	bne.w	8007c1c <VL53L0X_get_info_from_device+0x98e>
 8007afe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b02:	2b07      	cmp	r3, #7
 8007b04:	f000 808a 	beq.w	8007c1c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d024      	beq.n	8007b5c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007b12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b16:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d11e      	bne.n	8007b5c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007b24:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007b2e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b32:	2300      	movs	r3, #0
 8007b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b36:	e00e      	b.n	8007b56 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007b38:	f107 0208 	add.w	r2, r7, #8
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3e:	4413      	add	r3, r2
 8007b40:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007b4c:	460a      	mov	r2, r1
 8007b4e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b52:	3301      	adds	r3, #1
 8007b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	dded      	ble.n	8007b38 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d018      	beq.n	8007b98 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007b66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b6a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d112      	bne.n	8007b98 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b72:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b7c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	33f3      	adds	r3, #243	; 0xf3
 8007b8a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007b8c:	f107 0310 	add.w	r3, r7, #16
 8007b90:	4619      	mov	r1, r3
 8007b92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b94:	f008 fa4d 	bl	8010032 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d030      	beq.n	8007c04 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ba6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d12a      	bne.n	8007c04 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc0:	025b      	lsls	r3, r3, #9
 8007bc2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d011      	beq.n	8007bfc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007be6:	fb02 f303 	mul.w	r3, r2, r3
 8007bea:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007bec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007bf0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007bfc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007c04:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007c12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c1c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3760      	adds	r7, #96	; 0x60
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007c28:	b490      	push	{r4, r7}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007c34:	f240 6377 	movw	r3, #1655	; 0x677
 8007c38:	f04f 0400 	mov.w	r4, #0
 8007c3c:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8007c40:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007c44:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	fb02 f303 	mul.w	r3, r2, r3
 8007c54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007c56:	68bb      	ldr	r3, [r7, #8]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc90      	pop	{r4, r7}
 8007c60:	4770      	bx	lr

08007c62 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b087      	sub	sp, #28
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c82:	e005      	b.n	8007c90 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007c8a:	89fb      	ldrh	r3, [r7, #14]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f4      	bne.n	8007c84 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007c9a:	89fb      	ldrh	r3, [r7, #14]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007ca8:	4413      	add	r3, r2
 8007caa:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007cac:	8afb      	ldrh	r3, [r7, #22]

}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b085      	sub	sp, #20
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	0a12      	lsrs	r2, r2, #8
 8007cd0:	b292      	uxth	r2, r2
 8007cd2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff ff92 	bl	8007c28 <VL53L0X_calc_macro_period_ps>
 8007d04:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d0c:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <VL53L0X_calc_timeout_mclks+0x50>)
 8007d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d12:	099b      	lsrs	r3, r3, #6
 8007d14:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d1c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	441a      	add	r2, r3
	timeout_period_mclks =
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3720      	adds	r7, #32
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	10624dd3 	.word	0x10624dd3

08007d3c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	807b      	strh	r3, [r7, #2]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d50:	787b      	ldrb	r3, [r7, #1]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ff67 	bl	8007c28 <VL53L0X_calc_macro_period_ps>
 8007d5a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d62:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <VL53L0X_calc_timeout_us+0x50>)
 8007d64:	fba2 2303 	umull	r2, r3, r2, r3
 8007d68:	099b      	lsrs	r3, r3, #6
 8007d6a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007d6c:	887b      	ldrh	r3, [r7, #2]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
 8007d74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007d78:	4a04      	ldr	r2, [pc, #16]	; (8007d8c <VL53L0X_calc_timeout_us+0x50>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	099b      	lsrs	r3, r3, #6
 8007d80:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007d82:	697b      	ldr	r3, [r7, #20]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	10624dd3 	.word	0x10624dd3

08007d90 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	; 0x30
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <get_sequence_step_timeout+0x38>
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d002      	beq.n	8007dc8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007dc2:	7afb      	ldrb	r3, [r7, #11]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d128      	bne.n	8007e1a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007dc8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2100      	movs	r1, #0
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7fd faab 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007ddc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007de4:	f107 0320 	add.w	r3, r7, #32
 8007de8:	461a      	mov	r2, r3
 8007dea:	2146      	movs	r1, #70	; 0x46
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f001 fe9b 	bl	8009b28 <VL53L0X_RdByte>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff ff5b 	bl	8007cba <VL53L0X_decode_timeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e08:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff ff93 	bl	8007d3c <VL53L0X_calc_timeout_us>
 8007e16:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e18:	e092      	b.n	8007f40 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d135      	bne.n	8007e8c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e20:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e24:	461a      	mov	r2, r3
 8007e26:	2100      	movs	r1, #0
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7fd fa7f 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007e34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f040 8081 	bne.w	8007f40 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e3e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e42:	461a      	mov	r2, r3
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7fd fa70 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007e52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d109      	bne.n	8007e6e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007e5a:	f107 031e 	add.w	r3, r7, #30
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2151      	movs	r1, #81	; 0x51
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f001 fe81 	bl	8009b6a <VL53L0X_RdWord>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e6e:	8bfb      	ldrh	r3, [r7, #30]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff ff22 	bl	8007cba <VL53L0X_decode_timeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e7a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e80:	4619      	mov	r1, r3
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff ff5a 	bl	8007d3c <VL53L0X_calc_timeout_us>
 8007e88:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e8a:	e059      	b.n	8007f40 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d156      	bne.n	8007f40 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e92:	f107 0314 	add.w	r3, r7, #20
 8007e96:	4619      	mov	r1, r3
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7fd fb51 	bl	8005540 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d01d      	beq.n	8007ee4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ea8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007eac:	461a      	mov	r2, r3
 8007eae:	2100      	movs	r1, #0
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7fd fa3b 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10f      	bne.n	8007ee4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007ec4:	f107 031e 	add.w	r3, r7, #30
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2151      	movs	r1, #81	; 0x51
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 fe4c 	bl	8009b6a <VL53L0X_RdWord>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007ed8:	8bfb      	ldrh	r3, [r7, #30]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff feed 	bl	8007cba <VL53L0X_decode_timeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ee4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007eec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7fd fa19 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10f      	bne.n	8007f28 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007f08:	f107 031c 	add.w	r3, r7, #28
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2171      	movs	r1, #113	; 0x71
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f001 fe2a 	bl	8009b6a <VL53L0X_RdWord>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007f1c:	8bbb      	ldrh	r3, [r7, #28]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fecb 	bl	8007cba <VL53L0X_decode_timeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007f28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007f30:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f36:	4619      	mov	r1, r3
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff feff 	bl	8007d3c <VL53L0X_calc_timeout_us>
 8007f3e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f44:	601a      	str	r2, [r3, #0]

	return Status;
 8007f46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3730      	adds	r7, #48	; 0x30
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b08a      	sub	sp, #40	; 0x28
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <set_sequence_step_timeout+0x26>
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d002      	beq.n	8007f78 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d138      	bne.n	8007fea <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f78:	f107 031b 	add.w	r3, r7, #27
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	2100      	movs	r1, #0
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7fd f9d3 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d11a      	bne.n	8007fca <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007f94:	7efb      	ldrb	r3, [r7, #27]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f7ff fea4 	bl	8007ce8 <VL53L0X_calc_timeout_mclks>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007fa4:	8bbb      	ldrh	r3, [r7, #28]
 8007fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007faa:	d903      	bls.n	8007fb4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007fac:	23ff      	movs	r3, #255	; 0xff
 8007fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fb2:	e004      	b.n	8007fbe <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007fb4:	8bbb      	ldrh	r3, [r7, #28]
 8007fb6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007fca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f040 80ab 	bne.w	800812a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fd8:	461a      	mov	r2, r3
 8007fda:	2146      	movs	r1, #70	; 0x46
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 fd1d 	bl	8009a1c <VL53L0X_WrByte>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007fe8:	e09f      	b.n	800812a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d135      	bne.n	800805c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d11b      	bne.n	8008030 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ff8:	f107 031b 	add.w	r3, r7, #27
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	2100      	movs	r1, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7fd f993 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800800c:	7efb      	ldrb	r3, [r7, #27]
 800800e:	461a      	mov	r2, r3
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff fe68 	bl	8007ce8 <VL53L0X_calc_timeout_mclks>
 8008018:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800801a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800801c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fe1f 	bl	8007c62 <VL53L0X_encode_timeout>
 8008024:	4603      	mov	r3, r0
 8008026:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008028:	8b3a      	ldrh	r2, [r7, #24]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008030:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008034:	2b00      	cmp	r3, #0
 8008036:	d108      	bne.n	800804a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008038:	8b3b      	ldrh	r3, [r7, #24]
 800803a:	461a      	mov	r2, r3
 800803c:	2151      	movs	r1, #81	; 0x51
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 fd0e 	bl	8009a60 <VL53L0X_WrWord>
 8008044:	4603      	mov	r3, r0
 8008046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800804a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800804e:	2b00      	cmp	r3, #0
 8008050:	d16b      	bne.n	800812a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800805a:	e066      	b.n	800812a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	2b04      	cmp	r3, #4
 8008060:	d160      	bne.n	8008124 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008062:	f107 0310 	add.w	r3, r7, #16
 8008066:	4619      	mov	r1, r3
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7fd fa69 	bl	8005540 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008072:	7cfb      	ldrb	r3, [r7, #19]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01d      	beq.n	80080b4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008078:	f107 031b 	add.w	r3, r7, #27
 800807c:	461a      	mov	r2, r3
 800807e:	2100      	movs	r1, #0
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7fd f953 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800808c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10f      	bne.n	80080b4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008094:	f107 0318 	add.w	r3, r7, #24
 8008098:	461a      	mov	r2, r3
 800809a:	2151      	movs	r1, #81	; 0x51
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f001 fd64 	bl	8009b6a <VL53L0X_RdWord>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80080a8:	8b3b      	ldrh	r3, [r7, #24]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fe05 	bl	8007cba <VL53L0X_decode_timeout>
 80080b0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80080b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80080b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d109      	bne.n	80080d0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80080bc:	f107 031b 	add.w	r3, r7, #27
 80080c0:	461a      	mov	r2, r3
 80080c2:	2101      	movs	r1, #1
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7fd f931 	bl	800532c <VL53L0X_GetVcselPulsePeriod>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80080d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d128      	bne.n	800812a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80080d8:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80080da:	461a      	mov	r2, r3
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff fe02 	bl	8007ce8 <VL53L0X_calc_timeout_mclks>
 80080e4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80080e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080e8:	6a3a      	ldr	r2, [r7, #32]
 80080ea:	4413      	add	r3, r2
 80080ec:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80080ee:	6a38      	ldr	r0, [r7, #32]
 80080f0:	f7ff fdb7 	bl	8007c62 <VL53L0X_encode_timeout>
 80080f4:	4603      	mov	r3, r0
 80080f6:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80080f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d108      	bne.n	8008112 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008100:	8bfb      	ldrh	r3, [r7, #30]
 8008102:	461a      	mov	r2, r3
 8008104:	2171      	movs	r1, #113	; 0x71
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f001 fcaa 	bl	8009a60 <VL53L0X_WrWord>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008116:	2b00      	cmp	r3, #0
 8008118:	d107      	bne.n	800812a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008122:	e002      	b.n	800812a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008124:	23fc      	movs	r3, #252	; 0xfc
 8008126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800812a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800812e:	4618      	mov	r0, r3
 8008130:	3728      	adds	r7, #40	; 0x28
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b08a      	sub	sp, #40	; 0x28
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
 8008142:	4613      	mov	r3, r2
 8008144:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800814c:	230c      	movs	r3, #12
 800814e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8008152:	2312      	movs	r3, #18
 8008154:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008158:	2308      	movs	r3, #8
 800815a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800815e:	230e      	movs	r3, #14
 8008160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008168:	78bb      	ldrb	r3, [r7, #2]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008174:	23fc      	movs	r3, #252	; 0xfc
 8008176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800817a:	e020      	b.n	80081be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10d      	bne.n	800819e <VL53L0X_set_vcsel_pulse_period+0x68>
 8008182:	78ba      	ldrb	r2, [r7, #2]
 8008184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008188:	429a      	cmp	r2, r3
 800818a:	d304      	bcc.n	8008196 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800818c:	78ba      	ldrb	r2, [r7, #2]
 800818e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008192:	429a      	cmp	r2, r3
 8008194:	d903      	bls.n	800819e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008196:	23fc      	movs	r3, #252	; 0xfc
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800819c:	e00f      	b.n	80081be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d10c      	bne.n	80081be <VL53L0X_set_vcsel_pulse_period+0x88>
 80081a4:	78ba      	ldrb	r2, [r7, #2]
 80081a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d304      	bcc.n	80081b8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80081ae:	78ba      	ldrb	r2, [r7, #2]
 80081b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d902      	bls.n	80081be <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081b8:	23fc      	movs	r3, #252	; 0xfc
 80081ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80081be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80081c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081ca:	e237      	b.n	800863c <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d150      	bne.n	8008274 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80081d2:	78bb      	ldrb	r3, [r7, #2]
 80081d4:	2b0c      	cmp	r3, #12
 80081d6:	d110      	bne.n	80081fa <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80081d8:	2218      	movs	r2, #24
 80081da:	2157      	movs	r1, #87	; 0x57
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fc1d 	bl	8009a1c <VL53L0X_WrByte>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80081e8:	2208      	movs	r2, #8
 80081ea:	2156      	movs	r1, #86	; 0x56
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 fc15 	bl	8009a1c <VL53L0X_WrByte>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081f8:	e17f      	b.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80081fa:	78bb      	ldrb	r3, [r7, #2]
 80081fc:	2b0e      	cmp	r3, #14
 80081fe:	d110      	bne.n	8008222 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8008200:	2230      	movs	r2, #48	; 0x30
 8008202:	2157      	movs	r1, #87	; 0x57
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 fc09 	bl	8009a1c <VL53L0X_WrByte>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8008210:	2208      	movs	r2, #8
 8008212:	2156      	movs	r1, #86	; 0x56
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fc01 	bl	8009a1c <VL53L0X_WrByte>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008220:	e16b      	b.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8008222:	78bb      	ldrb	r3, [r7, #2]
 8008224:	2b10      	cmp	r3, #16
 8008226:	d110      	bne.n	800824a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8008228:	2240      	movs	r2, #64	; 0x40
 800822a:	2157      	movs	r1, #87	; 0x57
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 fbf5 	bl	8009a1c <VL53L0X_WrByte>
 8008232:	4603      	mov	r3, r0
 8008234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8008238:	2208      	movs	r2, #8
 800823a:	2156      	movs	r1, #86	; 0x56
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 fbed 	bl	8009a1c <VL53L0X_WrByte>
 8008242:	4603      	mov	r3, r0
 8008244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008248:	e157      	b.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800824a:	78bb      	ldrb	r3, [r7, #2]
 800824c:	2b12      	cmp	r3, #18
 800824e:	f040 8154 	bne.w	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008252:	2250      	movs	r2, #80	; 0x50
 8008254:	2157      	movs	r1, #87	; 0x57
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fbe0 	bl	8009a1c <VL53L0X_WrByte>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8008262:	2208      	movs	r2, #8
 8008264:	2156      	movs	r1, #86	; 0x56
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fbd8 	bl	8009a1c <VL53L0X_WrByte>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008272:	e142      	b.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	2b01      	cmp	r3, #1
 8008278:	f040 813f 	bne.w	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800827c:	78bb      	ldrb	r3, [r7, #2]
 800827e:	2b08      	cmp	r3, #8
 8008280:	d14c      	bne.n	800831c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8008282:	2210      	movs	r2, #16
 8008284:	2148      	movs	r1, #72	; 0x48
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fbc8 	bl	8009a1c <VL53L0X_WrByte>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8008292:	2208      	movs	r2, #8
 8008294:	2147      	movs	r1, #71	; 0x47
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fbc0 	bl	8009a1c <VL53L0X_WrByte>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80082a2:	2202      	movs	r2, #2
 80082a4:	2132      	movs	r1, #50	; 0x32
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 fbb8 	bl	8009a1c <VL53L0X_WrByte>
 80082ac:	4603      	mov	r3, r0
 80082ae:	461a      	mov	r2, r3
 80082b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082b4:	4313      	orrs	r3, r2
 80082b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80082ba:	220c      	movs	r2, #12
 80082bc:	2130      	movs	r1, #48	; 0x30
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fbac 	bl	8009a1c <VL53L0X_WrByte>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80082d2:	2201      	movs	r2, #1
 80082d4:	21ff      	movs	r1, #255	; 0xff
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fba0 	bl	8009a1c <VL53L0X_WrByte>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80082ea:	2230      	movs	r2, #48	; 0x30
 80082ec:	2130      	movs	r1, #48	; 0x30
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fb94 	bl	8009a1c <VL53L0X_WrByte>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008302:	2200      	movs	r2, #0
 8008304:	21ff      	movs	r1, #255	; 0xff
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fb88 	bl	8009a1c <VL53L0X_WrByte>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008314:	4313      	orrs	r3, r2
 8008316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800831a:	e0ee      	b.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800831c:	78bb      	ldrb	r3, [r7, #2]
 800831e:	2b0a      	cmp	r3, #10
 8008320:	d14c      	bne.n	80083bc <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8008322:	2228      	movs	r2, #40	; 0x28
 8008324:	2148      	movs	r1, #72	; 0x48
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 fb78 	bl	8009a1c <VL53L0X_WrByte>
 800832c:	4603      	mov	r3, r0
 800832e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8008332:	2208      	movs	r2, #8
 8008334:	2147      	movs	r1, #71	; 0x47
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fb70 	bl	8009a1c <VL53L0X_WrByte>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008342:	2203      	movs	r2, #3
 8008344:	2132      	movs	r1, #50	; 0x32
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fb68 	bl	8009a1c <VL53L0X_WrByte>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008354:	4313      	orrs	r3, r2
 8008356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800835a:	2209      	movs	r2, #9
 800835c:	2130      	movs	r1, #48	; 0x30
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fb5c 	bl	8009a1c <VL53L0X_WrByte>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800836c:	4313      	orrs	r3, r2
 800836e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008372:	2201      	movs	r2, #1
 8008374:	21ff      	movs	r1, #255	; 0xff
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fb50 	bl	8009a1c <VL53L0X_WrByte>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008384:	4313      	orrs	r3, r2
 8008386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800838a:	2220      	movs	r2, #32
 800838c:	2130      	movs	r1, #48	; 0x30
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fb44 	bl	8009a1c <VL53L0X_WrByte>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800839c:	4313      	orrs	r3, r2
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80083a2:	2200      	movs	r2, #0
 80083a4:	21ff      	movs	r1, #255	; 0xff
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fb38 	bl	8009a1c <VL53L0X_WrByte>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083ba:	e09e      	b.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80083bc:	78bb      	ldrb	r3, [r7, #2]
 80083be:	2b0c      	cmp	r3, #12
 80083c0:	d14c      	bne.n	800845c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80083c2:	2238      	movs	r2, #56	; 0x38
 80083c4:	2148      	movs	r1, #72	; 0x48
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fb28 	bl	8009a1c <VL53L0X_WrByte>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80083d2:	2208      	movs	r2, #8
 80083d4:	2147      	movs	r1, #71	; 0x47
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fb20 	bl	8009a1c <VL53L0X_WrByte>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80083e2:	2203      	movs	r2, #3
 80083e4:	2132      	movs	r1, #50	; 0x32
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fb18 	bl	8009a1c <VL53L0X_WrByte>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f4:	4313      	orrs	r3, r2
 80083f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80083fa:	2208      	movs	r2, #8
 80083fc:	2130      	movs	r1, #48	; 0x30
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fb0c 	bl	8009a1c <VL53L0X_WrByte>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800840c:	4313      	orrs	r3, r2
 800840e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008412:	2201      	movs	r2, #1
 8008414:	21ff      	movs	r1, #255	; 0xff
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fb00 	bl	8009a1c <VL53L0X_WrByte>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008424:	4313      	orrs	r3, r2
 8008426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800842a:	2220      	movs	r2, #32
 800842c:	2130      	movs	r1, #48	; 0x30
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 faf4 	bl	8009a1c <VL53L0X_WrByte>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800843c:	4313      	orrs	r3, r2
 800843e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008442:	2200      	movs	r2, #0
 8008444:	21ff      	movs	r1, #255	; 0xff
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 fae8 	bl	8009a1c <VL53L0X_WrByte>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008454:	4313      	orrs	r3, r2
 8008456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800845a:	e04e      	b.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800845c:	78bb      	ldrb	r3, [r7, #2]
 800845e:	2b0e      	cmp	r3, #14
 8008460:	d14b      	bne.n	80084fa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008462:	2248      	movs	r2, #72	; 0x48
 8008464:	2148      	movs	r1, #72	; 0x48
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fad8 	bl	8009a1c <VL53L0X_WrByte>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8008472:	2208      	movs	r2, #8
 8008474:	2147      	movs	r1, #71	; 0x47
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fad0 	bl	8009a1c <VL53L0X_WrByte>
 800847c:	4603      	mov	r3, r0
 800847e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008482:	2203      	movs	r2, #3
 8008484:	2132      	movs	r1, #50	; 0x32
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fac8 	bl	8009a1c <VL53L0X_WrByte>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008494:	4313      	orrs	r3, r2
 8008496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800849a:	2207      	movs	r2, #7
 800849c:	2130      	movs	r1, #48	; 0x30
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 fabc 	bl	8009a1c <VL53L0X_WrByte>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ac:	4313      	orrs	r3, r2
 80084ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80084b2:	2201      	movs	r2, #1
 80084b4:	21ff      	movs	r1, #255	; 0xff
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fab0 	bl	8009a1c <VL53L0X_WrByte>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80084ca:	2220      	movs	r2, #32
 80084cc:	2130      	movs	r1, #48	; 0x30
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 faa4 	bl	8009a1c <VL53L0X_WrByte>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084dc:	4313      	orrs	r3, r2
 80084de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084e2:	2200      	movs	r2, #0
 80084e4:	21ff      	movs	r1, #255	; 0xff
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 fa98 	bl	8009a1c <VL53L0X_WrByte>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80084fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d17e      	bne.n	8008600 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8008502:	78bb      	ldrb	r3, [r7, #2]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fe38 	bl	800717a <VL53L0X_encode_vcsel_period>
 800850a:	4603      	mov	r3, r0
 800850c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8008516:	2b01      	cmp	r3, #1
 8008518:	d045      	beq.n	80085a6 <VL53L0X_set_vcsel_pulse_period+0x470>
 800851a:	e06e      	b.n	80085fa <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800851c:	f107 0314 	add.w	r3, r7, #20
 8008520:	461a      	mov	r2, r3
 8008522:	2103      	movs	r1, #3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff fc33 	bl	8007d90 <get_sequence_step_timeout>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008530:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	461a      	mov	r2, r3
 800853e:	2102      	movs	r1, #2
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff fc25 	bl	8007d90 <get_sequence_step_timeout>
 8008546:	4603      	mov	r3, r0
 8008548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800854c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008550:	2b00      	cmp	r3, #0
 8008552:	d109      	bne.n	8008568 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008554:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008558:	461a      	mov	r2, r3
 800855a:	2150      	movs	r1, #80	; 0x50
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 fa5d 	bl	8009a1c <VL53L0X_WrByte>
 8008562:	4603      	mov	r3, r0
 8008564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800856c:	2b00      	cmp	r3, #0
 800856e:	d108      	bne.n	8008582 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	461a      	mov	r2, r3
 8008574:	2103      	movs	r1, #3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff fceb 	bl	8007f52 <set_sequence_step_timeout>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008582:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008586:	2b00      	cmp	r3, #0
 8008588:	d108      	bne.n	800859c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	461a      	mov	r2, r3
 800858e:	2102      	movs	r1, #2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff fcde 	bl	8007f52 <set_sequence_step_timeout>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	78ba      	ldrb	r2, [r7, #2]
 80085a0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80085a4:	e02c      	b.n	8008600 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80085a6:	f107 0318 	add.w	r3, r7, #24
 80085aa:	461a      	mov	r2, r3
 80085ac:	2104      	movs	r1, #4
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff fbee 	bl	8007d90 <get_sequence_step_timeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80085ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80085c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80085c6:	461a      	mov	r2, r3
 80085c8:	2170      	movs	r1, #112	; 0x70
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 fa26 	bl	8009a1c <VL53L0X_WrByte>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80085d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d108      	bne.n	80085f0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	461a      	mov	r2, r3
 80085e2:	2104      	movs	r1, #4
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff fcb4 	bl	8007f52 <set_sequence_step_timeout>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	78ba      	ldrb	r2, [r7, #2]
 80085f4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80085f8:	e002      	b.n	8008600 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085fa:	23fc      	movs	r3, #252	; 0xfc
 80085fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008600:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800860e:	69f9      	ldr	r1, [r7, #28]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7fc fe4d 	bl	80052b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008616:	4603      	mov	r3, r0
 8008618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800861c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008620:	2b00      	cmp	r3, #0
 8008622:	d109      	bne.n	8008638 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8008624:	f107 010f 	add.w	r1, r7, #15
 8008628:	2301      	movs	r3, #1
 800862a:	2200      	movs	r2, #0
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fe fcbf 	bl	8006fb0 <VL53L0X_perform_phase_calibration>
 8008632:	4603      	mov	r3, r0
 8008634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8008638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800863c:	4618      	mov	r0, r3
 800863e:	3728      	adds	r7, #40	; 0x28
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	460b      	mov	r3, r1
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800865c:	2b01      	cmp	r3, #1
 800865e:	d00a      	beq.n	8008676 <VL53L0X_get_vcsel_pulse_period+0x32>
 8008660:	e013      	b.n	800868a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008662:	f107 0316 	add.w	r3, r7, #22
 8008666:	461a      	mov	r2, r3
 8008668:	2150      	movs	r1, #80	; 0x50
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f001 fa5c 	bl	8009b28 <VL53L0X_RdByte>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008674:	e00b      	b.n	800868e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008676:	f107 0316 	add.w	r3, r7, #22
 800867a:	461a      	mov	r2, r3
 800867c:	2170      	movs	r1, #112	; 0x70
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f001 fa52 	bl	8009b28 <VL53L0X_RdByte>
 8008684:	4603      	mov	r3, r0
 8008686:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008688:	e001      	b.n	800868e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800868a:	23fc      	movs	r3, #252	; 0xfc
 800868c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800868e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008696:	7dbb      	ldrb	r3, [r7, #22]
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fd5b 	bl	8007154 <VL53L0X_decode_vcsel_period>
 800869e:	4603      	mov	r3, r0
 80086a0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	701a      	strb	r2, [r3, #0]

	return Status;
 80086a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b092      	sub	sp, #72	; 0x48
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086bc:	2300      	movs	r3, #0
 80086be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80086c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80086c6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80086c8:	f240 7376 	movw	r3, #1910	; 0x776
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80086ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80086d4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80086da:	f240 234e 	movw	r3, #590	; 0x24e
 80086de:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80086e0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80086e6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80086ec:	f240 2326 	movw	r3, #550	; 0x226
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80086f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80086fa:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	429a      	cmp	r2, r3
 8008706:	d205      	bcs.n	8008714 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008708:	23fc      	movs	r3, #252	; 0xfc
 800870a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800870e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008712:	e0aa      	b.n	800886a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fc ff0a 	bl	8005540 <VL53L0X_GetSequenceStepEnables>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008732:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008736:	2b00      	cmp	r3, #0
 8008738:	d15b      	bne.n	80087f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800873a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800873c:	2b00      	cmp	r3, #0
 800873e:	d105      	bne.n	800874c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008740:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008746:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008748:	2b00      	cmp	r3, #0
 800874a:	d052      	beq.n	80087f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800874c:	f107 0310 	add.w	r3, r7, #16
 8008750:	461a      	mov	r2, r3
 8008752:	2102      	movs	r1, #2
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff fb1b 	bl	8007d90 <get_sequence_step_timeout>
 800875a:	4603      	mov	r3, r0
 800875c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008760:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008768:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800876c:	e07d      	b.n	800886a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800876e:	7d3b      	ldrb	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00f      	beq.n	8008794 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008774:	693a      	ldr	r2, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	4413      	add	r3, r2
 800877a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008780:	429a      	cmp	r2, r3
 8008782:	d204      	bcs.n	800878e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	643b      	str	r3, [r7, #64]	; 0x40
 800878c:	e002      	b.n	8008794 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800878e:	23fc      	movs	r3, #252	; 0xfc
 8008790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008794:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800879c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087a0:	e063      	b.n	800886a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80087a2:	7dbb      	ldrb	r3, [r7, #22]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d011      	beq.n	80087cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	4413      	add	r3, r2
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d204      	bcs.n	80087c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80087ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	643b      	str	r3, [r7, #64]	; 0x40
 80087c2:	e016      	b.n	80087f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087c4:	23fc      	movs	r3, #252	; 0xfc
 80087c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80087ca:	e012      	b.n	80087f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80087cc:	7d7b      	ldrb	r3, [r7, #21]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00f      	beq.n	80087f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d6:	4413      	add	r3, r2
 80087d8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087de:	429a      	cmp	r2, r3
 80087e0:	d204      	bcs.n	80087ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80087e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	643b      	str	r3, [r7, #64]	; 0x40
 80087ea:	e002      	b.n	80087f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087ec:	23fc      	movs	r3, #252	; 0xfc
 80087ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80087f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80087fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087fe:	e034      	b.n	800886a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d019      	beq.n	800883a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	461a      	mov	r2, r3
 800880c:	2103      	movs	r1, #3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff fabe 	bl	8007d90 <get_sequence_step_timeout>
 8008814:	4603      	mov	r3, r0
 8008816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	4413      	add	r3, r2
 8008820:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008826:	429a      	cmp	r2, r3
 8008828:	d204      	bcs.n	8008834 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800882a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	643b      	str	r3, [r7, #64]	; 0x40
 8008832:	e002      	b.n	800883a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008834:	23fc      	movs	r3, #252	; 0xfc
 8008836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800883a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800883e:	2b00      	cmp	r3, #0
 8008840:	d111      	bne.n	8008866 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008842:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00e      	beq.n	8008866 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008852:	2104      	movs	r1, #4
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff fb7c 	bl	8007f52 <set_sequence_step_timeout>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008866:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800886a:	4618      	mov	r0, r3
 800886c:	3748      	adds	r7, #72	; 0x48
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b090      	sub	sp, #64	; 0x40
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800887c:	2300      	movs	r3, #0
 800887e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008882:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008886:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008888:	f240 7376 	movw	r3, #1910	; 0x776
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800888e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008894:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008898:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800889a:	f240 234e 	movw	r3, #590	; 0x24e
 800889e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80088a0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80088a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80088ac:	f240 2326 	movw	r3, #550	; 0x226
 80088b0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80088b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	441a      	add	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80088c0:	f107 0318 	add.w	r3, r7, #24
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fc fe3a 	bl	8005540 <VL53L0X_GetSequenceStepEnables>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80088d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80088da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088de:	e075      	b.n	80089cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80088e0:	7e3b      	ldrb	r3, [r7, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d105      	bne.n	80088f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80088e6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80088ec:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d030      	beq.n	8008954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80088f2:	f107 0310 	add.w	r3, r7, #16
 80088f6:	461a      	mov	r2, r3
 80088f8:	2102      	movs	r1, #2
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff fa48 	bl	8007d90 <get_sequence_step_timeout>
 8008900:	4603      	mov	r3, r0
 8008902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008906:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800890a:	2b00      	cmp	r3, #0
 800890c:	d122      	bne.n	8008954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800890e:	7e3b      	ldrb	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d007      	beq.n	8008924 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008918:	6939      	ldr	r1, [r7, #16]
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800891e:	441a      	add	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008924:	7ebb      	ldrb	r3, [r7, #26]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800892e:	6939      	ldr	r1, [r7, #16]
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	440b      	add	r3, r1
 8008934:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008936:	441a      	add	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e00a      	b.n	8008954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800893e:	7e7b      	ldrb	r3, [r7, #25]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d007      	beq.n	8008954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008948:	6939      	ldr	r1, [r7, #16]
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800894e:	441a      	add	r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008954:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008958:	2b00      	cmp	r3, #0
 800895a:	d114      	bne.n	8008986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800895c:	7efb      	ldrb	r3, [r7, #27]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d011      	beq.n	8008986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008962:	f107 030c 	add.w	r3, r7, #12
 8008966:	461a      	mov	r2, r3
 8008968:	2103      	movs	r1, #3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff fa10 	bl	8007d90 <get_sequence_step_timeout>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008980:	441a      	add	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008986:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800898a:	2b00      	cmp	r3, #0
 800898c:	d114      	bne.n	80089b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800898e:	7f3b      	ldrb	r3, [r7, #28]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d011      	beq.n	80089b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008994:	f107 0314 	add.w	r3, r7, #20
 8008998:	461a      	mov	r2, r3
 800899a:	2104      	movs	r1, #4
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff f9f7 	bl	8007d90 <get_sequence_step_timeout>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80089ac:	6979      	ldr	r1, [r7, #20]
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80089b2:	441a      	add	r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3740      	adds	r7, #64	; 0x40
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089de:	2300      	movs	r3, #0
 80089e0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80089e6:	e0c6      	b.n	8008b76 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4413      	add	r3, r2
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	3301      	adds	r3, #1
 80089f6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80089f8:	7cfb      	ldrb	r3, [r7, #19]
 80089fa:	2bff      	cmp	r3, #255	; 0xff
 80089fc:	f040 808d 	bne.w	8008b1a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	4413      	add	r3, r2
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008a10:	7cbb      	ldrb	r3, [r7, #18]
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d87e      	bhi.n	8008b14 <VL53L0X_load_tuning_settings+0x140>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <VL53L0X_load_tuning_settings+0x48>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a67 	.word	0x08008a67
 8008a24:	08008aa1 	.word	0x08008aa1
 8008a28:	08008adb 	.word	0x08008adb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4413      	add	r3, r2
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	747b      	strb	r3, [r7, #17]
				Index++;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	4413      	add	r3, r2
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a4c:	7c7b      	ldrb	r3, [r7, #17]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	021b      	lsls	r3, r3, #8
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	7c3b      	ldrb	r3, [r7, #16]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4413      	add	r3, r2
 8008a5a:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	89fa      	ldrh	r2, [r7, #14]
 8008a60:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008a64:	e087      	b.n	8008b76 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	747b      	strb	r3, [r7, #17]
				Index++;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	3301      	adds	r3, #1
 8008a74:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3301      	adds	r3, #1
 8008a84:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a86:	7c7b      	ldrb	r3, [r7, #17]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	021b      	lsls	r3, r3, #8
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	7c3b      	ldrb	r3, [r7, #16]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	4413      	add	r3, r2
 8008a94:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	89fa      	ldrh	r2, [r7, #14]
 8008a9a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008a9e:	e06a      	b.n	8008b76 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	747b      	strb	r3, [r7, #17]
				Index++;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	3301      	adds	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	743b      	strb	r3, [r7, #16]
				Index++;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	3301      	adds	r3, #1
 8008abe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008ac0:	7c7b      	ldrb	r3, [r7, #17]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	021b      	lsls	r3, r3, #8
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	7c3b      	ldrb	r3, [r7, #16]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	89fa      	ldrh	r2, [r7, #14]
 8008ad4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008ad8:	e04d      	b.n	8008b76 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	4413      	add	r3, r2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	747b      	strb	r3, [r7, #17]
				Index++;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	4413      	add	r3, r2
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	743b      	strb	r3, [r7, #16]
				Index++;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	3301      	adds	r3, #1
 8008af8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008afa:	7c7b      	ldrb	r3, [r7, #17]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	7c3b      	ldrb	r3, [r7, #16]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	89fa      	ldrh	r2, [r7, #14]
 8008b0e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008b12:	e030      	b.n	8008b76 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b14:	23fc      	movs	r3, #252	; 0xfc
 8008b16:	77fb      	strb	r3, [r7, #31]
 8008b18:	e02d      	b.n	8008b76 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008b1a:	7cfb      	ldrb	r3, [r7, #19]
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d828      	bhi.n	8008b72 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	737b      	strb	r3, [r7, #13]
			Index++;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008b30:	2300      	movs	r3, #0
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	e00f      	b.n	8008b56 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	7819      	ldrb	r1, [r3, #0]
 8008b3e:	f107 0208 	add.w	r2, r7, #8
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	4413      	add	r3, r2
 8008b46:	460a      	mov	r2, r1
 8008b48:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	3301      	adds	r3, #1
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	7cfa      	ldrb	r2, [r7, #19]
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	dceb      	bgt.n	8008b36 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008b5e:	7cfb      	ldrb	r3, [r7, #19]
 8008b60:	f107 0208 	add.w	r2, r7, #8
 8008b64:	7b79      	ldrb	r1, [r7, #13]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 ff04 	bl	8009974 <VL53L0X_WriteMulti>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	77fb      	strb	r3, [r7, #31]
 8008b70:	e001      	b.n	8008b76 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b72:	23fc      	movs	r3, #252	; 0xfc
 8008b74:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <VL53L0X_load_tuning_settings+0x1b8>
 8008b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f43f af2e 	beq.w	80089e8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008bae:	f107 0313 	add.w	r3, r7, #19
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7fc fd4f 	bl	8005658 <VL53L0X_GetXTalkCompensationEnable>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008bbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d111      	bne.n	8008bea <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008bc6:	7cfb      	ldrb	r3, [r7, #19]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00e      	beq.n	8008bea <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	8a9b      	ldrh	r3, [r3, #20]
 8008bd6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	fb03 f302 	mul.w	r3, r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	3380      	adds	r3, #128	; 0x80
 8008be4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008bea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b086      	sub	sp, #24
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008c0e:	f107 0310 	add.w	r3, r7, #16
 8008c12:	461a      	mov	r2, r3
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff ffbe 	bl	8008b98 <VL53L0X_get_total_xtalk_rate>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	441a      	add	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]

	return Status;
 8008c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b09a      	sub	sp, #104	; 0x68
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008c4e:	2312      	movs	r3, #18
 8008c50:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c56:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008c58:	2342      	movs	r3, #66	; 0x42
 8008c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008c5c:	2306      	movs	r3, #6
 8008c5e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008c60:	2307      	movs	r3, #7
 8008c62:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008c70:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008c78:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	3380      	adds	r3, #128	; 0x80
 8008c88:	0a1b      	lsrs	r3, r3, #8
 8008c8a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
 8008c94:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01b      	beq.n	8008cd8 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	029b      	lsls	r3, r3, #10
 8008ca4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	085a      	lsrs	r2, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	4413      	add	r3, r2
 8008cae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008cb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008cba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008cd4:	0c1b      	lsrs	r3, r3, #16
 8008cd6:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008cdc:	fb02 f303 	mul.w	r3, r2, r3
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf0:	fb02 f303 	mul.w	r3, r2, r3
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cf8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d02:	085a      	lsrs	r2, r3, #1
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	441a      	add	r2, r3
 8008d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d14:	fb02 f303 	mul.w	r3, r2, r3
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d20:	d302      	bcc.n	8008d28 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8008d22:	4b55      	ldr	r3, [pc, #340]	; (8008e78 <VL53L0X_calc_dmax+0x238>)
 8008d24:	663b      	str	r3, [r7, #96]	; 0x60
 8008d26:	e016      	b.n	8008d56 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d2a:	085a      	lsrs	r2, r3, #1
 8008d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d2e:	441a      	add	r2, r3
 8008d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d36:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d3c:	fb02 f303 	mul.w	r3, r2, r3
 8008d40:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d48:	0c1b      	lsrs	r3, r3, #16
 8008d4a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d50:	fb02 f303 	mul.w	r3, r2, r3
 8008d54:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d58:	039b      	lsls	r3, r3, #14
 8008d5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008d5e:	4a47      	ldr	r2, [pc, #284]	; (8008e7c <VL53L0X_calc_dmax+0x23c>)
 8008d60:	fba2 2303 	umull	r2, r3, r2, r3
 8008d64:	099b      	lsrs	r3, r3, #6
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6c:	fb02 f303 	mul.w	r3, r2, r3
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	3308      	adds	r3, #8
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8e:	4613      	mov	r3, r2
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	4413      	add	r3, r2
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d9e:	0b9b      	lsrs	r3, r3, #14
 8008da0:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008da6:	4413      	add	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4413      	add	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbc:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	039b      	lsls	r3, r3, #14
 8008dc2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	085b      	lsrs	r3, r3, #1
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	4413      	add	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ddc:	fb02 f303 	mul.w	r3, r2, r3
 8008de0:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008de8:	4a24      	ldr	r2, [pc, #144]	; (8008e7c <VL53L0X_calc_dmax+0x23c>)
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	099b      	lsrs	r3, r3, #6
 8008df0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008dfe:	4a1f      	ldr	r2, [pc, #124]	; (8008e7c <VL53L0X_calc_dmax+0x23c>)
 8008e00:	fba2 2303 	umull	r2, r3, r2, r3
 8008e04:	099b      	lsrs	r3, r3, #6
 8008e06:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e0a:	3380      	adds	r3, #128	; 0x80
 8008e0c:	0a1b      	lsrs	r3, r3, #8
 8008e0e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d008      	beq.n	8008e28 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	085a      	lsrs	r2, r3, #1
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1c:	441a      	add	r2, r3
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e26:	e001      	b.n	8008e2c <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008e2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008e2e:	f7fe f9b7 	bl	80071a0 <VL53L0X_isqrt>
 8008e32:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d008      	beq.n	8008e4c <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	085a      	lsrs	r2, r3, #1
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	441a      	add	r2, r3
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e4a:	e001      	b.n	8008e50 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008e50:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008e52:	f7fe f9a5 	bl	80071a0 <VL53L0X_isqrt>
 8008e56:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d902      	bls.n	8008e6c <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8008e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e6a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008e6c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3768      	adds	r7, #104	; 0x68
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	fff00000 	.word	0xfff00000
 8008e7c:	10624dd3 	.word	0x10624dd3

08008e80 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b0b4      	sub	sp, #208	; 0xd0
 8008e84:	af04      	add	r7, sp, #16
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008e8e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008e96:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008e9e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008ea6:	f241 235c 	movw	r3, #4700	; 0x125c
 8008eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008eae:	4b9e      	ldr	r3, [pc, #632]	; (8009128 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008eb4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008eba:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008ec8:	4b98      	ldr	r3, [pc, #608]	; (800912c <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008eca:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008ed2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008ed8:	f240 6377 	movw	r3, #1655	; 0x677
 8008edc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ef2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008ef6:	0c1b      	lsrs	r3, r3, #16
 8008ef8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008f00:	f107 0310 	add.w	r3, r7, #16
 8008f04:	461a      	mov	r2, r3
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fe74 	bl	8008bf6 <VL53L0X_get_total_signal_rate>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008f14:	f107 0314 	add.w	r3, r7, #20
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff fe3b 	bl	8008b98 <VL53L0X_get_total_xtalk_rate>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f2e:	fb02 f303 	mul.w	r3, r2, r3
 8008f32:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f3a:	0c1b      	lsrs	r3, r3, #16
 8008f3c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f44:	fb02 f303 	mul.w	r3, r2, r3
 8008f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008f4c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d902      	bls.n	8008f5c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008f5c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d168      	bne.n	8009036 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008f74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7fe feb0 	bl	8007ce8 <VL53L0X_calc_timeout_mclks>
 8008f88:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008f9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008f9e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f7fe fe9d 	bl	8007ce8 <VL53L0X_calc_timeout_mclks>
 8008fae:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008fb6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008fba:	2b08      	cmp	r3, #8
 8008fbc:	d102      	bne.n	8008fc4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008fca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
 8008fd2:	02db      	lsls	r3, r3, #11
 8008fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fdc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fe0:	4a53      	ldr	r2, [pc, #332]	; (8009130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	099b      	lsrs	r3, r3, #6
 8008fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ff0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ff2:	fb02 f303 	mul.w	r3, r2, r3
 8008ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ffe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009002:	4a4b      	ldr	r2, [pc, #300]	; (8009130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009004:	fba2 2303 	umull	r2, r3, r2, r3
 8009008:	099b      	lsrs	r3, r3, #6
 800900a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3380      	adds	r3, #128	; 0x80
 8009012:	0a1b      	lsrs	r3, r3, #8
 8009014:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009028:	3380      	adds	r3, #128	; 0x80
 800902a:	0a1b      	lsrs	r3, r3, #8
 800902c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009036:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800903e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009042:	e165      	b.n	8009310 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8009044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10c      	bne.n	8009064 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009050:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009058:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	e153      	b.n	800930c <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800906c:	2301      	movs	r3, #1
 800906e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009076:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800907a:	041a      	lsls	r2, r3, #16
 800907c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800907e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800908a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800908c:	429a      	cmp	r2, r3
 800908e:	d902      	bls.n	8009096 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009096:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800909a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800909e:	fb02 f303 	mul.w	r3, r2, r3
 80090a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80090a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80090aa:	4613      	mov	r3, r2
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe f874 	bl	80071a0 <VL53L0X_isqrt>
 80090b8:	4603      	mov	r3, r0
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	891b      	ldrh	r3, [r3, #8]
 80090c2:	461a      	mov	r2, r3
 80090c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c6:	fb03 f302 	mul.w	r3, r3, r2
 80090ca:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ce:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80090d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090d4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090d6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80090d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090dc:	4a14      	ldr	r2, [pc, #80]	; (8009130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80090de:	fba2 2303 	umull	r2, r3, r2, r3
 80090e2:	099b      	lsrs	r3, r3, #6
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80090e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e8:	041b      	lsls	r3, r3, #16
 80090ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090ee:	4a10      	ldr	r2, [pc, #64]	; (8009130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80090f0:	fba2 2303 	umull	r2, r3, r2, r3
 80090f4:	099b      	lsrs	r3, r3, #6
 80090f6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80090f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80090fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	fbb2 f3f3 	udiv	r3, r2, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfb8      	it	lt
 800910a:	425b      	neglt	r3, r3
 800910c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009110:	021b      	lsls	r3, r3, #8
 8009112:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	7e1b      	ldrb	r3, [r3, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800911c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009124:	e035      	b.n	8009192 <VL53L0X_calc_sigma_estimate+0x312>
 8009126:	bf00      	nop
 8009128:	028f87ae 	.word	0x028f87ae
 800912c:	0006999a 	.word	0x0006999a
 8009130:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800913a:	fbb2 f3f3 	udiv	r3, r2, r3
 800913e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800915a:	4413      	add	r3, r2
 800915c:	0c1b      	lsrs	r3, r3, #16
 800915e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009166:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800916a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800916e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009172:	085b      	lsrs	r3, r3, #1
 8009174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800917c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009180:	fb02 f303 	mul.w	r3, r2, r3
 8009184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800918c:	0b9b      	lsrs	r3, r3, #14
 800918e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009198:	fb02 f303 	mul.w	r3, r2, r3
 800919c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ac:	fb02 f303 	mul.w	r3, r2, r3
 80091b0:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80091b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091be:	0c1b      	lsrs	r3, r3, #16
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091c6:	fb02 f303 	mul.w	r3, r2, r3
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80091cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	4413      	add	r3, r2
 80091d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80091d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d6:	f7fd ffe3 	bl	80071a0 <VL53L0X_isqrt>
 80091da:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	3332      	adds	r3, #50	; 0x32
 80091e6:	4a4c      	ldr	r2, [pc, #304]	; (8009318 <VL53L0X_calc_sigma_estimate+0x498>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	095a      	lsrs	r2, r3, #5
 80091ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80091f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091fc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009200:	fb02 f303 	mul.w	r3, r2, r3
 8009204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800920c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009210:	3308      	adds	r3, #8
 8009212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8009216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800921a:	4a40      	ldr	r2, [pc, #256]	; (800931c <VL53L0X_calc_sigma_estimate+0x49c>)
 800921c:	fba2 2303 	umull	r2, r3, r2, r3
 8009220:	0b5b      	lsrs	r3, r3, #13
 8009222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800922a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800922c:	429a      	cmp	r2, r3
 800922e:	d902      	bls.n	8009236 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8009236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800923a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800923e:	4413      	add	r3, r2
 8009240:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009244:	4a36      	ldr	r2, [pc, #216]	; (8009320 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8009246:	fba2 2303 	umull	r2, r3, r2, r3
 800924a:	099b      	lsrs	r3, r3, #6
 800924c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009256:	441a      	add	r2, r3
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800925e:	4618      	mov	r0, r3
 8009260:	f7fd ff9e 	bl	80071a0 <VL53L0X_isqrt>
 8009264:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009272:	4a2b      	ldr	r2, [pc, #172]	; (8009320 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8009274:	fba2 2303 	umull	r2, r3, r2, r3
 8009278:	099b      	lsrs	r3, r3, #6
 800927a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800927c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009280:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009284:	fb02 f303 	mul.w	r3, r2, r3
 8009288:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	4413      	add	r3, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd ff80 	bl	80071a0 <VL53L0X_isqrt>
 80092a0:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80092b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <VL53L0X_calc_sigma_estimate+0x44a>
 80092b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <VL53L0X_calc_sigma_estimate+0x44a>
 80092be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d903      	bls.n	80092d2 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80092ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80092e4:	6939      	ldr	r1, [r7, #16]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	9303      	str	r3, [sp, #12]
 80092ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092ee:	9302      	str	r3, [sp, #8]
 80092f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff fc9d 	bl	8008c40 <VL53L0X_calc_dmax>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800930c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009310:	4618      	mov	r0, r3
 8009312:	37c0      	adds	r7, #192	; 0xc0
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	51eb851f 	.word	0x51eb851f
 800931c:	d1b71759 	.word	0xd1b71759
 8009320:	10624dd3 	.word	0x10624dd3

08009324 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b090      	sub	sp, #64	; 0x40
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	461a      	mov	r2, r3
 8009330:	460b      	mov	r3, r1
 8009332:	72fb      	strb	r3, [r7, #11]
 8009334:	4613      	mov	r3, r2
 8009336:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009338:	2300      	movs	r3, #0
 800933a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009376:	7afb      	ldrb	r3, [r7, #11]
 8009378:	10db      	asrs	r3, r3, #3
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009384:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d017      	beq.n	80093bc <VL53L0X_get_pal_range_status+0x98>
 800938c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009390:	2b05      	cmp	r3, #5
 8009392:	d013      	beq.n	80093bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009394:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009398:	2b07      	cmp	r3, #7
 800939a:	d00f      	beq.n	80093bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800939c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093a0:	2b0c      	cmp	r3, #12
 80093a2:	d00b      	beq.n	80093bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80093a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093a8:	2b0d      	cmp	r3, #13
 80093aa:	d007      	beq.n	80093bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80093ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093b0:	2b0e      	cmp	r3, #14
 80093b2:	d003      	beq.n	80093bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80093b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093b8:	2b0f      	cmp	r3, #15
 80093ba:	d103      	bne.n	80093c4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80093bc:	2301      	movs	r3, #1
 80093be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80093c2:	e002      	b.n	80093ca <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80093ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80093d2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80093d6:	461a      	mov	r2, r3
 80093d8:	2100      	movs	r1, #0
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7fc fa10 	bl	8005800 <VL53L0X_GetLimitCheckEnable>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80093e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d02e      	beq.n	800944c <VL53L0X_get_pal_range_status+0x128>
 80093ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d12a      	bne.n	800944c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80093f6:	f107 0310 	add.w	r3, r7, #16
 80093fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80093fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fd3d 	bl	8008e80 <VL53L0X_calc_sigma_estimate>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800940c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	b29a      	uxth	r2, r3
 8009418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800941a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800941c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009420:	2b00      	cmp	r3, #0
 8009422:	d113      	bne.n	800944c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009424:	f107 0320 	add.w	r3, r7, #32
 8009428:	461a      	mov	r2, r3
 800942a:	2100      	movs	r1, #0
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7fc fa6d 	bl	800590c <VL53L0X_GetLimitCheckValue>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d006      	beq.n	800944c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800943e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009440:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009442:	429a      	cmp	r2, r3
 8009444:	d902      	bls.n	800944c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800944c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009454:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009458:	461a      	mov	r2, r3
 800945a:	2102      	movs	r1, #2
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f7fc f9cf 	bl	8005800 <VL53L0X_GetLimitCheckEnable>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009468:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800946c:	2b00      	cmp	r3, #0
 800946e:	d044      	beq.n	80094fa <VL53L0X_get_pal_range_status+0x1d6>
 8009470:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009474:	2b00      	cmp	r3, #0
 8009476:	d140      	bne.n	80094fa <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009478:	f107 031c 	add.w	r3, r7, #28
 800947c:	461a      	mov	r2, r3
 800947e:	2102      	movs	r1, #2
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f7fc fa43 	bl	800590c <VL53L0X_GetLimitCheckValue>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800948c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009490:	2b00      	cmp	r3, #0
 8009492:	d107      	bne.n	80094a4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009494:	2201      	movs	r2, #1
 8009496:	21ff      	movs	r1, #255	; 0xff
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fabf 	bl	8009a1c <VL53L0X_WrByte>
 800949e:	4603      	mov	r3, r0
 80094a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80094a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80094ac:	f107 0316 	add.w	r3, r7, #22
 80094b0:	461a      	mov	r2, r3
 80094b2:	21b6      	movs	r1, #182	; 0xb6
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 fb58 	bl	8009b6a <VL53L0X_RdWord>
 80094ba:	4603      	mov	r3, r0
 80094bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80094c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d107      	bne.n	80094d8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094c8:	2200      	movs	r2, #0
 80094ca:	21ff      	movs	r1, #255	; 0xff
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 faa5 	bl	8009a1c <VL53L0X_WrByte>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80094d8:	8afb      	ldrh	r3, [r7, #22]
 80094da:	025b      	lsls	r3, r3, #9
 80094dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80094ec:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80094ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d902      	bls.n	80094fa <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80094f4:	2301      	movs	r3, #1
 80094f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80094fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009506:	461a      	mov	r2, r3
 8009508:	2103      	movs	r1, #3
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7fc f978 	bl	8005800 <VL53L0X_GetLimitCheckEnable>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800951a:	2b00      	cmp	r3, #0
 800951c:	d023      	beq.n	8009566 <VL53L0X_get_pal_range_status+0x242>
 800951e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009522:	2b00      	cmp	r3, #0
 8009524:	d11f      	bne.n	8009566 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009526:	893b      	ldrh	r3, [r7, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
 8009530:	e005      	b.n	800953e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	021a      	lsls	r2, r3, #8
 8009536:	893b      	ldrh	r3, [r7, #8]
 8009538:	fbb2 f3f3 	udiv	r3, r2, r3
 800953c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800953e:	f107 0318 	add.w	r3, r7, #24
 8009542:	461a      	mov	r2, r3
 8009544:	2103      	movs	r1, #3
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f7fc f9e0 	bl	800590c <VL53L0X_GetLimitCheckValue>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d006      	beq.n	8009566 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009558:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800955a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800955c:	429a      	cmp	r2, r3
 800955e:	d202      	bcs.n	8009566 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009560:	2301      	movs	r3, #1
 8009562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009566:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800956a:	2b00      	cmp	r3, #0
 800956c:	d14a      	bne.n	8009604 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800956e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009572:	2b01      	cmp	r3, #1
 8009574:	d103      	bne.n	800957e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009578:	22ff      	movs	r2, #255	; 0xff
 800957a:	701a      	strb	r2, [r3, #0]
 800957c:	e042      	b.n	8009604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800957e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009582:	2b01      	cmp	r3, #1
 8009584:	d007      	beq.n	8009596 <VL53L0X_get_pal_range_status+0x272>
 8009586:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800958a:	2b02      	cmp	r3, #2
 800958c:	d003      	beq.n	8009596 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800958e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009592:	2b03      	cmp	r3, #3
 8009594:	d103      	bne.n	800959e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009598:	2205      	movs	r2, #5
 800959a:	701a      	strb	r2, [r3, #0]
 800959c:	e032      	b.n	8009604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800959e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095a2:	2b06      	cmp	r3, #6
 80095a4:	d003      	beq.n	80095ae <VL53L0X_get_pal_range_status+0x28a>
 80095a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095aa:	2b09      	cmp	r3, #9
 80095ac:	d103      	bne.n	80095b6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80095ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b0:	2204      	movs	r2, #4
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	e026      	b.n	8009604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80095b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095ba:	2b08      	cmp	r3, #8
 80095bc:	d007      	beq.n	80095ce <VL53L0X_get_pal_range_status+0x2aa>
 80095be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095c2:	2b0a      	cmp	r3, #10
 80095c4:	d003      	beq.n	80095ce <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80095c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d103      	bne.n	80095d6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	2203      	movs	r2, #3
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	e016      	b.n	8009604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80095d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095da:	2b04      	cmp	r3, #4
 80095dc:	d003      	beq.n	80095e6 <VL53L0X_get_pal_range_status+0x2c2>
 80095de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d103      	bne.n	80095ee <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80095e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e8:	2202      	movs	r2, #2
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	e00a      	b.n	8009604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80095ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d103      	bne.n	80095fe <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80095f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f8:	2201      	movs	r2, #1
 80095fa:	701a      	strb	r2, [r3, #0]
 80095fc:	e002      	b.n	8009604 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80095fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009600:	2200      	movs	r2, #0
 8009602:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800960c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800960e:	2200      	movs	r2, #0
 8009610:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009612:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009616:	461a      	mov	r2, r3
 8009618:	2101      	movs	r1, #1
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f7fc f8f0 	bl	8005800 <VL53L0X_GetLimitCheckEnable>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009626:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800962a:	2b00      	cmp	r3, #0
 800962c:	d14f      	bne.n	80096ce <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800962e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <VL53L0X_get_pal_range_status+0x31a>
 8009636:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800963a:	2b01      	cmp	r3, #1
 800963c:	d103      	bne.n	8009646 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009644:	e002      	b.n	800964c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009652:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009656:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800965a:	2b04      	cmp	r3, #4
 800965c:	d003      	beq.n	8009666 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800965e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009666:	2301      	movs	r3, #1
 8009668:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966c:	e002      	b.n	8009674 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800967a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800967e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <VL53L0X_get_pal_range_status+0x36a>
 8009686:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800968a:	2b01      	cmp	r3, #1
 800968c:	d103      	bne.n	8009696 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009694:	e002      	b.n	800969c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80096a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80096a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <VL53L0X_get_pal_range_status+0x392>
 80096ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d103      	bne.n	80096be <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096bc:	e002      	b.n	80096c4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80096ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3740      	adds	r7, #64	; 0x40
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <VL53L0X_write_byte>:

#include "vl53l0x/vl53l0x_i2c_platform.h"

uint8_t _i2c_buffer[64];

int32_t VL53L0X_write_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t   data){
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af02      	add	r7, sp, #8
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	4608      	mov	r0, r1
 80096e6:	4611      	mov	r1, r2
 80096e8:	461a      	mov	r2, r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	70fb      	strb	r3, [r7, #3]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70bb      	strb	r3, [r7, #2]
 80096f2:	4613      	mov	r3, r2
 80096f4:	707b      	strb	r3, [r7, #1]

	_i2c_buffer[0]=index;
 80096f6:	4a0a      	ldr	r2, [pc, #40]	; (8009720 <VL53L0X_write_byte+0x44>)
 80096f8:	78bb      	ldrb	r3, [r7, #2]
 80096fa:	7013      	strb	r3, [r2, #0]
	_i2c_buffer[1]=data;
 80096fc:	4a08      	ldr	r2, [pc, #32]	; (8009720 <VL53L0X_write_byte+0x44>)
 80096fe:	787b      	ldrb	r3, [r7, #1]
 8009700:	7053      	strb	r3, [r2, #1]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,2,10);
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	b299      	uxth	r1, r3
 8009706:	230a      	movs	r3, #10
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	2302      	movs	r3, #2
 800970c:	4a04      	ldr	r2, [pc, #16]	; (8009720 <VL53L0X_write_byte+0x44>)
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7f8 fc96 	bl	8002040 <HAL_I2C_Master_Transmit>
 8009714:	4603      	mov	r3, r0

}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000b24 	.word	0x20000b24

08009724 <VL53L0X_read_byte>:

int32_t VL53L0X_read_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata){
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af02      	add	r7, sp, #8
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	607b      	str	r3, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	72fb      	strb	r3, [r7, #11]
 8009732:	4613      	mov	r3, r2
 8009734:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(i2c_handle,address,&index,1,10)){
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	b299      	uxth	r1, r3
 800973a:	f107 020a 	add.w	r2, r7, #10
 800973e:	230a      	movs	r3, #10
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	2301      	movs	r3, #1
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7f8 fc7b 	bl	8002040 <HAL_I2C_Master_Transmit>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <VL53L0X_read_byte+0x30>
		return 1;
 8009750:	2301      	movs	r3, #1
 8009752:	e00c      	b.n	800976e <VL53L0X_read_byte+0x4a>
	}

	return HAL_I2C_Master_Receive(i2c_handle,address|1,pdata,1,10);
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	b2db      	uxtb	r3, r3
 800975c:	b299      	uxth	r1, r3
 800975e:	230a      	movs	r3, #10
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	2301      	movs	r3, #1
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f7f8 fd78 	bl	800225c <HAL_I2C_Master_Receive>
 800976c:	4603      	mov	r3, r0



}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint32_t *pdata) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	607b      	str	r3, [r7, #4]
 8009782:	460b      	mov	r3, r1
 8009784:	72fb      	strb	r3, [r7, #11]
 8009786:	4613      	mov	r3, r2
 8009788:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800978a:	7afb      	ldrb	r3, [r7, #11]
 800978c:	b299      	uxth	r1, r3
 800978e:	f107 020a 	add.w	r2, r7, #10
 8009792:	230a      	movs	r3, #10
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	2301      	movs	r3, #1
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7f8 fc51 	bl	8002040 <HAL_I2C_Master_Transmit>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <VL53L0X_read_dword+0x30>
		return 1;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e021      	b.n	80097ec <VL53L0X_read_dword+0x74>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 4, 10)) {
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	b299      	uxth	r1, r3
 80097b2:	230a      	movs	r3, #10
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	2304      	movs	r3, #4
 80097b8:	4a0e      	ldr	r2, [pc, #56]	; (80097f4 <VL53L0X_read_dword+0x7c>)
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7f8 fd4e 	bl	800225c <HAL_I2C_Master_Receive>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <VL53L0X_read_dword+0x52>
		return 1;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e010      	b.n	80097ec <VL53L0X_read_dword+0x74>
	}

	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 80097ca:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <VL53L0X_read_dword+0x7c>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) _i2c_buffer[1] << 16)
 80097d0:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <VL53L0X_read_dword+0x7c>)
 80097d2:	785b      	ldrb	r3, [r3, #1]
 80097d4:	041b      	lsls	r3, r3, #16
 80097d6:	441a      	add	r2, r3
			+ ((uint32_t) _i2c_buffer[2] << 8) + (uint32_t) _i2c_buffer[3];
 80097d8:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <VL53L0X_read_dword+0x7c>)
 80097da:	789b      	ldrb	r3, [r3, #2]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	4413      	add	r3, r2
 80097e0:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <VL53L0X_read_dword+0x7c>)
 80097e2:	78d2      	ldrb	r2, [r2, #3]
 80097e4:	441a      	add	r2, r3
	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
	return 0;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20000b24 	.word	0x20000b24

080097f8 <VL53L0X_write_word>:


int32_t VL53L0X_write_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t  data){
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	4608      	mov	r0, r1
 8009802:	4611      	mov	r1, r2
 8009804:	461a      	mov	r2, r3
 8009806:	4603      	mov	r3, r0
 8009808:	70fb      	strb	r3, [r7, #3]
 800980a:	460b      	mov	r3, r1
 800980c:	70bb      	strb	r3, [r7, #2]
 800980e:	4613      	mov	r3, r2
 8009810:	803b      	strh	r3, [r7, #0]


    _i2c_buffer[0] = index;
 8009812:	4a0d      	ldr	r2, [pc, #52]	; (8009848 <VL53L0X_write_word+0x50>)
 8009814:	78bb      	ldrb	r3, [r7, #2]
 8009816:	7013      	strb	r3, [r2, #0]
    _i2c_buffer[1] = data >> 8;
 8009818:	883b      	ldrh	r3, [r7, #0]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	b29b      	uxth	r3, r3
 800981e:	b2da      	uxtb	r2, r3
 8009820:	4b09      	ldr	r3, [pc, #36]	; (8009848 <VL53L0X_write_word+0x50>)
 8009822:	705a      	strb	r2, [r3, #1]
    _i2c_buffer[2] = data & 0x00FF;
 8009824:	883b      	ldrh	r3, [r7, #0]
 8009826:	b2da      	uxtb	r2, r3
 8009828:	4b07      	ldr	r3, [pc, #28]	; (8009848 <VL53L0X_write_word+0x50>)
 800982a:	709a      	strb	r2, [r3, #2]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,3,10);
 800982c:	78fb      	ldrb	r3, [r7, #3]
 800982e:	b299      	uxth	r1, r3
 8009830:	230a      	movs	r3, #10
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	2303      	movs	r3, #3
 8009836:	4a04      	ldr	r2, [pc, #16]	; (8009848 <VL53L0X_write_word+0x50>)
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7f8 fc01 	bl	8002040 <HAL_I2C_Master_Transmit>
 800983e:	4603      	mov	r3, r0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000b24 	.word	0x20000b24

0800984c <VL53L0X_read_word>:


int32_t VL53L0X_read_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t *pdata){
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	607b      	str	r3, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	72fb      	strb	r3, [r7, #11]
 800985a:	4613      	mov	r3, r2
 800985c:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	b299      	uxth	r1, r3
 8009862:	f107 020a 	add.w	r2, r7, #10
 8009866:	230a      	movs	r3, #10
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	2301      	movs	r3, #1
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7f8 fbe7 	bl	8002040 <HAL_I2C_Master_Transmit>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <VL53L0X_read_word+0x30>
		return 1;
 8009878:	2301      	movs	r3, #1
 800987a:	e01d      	b.n	80098b8 <VL53L0X_read_word+0x6c>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 2, 10)) {
 800987c:	7afb      	ldrb	r3, [r7, #11]
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	b2db      	uxtb	r3, r3
 8009884:	b299      	uxth	r1, r3
 8009886:	230a      	movs	r3, #10
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	2302      	movs	r3, #2
 800988c:	4a0c      	ldr	r2, [pc, #48]	; (80098c0 <VL53L0X_read_word+0x74>)
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7f8 fce4 	bl	800225c <HAL_I2C_Master_Receive>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <VL53L0X_read_word+0x52>
		return 1;
 800989a:	2301      	movs	r3, #1
 800989c:	e00c      	b.n	80098b8 <VL53L0X_read_word+0x6c>
	}

	 *pdata = ((uint16_t)_i2c_buffer[0]<<8) + (uint16_t)_i2c_buffer[1];
 800989e:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <VL53L0X_read_word+0x74>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <VL53L0X_read_word+0x74>)
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	4413      	add	r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	801a      	strh	r2, [r3, #0]
	return 0;
 80098b6:	2300      	movs	r3, #0

}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20000b24 	.word	0x20000b24

080098c4 <VL53L0X_read_multi>:


int32_t VL53L0X_read_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata, int32_t count){
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	607b      	str	r3, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	72fb      	strb	r3, [r7, #11]
 80098d2:	4613      	mov	r3, r2
 80098d4:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	b299      	uxth	r1, r3
 80098da:	f107 020a 	add.w	r2, r7, #10
 80098de:	230a      	movs	r3, #10
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	2301      	movs	r3, #1
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f7f8 fbab 	bl	8002040 <HAL_I2C_Master_Transmit>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <VL53L0X_read_multi+0x30>
		return 1;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e013      	b.n	800991c <VL53L0X_read_multi+0x58>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, pdata, count, 10)) {
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	f043 0301 	orr.w	r3, r3, #1
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	b299      	uxth	r1, r3
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	b29a      	uxth	r2, r3
 8009902:	230a      	movs	r3, #10
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	4613      	mov	r3, r2
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7f8 fca6 	bl	800225c <HAL_I2C_Master_Receive>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <VL53L0X_read_multi+0x56>
		return 1;
 8009916:	2301      	movs	r3, #1
 8009918:	e000      	b.n	800991c <VL53L0X_read_multi+0x58>
	}

	return 0;
 800991a:	2300      	movs	r3, #0


}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <VL53L0X_write_multi>:


int32_t VL53L0X_write_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint8_t  *pdata, int32_t count){
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af02      	add	r7, sp, #8
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	607b      	str	r3, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	72fb      	strb	r3, [r7, #11]
 8009932:	4613      	mov	r3, r2
 8009934:	72bb      	strb	r3, [r7, #10]
    _i2c_buffer[0] = index;
 8009936:	4a0d      	ldr	r2, [pc, #52]	; (800996c <VL53L0X_write_multi+0x48>)
 8009938:	7abb      	ldrb	r3, [r7, #10]
 800993a:	7013      	strb	r3, [r2, #0]
    memcpy(&_i2c_buffer[1], pdata, count);
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	461a      	mov	r2, r3
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	480b      	ldr	r0, [pc, #44]	; (8009970 <VL53L0X_write_multi+0x4c>)
 8009944:	f005 ff10 	bl	800f768 <memcpy>

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,count+1,10);
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	b299      	uxth	r1, r3
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	b29b      	uxth	r3, r3
 8009950:	3301      	adds	r3, #1
 8009952:	b29a      	uxth	r2, r3
 8009954:	230a      	movs	r3, #10
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	4613      	mov	r3, r2
 800995a:	4a04      	ldr	r2, [pc, #16]	; (800996c <VL53L0X_write_multi+0x48>)
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7f8 fb6f 	bl	8002040 <HAL_I2C_Master_Transmit>
 8009962:	4603      	mov	r3, r0

}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20000b24 	.word	0x20000b24
 8009970:	20000b25 	.word	0x20000b25

08009974 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af02      	add	r7, sp, #8
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	607a      	str	r2, [r7, #4]
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	460b      	mov	r3, r1
 8009982:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009984:	2300      	movs	r3, #0
 8009986:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b3f      	cmp	r3, #63	; 0x3f
 8009990:	d901      	bls.n	8009996 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009992:	23fc      	movs	r3, #252	; 0xfc
 8009994:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800999c:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	7afa      	ldrb	r2, [r7, #11]
 80099a8:	7df9      	ldrb	r1, [r7, #23]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f7ff ffb9 	bl	8009924 <VL53L0X_write_multi>
 80099b2:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099ba:	23ec      	movs	r3, #236	; 0xec
 80099bc:	77fb      	strb	r3, [r7, #31]

    return Status;
 80099be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3720      	adds	r7, #32
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b088      	sub	sp, #32
 80099ce:	af02      	add	r7, sp, #8
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
 80099d6:	460b      	mov	r3, r1
 80099d8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
 80099dc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b3f      	cmp	r3, #63	; 0x3f
 80099e2:	d901      	bls.n	80099e8 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099e4:	23fc      	movs	r3, #252	; 0xfc
 80099e6:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80099ee:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	7afa      	ldrb	r2, [r7, #11]
 80099fa:	7db9      	ldrb	r1, [r7, #22]
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f7ff ff60 	bl	80098c4 <VL53L0X_read_multi>
 8009a04:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <VL53L0X_ReadMulti+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a0c:	23ec      	movs	r3, #236	; 0xec
 8009a0e:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009a36:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009a3e:	78bb      	ldrb	r3, [r7, #2]
 8009a40:	78fa      	ldrb	r2, [r7, #3]
 8009a42:	7bb9      	ldrb	r1, [r7, #14]
 8009a44:	f7ff fe4a 	bl	80096dc <VL53L0X_write_byte>
 8009a48:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <VL53L0X_WrByte+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a50:	23ec      	movs	r3, #236	; 0xec
 8009a52:	73fb      	strb	r3, [r7, #15]

    return Status;
 8009a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009a7a:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(Dev->i2c_handle,deviceAddress, index, data);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009a82:	883b      	ldrh	r3, [r7, #0]
 8009a84:	78fa      	ldrb	r2, [r7, #3]
 8009a86:	7bb9      	ldrb	r1, [r7, #14]
 8009a88:	f7ff feb6 	bl	80097f8 <VL53L0X_write_word>
 8009a8c:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <VL53L0X_WrWord+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a94:	23ec      	movs	r3, #236	; 0xec
 8009a96:	73fb      	strb	r3, [r7, #15]

    return Status;
 8009a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	4608      	mov	r0, r1
 8009aae:	4611      	mov	r1, r2
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	70fb      	strb	r3, [r7, #3]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70bb      	strb	r3, [r7, #2]
 8009aba:	4613      	mov	r3, r2
 8009abc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009ac8:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, &data);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009ad0:	f107 030f 	add.w	r3, r7, #15
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	7db9      	ldrb	r1, [r7, #22]
 8009ad8:	f7ff fe24 	bl	8009724 <VL53L0X_read_byte>
 8009adc:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <VL53L0X_UpdateByte+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ae4:	23ec      	movs	r3, #236	; 0xec
 8009ae6:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8009ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d115      	bne.n	8009b1c <VL53L0X_UpdateByte+0x78>
        data = (data & AndData) | OrData;
 8009af0:	7bfa      	ldrb	r2, [r7, #15]
 8009af2:	78bb      	ldrb	r3, [r7, #2]
 8009af4:	4013      	ands	r3, r2
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	787b      	ldrb	r3, [r7, #1]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	78fa      	ldrb	r2, [r7, #3]
 8009b0a:	7db9      	ldrb	r1, [r7, #22]
 8009b0c:	f7ff fde6 	bl	80096dc <VL53L0X_write_byte>
 8009b10:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <VL53L0X_UpdateByte+0x78>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b18:	23ec      	movs	r3, #236	; 0xec
 8009b1a:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 8009b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	460b      	mov	r3, r1
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009b40:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, data);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009b48:	7afa      	ldrb	r2, [r7, #11]
 8009b4a:	7db9      	ldrb	r1, [r7, #22]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f7ff fde9 	bl	8009724 <VL53L0X_read_byte>
 8009b52:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <VL53L0X_RdByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b5a:	23ec      	movs	r3, #236	; 0xec
 8009b5c:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b086      	sub	sp, #24
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	460b      	mov	r3, r1
 8009b74:	607a      	str	r2, [r7, #4]
 8009b76:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009b82:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(Dev->i2c_handle,deviceAddress, index, data);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009b8a:	7afa      	ldrb	r2, [r7, #11]
 8009b8c:	7db9      	ldrb	r1, [r7, #22]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f7ff fe5c 	bl	800984c <VL53L0X_read_word>
 8009b94:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <VL53L0X_RdWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b9c:	23ec      	movs	r3, #236	; 0xec
 8009b9e:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009bc4:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(Dev->i2c_handle,deviceAddress, index, data);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 8009bcc:	7afa      	ldrb	r2, [r7, #11]
 8009bce:	7db9      	ldrb	r1, [r7, #22]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f7ff fdd1 	bl	8009778 <VL53L0X_read_dword>
 8009bd6:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <VL53L0X_RdDWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009bde:	23ec      	movs	r3, #236	; 0xec
 8009be0:	75fb      	strb	r3, [r7, #23]

    return Status;
 8009be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	72fb      	strb	r3, [r7, #11]
    LOG_FUNCTION_START("");

    //czekaj 2 ms nie rob nic
    //HAL_Delay(2);

	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e002      	b.n	8009c08 <VL53L0X_PollingDelay+0x18>
		time++;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4a05      	ldr	r2, [pc, #20]	; (8009c20 <VL53L0X_PollingDelay+0x30>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d9f8      	bls.n	8009c02 <VL53L0X_PollingDelay+0x12>
	}

    LOG_FUNCTION_END(status);
    return status;
 8009c10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	0003d08f 	.word	0x0003d08f

08009c24 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8009c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d105      	bne.n	8009c44 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8009c38:	2101      	movs	r1, #1
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 f836 	bl	800acac <VL53L1_data_init>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8009c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d107      	bne.n	8009c5c <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2208      	movs	r2, #8
 8009c58:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73bb      	strb	r3, [r7, #14]
 8009c60:	e012      	b.n	8009c88 <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 8009c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d112      	bne.n	8009c90 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	2201      	movs	r2, #1
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fbf1 	bl	800a45a <VL53L1_SetLimitCheckEnable>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	3301      	adds	r3, #1
 8009c86:	73bb      	strb	r3, [r7, #14]
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d9e9      	bls.n	8009c62 <VL53L1_DataInit+0x3e>
 8009c8e:	e000      	b.n	8009c92 <VL53L1_DataInit+0x6e>
		else
			break;
 8009c90:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8009c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d107      	bne.n	8009caa <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8009c9a:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fc3b 	bl	800a51c <VL53L1_SetLimitCheckValue>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8009caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d107      	bne.n	8009cc2 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8009cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fc2f 	bl	800a51c <VL53L1_SetLimitCheckValue>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2203      	movs	r2, #3
 8009cde:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8009ce2:	2320      	movs	r3, #32
 8009ce4:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7bba      	ldrb	r2, [r7, #14]
 8009cea:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2203      	movs	r2, #3
 8009cf0:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2203      	movs	r2, #3
 8009cf8:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2203      	movs	r2, #3
 8009d00:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8009d04:	2108      	movs	r1, #8
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f8ed 	bl	8009ee6 <VL53L1_SetPresetMode>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8009d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8009d28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f005 fab9 	bl	800f2a4 <VL53L1_poll_for_boot_completion>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8009d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	603a      	str	r2, [r7, #0]
 8009d4e:	71fb      	strb	r3, [r7, #7]
 8009d50:	460b      	mov	r3, r1
 8009d52:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009d54:	2300      	movs	r3, #0
 8009d56:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8009d58:	4a2c      	ldr	r2, [pc, #176]	; (8009e0c <ComputeDevicePresetMode+0xc8>)
 8009d5a:	f107 0310 	add.w	r3, r7, #16
 8009d5e:	6812      	ldr	r2, [r2, #0]
 8009d60:	4611      	mov	r1, r2
 8009d62:	8019      	strh	r1, [r3, #0]
 8009d64:	3302      	adds	r3, #2
 8009d66:	0c12      	lsrs	r2, r2, #16
 8009d68:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8009d6a:	4a29      	ldr	r2, [pc, #164]	; (8009e10 <ComputeDevicePresetMode+0xcc>)
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	6812      	ldr	r2, [r2, #0]
 8009d72:	4611      	mov	r1, r2
 8009d74:	8019      	strh	r1, [r3, #0]
 8009d76:	3302      	adds	r3, #2
 8009d78:	0c12      	lsrs	r2, r2, #16
 8009d7a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8009d7c:	4a25      	ldr	r2, [pc, #148]	; (8009e14 <ComputeDevicePresetMode+0xd0>)
 8009d7e:	f107 0308 	add.w	r3, r7, #8
 8009d82:	6812      	ldr	r2, [r2, #0]
 8009d84:	4611      	mov	r1, r2
 8009d86:	8019      	strh	r1, [r3, #0]
 8009d88:	3302      	adds	r3, #2
 8009d8a:	0c12      	lsrs	r2, r2, #16
 8009d8c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2201      	movs	r2, #1
 8009d92:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8009d94:	79bb      	ldrb	r3, [r7, #6]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d002      	beq.n	8009da0 <ComputeDevicePresetMode+0x5c>
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d003      	beq.n	8009da6 <ComputeDevicePresetMode+0x62>
 8009d9e:	e005      	b.n	8009dac <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75bb      	strb	r3, [r7, #22]
		break;
 8009da4:	e004      	b.n	8009db0 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	75bb      	strb	r3, [r7, #22]
		break;
 8009daa:	e001      	b.n	8009db0 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8009dac:	2302      	movs	r3, #2
 8009dae:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d004      	beq.n	8009dc0 <ComputeDevicePresetMode+0x7c>
 8009db6:	2b08      	cmp	r3, #8
 8009db8:	d014      	beq.n	8009de4 <ComputeDevicePresetMode+0xa0>
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d009      	beq.n	8009dd2 <ComputeDevicePresetMode+0x8e>
 8009dbe:	e01a      	b.n	8009df6 <ComputeDevicePresetMode+0xb2>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8009dc0:	7dbb      	ldrb	r3, [r7, #22]
 8009dc2:	f107 0218 	add.w	r2, r7, #24
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	701a      	strb	r2, [r3, #0]
		break;
 8009dd0:	e013      	b.n	8009dfa <ComputeDevicePresetMode+0xb6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8009dd2:	7dbb      	ldrb	r3, [r7, #22]
 8009dd4:	f107 0218 	add.w	r2, r7, #24
 8009dd8:	4413      	add	r3, r2
 8009dda:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	701a      	strb	r2, [r3, #0]
		break;
 8009de2:	e00a      	b.n	8009dfa <ComputeDevicePresetMode+0xb6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8009de4:	7dbb      	ldrb	r3, [r7, #22]
 8009de6:	f107 0218 	add.w	r2, r7, #24
 8009dea:	4413      	add	r3, r2
 8009dec:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	701a      	strb	r2, [r3, #0]
		break;
 8009df4:	e001      	b.n	8009dfa <ComputeDevicePresetMode+0xb6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8009df6:	23f8      	movs	r3, #248	; 0xf8
 8009df8:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8009dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	08010638 	.word	0x08010638
 8009e10:	0801063c 	.word	0x0801063c
 8009e14:	08010640 	.word	0x08010640

08009e18 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8009e18:	b5b0      	push	{r4, r5, r7, lr}
 8009e1a:	b08e      	sub	sp, #56	; 0x38
 8009e1c:	af04      	add	r7, sp, #16
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	607b      	str	r3, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	72fb      	strb	r3, [r7, #11]
 8009e26:	4613      	mov	r3, r2
 8009e28:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d002      	beq.n	8009e3c <SetPresetMode+0x24>
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	d103      	bne.n	8009e44 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8009e3c:	2340      	movs	r3, #64	; 0x40
 8009e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e42:	e002      	b.n	8009e4a <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8009e44:	2320      	movs	r3, #32
 8009e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8009e4a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8009e4e:	7ab9      	ldrb	r1, [r7, #10]
 8009e50:	7afb      	ldrb	r3, [r7, #11]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff ff76 	bl	8009d44 <ComputeDevicePresetMode>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8009e5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d112      	bne.n	8009e8c <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8009e66:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8009e6a:	f107 001c 	add.w	r0, r7, #28
 8009e6e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8009e72:	f107 0314 	add.w	r3, r7, #20
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	f107 0318 	add.w	r3, r7, #24
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4603      	mov	r3, r0
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f001 f9d3 	bl	800b22c <VL53L1_get_preset_mode_timing_cfg>
 8009e86:	4603      	mov	r3, r0
 8009e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8009e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d112      	bne.n	8009eba <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8009e94:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8009e98:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8009e9a:	69fd      	ldr	r5, [r7, #28]
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	9102      	str	r1, [sp, #8]
 8009ea4:	9201      	str	r2, [sp, #4]
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	4622      	mov	r2, r4
 8009eac:	4601      	mov	r1, r0
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f001 fa66 	bl	800b380 <VL53L1_set_preset_mode>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8009eba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d103      	bne.n	8009eca <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009ec8:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8009eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	7afa      	ldrb	r2, [r7, #11]
 8009ed6:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8009eda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3728      	adds	r7, #40	; 0x28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bdb0      	pop	{r4, r5, r7, pc}

08009ee6 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8009efa:	7bba      	ldrb	r2, [r7, #14]
 8009efc:	78f9      	ldrb	r1, [r7, #3]
 8009efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff ff88 	bl	8009e18 <SetPresetMode>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8009f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11f      	bne.n	8009f54 <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7bba      	ldrb	r2, [r7, #14]
 8009f18:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7bba      	ldrb	r2, [r7, #14]
 8009f20:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d005      	beq.n	8009f36 <VL53L1_SetPresetMode+0x50>
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d002      	beq.n	8009f36 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	2b08      	cmp	r3, #8
 8009f34:	d107      	bne.n	8009f46 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8009f36:	f24a 0128 	movw	r1, #41000	; 0xa028
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8a2 	bl	800a084 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8009f40:	4603      	mov	r3, r0
 8009f42:	73fb      	strb	r3, [r7, #15]
 8009f44:	e006      	b.n	8009f54 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8009f46:	f248 2135 	movw	r1, #33333	; 0x8235
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f89a 	bl	800a084 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8009f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8009f5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fa0d 	bl	800a380 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b088      	sub	sp, #32
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8009f8c:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d008      	beq.n	8009fa6 <VL53L1_SetDistanceMode+0x30>
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d005      	beq.n	8009fa6 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d002      	beq.n	8009fa6 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8009fa0:	f06f 0303 	mvn.w	r3, #3
 8009fa4:	e069      	b.n	800a07a <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 8009fa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d002      	beq.n	8009fba <VL53L1_SetDistanceMode+0x44>
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d102      	bne.n	8009fc0 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	77bb      	strb	r3, [r7, #30]
 8009fbe:	e001      	b.n	8009fc4 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 8009fc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d107      	bne.n	8009fdc <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8009fcc:	f107 0308 	add.w	r3, r7, #8
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f001 f8d3 	bl	800b17e <VL53L1_get_user_zone>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8009fe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8009fea:	f107 0314 	add.w	r3, r7, #20
 8009fee:	f107 0210 	add.w	r2, r7, #16
 8009ff2:	f107 010c 	add.w	r1, r7, #12
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fffc 	bl	800aff4 <VL53L1_get_timeouts_us>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800a000:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 800a008:	7fba      	ldrb	r2, [r7, #30]
 800a00a:	7f79      	ldrb	r1, [r7, #29]
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff ff02 	bl	8009e18 <SetPresetMode>
 800a014:	4603      	mov	r3, r0
 800a016:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800a018:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7fba      	ldrb	r2, [r7, #30]
 800a024:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	7fba      	ldrb	r2, [r7, #30]
 800a02c:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a038:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10e      	bne.n	800a05e <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800a040:	68f9      	ldr	r1, [r7, #12]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 ff9c 	bl	800af84 <VL53L1_set_timeouts_us>
 800a04c:	4603      	mov	r3, r0
 800a04e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800a050:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a05e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d107      	bne.n	800a076 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800a066:	f107 0308 	add.w	r3, r7, #8
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 f863 	bl	800b138 <VL53L1_set_user_zone>
 800a072:	4603      	mov	r3, r0
 800a074:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800a076:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3720      	adds	r7, #32
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08c      	sub	sp, #48	; 0x30
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a08e:	2300      	movs	r3, #0
 800a090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800a094:	4b63      	ldr	r3, [pc, #396]	; (800a224 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a0>)
 800a096:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	4a63      	ldr	r2, [pc, #396]	; (800a228 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d902      	bls.n	800a0a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a0a0:	23fc      	movs	r3, #252	; 0xfc
 800a0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800a0a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a0ae:	f107 031a 	add.w	r3, r7, #26
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	2105      	movs	r1, #5
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fac0 	bl	800a63c <VL53L1_GetSequenceStepEnable>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a0c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d109      	bne.n	800a0de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a0ca:	f107 0319 	add.w	r3, r7, #25
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	2106      	movs	r1, #6
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fab2 	bl	800a63c <VL53L1_GetSequenceStepEnable>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a0de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 800a0e6:	f107 0314 	add.w	r3, r7, #20
 800a0ea:	f107 0210 	add.w	r2, r7, #16
 800a0ee:	f107 010c 	add.w	r1, r7, #12
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 ff7e 	bl	800aff4 <VL53L1_get_timeouts_us>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800a0fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a102:	2b00      	cmp	r3, #0
 800a104:	d17f      	bne.n	800a206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a10c:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800a112:	2301      	movs	r3, #1
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800a116:	7efb      	ldrb	r3, [r7, #27]
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d004      	beq.n	800a126 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xa2>
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d023      	beq.n	800a168 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe4>
 800a120:	2b03      	cmp	r3, #3
 800a122:	d00e      	beq.n	800a142 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
 800a124:	e03f      	b.n	800a1a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x122>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a126:	7ebb      	ldrb	r3, [r7, #26]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d002      	beq.n	800a132 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xae>
 800a12c:	7e7b      	ldrb	r3, [r7, #25]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d103      	bne.n	800a13a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
				TimingGuard = 5000;
 800a132:	f241 3388 	movw	r3, #5000	; 0x1388
 800a136:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800a138:	e038      	b.n	800a1ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>
				TimingGuard = 1000;
 800a13a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a13e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a140:	e034      	b.n	800a1ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a148:	7ebb      	ldrb	r3, [r7, #26]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d002      	beq.n	800a154 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd0>
 800a14e:	7e7b      	ldrb	r3, [r7, #25]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d103      	bne.n	800a15c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
				TimingGuard = 26600;
 800a154:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800a158:	62bb      	str	r3, [r7, #40]	; 0x28
 800a15a:	e002      	b.n	800a162 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
			else
				TimingGuard = 21600;
 800a15c:	f245 4360 	movw	r3, #21600	; 0x5460
 800a160:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800a162:	2302      	movs	r3, #2
 800a164:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800a166:	e021      	b.n	800a1ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800a16e:	23f5      	movs	r3, #245	; 0xf5
 800a170:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800a172:	f107 0308 	add.w	r3, r7, #8
 800a176:	461a      	mov	r2, r3
 800a178:	f248 0136 	movw	r1, #32822	; 0x8036
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 ffbf 	bl	800c100 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd07      	ble.n	800a198 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
				vhv += vhv_loops *
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	22f5      	movs	r2, #245	; 0xf5
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	461a      	mov	r2, r3
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	4413      	add	r3, r2
 800a196:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800a19e:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800a1a4:	e002      	b.n	800a1ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a1a6:	23f8      	movs	r3, #248	; 0xf8
 800a1a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d803      	bhi.n	800a1bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800a1b4:	23fc      	movs	r3, #252	; 0xfc
 800a1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1ba:	e003      	b.n	800a1c4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800a1c2:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800a1c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d11c      	bne.n	800a206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d903      	bls.n	800a1dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800a1d4:	23fc      	movs	r3, #252	; 0xfc
 800a1d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1da:	e00d      	b.n	800a1f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x174>
			else {
				TimingBudget /= divisor;
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e4:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fec9 	bl	800af84 <VL53L1_set_timeouts_us>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800a1f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
				VL53L1DevDataSet(Dev,
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800a206:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x192>
		VL53L1DevDataSet(Dev,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a216:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3730      	adds	r7, #48	; 0x30
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	00086470 	.word	0x00086470
 800a228:	00989680 	.word	0x00989680

0800a22c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08c      	sub	sp, #48	; 0x30
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a236:	2300      	movs	r3, #0
 800a238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800a25a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a262:	f107 031b 	add.w	r3, r7, #27
 800a266:	461a      	mov	r2, r3
 800a268:	2105      	movs	r1, #5
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f9e6 	bl	800a63c <VL53L1_GetSequenceStepEnable>
 800a270:	4603      	mov	r3, r0
 800a272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800a276:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800a27e:	f107 031a 	add.w	r3, r7, #26
 800a282:	461a      	mov	r2, r3
 800a284:	2106      	movs	r1, #6
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f9d8 	bl	800a63c <VL53L1_GetSequenceStepEnable>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800a292:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10b      	bne.n	800a2b2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800a29a:	f107 0310 	add.w	r3, r7, #16
 800a29e:	f107 0214 	add.w	r2, r7, #20
 800a2a2:	f107 010c 	add.w	r1, r7, #12
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fea4 	bl	800aff4 <VL53L1_get_timeouts_us>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800a2b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d154      	bne.n	800a364 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a2c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		switch (PresetMode) {
 800a2c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d004      	beq.n	800a2d6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xaa>
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d027      	beq.n	800a320 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf4>
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d011      	beq.n	800a2f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 800a2d4:	e043      	b.n	800a35e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x132>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a2d6:	7efb      	ldrb	r3, [r7, #27]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d002      	beq.n	800a2e2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb6>
 800a2dc:	7ebb      	ldrb	r3, [r7, #26]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d105      	bne.n	800a2ee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc2>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800a2ec:	e03a      	b.n	800a364 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a2f6:	e035      	b.n	800a364 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800a2f8:	7efb      	ldrb	r3, [r7, #27]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d002      	beq.n	800a304 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 800a2fe:	7ebb      	ldrb	r3, [r7, #26]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d106      	bne.n	800a312 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe6>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800a30a:	3334      	adds	r3, #52	; 0x34
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800a310:	e028      	b.n	800a364 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800a318:	3330      	adds	r3, #48	; 0x30
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a31e:	e021      	b.n	800a364 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800a320:	23f5      	movs	r3, #245	; 0xf5
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800a324:	f107 0308 	add.w	r3, r7, #8
 800a328:	461a      	mov	r2, r3
 800a32a:	f248 0136 	movw	r1, #32822	; 0x8036
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f001 fee6 	bl	800c100 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	dd07      	ble.n	800a34a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x11e>
				vhv += vhv_loops *
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	22f5      	movs	r2, #245	; 0xf5
 800a33e:	fb02 f303 	mul.w	r3, r2, r3
 800a342:	461a      	mov	r2, r3
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	4413      	add	r3, r2
 800a348:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800a350:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	005a      	lsls	r2, r3, #1
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	4413      	add	r3, r2
 800a35a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800a35c:	e002      	b.n	800a364 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800a35e:	23f8      	movs	r3, #248	; 0xf8
 800a360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 800a364:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x146>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a370:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a372:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a376:	4618      	mov	r0, r3
 800a378:	3730      	adds	r7, #48	; 0x30
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	019b      	lsls	r3, r3, #6
 800a396:	4a09      	ldr	r2, [pc, #36]	; (800a3bc <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800a398:	fba2 2303 	umull	r2, r3, r2, r3
 800a39c:	099b      	lsrs	r3, r3, #6
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fd9d 	bl	800aee6 <VL53L1_set_inter_measurement_period_ms>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800a3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	10624dd3 	.word	0x10624dd3

0800a3c0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800a3ce:	f107 0308 	add.w	r3, r7, #8
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fdaf 	bl	800af38 <VL53L1_get_inter_measurement_period_ms>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	019b      	lsls	r3, r3, #6
 800a3e4:	4907      	ldr	r1, [pc, #28]	; (800a404 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800a3e6:	fba1 1303 	umull	r1, r3, r1, r3
 800a3ea:	099b      	lsrs	r3, r3, #6
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800a3f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	10624dd3 	.word	0x10624dd3

0800a408 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	460b      	mov	r3, r1
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a416:	2300      	movs	r3, #0
 800a418:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a41a:	897b      	ldrh	r3, [r7, #10]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <SetLimitValue+0x1e>
 800a420:	2b01      	cmp	r3, #1
 800a422:	d009      	beq.n	800a438 <SetLimitValue+0x30>
 800a424:	e011      	b.n	800a44a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	0b9b      	lsrs	r3, r3, #14
 800a42a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800a42c:	8abb      	ldrh	r3, [r7, #20]
 800a42e:	4619      	mov	r1, r3
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f001 f931 	bl	800b698 <VL53L1_set_lite_sigma_threshold>
		break;
 800a436:	e00a      	b.n	800a44e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	0a5b      	lsrs	r3, r3, #9
 800a43c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800a43e:	8abb      	ldrh	r3, [r7, #20]
 800a440:	4619      	mov	r1, r3
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f001 f954 	bl	800b6f0 <VL53L1_set_lite_min_count_rate>
		break;
 800a448:	e001      	b.n	800a44e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a44a:	23fc      	movs	r3, #252	; 0xfc
 800a44c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	460b      	mov	r3, r1
 800a464:	807b      	strh	r3, [r7, #2]
 800a466:	4613      	mov	r3, r2
 800a468:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a472:	887b      	ldrh	r3, [r7, #2]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d902      	bls.n	800a47e <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a478:	23fc      	movs	r3, #252	; 0xfc
 800a47a:	73fb      	strb	r3, [r7, #15]
 800a47c:	e014      	b.n	800a4a8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800a47e:	787b      	ldrb	r3, [r7, #1]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	60bb      	str	r3, [r7, #8]
 800a488:	e006      	b.n	800a498 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a48a:	887b      	ldrh	r3, [r7, #2]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	33e0      	adds	r3, #224	; 0xe0
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800a498:	887b      	ldrh	r3, [r7, #2]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff ffb2 	bl	800a408 <SetLimitValue>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800a4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10c      	bne.n	800a4ca <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a4b0:	887b      	ldrh	r3, [r7, #2]
 800a4b2:	787a      	ldrb	r2, [r7, #1]
 800a4b4:	2a00      	cmp	r2, #0
 800a4b6:	bf14      	ite	ne
 800a4b8:	2201      	movne	r2, #1
 800a4ba:	2200      	moveq	r2, #0
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	4611      	mov	r1, r2
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	460a      	mov	r2, r1
 800a4c6:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800a4ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b087      	sub	sp, #28
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a4e8:	897b      	ldrh	r3, [r7, #10]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d905      	bls.n	800a4fa <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a4ee:	23fc      	movs	r3, #252	; 0xfc
 800a4f0:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	e008      	b.n	800a50c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a4fa:	897b      	ldrh	r3, [r7, #10]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800a504:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	7dba      	ldrb	r2, [r7, #22]
 800a50a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a510:	4618      	mov	r0, r3
 800a512:	371c      	adds	r7, #28
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	460b      	mov	r3, r1
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a52e:	897b      	ldrh	r3, [r7, #10]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d902      	bls.n	800a53a <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a534:	23fc      	movs	r3, #252	; 0xfc
 800a536:	75fb      	strb	r3, [r7, #23]
 800a538:	e023      	b.n	800a582 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a53a:	897b      	ldrh	r3, [r7, #10]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800a544:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 800a546:	7dbb      	ldrb	r3, [r7, #22]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d107      	bne.n	800a55c <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a54c:	897b      	ldrh	r3, [r7, #10]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	33e0      	adds	r3, #224	; 0xe0
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	609a      	str	r2, [r3, #8]
 800a55a:	e012      	b.n	800a582 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800a55c:	897b      	ldrh	r3, [r7, #10]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	4619      	mov	r1, r3
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7ff ff50 	bl	800a408 <SetLimitValue>
 800a568:	4603      	mov	r3, r0
 800a56a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800a56c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d106      	bne.n	800a582 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a574:	897b      	ldrh	r3, [r7, #10]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	33e0      	adds	r3, #224	; 0xe0
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b088      	sub	sp, #32
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	460b      	mov	r3, r1
 800a598:	607a      	str	r2, [r7, #4]
 800a59a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a59c:	2300      	movs	r3, #0
 800a59e:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a5a0:	897b      	ldrh	r3, [r7, #10]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <VL53L1_GetLimitCheckValue+0x1e>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d00c      	beq.n	800a5c4 <VL53L1_GetLimitCheckValue+0x36>
 800a5aa:	e017      	b.n	800a5dc <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800a5ac:	f107 0314 	add.w	r3, r7, #20
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f001 f85a 	bl	800b66c <VL53L1_get_lite_sigma_threshold>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800a5bc:	8abb      	ldrh	r3, [r7, #20]
 800a5be:	039b      	lsls	r3, r3, #14
 800a5c0:	61bb      	str	r3, [r7, #24]
		break;
 800a5c2:	e00d      	b.n	800a5e0 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800a5c4:	f107 0316 	add.w	r3, r7, #22
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f001 f87a 	bl	800b6c4 <VL53L1_get_lite_min_count_rate>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800a5d4:	8afb      	ldrh	r3, [r7, #22]
 800a5d6:	025b      	lsls	r3, r3, #9
 800a5d8:	61bb      	str	r3, [r7, #24]
		break;
 800a5da:	e001      	b.n	800a5e0 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800a5dc:	23fc      	movs	r3, #252	; 0xfc
 800a5de:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a5e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d123      	bne.n	800a630 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d110      	bne.n	800a610 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800a5ee:	897b      	ldrh	r3, [r7, #10]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	33e0      	adds	r3, #224	; 0xe0
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a602:	897b      	ldrh	r3, [r7, #10]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	4413      	add	r3, r2
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800a60e:	e00f      	b.n	800a630 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a616:	897b      	ldrh	r3, [r7, #10]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	33e0      	adds	r3, #224	; 0xe0
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	69ba      	ldr	r2, [r7, #24]
 800a622:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800a624:	897b      	ldrh	r3, [r7, #10]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800a630:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	460b      	mov	r3, r1
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a64a:	2300      	movs	r3, #0
 800a64c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800a64e:	7afb      	ldrb	r3, [r7, #11]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	4619      	mov	r1, r3
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fd38 	bl	800b0ca <VL53L1_get_sequence_config_bit>
 800a65a:	4603      	mov	r3, r0
 800a65c:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800a65e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a674:	2300      	movs	r3, #0
 800a676:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800a67e:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 800a680:	7dbb      	ldrb	r3, [r7, #22]
 800a682:	2b05      	cmp	r3, #5
 800a684:	dc06      	bgt.n	800a694 <VL53L1_StartMeasurement+0x28>
 800a686:	2b04      	cmp	r3, #4
 800a688:	da0b      	bge.n	800a6a2 <VL53L1_StartMeasurement+0x36>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	db0c      	blt.n	800a6a8 <VL53L1_StartMeasurement+0x3c>
 800a68e:	2b02      	cmp	r3, #2
 800a690:	dd07      	ble.n	800a6a2 <VL53L1_StartMeasurement+0x36>
 800a692:	e003      	b.n	800a69c <VL53L1_StartMeasurement+0x30>
 800a694:	3b62      	subs	r3, #98	; 0x62
 800a696:	2b01      	cmp	r3, #1
 800a698:	d806      	bhi.n	800a6a8 <VL53L1_StartMeasurement+0x3c>
 800a69a:	e002      	b.n	800a6a2 <VL53L1_StartMeasurement+0x36>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	75fb      	strb	r3, [r7, #23]
		break;
 800a6a0:	e004      	b.n	800a6ac <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800a6a2:	23f2      	movs	r3, #242	; 0xf2
 800a6a4:	75fb      	strb	r3, [r7, #23]
		break;
 800a6a6:	e001      	b.n	800a6ac <VL53L1_StartMeasurement+0x40>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800a6a8:	23fd      	movs	r3, #253	; 0xfd
 800a6aa:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	789b      	ldrb	r3, [r3, #2]
 800a6b0:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800a6b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d11f      	bne.n	800a6fa <VL53L1_StartMeasurement+0x8e>
 800a6ba:	7d7b      	ldrb	r3, [r7, #21]
 800a6bc:	2b40      	cmp	r3, #64	; 0x40
 800a6be:	d11c      	bne.n	800a6fa <VL53L1_StartMeasurement+0x8e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a6c0:	f107 0310 	add.w	r3, r7, #16
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff fdb0 	bl	800a22c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	4a17      	ldr	r2, [pc, #92]	; (800a730 <VL53L1_StartMeasurement+0xc4>)
 800a6d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d8:	099b      	lsrs	r3, r3, #6
 800a6da:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a6dc:	f107 030c 	add.w	r3, r7, #12
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7ff fe6c 	bl	800a3c0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	1d1a      	adds	r2, r3, #4
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d901      	bls.n	800a6fa <VL53L1_StartMeasurement+0x8e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800a6f6:	23fc      	movs	r3, #252	; 0xfc
 800a6f8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800a6fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d107      	bne.n	800a712 <VL53L1_StartMeasurement+0xa6>
		Status = VL53L1_init_and_start_range(
 800a702:	7d7b      	ldrb	r3, [r7, #21]
 800a704:	2206      	movs	r2, #6
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f001 f827 	bl	800b75c <VL53L1_init_and_start_range>
 800a70e:	4603      	mov	r3, r0
 800a710:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800a712:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d103      	bne.n	800a722 <VL53L1_StartMeasurement+0xb6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2204      	movs	r2, #4
 800a71e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800a722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	10624dd3 	.word	0x10624dd3

0800a734 <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08a      	sub	sp, #40	; 0x28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 800a742:	f107 0318 	add.w	r3, r7, #24
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fd18 	bl	800b17e <VL53L1_get_user_zone>
 800a74e:	4603      	mov	r3, r0
 800a750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800a75a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800a764:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 800a768:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10b      	bne.n	800a788 <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800a770:	f107 0314 	add.w	r3, r7, #20
 800a774:	f107 0210 	add.w	r2, r7, #16
 800a778:	f107 010c 	add.w	r1, r7, #12
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fc39 	bl	800aff4 <VL53L1_get_timeouts_us>
 800a782:	4603      	mov	r3, r0
 800a784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800a788:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d105      	bne.n	800a79c <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 fa0d 	bl	800bbb0 <VL53L1_stop_range>
 800a796:	4603      	mov	r3, r0
 800a798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE)
 800a79c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d107      	bne.n	800a7b4 <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 800a7a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f003 fbcd 	bl	800df48 <VL53L1_WaitUs>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800a7b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10d      	bne.n	800a7d8 <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 800a7c2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a7c6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff fb23 	bl	8009e18 <SetPresetMode>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800a7d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10f      	bne.n	800a800 <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800a7e0:	68f9      	ldr	r1, [r7, #12]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fbcc 	bl	800af84 <VL53L1_set_timeouts_us>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800a7f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d102      	bne.n	800a800 <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a804:	2b00      	cmp	r3, #0
 800a806:	d108      	bne.n	800a81a <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800a808:	f107 0318 	add.w	r3, r7, #24
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fc92 	bl	800b138 <VL53L1_set_user_zone>
 800a814:	4603      	mov	r3, r0
 800a816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800a81a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10b      	bne.n	800a83a <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	789b      	ldrb	r3, [r3, #2]
 800a826:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 800a828:	7ffb      	ldrb	r3, [r7, #31]
 800a82a:	2206      	movs	r2, #6
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 ff94 	bl	800b75c <VL53L1_init_and_start_range>
 800a834:	4603      	mov	r3, r0
 800a836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 800a83a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d104      	bne.n	800a84c <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a848:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800a84c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a850:	4618      	mov	r0, r3
 800a852:	3728      	adds	r7, #40	; 0x28
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a860:	2300      	movs	r3, #0
 800a862:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	789b      	ldrb	r3, [r3, #2]
 800a868:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800a870:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800a878:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 800a87a:	7b3a      	ldrb	r2, [r7, #12]
 800a87c:	7b7b      	ldrb	r3, [r7, #13]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d005      	beq.n	800a88e <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff ff56 	bl	800a734 <ChangePresetMode>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
 800a88c:	e006      	b.n	800a89c <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 faeb 	bl	800be6e <VL53L1_clear_interrupt_and_enable_next_range>
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800a89c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b08d      	sub	sp, #52	; 0x34
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	603a      	str	r2, [r7, #0]
 800a8b2:	71fb      	strb	r3, [r7, #7]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800a8b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800a8bc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800a8be:	231e      	movs	r3, #30
 800a8c0:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800a8c2:	4b34      	ldr	r3, [pc, #208]	; (800a994 <ComputeRQL+0xec>)
 800a8c4:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800a8c6:	4b34      	ldr	r3, [pc, #208]	; (800a998 <ComputeRQL+0xf0>)
 800a8c8:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800a8ca:	f641 139a 	movw	r3, #6554	; 0x199a
 800a8ce:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d103      	bne.n	800a8de <ComputeRQL+0x36>
		returnvalue = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8dc:	e052      	b.n	800a984 <ComputeRQL+0xdc>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800a8de:	79bb      	ldrb	r3, [r7, #6]
 800a8e0:	2b07      	cmp	r3, #7
 800a8e2:	d103      	bne.n	800a8ec <ComputeRQL+0x44>
		returnvalue = 50;
 800a8e4:	2332      	movs	r3, #50	; 0x32
 800a8e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8ea:	e04b      	b.n	800a984 <ComputeRQL+0xdc>
	else {
		if (presults_data->median_range_mm < SRL)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a8f2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	dd03      	ble.n	800a902 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800a8fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8fc:	041b      	lsls	r3, r3, #16
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a900:	e007      	b.n	800a912 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a908:	461a      	mov	r2, r3
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	fb03 f302 	mul.w	r3, r3, r2
 800a910:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d020      	beq.n	800a95a <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a91c:	461a      	mov	r2, r3
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	fb03 f302 	mul.w	r3, r3, r2
 800a924:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	085b      	lsrs	r3, r3, #1
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	4413      	add	r3, r2
 800a92e:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	fbb2 f3f3 	udiv	r3, r2, r3
 800a938:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	041b      	lsls	r3, r3, #16
 800a93e:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	429a      	cmp	r2, r3
 800a946:	d804      	bhi.n	800a952 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800a948:	69fa      	ldr	r2, [r7, #28]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a950:	e006      	b.n	800a960 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800a952:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a956:	62bb      	str	r3, [r7, #40]	; 0x28
 800a958:	e002      	b.n	800a960 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800a95a:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	0c1b      	lsrs	r3, r3, #16
 800a964:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	2b64      	cmp	r3, #100	; 0x64
 800a96a:	d802      	bhi.n	800a972 <ComputeRQL+0xca>
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	2b32      	cmp	r3, #50	; 0x32
 800a970:	dd05      	ble.n	800a97e <ComputeRQL+0xd6>
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	2b64      	cmp	r3, #100	; 0x64
 800a976:	bf28      	it	cs
 800a978:	2364      	movcs	r3, #100	; 0x64
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	e000      	b.n	800a980 <ComputeRQL+0xd8>
 800a97e:	2332      	movs	r3, #50	; 0x32
 800a980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800a984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3734      	adds	r7, #52	; 0x34
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	0075b333 	.word	0x0075b333
 800a998:	0030cccd 	.word	0x0030cccd

0800a99c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	3b04      	subs	r3, #4
 800a9aa:	2b0f      	cmp	r3, #15
 800a9ac:	d83d      	bhi.n	800aa2a <ConvertStatusLite+0x8e>
 800a9ae:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <ConvertStatusLite+0x18>)
 800a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b4:	0800aa07 	.word	0x0800aa07
 800a9b8:	0800aa01 	.word	0x0800aa01
 800a9bc:	0800aa0d 	.word	0x0800aa0d
 800a9c0:	0800aa13 	.word	0x0800aa13
 800a9c4:	0800aa1f 	.word	0x0800aa1f
 800a9c8:	0800aa25 	.word	0x0800aa25
 800a9cc:	0800aa2b 	.word	0x0800aa2b
 800a9d0:	0800aa2b 	.word	0x0800aa2b
 800a9d4:	0800aa19 	.word	0x0800aa19
 800a9d8:	0800aa2b 	.word	0x0800aa2b
 800a9dc:	0800aa2b 	.word	0x0800aa2b
 800a9e0:	0800aa2b 	.word	0x0800aa2b
 800a9e4:	0800aa2b 	.word	0x0800aa2b
 800a9e8:	0800aa2b 	.word	0x0800aa2b
 800a9ec:	0800a9f5 	.word	0x0800a9f5
 800a9f0:	0800a9fb 	.word	0x0800a9fb
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800a9f4:	230a      	movs	r3, #10
 800a9f6:	73fb      	strb	r3, [r7, #15]
		break;
 800a9f8:	e019      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800a9fa:	2306      	movs	r3, #6
 800a9fc:	73fb      	strb	r3, [r7, #15]
		break;
 800a9fe:	e016      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800aa00:	2304      	movs	r3, #4
 800aa02:	73fb      	strb	r3, [r7, #15]
		break;
 800aa04:	e013      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800aa06:	2302      	movs	r3, #2
 800aa08:	73fb      	strb	r3, [r7, #15]
		break;
 800aa0a:	e010      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	73fb      	strb	r3, [r7, #15]
		break;
 800aa10:	e00d      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800aa12:	2307      	movs	r3, #7
 800aa14:	73fb      	strb	r3, [r7, #15]
		break;
 800aa16:	e00a      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800aa18:	2309      	movs	r3, #9
 800aa1a:	73fb      	strb	r3, [r7, #15]
		break;
 800aa1c:	e007      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	73fb      	strb	r3, [r7, #15]
		break;
 800aa22:	e004      	b.n	800aa2e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73fb      	strb	r3, [r7, #15]
		break;
 800aa28:	e001      	b.n	800aa2e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800aa2a:	23ff      	movs	r3, #255	; 0xff
 800aa2c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08c      	sub	sp, #48	; 0x30
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	607b      	str	r3, [r7, #4]
 800aa46:	460b      	mov	r3, r1
 800aa48:	72fb      	strb	r3, [r7, #11]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5a:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa62:	f003 031f 	and.w	r3, r3, #31
 800aa66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800aa6a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800aa6e:	7afb      	ldrb	r3, [r7, #11]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff ff18 	bl	800a8a8 <ComputeRQL>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa84:	025b      	lsls	r3, r3, #9
 800aa86:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa8c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800aa92:	025b      	lsls	r3, r3, #9
 800aa94:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aaa8:	025b      	lsls	r3, r3, #9
 800aaaa:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	6a3a      	ldr	r2, [r7, #32]
 800aab0:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800aab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaba:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800aabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabe:	2200      	movs	r2, #0
 800aac0:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800aac2:	7abb      	ldrb	r3, [r7, #10]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	2b10      	cmp	r3, #16
 800aac8:	d82c      	bhi.n	800ab24 <SetSimpleData+0xe8>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <SetSimpleData+0x94>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800ab15 	.word	0x0800ab15
 800aad4:	0800ab15 	.word	0x0800ab15
 800aad8:	0800ab15 	.word	0x0800ab15
 800aadc:	0800ab25 	.word	0x0800ab25
 800aae0:	0800ab25 	.word	0x0800ab25
 800aae4:	0800ab25 	.word	0x0800ab25
 800aae8:	0800ab25 	.word	0x0800ab25
 800aaec:	0800ab25 	.word	0x0800ab25
 800aaf0:	0800ab25 	.word	0x0800ab25
 800aaf4:	0800ab25 	.word	0x0800ab25
 800aaf8:	0800ab25 	.word	0x0800ab25
 800aafc:	0800ab25 	.word	0x0800ab25
 800ab00:	0800ab1d 	.word	0x0800ab1d
 800ab04:	0800ab25 	.word	0x0800ab25
 800ab08:	0800ab25 	.word	0x0800ab25
 800ab0c:	0800ab25 	.word	0x0800ab25
 800ab10:	0800ab15 	.word	0x0800ab15
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	2205      	movs	r2, #5
 800ab18:	76da      	strb	r2, [r3, #27]
		break;
 800ab1a:	e006      	b.n	800ab2a <SetSimpleData+0xee>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	220d      	movs	r2, #13
 800ab20:	76da      	strb	r2, [r3, #27]
		break;
 800ab22:	e002      	b.n	800ab2a <SetSimpleData+0xee>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	2200      	movs	r2, #0
 800ab28:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2c:	7edb      	ldrb	r3, [r3, #27]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d108      	bne.n	800ab44 <SetSimpleData+0x108>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800ab32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff ff30 	bl	800a99c <ConvertStatusLite>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ab48:	025b      	lsls	r3, r3, #9
 800ab4a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6a3a      	ldr	r2, [r7, #32]
 800ab50:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab58:	025b      	lsls	r3, r3, #9
 800ab5a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a3a      	ldr	r2, [r7, #32]
 800ab60:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800ab64:	f107 0314 	add.w	r3, r7, #20
 800ab68:	461a      	mov	r2, r3
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7ff fd0e 	bl	800a58e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800ab72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ab76:	2b06      	cmp	r3, #6
 800ab78:	bf0c      	ite	eq
 800ab7a:	2301      	moveq	r3, #1
 800ab7c:	2300      	movne	r3, #0
 800ab7e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800ab80:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800ab82:	f107 0319 	add.w	r3, r7, #25
 800ab86:	461a      	mov	r2, r3
 800ab88:	2100      	movs	r1, #0
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff fca3 	bl	800a4d6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800ab90:	7e7b      	ldrb	r3, [r7, #25]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d104      	bne.n	800aba0 <SetSimpleData+0x164>
 800ab96:	7ffb      	ldrb	r3, [r7, #31]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <SetSimpleData+0x164>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e000      	b.n	800aba2 <SetSimpleData+0x166>
 800aba0:	2300      	movs	r3, #0
 800aba2:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	7fba      	ldrb	r2, [r7, #30]
 800aba8:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800abac:	f107 0314 	add.w	r3, r7, #20
 800abb0:	461a      	mov	r2, r3
 800abb2:	2101      	movs	r1, #1
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f7ff fcea 	bl	800a58e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800abba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	bf0c      	ite	eq
 800abc2:	2301      	moveq	r3, #1
 800abc4:	2300      	movne	r3, #0
 800abc6:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800abc8:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800abca:	f107 0319 	add.w	r3, r7, #25
 800abce:	461a      	mov	r2, r3
 800abd0:	2101      	movs	r1, #1
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7ff fc7f 	bl	800a4d6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800abd8:	7e7b      	ldrb	r3, [r7, #25]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d104      	bne.n	800abe8 <SetSimpleData+0x1ac>
 800abde:	7f7b      	ldrb	r3, [r7, #29]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d101      	bne.n	800abe8 <SetSimpleData+0x1ac>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e000      	b.n	800abea <SetSimpleData+0x1ae>
 800abe8:	2300      	movs	r3, #0
 800abea:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	7fba      	ldrb	r2, [r7, #30]
 800abf0:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800abf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf6:	8b1b      	ldrh	r3, [r3, #24]
 800abf8:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800abfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfc:	7edb      	ldrb	r3, [r3, #27]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d110      	bne.n	800ac24 <SetSimpleData+0x1e8>
 800ac02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	da0c      	bge.n	800ac24 <SetSimpleData+0x1e8>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800ac0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ac0e:	4b08      	ldr	r3, [pc, #32]	; (800ac30 <SetSimpleData+0x1f4>)
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	da03      	bge.n	800ac1e <SetSimpleData+0x1e2>
			pRangeData->RangeStatus =
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	220e      	movs	r2, #14
 800ac1a:	76da      	strb	r2, [r3, #27]
 800ac1c:	e002      	b.n	800ac24 <SetSimpleData+0x1e8>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac20:	2200      	movs	r2, #0
 800ac22:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800ac24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3730      	adds	r7, #48	; 0x30
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	200002d4 	.word	0x200002d4

0800ac34 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b0a8      	sub	sp, #160	; 0xa0
 800ac38:	af02      	add	r7, sp, #8
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800ac4c:	221c      	movs	r2, #28
 800ac4e:	21ff      	movs	r1, #255	; 0xff
 800ac50:	6838      	ldr	r0, [r7, #0]
 800ac52:	f004 fd94 	bl	800f77e <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800ac56:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ac5a:	2102      	movs	r1, #2
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f001 f888 	bl	800bd72 <VL53L1_get_device_results>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800ac68:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d117      	bne.n	800aca0 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800ac70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac74:	789a      	ldrb	r2, [r3, #2]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800ac7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac7e:	3304      	adds	r3, #4
 800ac80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800ac84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac88:	78da      	ldrb	r2, [r3, #3]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac92:	2101      	movs	r1, #1
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff fed1 	bl	800aa3c <SetSimpleData>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aca0:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3798      	adds	r7, #152	; 0x98
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800acac:	b5b0      	push	{r4, r5, r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af04      	add	r7, sp, #16
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800acc0:	2162      	movs	r1, #98	; 0x62
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f002 f91a 	bl	800cefc <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2201      	movs	r2, #1
 800acd2:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2200      	movs	r2, #0
 800acd8:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2201      	movs	r2, #1
 800acde:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2201      	movs	r2, #1
 800ace4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800acec:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800acf4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800acfc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2264      	movs	r2, #100	; 0x64
 800ad02:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ad0a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f240 72db 	movw	r2, #2011	; 0x7db
 800ad1a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f002 f8d0 	bl	800cec4 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d008      	beq.n	800ad3c <VL53L1_data_init+0x90>
 800ad2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d104      	bne.n	800ad3c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f857 	bl	800ade6 <VL53L1_read_p2p_data>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f503 7388 	add.w	r3, r3, #272	; 0x110
	status =
 800ad42:	4618      	mov	r0, r3
 800ad44:	f001 fc00 	bl	800c548 <VL53L1_init_refspadchar_config_struct>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	f503 7390 	add.w	r3, r3, #288	; 0x120
	status =
 800ad52:	4618      	mov	r0, r3
 800ad54:	f001 fc1c 	bl	800c590 <VL53L1_init_ssc_config_struct>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	status =
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	f001 fc31 	bl	800c5d2 <VL53L1_init_xtalk_config_struct>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
	status =
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f001 fc8b 	bl	800c696 <VL53L1_init_offset_cal_config_struct>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	33a4      	adds	r3, #164	; 0xa4
	status =
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f001 fcab 	bl	800c6e4 <VL53L1_init_tuning_parm_storage_struct>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800ad92:	2120      	movs	r1, #32
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fcc1 	bl	800b71c <VL53L1_set_vhv_loopbound>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800ad9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d116      	bne.n	800add4 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	7858      	ldrb	r0, [r3, #1]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	8b1c      	ldrh	r4, [r3, #24]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	689d      	ldr	r5, [r3, #8]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	6912      	ldr	r2, [r2, #16]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	6949      	ldr	r1, [r1, #20]
 800adbe:	9102      	str	r1, [sp, #8]
 800adc0:	9201      	str	r2, [sp, #4]
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	462b      	mov	r3, r5
 800adc6:	4622      	mov	r2, r4
 800adc8:	4601      	mov	r1, r0
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fad8 	bl	800b380 <VL53L1_set_preset_mode>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f002 fdda 	bl	800d98e <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800adda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bdb0      	pop	{r4, r5, r7, pc}

0800ade6 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800adee:	2300      	movs	r3, #0
 800adf0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800adf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d108      	bne.n	800ae10 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ae04:	4619      	mov	r1, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f003 f9fd 	bl	800e206 <VL53L1_get_static_nvm_managed>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800ae10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d107      	bne.n	800ae28 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	3342      	adds	r3, #66	; 0x42
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f003 fb2f 	bl	800e482 <VL53L1_get_customer_nvm_managed>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800ae28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d115      	bne.n	800ae5c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f004 fa08 	bl	800f24e <VL53L1_get_nvm_copy_data>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800ae42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d108      	bne.n	800ae5c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	33f0      	adds	r3, #240	; 0xf0
 800ae54:	4619      	mov	r1, r3
 800ae56:	4610      	mov	r0, r2
 800ae58:	f002 f9b3 	bl	800d1c2 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800ae5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
		status =
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	21de      	movs	r1, #222	; 0xde
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f003 f80a 	bl	800de88 <VL53L1_RdWord>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800ae7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae82:	d204      	bcs.n	800ae8e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800ae8a:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800ae8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d107      	bne.n	800aea6 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	339e      	adds	r3, #158	; 0x9e
		status =
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f990 	bl	800b1c2 <VL53L1_get_mode_mitigation_roi>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d114      	bne.n	800aeda <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10f      	bne.n	800aeda <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800aed0:	011b      	lsls	r3, r3, #4
 800aed2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800aeda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b085      	sub	sp, #20
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800af02:	23f1      	movs	r3, #241	; 0xf1
 800af04:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800af06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10c      	bne.n	800af28 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800af1a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800af28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800af54:	23f1      	movs	r3, #241	; 0xf1
 800af56:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d109      	bne.n	800af74 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800af6c:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800af74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af02      	add	r7, sp, #8
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af92:	2300      	movs	r3, #0
 800af94:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800afa4:	23f1      	movs	r3, #241	; 0xf1
 800afa6:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800afa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d11b      	bne.n	800afe8 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
		status =
 800afd4:	9201      	str	r2, [sp, #4]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	460b      	mov	r3, r1
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	68b8      	ldr	r0, [r7, #8]
 800afe0:	f002 fc07 	bl	800d7f2 <VL53L1_calc_timeout_register_values>
 800afe4:	4603      	mov	r3, r0
 800afe6:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800afe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b002:	2300      	movs	r3, #0
 800b004:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b01c:	23f1      	movs	r3, #241	; 0xf1
 800b01e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800b020:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d14a      	bne.n	800b0be <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
		macro_period_us =
 800b034:	4619      	mov	r1, r3
 800b036:	4610      	mov	r0, r2
 800b038:	f002 fa86 	bl	800d548 <VL53L1_calc_macro_period_us>
 800b03c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800b044:	6979      	ldr	r1, [r7, #20]
 800b046:	4618      	mov	r0, r3
 800b048:	f002 fb3f 	bl	800d6ca <VL53L1_calc_timeout_us>
 800b04c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800b058:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800b05a:	8a7b      	ldrh	r3, [r7, #18]
 800b05c:	021b      	lsls	r3, r3, #8
 800b05e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800b066:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800b068:	4413      	add	r3, r2
 800b06a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800b06c:	8a7b      	ldrh	r3, [r7, #18]
 800b06e:	6979      	ldr	r1, [r7, #20]
 800b070:	4618      	mov	r0, r3
 800b072:	f002 fb63 	bl	800d73c <VL53L1_calc_decoded_timeout_us>
 800b076:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800b082:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800b084:	8a7b      	ldrh	r3, [r7, #18]
 800b086:	021b      	lsls	r3, r3, #8
 800b088:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800b090:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800b092:	4413      	add	r3, r2
 800b094:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800b096:	8a7b      	ldrh	r3, [r7, #18]
 800b098:	6979      	ldr	r1, [r7, #20]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f002 fb4e 	bl	800d73c <VL53L1_calc_decoded_timeout_us>
 800b0a0:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800b0be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b087      	sub	sp, #28
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	607a      	str	r2, [r7, #4]
 800b0d6:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	2b07      	cmp	r3, #7
 800b0e8:	d81c      	bhi.n	800b124 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800b0ea:	7afb      	ldrb	r3, [r7, #11]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f8:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800b100:	7dbb      	ldrb	r3, [r7, #22]
 800b102:	4013      	ands	r3, r2
 800b104:	b2da      	uxtb	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800b10a:	7afb      	ldrb	r3, [r7, #11]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00b      	beq.n	800b128 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	7afb      	ldrb	r3, [r7, #11]
 800b118:	fa42 f303 	asr.w	r3, r2, r3
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	701a      	strb	r2, [r3, #0]
 800b122:	e001      	b.n	800b128 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b124:	23fc      	movs	r3, #252	; 0xfc
 800b126:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800b128:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	371c      	adds	r7, #28
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	7858      	ldrb	r0, [r3, #1]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	7819      	ldrb	r1, [r3, #0]
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800b158:	461a      	mov	r2, r3
 800b15a:	f002 fbc3 	bl	800d8e4 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	7898      	ldrb	r0, [r3, #2]
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	78d9      	ldrb	r1, [r3, #3]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800b16c:	461a      	mov	r2, r3
 800b16e:	f002 fbf8 	bl	800d962 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800b172:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b188:	2300      	movs	r3, #0
 800b18a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	4619      	mov	r1, r3
 800b19e:	f002 fd67 	bl	800dc70 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	1c99      	adds	r1, r3, #2
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	3303      	adds	r3, #3
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	f002 fbbe 	bl	800d932 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800b1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800b1e6:	f107 020e 	add.w	r2, r7, #14
 800b1ea:	f107 010d 	add.w	r1, r7, #13
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f002 fd3e 	bl	800dc70 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800b1f4:	7bba      	ldrb	r2, [r7, #14]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800b1fa:	7b7a      	ldrb	r2, [r7, #13]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800b206:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	091b      	lsrs	r3, r3, #4
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800b21e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	603b      	str	r3, [r7, #0]
 800b238:	460b      	mov	r3, r1
 800b23a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b23c:	2300      	movs	r3, #0
 800b23e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800b244:	7afb      	ldrb	r3, [r7, #11]
 800b246:	3b01      	subs	r3, #1
 800b248:	2b25      	cmp	r3, #37	; 0x25
 800b24a:	f200 808e 	bhi.w	800b36a <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800b24e:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800b250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b254:	0800b2ed 	.word	0x0800b2ed
 800b258:	0800b2ed 	.word	0x0800b2ed
 800b25c:	0800b2ed 	.word	0x0800b2ed
 800b260:	0800b2ed 	.word	0x0800b2ed
 800b264:	0800b2ed 	.word	0x0800b2ed
 800b268:	0800b317 	.word	0x0800b317
 800b26c:	0800b317 	.word	0x0800b317
 800b270:	0800b317 	.word	0x0800b317
 800b274:	0800b36b 	.word	0x0800b36b
 800b278:	0800b36b 	.word	0x0800b36b
 800b27c:	0800b36b 	.word	0x0800b36b
 800b280:	0800b36b 	.word	0x0800b36b
 800b284:	0800b36b 	.word	0x0800b36b
 800b288:	0800b36b 	.word	0x0800b36b
 800b28c:	0800b36b 	.word	0x0800b36b
 800b290:	0800b36b 	.word	0x0800b36b
 800b294:	0800b2ed 	.word	0x0800b2ed
 800b298:	0800b317 	.word	0x0800b317
 800b29c:	0800b36b 	.word	0x0800b36b
 800b2a0:	0800b36b 	.word	0x0800b36b
 800b2a4:	0800b36b 	.word	0x0800b36b
 800b2a8:	0800b36b 	.word	0x0800b36b
 800b2ac:	0800b36b 	.word	0x0800b36b
 800b2b0:	0800b36b 	.word	0x0800b36b
 800b2b4:	0800b36b 	.word	0x0800b36b
 800b2b8:	0800b36b 	.word	0x0800b36b
 800b2bc:	0800b36b 	.word	0x0800b36b
 800b2c0:	0800b36b 	.word	0x0800b36b
 800b2c4:	0800b36b 	.word	0x0800b36b
 800b2c8:	0800b36b 	.word	0x0800b36b
 800b2cc:	0800b36b 	.word	0x0800b36b
 800b2d0:	0800b36b 	.word	0x0800b36b
 800b2d4:	0800b36b 	.word	0x0800b36b
 800b2d8:	0800b36b 	.word	0x0800b36b
 800b2dc:	0800b36b 	.word	0x0800b36b
 800b2e0:	0800b341 	.word	0x0800b341
 800b2e4:	0800b341 	.word	0x0800b341
 800b2e8:	0800b341 	.word	0x0800b341
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	601a      	str	r2, [r3, #0]
	break;
 800b314:	e02c      	b.n	800b370 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	601a      	str	r2, [r3, #0]
	break;
 800b33e:	e017      	b.n	800b370 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	601a      	str	r2, [r3, #0]
	break;
 800b368:	e002      	b.n	800b370 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b36a:	23fc      	movs	r3, #252	; 0xfc
 800b36c:	75fb      	strb	r3, [r7, #23]
		break;
 800b36e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b374:	4618      	mov	r0, r3
 800b376:	371c      	adds	r7, #28
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b092      	sub	sp, #72	; 0x48
 800b384:	af04      	add	r7, sp, #16
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	607b      	str	r3, [r7, #4]
 800b38a:	460b      	mov	r3, r1
 800b38c:	72fb      	strb	r3, [r7, #11]
 800b38e:	4613      	mov	r3, r2
 800b390:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b392:	2300      	movs	r3, #0
 800b394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b3aa:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800b3b2:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800b3ba:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b3c2:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	33a4      	adds	r3, #164	; 0xa4
 800b3c8:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800b3d0:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	7afa      	ldrb	r2, [r7, #11]
 800b3d6:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3dc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3e2:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3e8:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800b3ea:	2103      	movs	r1, #3
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f001 fd85 	bl	800cefc <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800b3f2:	7afb      	ldrb	r3, [r7, #11]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	2b25      	cmp	r3, #37	; 0x25
 800b3f8:	f200 810c 	bhi.w	800b614 <VL53L1_set_preset_mode+0x294>
 800b3fc:	a201      	add	r2, pc, #4	; (adr r2, 800b404 <VL53L1_set_preset_mode+0x84>)
 800b3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b402:	bf00      	nop
 800b404:	0800b49d 	.word	0x0800b49d
 800b408:	0800b4b9 	.word	0x0800b4b9
 800b40c:	0800b4d5 	.word	0x0800b4d5
 800b410:	0800b4f1 	.word	0x0800b4f1
 800b414:	0800b50d 	.word	0x0800b50d
 800b418:	0800b529 	.word	0x0800b529
 800b41c:	0800b545 	.word	0x0800b545
 800b420:	0800b561 	.word	0x0800b561
 800b424:	0800b615 	.word	0x0800b615
 800b428:	0800b615 	.word	0x0800b615
 800b42c:	0800b615 	.word	0x0800b615
 800b430:	0800b615 	.word	0x0800b615
 800b434:	0800b615 	.word	0x0800b615
 800b438:	0800b615 	.word	0x0800b615
 800b43c:	0800b615 	.word	0x0800b615
 800b440:	0800b615 	.word	0x0800b615
 800b444:	0800b57d 	.word	0x0800b57d
 800b448:	0800b599 	.word	0x0800b599
 800b44c:	0800b615 	.word	0x0800b615
 800b450:	0800b615 	.word	0x0800b615
 800b454:	0800b615 	.word	0x0800b615
 800b458:	0800b615 	.word	0x0800b615
 800b45c:	0800b615 	.word	0x0800b615
 800b460:	0800b615 	.word	0x0800b615
 800b464:	0800b615 	.word	0x0800b615
 800b468:	0800b615 	.word	0x0800b615
 800b46c:	0800b615 	.word	0x0800b615
 800b470:	0800b615 	.word	0x0800b615
 800b474:	0800b615 	.word	0x0800b615
 800b478:	0800b615 	.word	0x0800b615
 800b47c:	0800b615 	.word	0x0800b615
 800b480:	0800b615 	.word	0x0800b615
 800b484:	0800b615 	.word	0x0800b615
 800b488:	0800b615 	.word	0x0800b615
 800b48c:	0800b615 	.word	0x0800b615
 800b490:	0800b5b5 	.word	0x0800b5b5
 800b494:	0800b5d5 	.word	0x0800b5d5
 800b498:	0800b5f5 	.word	0x0800b5f5

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4ac:	f001 f9a8 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b4b6:	e0b1      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4c8:	f001 fab8 	bl	800ca3c <VL53L1_preset_mode_standard_ranging_short_range>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b4d2:	e0a3      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4e4:	f001 faeb 	bl	800cabe <VL53L1_preset_mode_standard_ranging_long_range>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b4ee:	e095      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b500:	f001 fb1e 	bl	800cb40 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800b504:	4603      	mov	r3, r0
 800b506:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b50a:	e087      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b51a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b51c:	f001 fb35 	bl	800cb8a <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800b520:	4603      	mov	r3, r0
 800b522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b526:	e079      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b538:	f001 fb4c 	bl	800cbd4 <VL53L1_preset_mode_timed_ranging>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b542:	e06b      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b554:	f001 fb78 	bl	800cc48 <VL53L1_preset_mode_timed_ranging_short_range>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b55e:	e05d      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b56e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b570:	f001 fba4 	bl	800ccbc <VL53L1_preset_mode_timed_ranging_long_range>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b57a:	e04f      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	9301      	str	r3, [sp, #4]
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b58a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b58c:	f001 fc78 	bl	800ce80 <VL53L1_preset_mode_olt>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b596:	e041      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	9301      	str	r3, [sp, #4]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5a8:	f001 fc34 	bl	800ce14 <VL53L1_preset_mode_singleshot_ranging>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800b5b2:	e033      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	9302      	str	r3, [sp, #8]
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5c8:	f001 fbd8 	bl	800cd7c <VL53L1_preset_mode_low_power_auto_short_ranging>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800b5d2:	e023      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	9302      	str	r3, [sp, #8]
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	9301      	str	r3, [sp, #4]
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5e8:	f001 fba2 	bl	800cd30 <VL53L1_preset_mode_low_power_auto_ranging>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800b5f2:	e013      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	9302      	str	r3, [sp, #8]
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	9301      	str	r3, [sp, #4]
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b608:	f001 fbde 	bl	800cdc8 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800b60c:	4603      	mov	r3, r0
 800b60e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800b612:	e003      	b.n	800b61c <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b614:	23fc      	movs	r3, #252	; 0xfc
 800b616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800b61a:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800b61c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b620:	2b00      	cmp	r3, #0
 800b622:	d105      	bne.n	800b630 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800b624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b626:	893a      	ldrh	r2, [r7, #8]
 800b628:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	893a      	ldrh	r2, [r7, #8]
 800b62e:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800b630:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <VL53L1_set_preset_mode+0x2ca>
		status =
 800b638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b63a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff fca0 	bl	800af84 <VL53L1_set_timeouts_us>
 800b644:	4603      	mov	r3, r0
 800b646:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800b64a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <VL53L1_set_preset_mode+0x2e0>
		status =
 800b652:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff fc46 	bl	800aee6 <VL53L1_set_inter_measurement_period_ms>
 800b65a:	4603      	mov	r3, r0
 800b65c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800b660:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b664:	4618      	mov	r0, r3
 800b666:	3738      	adds	r7, #56	; 0x38
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b676:	2300      	movs	r3, #0
 800b678:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b688:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	887a      	ldrh	r2, [r7, #2]
 800b6b0:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800b6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	887a      	ldrh	r2, [r7, #2]
 800b708:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800b70c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b710:	4618      	mov	r0, r3
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	b2da      	uxtb	r2, r3
			(vhv_loopbound * 4);
 800b73c:	78fb      	ldrb	r3, [r7, #3]
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	b2db      	uxtb	r3, r3
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b742:	4413      	add	r3, r2
 800b744:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	LOG_FUNCTION_END(status);

	return status;
 800b74c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b0d0      	sub	sp, #320	; 0x140
 800b760:	af00      	add	r7, sp, #0
 800b762:	1d3b      	adds	r3, r7, #4
 800b764:	6018      	str	r0, [r3, #0]
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	1cfb      	adds	r3, r7, #3
 800b76c:	4602      	mov	r2, r0
 800b76e:	701a      	strb	r2, [r3, #0]
 800b770:	1cbb      	adds	r3, r7, #2
 800b772:	460a      	mov	r2, r1
 800b774:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b776:	2300      	movs	r3, #0
 800b778:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b77c:	1d3b      	adds	r3, r7, #4
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800b784:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b788:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b78c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800b790:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b794:	3342      	adds	r3, #66	; 0x42
 800b796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800b79a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b79e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800b7a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7aa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b7ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800b7b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7b6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800b7ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800b7be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7c2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800b7c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800b7ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7ce:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b7d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800b7d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7da:	332c      	adds	r3, #44	; 0x2c
 800b7dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800b7e0:	f107 030c 	add.w	r3, r7, #12
 800b7e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800b800:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b804:	1cfa      	adds	r2, r7, #3
 800b806:	7812      	ldrb	r2, [r2, #0]
 800b808:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800b80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80e:	791b      	ldrb	r3, [r3, #4]
 800b810:	b25b      	sxtb	r3, r3
 800b812:	f003 030f 	and.w	r3, r3, #15
 800b816:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800b818:	1cfb      	adds	r3, r7, #3
 800b81a:	f993 3000 	ldrsb.w	r3, [r3]
 800b81e:	4313      	orrs	r3, r2
 800b820:	b25b      	sxtb	r3, r3
 800b822:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800b824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b828:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800b82a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b82e:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800b832:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b836:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800b83a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b83e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800b842:	2bff      	cmp	r3, #255	; 0xff
 800b844:	d104      	bne.n	800b850 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800b846:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b850:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b854:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d133      	bne.n	800b8c4 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800b85c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b860:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b864:	2b00      	cmp	r3, #0
 800b866:	d12d      	bne.n	800b8c4 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800b868:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b86c:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800b870:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b874:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800b878:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b87c:	2220      	movs	r2, #32
 800b87e:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800b882:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b886:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800b88a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10c      	bne.n	800b8ac <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800b892:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b896:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800b8a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800b8aa:	e004      	b.n	800b8b6 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800b8ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800b8b6:	1cbb      	adds	r3, r7, #2
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b04      	cmp	r3, #4
 800b8bc:	d802      	bhi.n	800b8c4 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800b8be:	1cbb      	adds	r3, r7, #2
 800b8c0:	2205      	movs	r2, #5
 800b8c2:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b8c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8c8:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d110      	bne.n	800b8f2 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800b8d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8d4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d10a      	bne.n	800b8f2 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800b8dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8e0:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800b8e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8e8:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800b8ec:	1cbb      	adds	r3, r7, #2
 800b8ee:	2206      	movs	r2, #6
 800b8f0:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800b8f2:	1cbb      	adds	r3, r7, #2
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	2b05      	cmp	r3, #5
 800b8fa:	d827      	bhi.n	800b94c <VL53L1_init_and_start_range+0x1f0>
 800b8fc:	a201      	add	r2, pc, #4	; (adr r2, 800b904 <VL53L1_init_and_start_range+0x1a8>)
 800b8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b902:	bf00      	nop
 800b904:	0800b945 	.word	0x0800b945
 800b908:	0800b93d 	.word	0x0800b93d
 800b90c:	0800b935 	.word	0x0800b935
 800b910:	0800b92d 	.word	0x0800b92d
 800b914:	0800b925 	.word	0x0800b925
 800b918:	0800b91d 	.word	0x0800b91d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800b91c:	2301      	movs	r3, #1
 800b91e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b922:	e017      	b.n	800b954 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800b924:	230d      	movs	r3, #13
 800b926:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b92a:	e013      	b.n	800b954 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800b92c:	2324      	movs	r3, #36	; 0x24
 800b92e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b932:	e00f      	b.n	800b954 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800b934:	2344      	movs	r3, #68	; 0x44
 800b936:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b93a:	e00b      	b.n	800b954 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800b93c:	235a      	movs	r3, #90	; 0x5a
 800b93e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b942:	e007      	b.n	800b954 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800b944:	2371      	movs	r3, #113	; 0x71
 800b946:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b94a:	e003      	b.n	800b954 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800b94c:	2383      	movs	r3, #131	; 0x83
 800b94e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800b952:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800b954:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800b958:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800b95c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800b960:	f107 030c 	add.w	r3, r7, #12
 800b964:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800b968:	2300      	movs	r3, #0
 800b96a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800b96e:	e00b      	b.n	800b988 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800b970:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800b97a:	2200      	movs	r2, #0
 800b97c:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800b97e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800b982:	3301      	adds	r3, #1
 800b984:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800b988:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800b98c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800b990:	429a      	cmp	r2, r3
 800b992:	d3ed      	bcc.n	800b970 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800b994:	1cbb      	adds	r3, r7, #2
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b05      	cmp	r3, #5
 800b99a:	d917      	bls.n	800b9cc <VL53L1_init_and_start_range+0x270>
 800b99c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d113      	bne.n	800b9cc <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800b9a4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800b9a8:	f1c3 0301 	rsb	r3, r3, #1
 800b9ac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800b9b0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800b9b4:	f107 020c 	add.w	r2, r7, #12
 800b9b8:	4413      	add	r3, r2
		status =
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	210b      	movs	r1, #11
 800b9be:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800b9c2:	f002 fb6b 	bl	800e09c <VL53L1_i2c_encode_static_nvm_managed>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800b9cc:	1cbb      	adds	r3, r7, #2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	d917      	bls.n	800ba04 <VL53L1_init_and_start_range+0x2a8>
 800b9d4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d113      	bne.n	800ba04 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800b9dc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800b9e0:	f1c3 030d 	rsb	r3, r3, #13
 800b9e4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800b9e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800b9ec:	f107 020c 	add.w	r2, r7, #12
 800b9f0:	4413      	add	r3, r2
		status =
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	2117      	movs	r1, #23
 800b9f6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800b9fa:	f002 fc2b 	bl	800e254 <VL53L1_i2c_encode_customer_nvm_managed>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800ba04:	1cbb      	adds	r3, r7, #2
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d917      	bls.n	800ba3c <VL53L1_init_and_start_range+0x2e0>
 800ba0c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d113      	bne.n	800ba3c <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ba14:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ba18:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800ba1c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ba20:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800ba24:	f107 020c 	add.w	r2, r7, #12
 800ba28:	4413      	add	r3, r2
		status =
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	2120      	movs	r1, #32
 800ba2e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800ba32:	f002 fd4d 	bl	800e4d0 <VL53L1_i2c_encode_static_config>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800ba3c:	1cbb      	adds	r3, r7, #2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d917      	bls.n	800ba74 <VL53L1_init_and_start_range+0x318>
 800ba44:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d113      	bne.n	800ba74 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800ba4c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ba50:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800ba54:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ba58:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800ba5c:	f107 020c 	add.w	r2, r7, #12
 800ba60:	4413      	add	r3, r2
		status =
 800ba62:	461a      	mov	r2, r3
 800ba64:	2116      	movs	r1, #22
 800ba66:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ba6a:	f002 fe14 	bl	800e696 <VL53L1_i2c_encode_general_config>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800ba74:	1cbb      	adds	r3, r7, #2
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d917      	bls.n	800baac <VL53L1_init_and_start_range+0x350>
 800ba7c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d113      	bne.n	800baac <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ba84:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ba88:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800ba8c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ba90:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800ba94:	f107 020c 	add.w	r2, r7, #12
 800ba98:	4413      	add	r3, r2
		status =
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	2117      	movs	r1, #23
 800ba9e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800baa2:	f002 fe7c 	bl	800e79e <VL53L1_i2c_encode_timing_config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800baac:	1cbb      	adds	r3, r7, #2
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d036      	beq.n	800bb22 <VL53L1_init_and_start_range+0x3c6>
 800bab4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d132      	bne.n	800bb22 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800babc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bac0:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800bac4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800bac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bacc:	791b      	ldrb	r3, [r3, #4]
 800bace:	f003 0320 	and.w	r3, r3, #32
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d017      	beq.n	800bb06 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800bad6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bada:	789b      	ldrb	r3, [r3, #2]
 800badc:	f043 0301 	orr.w	r3, r3, #1
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bae6:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800bae8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800baec:	789b      	ldrb	r3, [r3, #2]
 800baee:	f043 0301 	orr.w	r3, r3, #1
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800baf8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800bafa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bafe:	789a      	ldrb	r2, [r3, #2]
 800bb00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bb04:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bb06:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800bb0a:	f107 020c 	add.w	r2, r7, #12
 800bb0e:	4413      	add	r3, r2
		status =
 800bb10:	461a      	mov	r2, r3
 800bb12:	2112      	movs	r1, #18
 800bb14:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800bb18:	f002 fec3 	bl	800e8a2 <VL53L1_i2c_encode_dynamic_config>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800bb22:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d113      	bne.n	800bb52 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800bb2a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800bb2e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800bb32:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800bb36:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800bb3a:	f107 020c 	add.w	r2, r7, #12
 800bb3e:	4413      	add	r3, r2
		status =
 800bb40:	461a      	mov	r2, r3
 800bb42:	2105      	movs	r1, #5
 800bb44:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800bb48:	f002 ff30 	bl	800e9ac <VL53L1_i2c_encode_system_control>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800bb52:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10c      	bne.n	800bb74 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800bb5a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
		status =
 800bb5e:	f107 020c 	add.w	r2, r7, #12
 800bb62:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800bb66:	1d38      	adds	r0, r7, #4
 800bb68:	6800      	ldr	r0, [r0, #0]
 800bb6a:	f002 f8f1 	bl	800dd50 <VL53L1_WriteMulti>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800bb74:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d106      	bne.n	800bb8a <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800bb7c:	1d3b      	adds	r3, r7, #4
 800bb7e:	6818      	ldr	r0, [r3, #0]
 800bb80:	f001 f9e6 	bl	800cf50 <VL53L1_update_ll_driver_rd_state>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800bb8a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d106      	bne.n	800bba0 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800bb92:	1d3b      	adds	r3, r7, #4
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	f001 faae 	bl	800d0f6 <VL53L1_update_ll_driver_cfg_state>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800bba0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop

0800bbb0 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bbc6:	b25b      	sxtb	r3, r3
 800bbc8:	f003 030f 	and.w	r3, r3, #15
 800bbcc:	b25b      	sxtb	r3, r3
 800bbce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f002 ff1c 	bl	800ea22 <VL53L1_set_system_control>
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bbf4:	f003 030f 	and.w	r3, r3, #15
 800bbf8:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800bc00:	2103      	movs	r1, #3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f001 f97a 	bl	800cefc <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d102      	bne.n	800bc18 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f001 feef 	bl	800d9f6 <VL53L1_low_power_auto_data_stop_range>

	return status;
 800bc18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b0c8      	sub	sp, #288	; 0x120
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	1d3b      	adds	r3, r7, #4
 800bc2c:	6018      	str	r0, [r3, #0]
 800bc2e:	460a      	mov	r2, r1
 800bc30:	1cfb      	adds	r3, r7, #3
 800bc32:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bc34:	2300      	movs	r3, #0
 800bc36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc3a:	1d3b      	adds	r3, r7, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800bc42:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc46:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800bc4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800bc4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bc56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800bc5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc5e:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800bc62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800bc66:	2388      	movs	r3, #136	; 0x88
 800bc68:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800bc78:	1cfb      	adds	r3, r7, #3
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d008      	beq.n	800bc92 <VL53L1_get_measurement_results+0x6e>
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d10d      	bne.n	800bca0 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800bc84:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bc88:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800bc8c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800bc90:	e00a      	b.n	800bca8 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800bc92:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bc96:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800bc9a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800bc9e:	e003      	b.n	800bca8 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800bca0:	232c      	movs	r3, #44	; 0x2c
 800bca2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800bca6:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bca8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10c      	bne.n	800bcca <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800bcb0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
		status =
 800bcb4:	f107 0208 	add.w	r2, r7, #8
 800bcb8:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800bcbc:	1d38      	adds	r0, r7, #4
 800bcbe:	6800      	ldr	r0, [r0, #0]
 800bcc0:	f002 f87c 	bl	800ddbc <VL53L1_ReadMulti>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800bcca:	1cfb      	adds	r3, r7, #3
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d917      	bls.n	800bd02 <VL53L1_get_measurement_results+0xde>
 800bcd2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d113      	bne.n	800bd02 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800bcda:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bcde:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800bce2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800bce6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800bcea:	f107 0208 	add.w	r2, r7, #8
 800bcee:	4413      	add	r3, r2
		status =
 800bcf0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	2038      	movs	r0, #56	; 0x38
 800bcf8:	f003 f811 	bl	800ed1e <VL53L1_i2c_decode_debug_results>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800bd02:	1cfb      	adds	r3, r7, #3
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d017      	beq.n	800bd3a <VL53L1_get_measurement_results+0x116>
 800bd0a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d113      	bne.n	800bd3a <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800bd12:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800bd16:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800bd1a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800bd1e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800bd22:	f107 0208 	add.w	r2, r7, #8
 800bd26:	4413      	add	r3, r2
		status =
 800bd28:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	2021      	movs	r0, #33	; 0x21
 800bd30:	f002 ff94 	bl	800ec5c <VL53L1_i2c_decode_core_results>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800bd3a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d110      	bne.n	800bd64 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800bd48:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800bd4c:	f107 0208 	add.w	r2, r7, #8
 800bd50:	4413      	add	r3, r2
		status =
 800bd52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bd56:	4619      	mov	r1, r3
 800bd58:	202c      	movs	r0, #44	; 0x2c
 800bd5a:	f002 fe89 	bl	800ea70 <VL53L1_i2c_decode_system_results>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd64:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b088      	sub	sp, #32
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	607a      	str	r2, [r7, #4]
 800bd7e:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800bd8e:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bd94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d106      	bne.n	800bdaa <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800bd9c:	7afb      	ldrb	r3, [r7, #11]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f7ff ff3f 	bl	800bc24 <VL53L1_get_measurement_results>
 800bda6:	4603      	mov	r3, r0
 800bda8:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800bdaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10c      	bne.n	800bdcc <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800bdb8:	4618      	mov	r0, r3
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f000 f86c 	bl	800bea4 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d12d      	bne.n	800be32 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800bdd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10e      	bne.n	800bdfc <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d109      	bne.n	800bdfc <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f001 fe5e 	bl	800daaa <VL53L1_low_power_auto_setup_manual_calibration>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800bdfa:	e00c      	b.n	800be16 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800bdfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d108      	bne.n	800be16 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d103      	bne.n	800be16 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	2202      	movs	r2, #2
 800be12:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800be1c:	2bff      	cmp	r3, #255	; 0xff
 800be1e:	d008      	beq.n	800be32 <VL53L1_get_device_results+0xc0>
 800be20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d104      	bne.n	800be32 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f001 fe83 	bl	800db34 <VL53L1_low_power_auto_update_DSS>
 800be2e:	4603      	mov	r3, r0
 800be30:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800be46:	2284      	movs	r2, #132	; 0x84
 800be48:	6939      	ldr	r1, [r7, #16]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f003 fc8c 	bl	800f768 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800be50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d104      	bne.n	800be62 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f001 f901 	bl	800d060 <VL53L1_check_ll_driver_rd_state>
 800be5e:	4603      	mov	r3, r0
 800be60:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800be62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3720      	adds	r7, #32
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	460b      	mov	r3, r1
 800be78:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800be7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d107      	bne.n	800be96 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800be86:	78fb      	ldrb	r3, [r7, #3]
 800be88:	2203      	movs	r2, #3
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff fc65 	bl	800b75c <VL53L1_init_and_start_range>
 800be92:	4603      	mov	r3, r0
 800be94:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800be96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
	...

0800bea4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b089      	sub	sp, #36	; 0x24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	78da      	ldrb	r2, [r3, #3]
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	3304      	adds	r3, #4
 800beca:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800becc:	2300      	movs	r3, #0
 800bece:	77fb      	strb	r3, [r7, #31]
 800bed0:	e0d0      	b.n	800c074 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	7ffa      	ldrb	r2, [r7, #31]
 800bed6:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	2200      	movs	r2, #0
 800bedc:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	78db      	ldrb	r3, [r3, #3]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	785b      	ldrb	r3, [r3, #1]
 800beea:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800beee:	2b09      	cmp	r3, #9
 800bef0:	d104      	bne.n	800befc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	2213      	movs	r2, #19
 800bef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800befa:	e007      	b.n	800bf0c <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	785b      	ldrb	r3, [r3, #1]
 800bf00:	f003 031f 	and.w	r3, r3, #31
 800bf04:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800bf0c:	7ffb      	ldrb	r3, [r7, #31]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d05d      	beq.n	800bfd2 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800bf16:	e0a7      	b.n	800c068 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	789b      	ldrb	r3, [r3, #2]
 800bf1c:	2b07      	cmp	r3, #7
 800bf1e:	d104      	bne.n	800bf2a <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	821a      	strh	r2, [r3, #16]
 800bf28:	e00c      	b.n	800bf44 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	789b      	ldrb	r3, [r3, #2]
 800bf2e:	2b08      	cmp	r3, #8
 800bf30:	d104      	bne.n	800bf3c <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	821a      	strh	r2, [r3, #16]
 800bf3a:	e003      	b.n	800bf44 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	895b      	ldrh	r3, [r3, #10]
 800bf60:	015b      	lsls	r3, r3, #5
 800bf62:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf6a:	d302      	bcc.n	800bf72 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800bf6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf70:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800bf86:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	fb02 f303 	mul.w	r3, r2, r3
 800bf90:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf98:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da01      	bge.n	800bfa4 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800bfa0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800bfa4:	12db      	asrs	r3, r3, #11
 800bfa6:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	b21a      	sxth	r2, r3
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	621a      	str	r2, [r3, #32]

			break;
 800bfd0:	e04a      	b.n	800c068 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfe8:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	8bdb      	ldrh	r3, [r3, #30]
 800bff6:	015b      	lsls	r3, r3, #5
 800bff8:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c000:	d302      	bcc.n	800c008 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800c002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c006:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800c01c:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	fb02 f303 	mul.w	r3, r2, r3
 800c026:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c02e:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	da01      	bge.n	800c03a <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800c036:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c03a:	12db      	asrs	r3, r3, #11
 800c03c:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	b21a      	sxth	r2, r3
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	621a      	str	r2, [r3, #32]

			break;
 800c066:	bf00      	nop
		}

		pdata++;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	3340      	adds	r3, #64	; 0x40
 800c06c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800c06e:	7ffb      	ldrb	r3, [r7, #31]
 800c070:	3301      	adds	r3, #1
 800c072:	77fb      	strb	r3, [r7, #31]
 800c074:	7ffb      	ldrb	r3, [r7, #31]
 800c076:	2b01      	cmp	r3, #1
 800c078:	f67f af2b 	bls.w	800bed2 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2200      	movs	r2, #0
 800c080:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	f003 031f 	and.w	r3, r3, #31
 800c08a:	3b01      	subs	r3, #1
 800c08c:	2b10      	cmp	r3, #16
 800c08e:	d831      	bhi.n	800c0f4 <VL53L1_copy_sys_and_core_results_to_range_results+0x250>
 800c090:	a201      	add	r2, pc, #4	; (adr r2, 800c098 <VL53L1_copy_sys_and_core_results_to_range_results+0x1f4>)
 800c092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c096:	bf00      	nop
 800c098:	0800c0dd 	.word	0x0800c0dd
 800c09c:	0800c0dd 	.word	0x0800c0dd
 800c0a0:	0800c0dd 	.word	0x0800c0dd
 800c0a4:	0800c0f5 	.word	0x0800c0f5
 800c0a8:	0800c0f5 	.word	0x0800c0f5
 800c0ac:	0800c0f5 	.word	0x0800c0f5
 800c0b0:	0800c0f5 	.word	0x0800c0f5
 800c0b4:	0800c0f5 	.word	0x0800c0f5
 800c0b8:	0800c0f5 	.word	0x0800c0f5
 800c0bc:	0800c0f5 	.word	0x0800c0f5
 800c0c0:	0800c0f5 	.word	0x0800c0f5
 800c0c4:	0800c0f5 	.word	0x0800c0f5
 800c0c8:	0800c0dd 	.word	0x0800c0dd
 800c0cc:	0800c0f5 	.word	0x0800c0f5
 800c0d0:	0800c0f5 	.word	0x0800c0f5
 800c0d4:	0800c0f5 	.word	0x0800c0f5
 800c0d8:	0800c0dd 	.word	0x0800c0dd
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	f003 031f 	and.w	r3, r3, #31
 800c0e4:	b2da      	uxtb	r2, r3
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800c0f2:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800c0f4:	bf00      	nop
 800c0f6:	3724      	adds	r7, #36	; 0x24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800c100:	b480      	push	{r7}
 800c102:	b087      	sub	sp, #28
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	460b      	mov	r3, r1
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c10e:	2300      	movs	r3, #0
 800c110:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800c116:	897b      	ldrh	r3, [r7, #10]
 800c118:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800c11c:	2b38      	cmp	r3, #56	; 0x38
 800c11e:	f200 8204 	bhi.w	800c52a <VL53L1_get_tuning_parm+0x42a>
 800c122:	a201      	add	r2, pc, #4	; (adr r2, 800c128 <VL53L1_get_tuning_parm+0x28>)
 800c124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c128:	0800c20d 	.word	0x0800c20d
 800c12c:	0800c21b 	.word	0x0800c21b
 800c130:	0800c229 	.word	0x0800c229
 800c134:	0800c237 	.word	0x0800c237
 800c138:	0800c245 	.word	0x0800c245
 800c13c:	0800c253 	.word	0x0800c253
 800c140:	0800c261 	.word	0x0800c261
 800c144:	0800c26f 	.word	0x0800c26f
 800c148:	0800c27d 	.word	0x0800c27d
 800c14c:	0800c28b 	.word	0x0800c28b
 800c150:	0800c299 	.word	0x0800c299
 800c154:	0800c2a7 	.word	0x0800c2a7
 800c158:	0800c2b5 	.word	0x0800c2b5
 800c15c:	0800c2c3 	.word	0x0800c2c3
 800c160:	0800c2d1 	.word	0x0800c2d1
 800c164:	0800c2df 	.word	0x0800c2df
 800c168:	0800c2ed 	.word	0x0800c2ed
 800c16c:	0800c2fb 	.word	0x0800c2fb
 800c170:	0800c309 	.word	0x0800c309
 800c174:	0800c317 	.word	0x0800c317
 800c178:	0800c325 	.word	0x0800c325
 800c17c:	0800c333 	.word	0x0800c333
 800c180:	0800c341 	.word	0x0800c341
 800c184:	0800c34f 	.word	0x0800c34f
 800c188:	0800c35d 	.word	0x0800c35d
 800c18c:	0800c36b 	.word	0x0800c36b
 800c190:	0800c379 	.word	0x0800c379
 800c194:	0800c387 	.word	0x0800c387
 800c198:	0800c395 	.word	0x0800c395
 800c19c:	0800c3a3 	.word	0x0800c3a3
 800c1a0:	0800c3b1 	.word	0x0800c3b1
 800c1a4:	0800c3bf 	.word	0x0800c3bf
 800c1a8:	0800c3cd 	.word	0x0800c3cd
 800c1ac:	0800c3db 	.word	0x0800c3db
 800c1b0:	0800c3e9 	.word	0x0800c3e9
 800c1b4:	0800c3f7 	.word	0x0800c3f7
 800c1b8:	0800c405 	.word	0x0800c405
 800c1bc:	0800c413 	.word	0x0800c413
 800c1c0:	0800c421 	.word	0x0800c421
 800c1c4:	0800c42f 	.word	0x0800c42f
 800c1c8:	0800c43d 	.word	0x0800c43d
 800c1cc:	0800c44b 	.word	0x0800c44b
 800c1d0:	0800c459 	.word	0x0800c459
 800c1d4:	0800c467 	.word	0x0800c467
 800c1d8:	0800c475 	.word	0x0800c475
 800c1dc:	0800c483 	.word	0x0800c483
 800c1e0:	0800c491 	.word	0x0800c491
 800c1e4:	0800c49f 	.word	0x0800c49f
 800c1e8:	0800c4ad 	.word	0x0800c4ad
 800c1ec:	0800c4bb 	.word	0x0800c4bb
 800c1f0:	0800c4c9 	.word	0x0800c4c9
 800c1f4:	0800c4d7 	.word	0x0800c4d7
 800c1f8:	0800c4e5 	.word	0x0800c4e5
 800c1fc:	0800c4f3 	.word	0x0800c4f3
 800c200:	0800c501 	.word	0x0800c501
 800c204:	0800c50f 	.word	0x0800c50f
 800c208:	0800c51d 	.word	0x0800c51d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800c212:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	601a      	str	r2, [r3, #0]
	break;
 800c218:	e18e      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800c220:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	601a      	str	r2, [r3, #0]
	break;
 800c226:	e187      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800c22e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	601a      	str	r2, [r3, #0]
	break;
 800c234:	e180      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c23c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	601a      	str	r2, [r3, #0]
	break;
 800c242:	e179      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c24a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	601a      	str	r2, [r3, #0]
	break;
 800c250:	e172      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800c258:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
	break;
 800c25e:	e16b      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c266:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	601a      	str	r2, [r3, #0]
	break;
 800c26c:	e164      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800c274:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
	break;
 800c27a:	e15d      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800c282:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	601a      	str	r2, [r3, #0]
	break;
 800c288:	e156      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800c290:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	601a      	str	r2, [r3, #0]
	break;
 800c296:	e14f      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800c29e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	601a      	str	r2, [r3, #0]
	break;
 800c2a4:	e148      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800c2ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	601a      	str	r2, [r3, #0]
	break;
 800c2b2:	e141      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800c2ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	601a      	str	r2, [r3, #0]
	break;
 800c2c0:	e13a      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800c2c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	601a      	str	r2, [r3, #0]
	break;
 800c2ce:	e133      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800c2d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	601a      	str	r2, [r3, #0]
	break;
 800c2dc:	e12c      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800c2e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	601a      	str	r2, [r3, #0]
	break;
 800c2ea:	e125      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800c2f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]
	break;
 800c2f8:	e11e      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800c300:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	break;
 800c306:	e117      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800c30e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]
	break;
 800c314:	e110      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800c31c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	601a      	str	r2, [r3, #0]
	break;
 800c322:	e109      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c32a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	601a      	str	r2, [r3, #0]
	break;
 800c330:	e102      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800c338:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
	break;
 800c33e:	e0fb      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800c346:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	601a      	str	r2, [r3, #0]
	break;
 800c34c:	e0f4      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800c354:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	601a      	str	r2, [r3, #0]
	break;
 800c35a:	e0ed      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800c362:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	601a      	str	r2, [r3, #0]
	break;
 800c368:	e0e6      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c370:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
	break;
 800c376:	e0df      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800c37e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	601a      	str	r2, [r3, #0]
	break;
 800c384:	e0d8      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800c38c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	601a      	str	r2, [r3, #0]
	break;
 800c392:	e0d1      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800c39a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	601a      	str	r2, [r3, #0]
	break;
 800c3a0:	e0ca      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c3a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	601a      	str	r2, [r3, #0]
	break;
 800c3ae:	e0c3      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c3b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	601a      	str	r2, [r3, #0]
	break;
 800c3bc:	e0bc      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800c3c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	601a      	str	r2, [r3, #0]
	break;
 800c3ca:	e0b5      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	601a      	str	r2, [r3, #0]
	break;
 800c3d8:	e0ae      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800c3e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]
	break;
 800c3e6:	e0a7      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800c3ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	601a      	str	r2, [r3, #0]
	break;
 800c3f4:	e0a0      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800c3fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	601a      	str	r2, [r3, #0]
	break;
 800c402:	e099      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c40a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	601a      	str	r2, [r3, #0]
	break;
 800c410:	e092      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c418:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	601a      	str	r2, [r3, #0]
	break;
 800c41e:	e08b      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800c426:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	601a      	str	r2, [r3, #0]
	break;
 800c42c:	e084      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c434:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	601a      	str	r2, [r3, #0]
	break;
 800c43a:	e07d      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800c442:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	601a      	str	r2, [r3, #0]
	break;
 800c448:	e076      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800c450:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	601a      	str	r2, [r3, #0]
	break;
 800c456:	e06f      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800c45e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	601a      	str	r2, [r3, #0]
	break;
 800c464:	e068      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800c46c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	601a      	str	r2, [r3, #0]
	break;
 800c472:	e061      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800c47a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	601a      	str	r2, [r3, #0]
	break;
 800c480:	e05a      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800c488:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
	break;
 800c48e:	e053      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800c496:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	601a      	str	r2, [r3, #0]
	break;
 800c49c:	e04c      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800c4a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	601a      	str	r2, [r3, #0]
	break;
 800c4aa:	e045      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c4b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	601a      	str	r2, [r3, #0]
	break;
 800c4b8:	e03e      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c4c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	601a      	str	r2, [r3, #0]
	break;
 800c4c6:	e037      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c4ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	601a      	str	r2, [r3, #0]
	break;
 800c4d4:	e030      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c4dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	601a      	str	r2, [r3, #0]
	break;
 800c4e2:	e029      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	601a      	str	r2, [r3, #0]
	break;
 800c4f0:	e022      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	601a      	str	r2, [r3, #0]
	break;
 800c4fe:	e01b      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800c506:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	601a      	str	r2, [r3, #0]
	break;
 800c50c:	e014      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c514:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	601a      	str	r2, [r3, #0]
	break;
 800c51a:	e00d      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c522:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	601a      	str	r2, [r3, #0]
	break;
 800c528:	e006      	b.n	800c538 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c530:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c532:	23fc      	movs	r3, #252	; 0xfc
 800c534:	75fb      	strb	r3, [r7, #23]
	break;
 800c536:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c538:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	371c      	adds	r7, #28
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2208      	movs	r2, #8
 800c558:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	220b      	movs	r2, #11
 800c55e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c566:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c56e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c576:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c57e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c598:	2300      	movs	r3, #0
 800c59a:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2212      	movs	r2, #18
 800c5a6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	220f      	movs	r2, #15
 800c5ac:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800c5ba:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	220c      	movs	r2, #12
 800c5c0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	895b      	ldrh	r3, [r3, #10]
 800c5e4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	895b      	ldrh	r3, [r3, #10]
 800c602:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2200      	movs	r2, #0
 800c620:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2240      	movs	r2, #64	; 0x40
 800c626:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10d      	bne.n	800c64c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d108      	bne.n	800c64c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d103      	bne.n	800c64c <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2200      	movs	r2, #0
 800c648:	741a      	strb	r2, [r3, #16]
 800c64a:	e002      	b.n	800c652 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2201      	movs	r2, #1
 800c650:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800c652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d114      	bne.n	800c684 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d110      	bne.n	800c684 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	6818      	ldr	r0, [r3, #0]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	7d1b      	ldrb	r3, [r3, #20]
 800c676:	f000 ff97 	bl	800d5a8 <VL53L1_calc_range_ignore_threshold>
 800c67a:	4603      	mov	r3, r0
 800c67c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	82da      	strh	r2, [r3, #22]
 800c682:	e002      	b.n	800c68a <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2200      	movs	r2, #0
 800c688:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800c696:	b480      	push	{r7}
 800c698:	b085      	sub	sp, #20
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c6a8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6b0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c6b8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c6c0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2228      	movs	r2, #40	; 0x28
 800c6cc:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2209      	movs	r2, #9
 800c6d2:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c6d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f248 0203 	movw	r2, #32771	; 0x8003
 800c6f6:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f248 0201 	movw	r2, #32769	; 0x8001
 800c6fe:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f248 0241 	movw	r2, #32833	; 0x8041
 800c706:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	220e      	movs	r2, #14
 800c70c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	220a      	movs	r2, #10
 800c712:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2206      	movs	r2, #6
 800c718:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	220e      	movs	r2, #14
 800c71e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	220a      	movs	r2, #10
 800c724:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2206      	movs	r2, #6
 800c72a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2202      	movs	r2, #2
 800c730:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2221      	movs	r2, #33	; 0x21
 800c736:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c74a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c752:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c75a:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	22c0      	movs	r2, #192	; 0xc0
 800c760:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	22c0      	movs	r2, #192	; 0xc0
 800c766:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	22c0      	movs	r2, #192	; 0xc0
 800c76c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2208      	movs	r2, #8
 800c772:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2210      	movs	r2, #16
 800c778:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2202      	movs	r2, #2
 800c786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2202      	movs	r2, #2
 800c796:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c7a8:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c7b0:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f248 0230 	movw	r2, #32816	; 0x8030
 800c7b8:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7c0:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c7c8:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c7d0:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f24f 6218 	movw	r2, #63000	; 0xf618
 800c7d8:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c7e0:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c7ee:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800c7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
 800c80c:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c80e:	2300      	movs	r3, #0
 800c810:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c818:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2211      	movs	r2, #17
 800c85a:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2202      	movs	r2, #2
 800c860:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2202      	movs	r2, #2
 800c86c:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2208      	movs	r2, #8
 800c872:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800c882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c884:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2201      	movs	r2, #1
 800c898:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2200      	movs	r2, #0
 800c89e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	22ff      	movs	r2, #255	; 0xff
 800c8b0:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2220      	movs	r2, #32
 800c8e4:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	220b      	movs	r2, #11
 800c8ea:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	220d      	movs	r2, #13
 800c8fe:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2200      	movs	r2, #0
 800c90c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2201      	movs	r2, #1
 800c912:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	2200      	movs	r2, #0
 800c918:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2200      	movs	r2, #0
 800c91e:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800c926:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2200      	movs	r2, #0
 800c92c:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2238      	movs	r2, #56	; 0x38
 800c932:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	22ff      	movs	r2, #255	; 0xff
 800c938:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	2201      	movs	r2, #1
 800c93e:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	221a      	movs	r2, #26
 800c94a:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2220      	movs	r2, #32
 800c956:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	22cc      	movs	r2, #204	; 0xcc
 800c962:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	220b      	movs	r2, #11
 800c968:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2201      	movs	r2, #1
 800c96e:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	22f5      	movs	r2, #245	; 0xf5
 800c974:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2209      	movs	r2, #9
 800c97a:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2208      	movs	r2, #8
 800c990:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2278      	movs	r2, #120	; 0x78
 800c996:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	220b      	movs	r2, #11
 800c9ca:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2209      	movs	r2, #9
 800c9d0:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	22c7      	movs	r2, #199	; 0xc7
 800ca00:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	22ff      	movs	r2, #255	; 0xff
 800ca06:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	22db      	movs	r2, #219	; 0xdb
 800ca0c:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2202      	movs	r2, #2
 800ca12:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	2200      	movs	r2, #0
 800ca18:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	2201      	movs	r2, #1
 800ca24:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	2221      	movs	r2, #33	; 0x21
 800ca2a:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800ca2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	371c      	adds	r7, #28
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b088      	sub	sp, #32
 800ca40:	af02      	add	r7, sp, #8
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	68b9      	ldr	r1, [r7, #8]
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f7ff fecf 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800ca62:	4603      	mov	r3, r0
 800ca64:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ca66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d121      	bne.n	800cab2 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2207      	movs	r2, #7
 800ca72:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2205      	movs	r2, #5
 800ca78:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2208      	movs	r2, #8
 800ca8e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2238      	movs	r2, #56	; 0x38
 800ca94:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2207      	movs	r2, #7
 800ca9a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2205      	movs	r2, #5
 800caa0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800caa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa4:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b088      	sub	sp, #32
 800cac2:	af02      	add	r7, sp, #8
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cacc:	2300      	movs	r3, #0
 800cace:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7ff fe8e 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800cae4:	4603      	mov	r3, r0
 800cae6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d121      	bne.n	800cb34 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	220f      	movs	r2, #15
 800caf4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	220d      	movs	r2, #13
 800cafa:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2208      	movs	r2, #8
 800cb10:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	22b8      	movs	r2, #184	; 0xb8
 800cb16:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	220f      	movs	r2, #15
 800cb1c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	220d      	movs	r2, #13
 800cb22:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cb34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3718      	adds	r7, #24
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af02      	add	r7, sp, #8
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
 800cb4c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f7ff fe4d 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800cb66:	4603      	mov	r3, r0
 800cb68:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cb6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2202      	movs	r2, #2
 800cb76:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	223b      	movs	r2, #59	; 0x3b
 800cb7c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cb7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b088      	sub	sp, #32
 800cb8e:	af02      	add	r7, sp, #8
 800cb90:	60f8      	str	r0, [r7, #12]
 800cb92:	60b9      	str	r1, [r7, #8]
 800cb94:	607a      	str	r2, [r7, #4]
 800cb96:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	68b9      	ldr	r1, [r7, #8]
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7ff fe28 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cbb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d105      	bne.n	800cbc8 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	225b      	movs	r2, #91	; 0x5b
 800cbc6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cbc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3718      	adds	r7, #24
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	9301      	str	r3, [sp, #4]
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	68b9      	ldr	r1, [r7, #8]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f7ff fe03 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cbfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d11a      	bne.n	800cc3c <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	22b1      	movs	r2, #177	; 0xb1
 800cc16:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	22d4      	movs	r2, #212	; 0xd4
 800cc22:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800cc2a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	2240      	movs	r2, #64	; 0x40
 800cc3a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3718      	adds	r7, #24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af02      	add	r7, sp, #8
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
 800cc54:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc56:	2300      	movs	r3, #0
 800cc58:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7ff fee7 	bl	800ca3c <VL53L1_preset_mode_standard_ranging_short_range>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cc72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d11a      	bne.n	800ccb0 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2284      	movs	r2, #132	; 0x84
 800cc8a:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	22b1      	movs	r2, #177	; 0xb1
 800cc96:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800cc9e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	2240      	movs	r2, #64	; 0x40
 800ccae:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ccb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	68b9      	ldr	r1, [r7, #8]
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f7ff feee 	bl	800cabe <VL53L1_preset_mode_standard_ranging_long_range>
 800cce2:	4603      	mov	r3, r0
 800cce4:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800cce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d11a      	bne.n	800cd24 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2297      	movs	r2, #151	; 0x97
 800ccfe:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	22b1      	movs	r2, #177	; 0xb1
 800cd0a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800cd12:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800cd1e:	6a3b      	ldr	r3, [r7, #32]
 800cd20:	2240      	movs	r2, #64	; 0x40
 800cd22:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b088      	sub	sp, #32
 800cd34:	af02      	add	r7, sp, #8
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff ff3f 	bl	800cbd4 <VL53L1_preset_mode_timed_ranging>
 800cd56:	4603      	mov	r3, r0
 800cd58:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800cd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d106      	bne.n	800cd70 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800cd62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	68b8      	ldr	r0, [r7, #8]
 800cd68:	f000 fe7f 	bl	800da6a <VL53L1_config_low_power_auto_mode>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3718      	adds	r7, #24
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af02      	add	r7, sp, #8
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	6a3b      	ldr	r3, [r7, #32]
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f7ff ff53 	bl	800cc48 <VL53L1_preset_mode_timed_ranging_short_range>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800cda6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d106      	bne.n	800cdbc <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800cdae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	68b8      	ldr	r0, [r7, #8]
 800cdb4:	f000 fe59 	bl	800da6a <VL53L1_config_low_power_auto_mode>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800cdbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	68b9      	ldr	r1, [r7, #8]
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f7ff ff67 	bl	800ccbc <VL53L1_preset_mode_timed_ranging_long_range>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800cdf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800cdfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	68b8      	ldr	r0, [r7, #8]
 800ce00:	f000 fe33 	bl	800da6a <VL53L1_config_low_power_auto_mode>
 800ce04:	4603      	mov	r3, r0
 800ce06:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ce08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3718      	adds	r7, #24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af02      	add	r7, sp, #8
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
 800ce20:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce22:	2300      	movs	r3, #0
 800ce24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	68b9      	ldr	r1, [r7, #8]
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f7ff fce3 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ce3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d116      	bne.n	800ce74 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	22b1      	movs	r2, #177	; 0xb1
 800ce56:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	22d4      	movs	r2, #212	; 0xd4
 800ce62:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800ce6e:	6a3b      	ldr	r3, [r7, #32]
 800ce70:	2210      	movs	r2, #16
 800ce72:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ce74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af02      	add	r7, sp, #8
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	9301      	str	r3, [sp, #4]
 800ce96:	6a3b      	ldr	r3, [r7, #32]
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	68b9      	ldr	r1, [r7, #8]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f7ff fcad 	bl	800c800 <VL53L1_preset_mode_standard_ranging>
 800cea6:	4603      	mov	r3, r0
 800cea8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ceaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d102      	bne.n	800ceb8 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800ceb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2201      	movs	r2, #1
 800ced4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	220a      	movs	r2, #10
 800cee4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800ceee:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cef0:	bf00      	nop
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	332c      	adds	r3, #44	; 0x2c
 800cf10:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	78fa      	ldrb	r2, [r7, #3]
 800cf16:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2202      	movs	r2, #2
 800cf22:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2200      	movs	r2, #0
 800cf28:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	78fa      	ldrb	r2, [r7, #3]
 800cf2e:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2200      	movs	r2, #0
 800cf34:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2202      	movs	r2, #2
 800cf3a:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	71da      	strb	r2, [r3, #7]

}
 800cf42:	bf00      	nop
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
	...

0800cf50 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	332c      	adds	r3, #44	; 0x2c
 800cf64:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800cf6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10c      	bne.n	800cf8e <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2203      	movs	r2, #3
 800cf78:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2202      	movs	r2, #2
 800cf84:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	71da      	strb	r2, [r3, #7]
 800cf8c:	e060      	b.n	800d050 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	795b      	ldrb	r3, [r3, #5]
 800cf92:	2bff      	cmp	r3, #255	; 0xff
 800cf94:	d103      	bne.n	800cf9e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2280      	movs	r2, #128	; 0x80
 800cf9a:	715a      	strb	r2, [r3, #5]
 800cf9c:	e005      	b.n	800cfaa <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	795b      	ldrb	r3, [r3, #5]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	799b      	ldrb	r3, [r3, #6]
 800cfae:	f083 0302 	eor.w	r3, r3, #2
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	791b      	ldrb	r3, [r3, #4]
 800cfbc:	3b03      	subs	r3, #3
 800cfbe:	2b05      	cmp	r3, #5
 800cfc0:	d839      	bhi.n	800d036 <VL53L1_update_ll_driver_rd_state+0xe6>
 800cfc2:	a201      	add	r2, pc, #4	; (adr r2, 800cfc8 <VL53L1_update_ll_driver_rd_state+0x78>)
 800cfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc8:	0800cfe1 	.word	0x0800cfe1
 800cfcc:	0800d037 	.word	0x0800d037
 800cfd0:	0800d037 	.word	0x0800d037
 800cfd4:	0800d00b 	.word	0x0800d00b
 800cfd8:	0800d019 	.word	0x0800d019
 800cfdc:	0800d021 	.word	0x0800d021

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800cfe6:	f003 0302 	and.w	r3, r3, #2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	dd03      	ble.n	800cff6 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2206      	movs	r2, #6
 800cff2:	711a      	strb	r2, [r3, #4]
 800cff4:	e002      	b.n	800cffc <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2208      	movs	r2, #8
 800cffa:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	71da      	strb	r2, [r3, #7]

		break;
 800d008:	e022      	b.n	800d050 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2208      	movs	r2, #8
 800d014:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d016:	e01b      	b.n	800d050 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2208      	movs	r2, #8
 800d01c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d01e:	e017      	b.n	800d050 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	79db      	ldrb	r3, [r3, #7]
 800d024:	f083 0301 	eor.w	r3, r3, #1
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2208      	movs	r2, #8
 800d032:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800d034:	e00c      	b.n	800d050 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2203      	movs	r2, #3
 800d03a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2202      	movs	r2, #2
 800d046:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2200      	movs	r2, #0
 800d04c:	71da      	strb	r2, [r3, #7]

		break;
 800d04e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d054:	4618      	mov	r0, r3
 800d056:	371c      	adds	r7, #28
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800d060:	b480      	push	{r7}
 800d062:	b089      	sub	sp, #36	; 0x24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d068:	2300      	movs	r3, #0
 800d06a:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	332c      	adds	r3, #44	; 0x2c
 800d074:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800d07c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800d086:	2300      	movs	r3, #0
 800d088:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800d08e:	f003 031f 	and.w	r3, r3, #31
 800d092:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	78db      	ldrb	r3, [r3, #3]
 800d098:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d09e:	111b      	asrs	r3, r3, #4
 800d0a0:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800d0a2:	f003 0302 	and.w	r3, r3, #2
 800d0a6:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d0ae:	f003 0320 	and.w	r3, r3, #32
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d017      	beq.n	800d0e6 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	791b      	ldrb	r3, [r3, #4]
 800d0ba:	2b06      	cmp	r3, #6
 800d0bc:	d105      	bne.n	800d0ca <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	2b12      	cmp	r3, #18
 800d0c2:	d010      	beq.n	800d0e6 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800d0c4:	23ef      	movs	r3, #239	; 0xef
 800d0c6:	77fb      	strb	r3, [r7, #31]
 800d0c8:	e00d      	b.n	800d0e6 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	795b      	ldrb	r3, [r3, #5]
 800d0ce:	7bba      	ldrb	r2, [r7, #14]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d001      	beq.n	800d0d8 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800d0d4:	23ee      	movs	r3, #238	; 0xee
 800d0d6:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	799b      	ldrb	r3, [r3, #6]
 800d0dc:	7b7a      	ldrb	r2, [r7, #13]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d001      	beq.n	800d0e6 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800d0e2:	23ed      	movs	r3, #237	; 0xed
 800d0e4:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800d0e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3724      	adds	r7, #36	; 0x24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b087      	sub	sp, #28
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800d0fe:	2300      	movs	r3, #0
 800d100:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	332c      	adds	r3, #44	; 0x2c
 800d10a:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800d112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10c      	bne.n	800d134 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2203      	movs	r2, #3
 800d11e:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2202      	movs	r2, #2
 800d12a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	70da      	strb	r2, [r3, #3]
 800d132:	e03e      	b.n	800d1b2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	785b      	ldrb	r3, [r3, #1]
 800d138:	2bff      	cmp	r3, #255	; 0xff
 800d13a:	d103      	bne.n	800d144 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2280      	movs	r2, #128	; 0x80
 800d140:	705a      	strb	r2, [r3, #1]
 800d142:	e005      	b.n	800d150 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	785b      	ldrb	r3, [r3, #1]
 800d148:	3301      	adds	r3, #1
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	789b      	ldrb	r3, [r3, #2]
 800d154:	f083 0302 	eor.w	r3, r3, #2
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	2b03      	cmp	r3, #3
 800d164:	d002      	beq.n	800d16c <VL53L1_update_ll_driver_cfg_state+0x76>
 800d166:	2b04      	cmp	r3, #4
 800d168:	d00e      	beq.n	800d188 <VL53L1_update_ll_driver_cfg_state+0x92>
 800d16a:	e015      	b.n	800d198 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	78db      	ldrb	r3, [r3, #3]
 800d170:	f083 0301 	eor.w	r3, r3, #1
 800d174:	b2da      	uxtb	r2, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2201      	movs	r2, #1
 800d17e:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2204      	movs	r2, #4
 800d184:	701a      	strb	r2, [r3, #0]
		break;
 800d186:	e014      	b.n	800d1b2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	78db      	ldrb	r3, [r3, #3]
 800d18c:	f083 0301 	eor.w	r3, r3, #1
 800d190:	b2da      	uxtb	r2, r3
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	70da      	strb	r2, [r3, #3]

		break;
 800d196:	e00c      	b.n	800d1b2 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2203      	movs	r2, #3
 800d19c:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	70da      	strb	r2, [r3, #3]

		break;
 800d1b0:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800d1b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	371c      	adds	r7, #28
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b083      	sub	sp, #12
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7c1a      	ldrb	r2, [r3, #16]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	7c52      	ldrb	r2, [r2, #17]
 800d1dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	3302      	adds	r3, #2
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	7c92      	ldrb	r2, [r2, #18]
 800d1e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	3303      	adds	r3, #3
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	7cd2      	ldrb	r2, [r2, #19]
 800d1f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	7d12      	ldrb	r2, [r2, #20]
 800d1fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	3305      	adds	r3, #5
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	7d52      	ldrb	r2, [r2, #21]
 800d204:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	3306      	adds	r3, #6
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	7d92      	ldrb	r2, [r2, #22]
 800d20e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	3307      	adds	r3, #7
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	7dd2      	ldrb	r2, [r2, #23]
 800d218:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	3308      	adds	r3, #8
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	7e12      	ldrb	r2, [r2, #24]
 800d222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	3309      	adds	r3, #9
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	7e52      	ldrb	r2, [r2, #25]
 800d22c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	330a      	adds	r3, #10
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	7e92      	ldrb	r2, [r2, #26]
 800d236:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	330b      	adds	r3, #11
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	7ed2      	ldrb	r2, [r2, #27]
 800d240:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	330c      	adds	r3, #12
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	7f12      	ldrb	r2, [r2, #28]
 800d24a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	330d      	adds	r3, #13
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	7f52      	ldrb	r2, [r2, #29]
 800d254:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	330e      	adds	r3, #14
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	7f92      	ldrb	r2, [r2, #30]
 800d25e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	330f      	adds	r3, #15
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	7fd2      	ldrb	r2, [r2, #31]
 800d268:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	3310      	adds	r3, #16
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d274:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	3311      	adds	r3, #17
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d280:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	3312      	adds	r3, #18
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800d28c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	3313      	adds	r3, #19
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800d298:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	3314      	adds	r3, #20
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d2a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	3315      	adds	r3, #21
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d2b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	3316      	adds	r3, #22
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d2bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	3317      	adds	r3, #23
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800d2c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	3318      	adds	r3, #24
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d2d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	3319      	adds	r3, #25
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800d2e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	331a      	adds	r3, #26
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800d2ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	331b      	adds	r3, #27
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d2f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	331c      	adds	r3, #28
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d304:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	331d      	adds	r3, #29
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d310:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	331e      	adds	r3, #30
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800d31c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	331f      	adds	r3, #31
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800d328:	701a      	strb	r2, [r3, #0]
}
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d336:	b480      	push	{r7}
 800d338:	b085      	sub	sp, #20
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	4603      	mov	r3, r0
 800d33e:	603a      	str	r2, [r7, #0]
 800d340:	80fb      	strh	r3, [r7, #6]
 800d342:	460b      	mov	r3, r1
 800d344:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800d34e:	88fb      	ldrh	r3, [r7, #6]
 800d350:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800d352:	2300      	movs	r3, #0
 800d354:	81fb      	strh	r3, [r7, #14]
 800d356:	e00e      	b.n	800d376 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d358:	88ba      	ldrh	r2, [r7, #4]
 800d35a:	89fb      	ldrh	r3, [r7, #14]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	3b01      	subs	r3, #1
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	4413      	add	r3, r2
 800d364:	89ba      	ldrh	r2, [r7, #12]
 800d366:	b2d2      	uxtb	r2, r2
 800d368:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d36a:	89bb      	ldrh	r3, [r7, #12]
 800d36c:	0a1b      	lsrs	r3, r3, #8
 800d36e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800d370:	89fb      	ldrh	r3, [r7, #14]
 800d372:	3301      	adds	r3, #1
 800d374:	81fb      	strh	r3, [r7, #14]
 800d376:	89fa      	ldrh	r2, [r7, #14]
 800d378:	88bb      	ldrh	r3, [r7, #4]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d3ec      	bcc.n	800d358 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800d37e:	bf00      	nop
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b085      	sub	sp, #20
 800d38e:	af00      	add	r7, sp, #0
 800d390:	4603      	mov	r3, r0
 800d392:	6039      	str	r1, [r7, #0]
 800d394:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800d396:	2300      	movs	r3, #0
 800d398:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800d39a:	e00a      	b.n	800d3b2 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800d39c:	89fb      	ldrh	r3, [r7, #14]
 800d39e:	021b      	lsls	r3, r3, #8
 800d3a0:	b21a      	sxth	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	1c59      	adds	r1, r3, #1
 800d3a6:	6039      	str	r1, [r7, #0]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b21b      	sxth	r3, r3
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800d3b2:	88fb      	ldrh	r3, [r7, #6]
 800d3b4:	1e5a      	subs	r2, r3, #1
 800d3b6:	80fa      	strh	r2, [r7, #6]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1ef      	bne.n	800d39c <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800d3bc:	89fb      	ldrh	r3, [r7, #14]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3714      	adds	r7, #20
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr

0800d3ca <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d3ca:	b480      	push	{r7}
 800d3cc:	b085      	sub	sp, #20
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	603a      	str	r2, [r7, #0]
 800d3d4:	80fb      	strh	r3, [r7, #6]
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800d3e2:	88fb      	ldrh	r3, [r7, #6]
 800d3e4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	81fb      	strh	r3, [r7, #14]
 800d3ea:	e00f      	b.n	800d40c <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d3ec:	88ba      	ldrh	r2, [r7, #4]
 800d3ee:	89fb      	ldrh	r3, [r7, #14]
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	89ba      	ldrh	r2, [r7, #12]
 800d3fa:	b2d2      	uxtb	r2, r2
 800d3fc:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d3fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d402:	121b      	asrs	r3, r3, #8
 800d404:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800d406:	89fb      	ldrh	r3, [r7, #14]
 800d408:	3301      	adds	r3, #1
 800d40a:	81fb      	strh	r3, [r7, #14]
 800d40c:	89fa      	ldrh	r2, [r7, #14]
 800d40e:	88bb      	ldrh	r3, [r7, #4]
 800d410:	429a      	cmp	r2, r3
 800d412:	d3eb      	bcc.n	800d3ec <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800d414:	bf00      	nop
 800d416:	3714      	adds	r7, #20
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	6039      	str	r1, [r7, #0]
 800d42a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800d42c:	2300      	movs	r3, #0
 800d42e:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	b25b      	sxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	da0e      	bge.n	800d458 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800d43a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d43e:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800d440:	e00a      	b.n	800d458 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800d442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d446:	021b      	lsls	r3, r3, #8
 800d448:	b21a      	sxth	r2, r3
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	1c59      	adds	r1, r3, #1
 800d44e:	6039      	str	r1, [r7, #0]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	b21b      	sxth	r3, r3
 800d454:	4313      	orrs	r3, r2
 800d456:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800d458:	88fb      	ldrh	r3, [r7, #6]
 800d45a:	1e5a      	subs	r2, r3, #1
 800d45c:	80fa      	strh	r2, [r7, #6]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1ef      	bne.n	800d442 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800d462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3714      	adds	r7, #20
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr

0800d472 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d472:	b480      	push	{r7}
 800d474:	b087      	sub	sp, #28
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	460b      	mov	r3, r1
 800d47c:	607a      	str	r2, [r7, #4]
 800d47e:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800d484:	2300      	movs	r3, #0
 800d486:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800d48c:	2300      	movs	r3, #0
 800d48e:	82fb      	strh	r3, [r7, #22]
 800d490:	e00e      	b.n	800d4b0 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800d492:	897a      	ldrh	r2, [r7, #10]
 800d494:	8afb      	ldrh	r3, [r7, #22]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	3b01      	subs	r3, #1
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	4413      	add	r3, r2
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	b2d2      	uxtb	r2, r2
 800d4a2:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	0a1b      	lsrs	r3, r3, #8
 800d4a8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800d4aa:	8afb      	ldrh	r3, [r7, #22]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	82fb      	strh	r3, [r7, #22]
 800d4b0:	8afa      	ldrh	r2, [r7, #22]
 800d4b2:	897b      	ldrh	r3, [r7, #10]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d3ec      	bcc.n	800d492 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800d4b8:	bf00      	nop
 800d4ba:	371c      	adds	r7, #28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	6039      	str	r1, [r7, #0]
 800d4ce:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800d4d4:	e007      	b.n	800d4e6 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	021a      	lsls	r2, r3, #8
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	1c59      	adds	r1, r3, #1
 800d4de:	6039      	str	r1, [r7, #0]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	1e5a      	subs	r2, r3, #1
 800d4ea:	80fa      	strh	r2, [r7, #6]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1f2      	bne.n	800d4d6 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3714      	adds	r7, #20
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b085      	sub	sp, #20
 800d502:	af00      	add	r7, sp, #0
 800d504:	4603      	mov	r3, r0
 800d506:	6039      	str	r1, [r7, #0]
 800d508:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800d50a:	2300      	movs	r3, #0
 800d50c:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	b25b      	sxtb	r3, r3
 800d514:	2b00      	cmp	r3, #0
 800d516:	da0b      	bge.n	800d530 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800d518:	f04f 33ff 	mov.w	r3, #4294967295
 800d51c:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800d51e:	e007      	b.n	800d530 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	021a      	lsls	r2, r3, #8
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	1c59      	adds	r1, r3, #1
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800d530:	88fb      	ldrh	r3, [r7, #6]
 800d532:	1e5a      	subs	r2, r3, #1
 800d534:	80fa      	strh	r2, [r7, #6]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1f2      	bne.n	800d520 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800d53a:	68fb      	ldr	r3, [r7, #12]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3714      	adds	r7, #20
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	460a      	mov	r2, r1
 800d552:	80fb      	strh	r3, [r7, #6]
 800d554:	4613      	mov	r3, r2
 800d556:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800d564:	88fb      	ldrh	r3, [r7, #6]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 fb5b 	bl	800dc22 <VL53L1_calc_pll_period_us>
 800d56c:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800d56e:	797b      	ldrb	r3, [r7, #5]
 800d570:	4618      	mov	r0, r3
 800d572:	f000 fb6a 	bl	800dc4a <VL53L1_decode_vcsel_period>
 800d576:	4603      	mov	r3, r0
 800d578:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	4613      	mov	r3, r2
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	4413      	add	r3, r2
 800d582:	021b      	lsls	r3, r3, #8
 800d584:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	099b      	lsrs	r3, r3, #6
 800d58a:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800d58c:	7cfa      	ldrb	r2, [r7, #19]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	fb02 f303 	mul.w	r3, r2, r3
 800d594:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	099b      	lsrs	r3, r3, #6
 800d59a:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800d59c:	68fb      	ldr	r3, [r7, #12]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b089      	sub	sp, #36	; 0x24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	817b      	strh	r3, [r7, #10]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	813b      	strh	r3, [r7, #8]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	011b      	lsls	r3, r3, #4
 800d5da:	4a23      	ldr	r2, [pc, #140]	; (800d668 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800d5dc:	fb82 1203 	smull	r1, r2, r2, r3
 800d5e0:	1192      	asrs	r2, r2, #6
 800d5e2:	17db      	asrs	r3, r3, #31
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800d5e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	da03      	bge.n	800d5f8 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800d5f0:	897b      	ldrh	r3, [r7, #10]
 800d5f2:	425b      	negs	r3, r3
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800d5f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	da03      	bge.n	800d608 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800d600:	893b      	ldrh	r3, [r7, #8]
 800d602:	425b      	negs	r3, r3
 800d604:	b29b      	uxth	r3, r3
 800d606:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800d608:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800d60c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d610:	4413      	add	r3, r2
 800d612:	015b      	lsls	r3, r3, #5
 800d614:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	4a13      	ldr	r2, [pc, #76]	; (800d668 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800d61a:	fb82 1203 	smull	r1, r2, r2, r3
 800d61e:	1192      	asrs	r2, r2, #6
 800d620:	17db      	asrs	r3, r3, #31
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800d626:	697a      	ldr	r2, [r7, #20]
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	4413      	add	r3, r2
 800d62c:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800d62e:	79fa      	ldrb	r2, [r7, #7]
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	fb02 f303 	mul.w	r3, r2, r3
 800d636:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	3310      	adds	r3, #16
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	da00      	bge.n	800d642 <VL53L1_calc_range_ignore_threshold+0x9a>
 800d640:	331f      	adds	r3, #31
 800d642:	115b      	asrs	r3, r3, #5
 800d644:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d64c:	db03      	blt.n	800d656 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800d64e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d652:	83fb      	strh	r3, [r7, #30]
 800d654:	e001      	b.n	800d65a <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800d65a:	8bfb      	ldrh	r3, [r7, #30]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3724      	adds	r7, #36	; 0x24
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr
 800d668:	10624dd3 	.word	0x10624dd3

0800d66c <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	031a      	lsls	r2, r3, #12
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	085b      	lsrs	r3, r3, #1
 800d682:	441a      	add	r2, r3
	timeout_mclks   =
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	fbb2 f3f3 	udiv	r3, r2, r3
 800d68a:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800d68c:	68fb      	ldr	r3, [r7, #12]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3714      	adds	r7, #20
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b084      	sub	sp, #16
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
 800d6ac:	6839      	ldr	r1, [r7, #0]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff ffdc 	bl	800d66c <VL53L1_calc_timeout_mclks>
 800d6b4:	60f8      	str	r0, [r7, #12]
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);

	timeout_encoded =
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 f859 	bl	800d76e <VL53L1_encode_timeout>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800d6c0:	897b      	ldrh	r3, [r7, #10]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800d6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6cc:	b087      	sub	sp, #28
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
 800d6d2:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	617a      	str	r2, [r7, #20]
	uint64_t tmp            = 0;
 800d6d8:	f04f 0100 	mov.w	r1, #0
 800d6dc:	f04f 0200 	mov.w	r2, #0
 800d6e0:	e9c7 1202 	strd	r1, r2, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	4615      	mov	r5, r2
 800d6e8:	f04f 0600 	mov.w	r6, #0
 800d6ec:	683a      	ldr	r2, [r7, #0]
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	f04f 0200 	mov.w	r2, #0
 800d6f4:	fb01 fe06 	mul.w	lr, r1, r6
 800d6f8:	fb05 f002 	mul.w	r0, r5, r2
 800d6fc:	4470      	add	r0, lr
 800d6fe:	fba5 1201 	umull	r1, r2, r5, r1
 800d702:	4410      	add	r0, r2
 800d704:	4602      	mov	r2, r0
 800d706:	e9c7 1202 	strd	r1, r2, [r7, #8]
 800d70a:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp += 0x00800;
 800d70e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d712:	f511 6100 	adds.w	r1, r1, #2048	; 0x800
 800d716:	f142 0200 	adc.w	r2, r2, #0
 800d71a:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp  = tmp >> 12;
 800d71e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d722:	0b0b      	lsrs	r3, r1, #12
 800d724:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800d728:	0b14      	lsrs	r4, r2, #12
 800d72a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800d732:	697b      	ldr	r3, [r7, #20]
}
 800d734:	4618      	mov	r0, r3
 800d736:	371c      	adds	r7, #28
 800d738:	46bd      	mov	sp, r7
 800d73a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d73c <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	4603      	mov	r3, r0
 800d744:	6039      	str	r1, [r7, #0]
 800d746:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800d748:	2300      	movs	r3, #0
 800d74a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
 800d750:	88fb      	ldrh	r3, [r7, #6]
 800d752:	4618      	mov	r0, r3
 800d754:	f000 f837 	bl	800d7c6 <VL53L1_decode_timeout>
 800d758:	60f8      	str	r0, [r7, #12]
		VL53L1_decode_timeout(timeout_encoded);

	timeout_us    =
 800d75a:	6839      	ldr	r1, [r7, #0]
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f7ff ffb4 	bl	800d6ca <VL53L1_calc_timeout_us>
 800d762:	60b8      	str	r0, [r7, #8]
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);

	LOG_FUNCTION_END(0);

	return timeout_us;
 800d764:	68bb      	ldr	r3, [r7, #8]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800d76e:	b480      	push	{r7}
 800d770:	b087      	sub	sp, #28
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d776:	2300      	movs	r3, #0
 800d778:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d017      	beq.n	800d7b8 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d78e:	e005      	b.n	800d79c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	085b      	lsrs	r3, r3, #1
 800d794:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d796:	89fb      	ldrh	r3, [r7, #14]
 800d798:	3301      	adds	r3, #1
 800d79a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1f4      	bne.n	800d790 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d7a6:	89fb      	ldrh	r3, [r7, #14]
 800d7a8:	021b      	lsls	r3, r3, #8
 800d7aa:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d7b4:	4413      	add	r3, r2
 800d7b6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d7b8:	8afb      	ldrh	r3, [r7, #22]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b085      	sub	sp, #20
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d7d4:	88fb      	ldrh	r3, [r7, #6]
 800d7d6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d7d8:	88fa      	ldrh	r2, [r7, #6]
 800d7da:	0a12      	lsrs	r2, r2, #8
 800d7dc:	b292      	uxth	r2, r2
 800d7de:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3714      	adds	r7, #20
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b088      	sub	sp, #32
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	60b9      	str	r1, [r7, #8]
 800d7fc:	607a      	str	r2, [r7, #4]
 800d7fe:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d800:	2300      	movs	r3, #0
 800d802:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800d804:	2300      	movs	r3, #0
 800d806:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800d810:	887b      	ldrh	r3, [r7, #2]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d102      	bne.n	800d81c <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800d816:	23f1      	movs	r3, #241	; 0xf1
 800d818:	77fb      	strb	r3, [r7, #31]
 800d81a:	e05d      	b.n	800d8d8 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800d81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81e:	799a      	ldrb	r2, [r3, #6]
		macro_period_us =
 800d820:	887b      	ldrh	r3, [r7, #2]
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff fe8f 	bl	800d548 <VL53L1_calc_macro_period_us>
 800d82a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 800d82c:	6979      	ldr	r1, [r7, #20]
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f7ff ff1c 	bl	800d66c <VL53L1_calc_timeout_mclks>
 800d834:	61b8      	str	r0, [r7, #24]
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	2bff      	cmp	r3, #255	; 0xff
 800d83a:	d901      	bls.n	800d840 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800d83c:	23ff      	movs	r3, #255	; 0xff
 800d83e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 800d848:	6979      	ldr	r1, [r7, #20]
 800d84a:	68b8      	ldr	r0, [r7, #8]
 800d84c:	f7ff ff25 	bl	800d69a <VL53L1_calc_encoded_timeout>
 800d850:	4603      	mov	r3, r0
 800d852:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d854:	8a7b      	ldrh	r3, [r7, #18]
 800d856:	0a1b      	lsrs	r3, r3, #8
 800d858:	b29b      	uxth	r3, r3
 800d85a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d860:	8a7b      	ldrh	r3, [r7, #18]
 800d862:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 800d868:	6979      	ldr	r1, [r7, #20]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff ff15 	bl	800d69a <VL53L1_calc_encoded_timeout>
 800d870:	4603      	mov	r3, r0
 800d872:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d874:	8a7b      	ldrh	r3, [r7, #18]
 800d876:	0a1b      	lsrs	r3, r3, #8
 800d878:	b29b      	uxth	r3, r3
 800d87a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d880:	8a7b      	ldrh	r3, [r7, #18]
 800d882:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	7a5a      	ldrb	r2, [r3, #9]
		macro_period_us =
 800d88c:	887b      	ldrh	r3, [r7, #2]
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff fe59 	bl	800d548 <VL53L1_calc_macro_period_us>
 800d896:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 800d898:	6979      	ldr	r1, [r7, #20]
 800d89a:	68b8      	ldr	r0, [r7, #8]
 800d89c:	f7ff fefd 	bl	800d69a <VL53L1_calc_encoded_timeout>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	827b      	strh	r3, [r7, #18]
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d8a4:	8a7b      	ldrh	r3, [r7, #18]
 800d8a6:	0a1b      	lsrs	r3, r3, #8
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d8b0:	8a7b      	ldrh	r3, [r7, #18]
 800d8b2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800d8b8:	6979      	ldr	r1, [r7, #20]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7ff feed 	bl	800d69a <VL53L1_calc_encoded_timeout>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800d8c4:	8a7b      	ldrh	r3, [r7, #18]
 800d8c6:	0a1b      	lsrs	r3, r3, #8
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800d8d0:	8a7b      	ldrh	r3, [r7, #18]
 800d8d2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800d8d8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3720      	adds	r7, #32
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	603a      	str	r2, [r7, #0]
 800d8ee:	71fb      	strb	r3, [r7, #7]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	2b07      	cmp	r3, #7
 800d8f8:	d90a      	bls.n	800d910 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800d8fa:	79bb      	ldrb	r3, [r7, #6]
 800d8fc:	00db      	lsls	r3, r3, #3
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	79fb      	ldrb	r3, [r7, #7]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	b2db      	uxtb	r3, r3
 800d906:	3b71      	subs	r3, #113	; 0x71
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800d90e:	e00a      	b.n	800d926 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800d910:	79bb      	ldrb	r3, [r7, #6]
 800d912:	f1c3 030f 	rsb	r3, r3, #15
 800d916:	b2db      	uxtb	r3, r3
 800d918:	00db      	lsls	r3, r3, #3
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	4413      	add	r3, r2
 800d920:	b2da      	uxtb	r2, r3
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	701a      	strb	r2, [r3, #0]
}
 800d926:	bf00      	nop
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800d932:	b480      	push	{r7}
 800d934:	b085      	sub	sp, #20
 800d936:	af00      	add	r7, sp, #0
 800d938:	4603      	mov	r3, r0
 800d93a:	60b9      	str	r1, [r7, #8]
 800d93c:	607a      	str	r2, [r7, #4]
 800d93e:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
 800d942:	091b      	lsrs	r3, r3, #4
 800d944:	b2da      	uxtb	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
 800d94c:	f003 030f 	and.w	r3, r3, #15
 800d950:	b2da      	uxtb	r2, r3
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	701a      	strb	r2, [r3, #0]

}
 800d956:	bf00      	nop
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800d962:	b480      	push	{r7}
 800d964:	b083      	sub	sp, #12
 800d966:	af00      	add	r7, sp, #0
 800d968:	4603      	mov	r3, r0
 800d96a:	603a      	str	r2, [r7, #0]
 800d96c:	71fb      	strb	r3, [r7, #7]
 800d96e:	460b      	mov	r3, r1
 800d970:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800d972:	79bb      	ldrb	r3, [r7, #6]
 800d974:	011b      	lsls	r3, r3, #4
 800d976:	b2da      	uxtb	r2, r3
 800d978:	79fb      	ldrb	r3, [r7, #7]
 800d97a:	4413      	add	r3, r2
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	701a      	strb	r2, [r3, #0]

}
 800d982:	bf00      	nop
 800d984:	370c      	adds	r7, #12
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr

0800d98e <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800d98e:	b480      	push	{r7}
 800d990:	b085      	sub	sp, #20
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d996:	2300      	movs	r3, #0
 800d998:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800d9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3714      	adds	r7, #20
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	b085      	sub	sp, #20
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	22ff      	movs	r2, #255	; 0xff
 800da0a:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2200      	movs	r2, #0
 800da12:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	2200      	movs	r2, #0
 800da1a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	2200      	movs	r2, #0
 800da22:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d005      	beq.n	800da3c <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 800da42:	2b00      	cmp	r3, #0
 800da44:	d005      	beq.n	800da52 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2200      	movs	r2, #0
 800da56:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 800da5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800da6a:	b480      	push	{r7}
 800da6c:	b087      	sub	sp, #28
 800da6e:	af00      	add	r7, sp, #0
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	60b9      	str	r1, [r7, #8]
 800da74:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da76:	2300      	movs	r3, #0
 800da78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2201      	movs	r2, #1
 800da7e:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	228b      	movs	r2, #139	; 0x8b
 800da8a:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800da92:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2202      	movs	r2, #2
 800da98:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 800da9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	371c      	adds	r7, #28
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800daaa:	b480      	push	{r7}
 800daac:	b085      	sub	sp, #20
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800dad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800daea:	f003 0303 	and.w	r3, r3, #3
 800daee:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800dafa:	4413      	add	r3, r2
 800dafc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800db24:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3714      	adds	r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db40:	2300      	movs	r3, #0
 800db42:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f8b3 31de 	ldrh.w	r3, [r3, #478]	; 0x1de
 800db4a:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800db52:	4413      	add	r3, r2
 800db54:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db5c:	d302      	bcc.n	800db64 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 800db5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db62:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	041b      	lsls	r3, r3, #16
 800db68:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800db70:	2b00      	cmp	r3, #0
 800db72:	d102      	bne.n	800db7a <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800db74:	23f1      	movs	r3, #241	; 0xf1
 800db76:	75fb      	strb	r3, [r7, #23]
 800db78:	e035      	b.n	800dbe6 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800db80:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	fbb3 f3f2 	udiv	r3, r3, r2
 800db88:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800db98:	041b      	lsls	r3, r3, #16
 800db9a:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d102      	bne.n	800dbac <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800dba6:	23f1      	movs	r3, #241	; 0xf1
 800dba8:	75fb      	strb	r3, [r7, #23]
 800dbaa:	e01c      	b.n	800dbe6 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
			utemp32a = utemp32a /
 800dbb2:	693a      	ldr	r2, [r7, #16]
 800dbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbb8:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbc0:	d302      	bcc.n	800dbc8 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 800dbc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbc6:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 800dbe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbea:	f113 0f0f 	cmn.w	r3, #15
 800dbee:	d110      	bne.n	800dc12 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dbf6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2202      	movs	r2, #2
 800dc0a:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800dc12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	371c      	adds	r7, #28
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800dc22:	b480      	push	{r7}
 800dc24:	b085      	sub	sp, #20
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	4603      	mov	r3, r0
 800dc2a:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800dc30:	88fb      	ldrh	r3, [r7, #6]
 800dc32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc36:	fb92 f3f3 	sdiv	r3, r2, r3
 800dc3a:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b085      	sub	sp, #20
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	4603      	mov	r3, r0
 800dc52:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	005b      	lsls	r3, r3, #1
 800dc60:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800dc7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	da10      	bge.n	800dca8 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
 800dc88:	43db      	mvns	r3, r3
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 0307 	and.w	r3, r3, #7
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	3308      	adds	r3, #8
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	3b80      	subs	r3, #128	; 0x80
 800dc9e:	10db      	asrs	r3, r3, #3
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800dca6:	e00c      	b.n	800dcc2 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
 800dcaa:	f003 0307 	and.w	r3, r3, #7
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800dcba:	10db      	asrs	r3, r3, #3
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	701a      	strb	r2, [r3, #0]
}
 800dcc2:	bf00      	nop
 800dcc4:	3714      	adds	r7, #20
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b088      	sub	sp, #32
 800dcd2:	af02      	add	r7, sp, #8
 800dcd4:	60f8      	str	r0, [r7, #12]
 800dcd6:	60b9      	str	r1, [r7, #8]
 800dcd8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	330a      	adds	r3, #10
 800dcde:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800dcec:	b299      	uxth	r1, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	f7f4 f9a1 	bl	8002040 <HAL_I2C_Master_Transmit>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dd02:	693b      	ldr	r3, [r7, #16]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af02      	add	r7, sp, #8
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	330a      	adds	r3, #10
 800dd1c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800dd2a:	f043 0301 	orr.w	r3, r3, #1
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	b299      	uxth	r1, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	f7f4 fa8d 	bl	800225c <HAL_I2C_Master_Receive>
 800dd42:	4603      	mov	r3, r0
 800dd44:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dd46:	693b      	ldr	r3, [r7, #16]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	607a      	str	r2, [r7, #4]
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800dd60:	2300      	movs	r3, #0
 800dd62:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	2bff      	cmp	r3, #255	; 0xff
 800dd68:	d902      	bls.n	800dd70 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800dd6a:	f06f 0303 	mvn.w	r3, #3
 800dd6e:	e01d      	b.n	800ddac <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800dd70:	897b      	ldrh	r3, [r7, #10]
 800dd72:	0a1b      	lsrs	r3, r3, #8
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	4b0e      	ldr	r3, [pc, #56]	; (800ddb4 <VL53L1_WriteMulti+0x64>)
 800dd7a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800dd7c:	897b      	ldrh	r3, [r7, #10]
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	4b0c      	ldr	r3, [pc, #48]	; (800ddb4 <VL53L1_WriteMulti+0x64>)
 800dd82:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800dd84:	683a      	ldr	r2, [r7, #0]
 800dd86:	6879      	ldr	r1, [r7, #4]
 800dd88:	480b      	ldr	r0, [pc, #44]	; (800ddb8 <VL53L1_WriteMulti+0x68>)
 800dd8a:	f001 fced 	bl	800f768 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	3302      	adds	r3, #2
 800dd92:	461a      	mov	r2, r3
 800dd94:	4907      	ldr	r1, [pc, #28]	; (800ddb4 <VL53L1_WriteMulti+0x64>)
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f7ff ff99 	bl	800dcce <_I2CWrite>
 800dd9c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800dda4:	23f3      	movs	r3, #243	; 0xf3
 800dda6:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800dda8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20000b64 	.word	0x20000b64
 800ddb8:	20000b66 	.word	0x20000b66

0800ddbc <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	607a      	str	r2, [r7, #4]
 800ddc6:	603b      	str	r3, [r7, #0]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800ddd0:	897b      	ldrh	r3, [r7, #10]
 800ddd2:	0a1b      	lsrs	r3, r3, #8
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	4b11      	ldr	r3, [pc, #68]	; (800de20 <VL53L1_ReadMulti+0x64>)
 800ddda:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800dddc:	897b      	ldrh	r3, [r7, #10]
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	4b0f      	ldr	r3, [pc, #60]	; (800de20 <VL53L1_ReadMulti+0x64>)
 800dde2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800dde4:	2202      	movs	r2, #2
 800dde6:	490e      	ldr	r1, [pc, #56]	; (800de20 <VL53L1_ReadMulti+0x64>)
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff ff70 	bl	800dcce <_I2CWrite>
 800ddee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ddf6:	23f3      	movs	r3, #243	; 0xf3
 800ddf8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ddfa:	e00a      	b.n	800de12 <VL53L1_ReadMulti+0x56>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	6879      	ldr	r1, [r7, #4]
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f7ff ff83 	bl	800dd0c <_I2CRead>
 800de06:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <VL53L1_ReadMulti+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800de0e:	23f3      	movs	r3, #243	; 0xf3
 800de10:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800de12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20000b64 	.word	0x20000b64

0800de24 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	460b      	mov	r3, r1
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800de32:	2300      	movs	r3, #0
 800de34:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800de36:	897b      	ldrh	r3, [r7, #10]
 800de38:	0a1b      	lsrs	r3, r3, #8
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	4b11      	ldr	r3, [pc, #68]	; (800de84 <VL53L1_RdByte+0x60>)
 800de40:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800de42:	897b      	ldrh	r3, [r7, #10]
 800de44:	b2da      	uxtb	r2, r3
 800de46:	4b0f      	ldr	r3, [pc, #60]	; (800de84 <VL53L1_RdByte+0x60>)
 800de48:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800de4a:	2202      	movs	r2, #2
 800de4c:	490d      	ldr	r1, [pc, #52]	; (800de84 <VL53L1_RdByte+0x60>)
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f7ff ff3d 	bl	800dcce <_I2CWrite>
 800de54:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800de5c:	23f3      	movs	r3, #243	; 0xf3
 800de5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800de60:	e00a      	b.n	800de78 <VL53L1_RdByte+0x54>
    }
    status_int = _I2CRead(Dev, data, 1);
 800de62:	2201      	movs	r2, #1
 800de64:	6879      	ldr	r1, [r7, #4]
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f7ff ff50 	bl	800dd0c <_I2CRead>
 800de6c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800de74:	23f3      	movs	r3, #243	; 0xf3
 800de76:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800de78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	20000b64 	.word	0x20000b64

0800de88 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	460b      	mov	r3, r1
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800de96:	2300      	movs	r3, #0
 800de98:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800de9a:	897b      	ldrh	r3, [r7, #10]
 800de9c:	0a1b      	lsrs	r3, r3, #8
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	4b18      	ldr	r3, [pc, #96]	; (800df04 <VL53L1_RdWord+0x7c>)
 800dea4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800dea6:	897b      	ldrh	r3, [r7, #10]
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	4b16      	ldr	r3, [pc, #88]	; (800df04 <VL53L1_RdWord+0x7c>)
 800deac:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800deae:	2202      	movs	r2, #2
 800deb0:	4914      	ldr	r1, [pc, #80]	; (800df04 <VL53L1_RdWord+0x7c>)
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7ff ff0b 	bl	800dcce <_I2CWrite>
 800deb8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800dec0:	23f3      	movs	r3, #243	; 0xf3
 800dec2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dec4:	e017      	b.n	800def6 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800dec6:	2202      	movs	r2, #2
 800dec8:	490e      	ldr	r1, [pc, #56]	; (800df04 <VL53L1_RdWord+0x7c>)
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7ff ff1e 	bl	800dd0c <_I2CRead>
 800ded0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ded8:	23f3      	movs	r3, #243	; 0xf3
 800deda:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dedc:	e00b      	b.n	800def6 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800dede:	4b09      	ldr	r3, [pc, #36]	; (800df04 <VL53L1_RdWord+0x7c>)
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	021b      	lsls	r3, r3, #8
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	4b06      	ldr	r3, [pc, #24]	; (800df04 <VL53L1_RdWord+0x7c>)
 800deea:	785b      	ldrb	r3, [r3, #1]
 800deec:	b29b      	uxth	r3, r3
 800deee:	4413      	add	r3, r2
 800def0:	b29a      	uxth	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800def6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	20000b64 	.word	0x20000b64

0800df08 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800df10:	2300      	movs	r3, #0
 800df12:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800df1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3714      	adds	r7, #20
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
 800df32:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	4618      	mov	r0, r3
 800df38:	f7f2 ff66 	bl	8000e08 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
	...

0800df48 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	4a06      	ldr	r2, [pc, #24]	; (800df70 <VL53L1_WaitUs+0x28>)
 800df56:	fb82 1203 	smull	r1, r2, r2, r3
 800df5a:	1192      	asrs	r2, r2, #6
 800df5c:	17db      	asrs	r3, r3, #31
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	4618      	mov	r0, r3
 800df62:	f7f2 ff51 	bl	8000e08 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800df66:	2300      	movs	r3, #0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	10624dd3 	.word	0x10624dd3

0800df74 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800df74:	b590      	push	{r4, r7, lr}
 800df76:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	f107 040c 	add.w	r4, r7, #12
 800df80:	6020      	str	r0, [r4, #0]
 800df82:	f107 0008 	add.w	r0, r7, #8
 800df86:	6001      	str	r1, [r0, #0]
 800df88:	4619      	mov	r1, r3
 800df8a:	1dbb      	adds	r3, r7, #6
 800df8c:	801a      	strh	r2, [r3, #0]
 800df8e:	1d7b      	adds	r3, r7, #5
 800df90:	460a      	mov	r2, r1
 800df92:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800df94:	2300      	movs	r3, #0
 800df96:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800dfb8:	f107 0310 	add.w	r3, r7, #16
 800dfbc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dfc0:	4935      	ldr	r1, [pc, #212]	; (800e098 <VL53L1_WaitValueMaskEx+0x124>)
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f002 f83d 	bl	8010042 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800dfc8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff ff9b 	bl	800df08 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800dfd2:	e03f      	b.n	800e054 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800dfd4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10b      	bne.n	800dff4 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800dfdc:	f207 2213 	addw	r2, r7, #531	; 0x213
 800dfe0:	1dbb      	adds	r3, r7, #6
 800dfe2:	8819      	ldrh	r1, [r3, #0]
 800dfe4:	f107 030c 	add.w	r3, r7, #12
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	f7ff ff1b 	bl	800de24 <VL53L1_RdByte>
 800dfee:	4603      	mov	r3, r0
 800dff0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800dff4:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800dff8:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800dffc:	4013      	ands	r3, r2
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	1d7a      	adds	r2, r7, #5
 800e002:	7812      	ldrb	r2, [r2, #0]
 800e004:	429a      	cmp	r2, r3
 800e006:	d102      	bne.n	800e00e <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800e008:	2301      	movs	r3, #1
 800e00a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800e00e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e012:	2b00      	cmp	r3, #0
 800e014:	d112      	bne.n	800e03c <VL53L1_WaitValueMaskEx+0xc8>
 800e016:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10e      	bne.n	800e03c <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800e01e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00a      	beq.n	800e03c <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800e026:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800e02a:	f107 030c 	add.w	r3, r7, #12
 800e02e:	4611      	mov	r1, r2
 800e030:	6818      	ldr	r0, [r3, #0]
 800e032:	f7ff ff7a 	bl	800df2a <VL53L1_WaitMs>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800e03c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff ff61 	bl	800df08 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800e046:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e04a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800e054:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <VL53L1_WaitValueMaskEx+0xfe>
 800e05c:	f107 0308 	add.w	r3, r7, #8
 800e060:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	429a      	cmp	r2, r3
 800e068:	d203      	bcs.n	800e072 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800e06a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d0b0      	beq.n	800dfd4 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800e072:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <VL53L1_WaitValueMaskEx+0x114>
 800e07a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d102      	bne.n	800e088 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800e082:	23f9      	movs	r3, #249	; 0xf9
 800e084:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800e088:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800e092:	46bd      	mov	sp, r7
 800e094:	bd90      	pop	{r4, r7, pc}
 800e096:	bf00      	nop
 800e098:	08010648 	.word	0x08010648

0800e09c <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e0ae:	897b      	ldrh	r3, [r7, #10]
 800e0b0:	2b0a      	cmp	r3, #10
 800e0b2:	d802      	bhi.n	800e0ba <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e0b4:	f06f 0309 	mvn.w	r3, #9
 800e0b8:	e047      	b.n	800e14a <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0c2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	7852      	ldrb	r2, [r2, #1]
 800e0d0:	f002 020f 	and.w	r2, r2, #15
 800e0d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e0d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	7892      	ldrb	r2, [r2, #2]
 800e0e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e0e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e0e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	78d2      	ldrb	r2, [r2, #3]
 800e0f0:	f002 0203 	and.w	r2, r2, #3
 800e0f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e0f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	7912      	ldrb	r2, [r2, #4]
 800e100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e104:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e106:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	88d8      	ldrh	r0, [r3, #6]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3305      	adds	r3, #5
 800e110:	461a      	mov	r2, r3
 800e112:	2102      	movs	r1, #2
 800e114:	f7ff f90f 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e120:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e12a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	7a92      	ldrb	r2, [r2, #10]
 800e134:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e138:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e13a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800e144:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3718      	adds	r7, #24
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b086      	sub	sp, #24
 800e156:	af00      	add	r7, sp, #0
 800e158:	4603      	mov	r3, r0
 800e15a:	60b9      	str	r1, [r7, #8]
 800e15c:	607a      	str	r2, [r7, #4]
 800e15e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e160:	2300      	movs	r3, #0
 800e162:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e164:	89fb      	ldrh	r3, [r7, #14]
 800e166:	2b0a      	cmp	r3, #10
 800e168:	d802      	bhi.n	800e170 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e16a:	f06f 0309 	mvn.w	r3, #9
 800e16e:	e046      	b.n	800e1fe <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e178:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	3301      	adds	r3, #1
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	f003 030f 	and.w	r3, r3, #15
 800e188:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	3302      	adds	r3, #2
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e198:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	3303      	adds	r3, #3
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	f003 0303 	and.w	r3, r3, #3
 800e1a8:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1b8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	3305      	adds	r3, #5
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	2002      	movs	r0, #2
 800e1c6:	f7ff f8e0 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	79da      	ldrb	r2, [r3, #7]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	7a1a      	ldrb	r2, [r3, #8]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	3309      	adds	r3, #9
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1ec:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	7a9a      	ldrb	r2, [r3, #10]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800e1fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3718      	adds	r7, #24
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b086      	sub	sp, #24
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e210:	2300      	movs	r3, #0
 800e212:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d108      	bne.n	800e22e <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e21c:	f107 020c 	add.w	r2, r7, #12
 800e220:	230b      	movs	r3, #11
 800e222:	2101      	movs	r1, #1
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff fdc9 	bl	800ddbc <VL53L1_ReadMulti>
 800e22a:	4603      	mov	r3, r0
 800e22c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e22e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d108      	bne.n	800e248 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800e236:	f107 030c 	add.w	r3, r7, #12
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	4619      	mov	r1, r3
 800e23e:	200b      	movs	r0, #11
 800e240:	f7ff ff87 	bl	800e152 <VL53L1_i2c_decode_static_nvm_managed>
 800e244:	4603      	mov	r3, r0
 800e246:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e248:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	460b      	mov	r3, r1
 800e25e:	607a      	str	r2, [r7, #4]
 800e260:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e262:	2300      	movs	r3, #0
 800e264:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e266:	897b      	ldrh	r3, [r7, #10]
 800e268:	2b16      	cmp	r3, #22
 800e26a:	d802      	bhi.n	800e272 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e26c:	f06f 0309 	mvn.w	r3, #9
 800e270:	e076      	b.n	800e360 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e282:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e28c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e296:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800e2a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	7952      	ldrb	r2, [r2, #5]
 800e2aa:	f002 020f 	and.w	r2, r2, #15
 800e2ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e2b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800e2ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	79d2      	ldrb	r2, [r2, #7]
 800e2c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e2c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e2ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	7a12      	ldrb	r2, [r2, #8]
 800e2d4:	f002 0203 	and.w	r2, r2, #3
 800e2d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e2da:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	8958      	ldrh	r0, [r3, #10]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3309      	adds	r3, #9
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	2102      	movs	r1, #2
 800e2e8:	f7ff f825 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	330b      	adds	r3, #11
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	2102      	movs	r1, #2
 800e2fa:	f7ff f866 	bl	800d3ca <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	330d      	adds	r3, #13
 800e308:	461a      	mov	r2, r3
 800e30a:	2102      	movs	r1, #2
 800e30c:	f7ff f85d 	bl	800d3ca <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	8a18      	ldrh	r0, [r3, #16]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	330f      	adds	r3, #15
 800e318:	461a      	mov	r2, r3
 800e31a:	2102      	movs	r1, #2
 800e31c:	f7ff f80b 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800e326:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e32a:	b218      	sxth	r0, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3311      	adds	r3, #17
 800e330:	461a      	mov	r2, r3
 800e332:	2102      	movs	r1, #2
 800e334:	f7ff f849 	bl	800d3ca <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3313      	adds	r3, #19
 800e342:	461a      	mov	r2, r3
 800e344:	2102      	movs	r1, #2
 800e346:	f7ff f840 	bl	800d3ca <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3315      	adds	r3, #21
 800e354:	461a      	mov	r2, r3
 800e356:	2102      	movs	r1, #2
 800e358:	f7ff f837 	bl	800d3ca <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800e35c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e376:	2300      	movs	r3, #0
 800e378:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800e37a:	89fb      	ldrh	r3, [r7, #14]
 800e37c:	2b16      	cmp	r3, #22
 800e37e:	d802      	bhi.n	800e386 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e380:	f06f 0309 	mvn.w	r3, #9
 800e384:	e079      	b.n	800e47a <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	785a      	ldrb	r2, [r3, #1]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	789a      	ldrb	r2, [r3, #2]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	78da      	ldrb	r2, [r3, #3]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	791a      	ldrb	r2, [r3, #4]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	3305      	adds	r3, #5
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	f003 030f 	and.w	r3, r3, #15
 800e3b8:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	799a      	ldrb	r2, [r3, #6]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	3307      	adds	r3, #7
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3d0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	3308      	adds	r3, #8
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	f003 0303 	and.w	r3, r3, #3
 800e3e0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	3309      	adds	r3, #9
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	2002      	movs	r0, #2
 800e3ee:	f7fe ffcc 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	330b      	adds	r3, #11
 800e3fe:	4619      	mov	r1, r3
 800e400:	2002      	movs	r0, #2
 800e402:	f7ff f80d 	bl	800d420 <VL53L1_i2c_decode_int16_t>
 800e406:	4603      	mov	r3, r0
 800e408:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	330d      	adds	r3, #13
 800e412:	4619      	mov	r1, r3
 800e414:	2002      	movs	r0, #2
 800e416:	f7ff f803 	bl	800d420 <VL53L1_i2c_decode_int16_t>
 800e41a:	4603      	mov	r3, r0
 800e41c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	330f      	adds	r3, #15
 800e426:	4619      	mov	r1, r3
 800e428:	2002      	movs	r0, #2
 800e42a:	f7fe ffae 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800e42e:	4603      	mov	r3, r0
 800e430:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	3311      	adds	r3, #17
 800e43a:	4619      	mov	r1, r3
 800e43c:	2002      	movs	r0, #2
 800e43e:	f7fe ffef 	bl	800d420 <VL53L1_i2c_decode_int16_t>
 800e442:	4603      	mov	r3, r0
 800e444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e448:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	3313      	adds	r3, #19
 800e452:	4619      	mov	r1, r3
 800e454:	2002      	movs	r0, #2
 800e456:	f7fe ffe3 	bl	800d420 <VL53L1_i2c_decode_int16_t>
 800e45a:	4603      	mov	r3, r0
 800e45c:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	3315      	adds	r3, #21
 800e466:	4619      	mov	r1, r3
 800e468:	2002      	movs	r0, #2
 800e46a:	f7fe ffd9 	bl	800d420 <VL53L1_i2c_decode_int16_t>
 800e46e:	4603      	mov	r3, r0
 800e470:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800e476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3718      	adds	r7, #24
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b088      	sub	sp, #32
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e48c:	2300      	movs	r3, #0
 800e48e:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e490:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d108      	bne.n	800e4aa <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800e498:	f107 0208 	add.w	r2, r7, #8
 800e49c:	2317      	movs	r3, #23
 800e49e:	210d      	movs	r1, #13
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7ff fc8b 	bl	800ddbc <VL53L1_ReadMulti>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e4aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d108      	bne.n	800e4c4 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800e4b2:	f107 0308 	add.w	r3, r7, #8
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	2017      	movs	r0, #23
 800e4bc:	f7ff ff54 	bl	800e368 <VL53L1_i2c_decode_customer_nvm_managed>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e4c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	607a      	str	r2, [r7, #4]
 800e4dc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e4e2:	897b      	ldrh	r3, [r7, #10]
 800e4e4:	2b1f      	cmp	r3, #31
 800e4e6:	d802      	bhi.n	800e4ee <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e4e8:	f06f 0309 	mvn.w	r3, #9
 800e4ec:	e0cf      	b.n	800e68e <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	2102      	movs	r1, #2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe ff1d 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	7892      	ldrb	r2, [r2, #2]
 800e504:	f002 0201 	and.w	r2, r2, #1
 800e508:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e50a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	78d2      	ldrb	r2, [r2, #3]
 800e514:	f002 020f 	and.w	r2, r2, #15
 800e518:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e51a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	7912      	ldrb	r2, [r2, #4]
 800e524:	f002 020f 	and.w	r2, r2, #15
 800e528:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e52a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	7952      	ldrb	r2, [r2, #5]
 800e534:	f002 021f 	and.w	r2, r2, #31
 800e538:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e53a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	7992      	ldrb	r2, [r2, #6]
 800e544:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e548:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e54a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	79d2      	ldrb	r2, [r2, #7]
 800e554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e558:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e55a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800e560:	68fa      	ldr	r2, [r7, #12]
 800e562:	7a12      	ldrb	r2, [r2, #8]
 800e564:	f002 0201 	and.w	r2, r2, #1
 800e568:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800e56a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800e570:	68fa      	ldr	r2, [r7, #12]
 800e572:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800e574:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	7a92      	ldrb	r2, [r2, #10]
 800e57e:	f002 0201 	and.w	r2, r2, #1
 800e582:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800e584:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	7ad2      	ldrb	r2, [r2, #11]
 800e58e:	f002 0203 	and.w	r2, r2, #3
 800e592:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e594:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	7b12      	ldrb	r2, [r2, #12]
 800e59e:	f002 021f 	and.w	r2, r2, #31
 800e5a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800e5a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	7b52      	ldrb	r2, [r2, #13]
 800e5ae:	f002 0203 	and.w	r2, r2, #3
 800e5b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800e5b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	7b92      	ldrb	r2, [r2, #14]
 800e5be:	f002 0203 	and.w	r2, r2, #3
 800e5c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800e5c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	7bd2      	ldrb	r2, [r2, #15]
 800e5ce:	f002 0207 	and.w	r2, r2, #7
 800e5d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800e5d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800e5da:	68fa      	ldr	r2, [r7, #12]
 800e5dc:	7c12      	ldrb	r2, [r2, #16]
 800e5de:	f002 021f 	and.w	r2, r2, #31
 800e5e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800e5e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	7c52      	ldrb	r2, [r2, #17]
 800e5ee:	f002 0201 	and.w	r2, r2, #1
 800e5f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800e5f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e5fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e608:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e612:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e61c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800e626:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800e630:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	8b18      	ldrh	r0, [r3, #24]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	3318      	adds	r3, #24
 800e63a:	461a      	mov	r2, r3
 800e63c:	2102      	movs	r1, #2
 800e63e:	f7fe fe7a 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800e64a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800e650:	68fa      	ldr	r2, [r7, #12]
 800e652:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800e654:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	7f12      	ldrb	r2, [r2, #28]
 800e65e:	f002 020f 	and.w	r2, r2, #15
 800e662:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800e664:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800e66e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	7f92      	ldrb	r2, [r2, #30]
 800e678:	f002 020f 	and.w	r2, r2, #15
 800e67c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800e67e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800e688:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3718      	adds	r7, #24
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b086      	sub	sp, #24
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	60f8      	str	r0, [r7, #12]
 800e69e:	460b      	mov	r3, r1
 800e6a0:	607a      	str	r2, [r7, #4]
 800e6a2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e6a8:	897b      	ldrh	r3, [r7, #10]
 800e6aa:	2b15      	cmp	r3, #21
 800e6ac:	d802      	bhi.n	800e6b4 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e6ae:	f06f 0309 	mvn.w	r3, #9
 800e6b2:	e070      	b.n	800e796 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e6c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800e6ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800e6d4:	68fa      	ldr	r2, [r7, #12]
 800e6d6:	78d2      	ldrb	r2, [r2, #3]
 800e6d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e6dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800e6de:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800e6e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6e8:	b298      	uxth	r0, r3
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	2102      	movs	r1, #2
 800e6f2:	f7fe fe20 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	7992      	ldrb	r2, [r2, #6]
 800e6fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e702:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e704:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800e70e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e718:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	7a52      	ldrb	r2, [r2, #9]
 800e722:	f002 0201 	and.w	r2, r2, #1
 800e726:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e728:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	7a92      	ldrb	r2, [r2, #10]
 800e732:	f002 0207 	and.w	r2, r2, #7
 800e736:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e738:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	8998      	ldrh	r0, [r3, #12]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	330c      	adds	r3, #12
 800e742:	461a      	mov	r2, r3
 800e744:	2102      	movs	r1, #2
 800e746:	f7fe fdf6 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	89d8      	ldrh	r0, [r3, #14]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	330e      	adds	r3, #14
 800e752:	461a      	mov	r2, r3
 800e754:	2102      	movs	r1, #2
 800e756:	f7fe fdee 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	8a18      	ldrh	r0, [r3, #16]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3310      	adds	r3, #16
 800e762:	461a      	mov	r2, r3
 800e764:	2102      	movs	r1, #2
 800e766:	f7fe fde6 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800e76e:	68fa      	ldr	r2, [r7, #12]
 800e770:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800e772:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800e77c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800e786:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800e790:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3718      	adds	r7, #24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b086      	sub	sp, #24
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e7b0:	897b      	ldrh	r3, [r7, #10]
 800e7b2:	2b16      	cmp	r3, #22
 800e7b4:	d802      	bhi.n	800e7bc <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e7b6:	f06f 0309 	mvn.w	r3, #9
 800e7ba:	e06e      	b.n	800e89a <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	f003 030f 	and.w	r3, r3, #15
 800e7c4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800e7d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	7892      	ldrb	r2, [r2, #2]
 800e7dc:	f002 020f 	and.w	r2, r2, #15
 800e7e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e7e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800e7ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	7912      	ldrb	r2, [r2, #4]
 800e7f6:	f002 020f 	and.w	r2, r2, #15
 800e7fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800e7fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800e806:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	7992      	ldrb	r2, [r2, #6]
 800e810:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e814:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e816:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	79d2      	ldrb	r2, [r2, #7]
 800e820:	f002 020f 	and.w	r2, r2, #15
 800e824:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800e826:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800e830:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	7a52      	ldrb	r2, [r2, #9]
 800e83a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e83e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e840:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	8958      	ldrh	r0, [r3, #10]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	330a      	adds	r3, #10
 800e84a:	461a      	mov	r2, r3
 800e84c:	2102      	movs	r1, #2
 800e84e:	f7fe fd72 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	8998      	ldrh	r0, [r3, #12]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	330c      	adds	r3, #12
 800e85a:	461a      	mov	r2, r3
 800e85c:	2102      	movs	r1, #2
 800e85e:	f7fe fd6a 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800e86a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800e874:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6918      	ldr	r0, [r3, #16]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	3312      	adds	r3, #18
 800e87e:	461a      	mov	r2, r3
 800e880:	2104      	movs	r1, #4
 800e882:	f7fe fdf6 	bl	800d472 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	7d12      	ldrb	r2, [r2, #20]
 800e88e:	f002 0201 	and.w	r2, r2, #1
 800e892:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800e894:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b086      	sub	sp, #24
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	607a      	str	r2, [r7, #4]
 800e8ae:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800e8b4:	897b      	ldrh	r3, [r7, #10]
 800e8b6:	2b11      	cmp	r3, #17
 800e8b8:	d802      	bhi.n	800e8c0 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e8ba:	f06f 0309 	mvn.w	r3, #9
 800e8be:	e071      	b.n	800e9a4 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	f003 0303 	and.w	r3, r3, #3
 800e8c8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	8858      	ldrh	r0, [r3, #2]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	2102      	movs	r1, #2
 800e8da:	f7fe fd2c 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	8898      	ldrh	r0, [r3, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	3303      	adds	r3, #3
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	2102      	movs	r1, #2
 800e8ea:	f7fe fd24 	bl	800d336 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	7992      	ldrb	r2, [r2, #6]
 800e8f6:	f002 0201 	and.w	r2, r2, #1
 800e8fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800e8fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	79d2      	ldrb	r2, [r2, #7]
 800e906:	f002 0207 	and.w	r2, r2, #7
 800e90a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800e90c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800e912:	68fa      	ldr	r2, [r7, #12]
 800e914:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800e916:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800e920:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	7a92      	ldrb	r2, [r2, #10]
 800e92a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e92e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800e930:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	7ad2      	ldrb	r2, [r2, #11]
 800e93a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e93e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800e940:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	7b12      	ldrb	r2, [r2, #12]
 800e94a:	f002 0203 	and.w	r2, r2, #3
 800e94e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800e950:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	7b52      	ldrb	r2, [r2, #13]
 800e95a:	f002 0203 	and.w	r2, r2, #3
 800e95e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800e960:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	7b92      	ldrb	r2, [r2, #14]
 800e96a:	f002 020f 	and.w	r2, r2, #15
 800e96e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800e970:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800e97a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800e984:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800e98e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	7c92      	ldrb	r2, [r2, #18]
 800e998:	f002 0203 	and.w	r2, r2, #3
 800e99c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800e99e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800e9a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b087      	sub	sp, #28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800e9be:	897b      	ldrh	r3, [r7, #10]
 800e9c0:	2b04      	cmp	r3, #4
 800e9c2:	d802      	bhi.n	800e9ca <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e9c4:	f06f 0309 	mvn.w	r3, #9
 800e9c8:	e025      	b.n	800ea16 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	7852      	ldrb	r2, [r2, #1]
 800e9e0:	f002 0201 	and.w	r2, r2, #1
 800e9e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800e9e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	7892      	ldrb	r2, [r2, #2]
 800e9f0:	f002 0201 	and.w	r2, r2, #1
 800e9f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800e9f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	78d2      	ldrb	r2, [r2, #3]
 800ea00:	f002 0203 	and.w	r2, r2, #3
 800ea04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ea06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800ea10:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ea12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	371c      	adds	r7, #28
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b084      	sub	sp, #16
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ea30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d108      	bne.n	800ea4a <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 800ea38:	f107 0308 	add.w	r3, r7, #8
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	2105      	movs	r1, #5
 800ea40:	6838      	ldr	r0, [r7, #0]
 800ea42:	f7ff ffb3 	bl	800e9ac <VL53L1_i2c_encode_system_control>
 800ea46:	4603      	mov	r3, r0
 800ea48:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800ea4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d108      	bne.n	800ea64 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 800ea52:	f107 0208 	add.w	r2, r7, #8
 800ea56:	2305      	movs	r3, #5
 800ea58:	2183      	movs	r1, #131	; 0x83
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7ff f978 	bl	800dd50 <VL53L1_WriteMulti>
 800ea60:	4603      	mov	r3, r0
 800ea62:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800ea64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3710      	adds	r7, #16
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b086      	sub	sp, #24
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4603      	mov	r3, r0
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ea82:	89fb      	ldrh	r3, [r7, #14]
 800ea84:	2b2b      	cmp	r3, #43	; 0x2b
 800ea86:	d802      	bhi.n	800ea8e <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ea88:	f06f 0309 	mvn.w	r3, #9
 800ea8c:	e0e2      	b.n	800ec54 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea96:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	785a      	ldrb	r2, [r3, #1]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	3302      	adds	r3, #2
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	f003 030f 	and.w	r3, r3, #15
 800eaae:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	78da      	ldrb	r2, [r3, #3]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	3304      	adds	r3, #4
 800eac0:	4619      	mov	r1, r3
 800eac2:	2002      	movs	r0, #2
 800eac4:	f7fe fc61 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eac8:	4603      	mov	r3, r0
 800eaca:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	3306      	adds	r3, #6
 800ead4:	4619      	mov	r1, r3
 800ead6:	2002      	movs	r0, #2
 800ead8:	f7fe fc57 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eadc:	4603      	mov	r3, r0
 800eade:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	3308      	adds	r3, #8
 800eae8:	4619      	mov	r1, r3
 800eaea:	2002      	movs	r0, #2
 800eaec:	f7fe fc4d 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	330a      	adds	r3, #10
 800eafc:	4619      	mov	r1, r3
 800eafe:	2002      	movs	r0, #2
 800eb00:	f7fe fc43 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb04:	4603      	mov	r3, r0
 800eb06:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	330c      	adds	r3, #12
 800eb10:	4619      	mov	r1, r3
 800eb12:	2002      	movs	r0, #2
 800eb14:	f7fe fc39 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	330e      	adds	r3, #14
 800eb24:	4619      	mov	r1, r3
 800eb26:	2002      	movs	r0, #2
 800eb28:	f7fe fc2f 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	3310      	adds	r3, #16
 800eb38:	4619      	mov	r1, r3
 800eb3a:	2002      	movs	r0, #2
 800eb3c:	f7fe fc25 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb40:	4603      	mov	r3, r0
 800eb42:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	3312      	adds	r3, #18
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	2002      	movs	r0, #2
 800eb50:	f7fe fc1b 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb54:	4603      	mov	r3, r0
 800eb56:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	3314      	adds	r3, #20
 800eb60:	4619      	mov	r1, r3
 800eb62:	2002      	movs	r0, #2
 800eb64:	f7fe fc11 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	3316      	adds	r3, #22
 800eb74:	4619      	mov	r1, r3
 800eb76:	2002      	movs	r0, #2
 800eb78:	f7fe fc07 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	3318      	adds	r3, #24
 800eb88:	4619      	mov	r1, r3
 800eb8a:	2002      	movs	r0, #2
 800eb8c:	f7fe fbfd 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eb90:	4603      	mov	r3, r0
 800eb92:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	331a      	adds	r3, #26
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	2002      	movs	r0, #2
 800eba0:	f7fe fbf3 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800eba4:	4603      	mov	r3, r0
 800eba6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	331c      	adds	r3, #28
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	2002      	movs	r0, #2
 800ebb4:	f7fe fbe9 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	331e      	adds	r3, #30
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	2002      	movs	r0, #2
 800ebc8:	f7fe fbdf 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	3320      	adds	r3, #32
 800ebd8:	4619      	mov	r1, r3
 800ebda:	2002      	movs	r0, #2
 800ebdc:	f7fe fbd5 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	3322      	adds	r3, #34	; 0x22
 800ebec:	4619      	mov	r1, r3
 800ebee:	2002      	movs	r0, #2
 800ebf0:	f7fe fbcb 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	3324      	adds	r3, #36	; 0x24
 800ec00:	4619      	mov	r1, r3
 800ec02:	2002      	movs	r0, #2
 800ec04:	f7fe fbc1 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	3326      	adds	r3, #38	; 0x26
 800ec14:	4619      	mov	r1, r3
 800ec16:	2002      	movs	r0, #2
 800ec18:	f7fe fbb7 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	3328      	adds	r3, #40	; 0x28
 800ec28:	4619      	mov	r1, r3
 800ec2a:	2002      	movs	r0, #2
 800ec2c:	f7fe fbad 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ec30:	4603      	mov	r3, r0
 800ec32:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800ec50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3718      	adds	r7, #24
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	4603      	mov	r3, r0
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
 800ec68:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ec6e:	89fb      	ldrh	r3, [r7, #14]
 800ec70:	2b20      	cmp	r3, #32
 800ec72:	d802      	bhi.n	800ec7a <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ec74:	f06f 0309 	mvn.w	r3, #9
 800ec78:	e04d      	b.n	800ed16 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800ec7a:	68b9      	ldr	r1, [r7, #8]
 800ec7c:	2004      	movs	r0, #4
 800ec7e:	f7fe fc21 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800ec82:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	2004      	movs	r0, #4
 800ec90:	f7fe fc18 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800ec94:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	3308      	adds	r3, #8
 800ec9e:	4619      	mov	r1, r3
 800eca0:	2004      	movs	r0, #4
 800eca2:	f7fe fc2c 	bl	800d4fe <VL53L1_i2c_decode_int32_t>
 800eca6:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	330c      	adds	r3, #12
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	2004      	movs	r0, #4
 800ecb4:	f7fe fc06 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800ecb8:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	3310      	adds	r3, #16
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	2004      	movs	r0, #4
 800ecc6:	f7fe fbfd 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800ecca:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	3314      	adds	r3, #20
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	2004      	movs	r0, #4
 800ecd8:	f7fe fbf4 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800ecdc:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	3318      	adds	r3, #24
 800ece6:	4619      	mov	r1, r3
 800ece8:	2004      	movs	r0, #4
 800ecea:	f7fe fc08 	bl	800d4fe <VL53L1_i2c_decode_int32_t>
 800ecee:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	331c      	adds	r3, #28
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	2004      	movs	r0, #4
 800ecfc:	f7fe fbe2 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800ed00:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800ed12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b086      	sub	sp, #24
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	4603      	mov	r3, r0
 800ed26:	60b9      	str	r1, [r7, #8]
 800ed28:	607a      	str	r2, [r7, #4]
 800ed2a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ed30:	89fb      	ldrh	r3, [r7, #14]
 800ed32:	2b37      	cmp	r3, #55	; 0x37
 800ed34:	d802      	bhi.n	800ed3c <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ed36:	f06f 0309 	mvn.w	r3, #9
 800ed3a:	e15e      	b.n	800effa <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	2002      	movs	r0, #2
 800ed40:	f7fe fb23 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ed44:	4603      	mov	r3, r0
 800ed46:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	3302      	adds	r3, #2
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed56:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	3303      	adds	r3, #3
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed66:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	f003 0303 	and.w	r3, r3, #3
 800ed76:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	3305      	adds	r3, #5
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	3306      	adds	r3, #6
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed96:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	3307      	adds	r3, #7
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eda6:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	3308      	adds	r3, #8
 800edb0:	4619      	mov	r1, r3
 800edb2:	2002      	movs	r0, #2
 800edb4:	f7fe fae9 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800edb8:	4603      	mov	r3, r0
 800edba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800edbe:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	330a      	adds	r3, #10
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	f003 0303 	and.w	r3, r3, #3
 800edce:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	330b      	adds	r3, #11
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	f003 0303 	and.w	r3, r3, #3
 800edde:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	330c      	adds	r3, #12
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	f003 030f 	and.w	r3, r3, #15
 800edee:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	330d      	adds	r3, #13
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	f003 0307 	and.w	r3, r3, #7
 800edfe:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	330e      	adds	r3, #14
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	330f      	adds	r3, #15
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	f003 0303 	and.w	r3, r3, #3
 800ee1e:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	7c1a      	ldrb	r2, [r3, #16]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	7c5a      	ldrb	r2, [r3, #17]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	3312      	adds	r3, #18
 800ee38:	4619      	mov	r1, r3
 800ee3a:	2002      	movs	r0, #2
 800ee3c:	f7fe faa5 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ee40:	4603      	mov	r3, r0
 800ee42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee46:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	3316      	adds	r3, #22
 800ee50:	4619      	mov	r1, r3
 800ee52:	2002      	movs	r0, #2
 800ee54:	f7fe fa99 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	3318      	adds	r3, #24
 800ee64:	4619      	mov	r1, r3
 800ee66:	2002      	movs	r0, #2
 800ee68:	f7fe fa8f 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	331a      	adds	r3, #26
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	f003 0301 	and.w	r3, r3, #1
 800ee7e:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	331b      	adds	r3, #27
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	f003 0307 	and.w	r3, r3, #7
 800ee8e:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	7f1a      	ldrb	r2, [r3, #28]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	7f5a      	ldrb	r2, [r3, #29]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	331e      	adds	r3, #30
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eeae:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	331f      	adds	r3, #31
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eebe:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	3320      	adds	r3, #32
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	f003 0303 	and.w	r3, r3, #3
 800eece:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	3321      	adds	r3, #33	; 0x21
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	f003 030f 	and.w	r3, r3, #15
 800eede:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	3325      	adds	r3, #37	; 0x25
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	f003 0301 	and.w	r3, r3, #1
 800ef12:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	3326      	adds	r3, #38	; 0x26
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	f003 0303 	and.w	r3, r3, #3
 800ef24:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	3327      	adds	r3, #39	; 0x27
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	f003 031f 	and.w	r3, r3, #31
 800ef36:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	3328      	adds	r3, #40	; 0x28
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	f003 031f 	and.w	r3, r3, #31
 800ef48:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	3329      	adds	r3, #41	; 0x29
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	f003 031f 	and.w	r3, r3, #31
 800ef5a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	332a      	adds	r3, #42	; 0x2a
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	f003 0301 	and.w	r3, r3, #1
 800ef6c:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	332b      	adds	r3, #43	; 0x2b
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	f003 0301 	and.w	r3, r3, #1
 800ef7e:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	332c      	adds	r3, #44	; 0x2c
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	f003 0303 	and.w	r3, r3, #3
 800ef90:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	332d      	adds	r3, #45	; 0x2d
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efa2:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	332e      	adds	r3, #46	; 0x2e
 800efae:	4619      	mov	r1, r3
 800efb0:	2004      	movs	r0, #4
 800efb2:	f7fe fa87 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800efb6:	4603      	mov	r3, r0
 800efb8:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	3332      	adds	r3, #50	; 0x32
 800efc4:	4619      	mov	r1, r3
 800efc6:	2004      	movs	r0, #4
 800efc8:	f7fe fa7c 	bl	800d4c4 <VL53L1_i2c_decode_uint32_t>
 800efcc:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	3336      	adds	r3, #54	; 0x36
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	3337      	adds	r3, #55	; 0x37
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	f003 0301 	and.w	r3, r3, #1
 800efee:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800eff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3718      	adds	r7, #24
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b086      	sub	sp, #24
 800f006:	af00      	add	r7, sp, #0
 800f008:	4603      	mov	r3, r0
 800f00a:	60b9      	str	r1, [r7, #8]
 800f00c:	607a      	str	r2, [r7, #4]
 800f00e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f010:	2300      	movs	r3, #0
 800f012:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800f014:	89fb      	ldrh	r3, [r7, #14]
 800f016:	2b30      	cmp	r3, #48	; 0x30
 800f018:	d802      	bhi.n	800f020 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f01a:	f06f 0309 	mvn.w	r3, #9
 800f01e:	e112      	b.n	800f246 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	785a      	ldrb	r2, [r3, #1]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	789a      	ldrb	r2, [r3, #2]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	3303      	adds	r3, #3
 800f03c:	4619      	mov	r1, r3
 800f03e:	2002      	movs	r0, #2
 800f040:	f7fe f9a3 	bl	800d38a <VL53L1_i2c_decode_uint16_t>
 800f044:	4603      	mov	r3, r0
 800f046:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	3305      	adds	r3, #5
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f056:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	3306      	adds	r3, #6
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	f003 0307 	and.w	r3, r3, #7
 800f066:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	3307      	adds	r3, #7
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	f003 0307 	and.w	r3, r3, #7
 800f076:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	3308      	adds	r3, #8
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f086:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	3309      	adds	r3, #9
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f096:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	330a      	adds	r3, #10
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	f003 0301 	and.w	r3, r3, #1
 800f0a6:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	330b      	adds	r3, #11
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0b6:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	330c      	adds	r3, #12
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	f003 0301 	and.w	r3, r3, #1
 800f0c6:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	330d      	adds	r3, #13
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0d6:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	330e      	adds	r3, #14
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0e6:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	7bda      	ldrb	r2, [r3, #15]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	7c1a      	ldrb	r2, [r3, #16]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	7c5a      	ldrb	r2, [r3, #17]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	7c9a      	ldrb	r2, [r3, #18]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	7cda      	ldrb	r2, [r3, #19]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	7d1a      	ldrb	r2, [r3, #20]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	7d5a      	ldrb	r2, [r3, #21]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	7d9a      	ldrb	r2, [r3, #22]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	7dda      	ldrb	r2, [r3, #23]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	7e1a      	ldrb	r2, [r3, #24]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	7e5a      	ldrb	r2, [r3, #25]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	7e9a      	ldrb	r2, [r3, #26]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	7eda      	ldrb	r2, [r3, #27]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	7f1a      	ldrb	r2, [r3, #28]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	7f5a      	ldrb	r2, [r3, #29]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	7f9a      	ldrb	r2, [r3, #30]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	7fda      	ldrb	r2, [r3, #31]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800f242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f246:	4618      	mov	r0, r3
 800f248:	3718      	adds	r7, #24
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b090      	sub	sp, #64	; 0x40
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f258:	2300      	movs	r3, #0
 800f25a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f25e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10a      	bne.n	800f27c <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800f266:	f107 020c 	add.w	r2, r7, #12
 800f26a:	2331      	movs	r3, #49	; 0x31
 800f26c:	f240 110f 	movw	r1, #271	; 0x10f
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7fe fda3 	bl	800ddbc <VL53L1_ReadMulti>
 800f276:	4603      	mov	r3, r0
 800f278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f27c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f280:	2b00      	cmp	r3, #0
 800f282:	d109      	bne.n	800f298 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800f284:	f107 030c 	add.w	r3, r7, #12
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	4619      	mov	r1, r3
 800f28c:	2031      	movs	r0, #49	; 0x31
 800f28e:	f7ff feb8 	bl	800f002 <VL53L1_i2c_decode_nvm_copy_data>
 800f292:	4603      	mov	r3, r0
 800f294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f298:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3740      	adds	r7, #64	; 0x40
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b086      	sub	sp, #24
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800f2b2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7fe fe46 	bl	800df48 <VL53L1_WaitUs>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800f2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d10b      	bne.n	800f2e0 <VL53L1_poll_for_boot_completion+0x3c>
		status =
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	9301      	str	r3, [sp, #4]
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	22e5      	movs	r2, #229	; 0xe5
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7fe fe4c 	bl	800df74 <VL53L1_WaitValueMaskEx>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800f2e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d103      	bne.n	800f2f0 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800f2e8:	2103      	movs	r1, #3
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7fd fe06 	bl	800cefc <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800f2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800f2fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f334 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f300:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f302:	e003      	b.n	800f30c <LoopCopyDataInit>

0800f304 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f304:	4b0c      	ldr	r3, [pc, #48]	; (800f338 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f306:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f308:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f30a:	3104      	adds	r1, #4

0800f30c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f30c:	480b      	ldr	r0, [pc, #44]	; (800f33c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f30e:	4b0c      	ldr	r3, [pc, #48]	; (800f340 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f310:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f312:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f314:	d3f6      	bcc.n	800f304 <CopyDataInit>
  ldr  r2, =_sbss
 800f316:	4a0b      	ldr	r2, [pc, #44]	; (800f344 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f318:	e002      	b.n	800f320 <LoopFillZerobss>

0800f31a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f31a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f31c:	f842 3b04 	str.w	r3, [r2], #4

0800f320 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f320:	4b09      	ldr	r3, [pc, #36]	; (800f348 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f322:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f324:	d3f9      	bcc.n	800f31a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f326:	f7f5 fa19 	bl	800475c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f32a:	f000 f98d 	bl	800f648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f32e:	f7f5 f84f 	bl	80043d0 <main>
  bx  lr    
 800f332:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800f334:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800f338:	08010714 	.word	0x08010714
  ldr  r0, =_sdata
 800f33c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f340:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 800f344:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 800f348:	20000c68 	.word	0x20000c68

0800f34c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f34c:	e7fe      	b.n	800f34c <ADC_IRQHandler>
	...

0800f350 <__sflush_r>:
 800f350:	898a      	ldrh	r2, [r1, #12]
 800f352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f356:	4605      	mov	r5, r0
 800f358:	0710      	lsls	r0, r2, #28
 800f35a:	460c      	mov	r4, r1
 800f35c:	d45a      	bmi.n	800f414 <__sflush_r+0xc4>
 800f35e:	684b      	ldr	r3, [r1, #4]
 800f360:	2b00      	cmp	r3, #0
 800f362:	dc05      	bgt.n	800f370 <__sflush_r+0x20>
 800f364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f366:	2b00      	cmp	r3, #0
 800f368:	dc02      	bgt.n	800f370 <__sflush_r+0x20>
 800f36a:	2000      	movs	r0, #0
 800f36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f372:	2e00      	cmp	r6, #0
 800f374:	d0f9      	beq.n	800f36a <__sflush_r+0x1a>
 800f376:	2300      	movs	r3, #0
 800f378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f37c:	682f      	ldr	r7, [r5, #0]
 800f37e:	602b      	str	r3, [r5, #0]
 800f380:	d033      	beq.n	800f3ea <__sflush_r+0x9a>
 800f382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	075a      	lsls	r2, r3, #29
 800f388:	d505      	bpl.n	800f396 <__sflush_r+0x46>
 800f38a:	6863      	ldr	r3, [r4, #4]
 800f38c:	1ac0      	subs	r0, r0, r3
 800f38e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f390:	b10b      	cbz	r3, 800f396 <__sflush_r+0x46>
 800f392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f394:	1ac0      	subs	r0, r0, r3
 800f396:	2300      	movs	r3, #0
 800f398:	4602      	mov	r2, r0
 800f39a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f39c:	6a21      	ldr	r1, [r4, #32]
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b0      	blx	r6
 800f3a2:	1c43      	adds	r3, r0, #1
 800f3a4:	89a3      	ldrh	r3, [r4, #12]
 800f3a6:	d106      	bne.n	800f3b6 <__sflush_r+0x66>
 800f3a8:	6829      	ldr	r1, [r5, #0]
 800f3aa:	291d      	cmp	r1, #29
 800f3ac:	d84b      	bhi.n	800f446 <__sflush_r+0xf6>
 800f3ae:	4a2b      	ldr	r2, [pc, #172]	; (800f45c <__sflush_r+0x10c>)
 800f3b0:	40ca      	lsrs	r2, r1
 800f3b2:	07d6      	lsls	r6, r2, #31
 800f3b4:	d547      	bpl.n	800f446 <__sflush_r+0xf6>
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	6062      	str	r2, [r4, #4]
 800f3ba:	04d9      	lsls	r1, r3, #19
 800f3bc:	6922      	ldr	r2, [r4, #16]
 800f3be:	6022      	str	r2, [r4, #0]
 800f3c0:	d504      	bpl.n	800f3cc <__sflush_r+0x7c>
 800f3c2:	1c42      	adds	r2, r0, #1
 800f3c4:	d101      	bne.n	800f3ca <__sflush_r+0x7a>
 800f3c6:	682b      	ldr	r3, [r5, #0]
 800f3c8:	b903      	cbnz	r3, 800f3cc <__sflush_r+0x7c>
 800f3ca:	6560      	str	r0, [r4, #84]	; 0x54
 800f3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3ce:	602f      	str	r7, [r5, #0]
 800f3d0:	2900      	cmp	r1, #0
 800f3d2:	d0ca      	beq.n	800f36a <__sflush_r+0x1a>
 800f3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3d8:	4299      	cmp	r1, r3
 800f3da:	d002      	beq.n	800f3e2 <__sflush_r+0x92>
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f000 f9d7 	bl	800f790 <_free_r>
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	6360      	str	r0, [r4, #52]	; 0x34
 800f3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ea:	6a21      	ldr	r1, [r4, #32]
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	47b0      	blx	r6
 800f3f2:	1c41      	adds	r1, r0, #1
 800f3f4:	d1c6      	bne.n	800f384 <__sflush_r+0x34>
 800f3f6:	682b      	ldr	r3, [r5, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d0c3      	beq.n	800f384 <__sflush_r+0x34>
 800f3fc:	2b1d      	cmp	r3, #29
 800f3fe:	d001      	beq.n	800f404 <__sflush_r+0xb4>
 800f400:	2b16      	cmp	r3, #22
 800f402:	d101      	bne.n	800f408 <__sflush_r+0xb8>
 800f404:	602f      	str	r7, [r5, #0]
 800f406:	e7b0      	b.n	800f36a <__sflush_r+0x1a>
 800f408:	89a3      	ldrh	r3, [r4, #12]
 800f40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f414:	690f      	ldr	r7, [r1, #16]
 800f416:	2f00      	cmp	r7, #0
 800f418:	d0a7      	beq.n	800f36a <__sflush_r+0x1a>
 800f41a:	0793      	lsls	r3, r2, #30
 800f41c:	680e      	ldr	r6, [r1, #0]
 800f41e:	bf08      	it	eq
 800f420:	694b      	ldreq	r3, [r1, #20]
 800f422:	600f      	str	r7, [r1, #0]
 800f424:	bf18      	it	ne
 800f426:	2300      	movne	r3, #0
 800f428:	eba6 0807 	sub.w	r8, r6, r7
 800f42c:	608b      	str	r3, [r1, #8]
 800f42e:	f1b8 0f00 	cmp.w	r8, #0
 800f432:	dd9a      	ble.n	800f36a <__sflush_r+0x1a>
 800f434:	4643      	mov	r3, r8
 800f436:	463a      	mov	r2, r7
 800f438:	6a21      	ldr	r1, [r4, #32]
 800f43a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f43c:	4628      	mov	r0, r5
 800f43e:	47b0      	blx	r6
 800f440:	2800      	cmp	r0, #0
 800f442:	dc07      	bgt.n	800f454 <__sflush_r+0x104>
 800f444:	89a3      	ldrh	r3, [r4, #12]
 800f446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f44a:	81a3      	strh	r3, [r4, #12]
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295
 800f450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f454:	4407      	add	r7, r0
 800f456:	eba8 0800 	sub.w	r8, r8, r0
 800f45a:	e7e8      	b.n	800f42e <__sflush_r+0xde>
 800f45c:	20400001 	.word	0x20400001

0800f460 <_fflush_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	690b      	ldr	r3, [r1, #16]
 800f464:	4605      	mov	r5, r0
 800f466:	460c      	mov	r4, r1
 800f468:	b1db      	cbz	r3, 800f4a2 <_fflush_r+0x42>
 800f46a:	b118      	cbz	r0, 800f474 <_fflush_r+0x14>
 800f46c:	6983      	ldr	r3, [r0, #24]
 800f46e:	b90b      	cbnz	r3, 800f474 <_fflush_r+0x14>
 800f470:	f000 f860 	bl	800f534 <__sinit>
 800f474:	4b0c      	ldr	r3, [pc, #48]	; (800f4a8 <_fflush_r+0x48>)
 800f476:	429c      	cmp	r4, r3
 800f478:	d109      	bne.n	800f48e <_fflush_r+0x2e>
 800f47a:	686c      	ldr	r4, [r5, #4]
 800f47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f480:	b17b      	cbz	r3, 800f4a2 <_fflush_r+0x42>
 800f482:	4621      	mov	r1, r4
 800f484:	4628      	mov	r0, r5
 800f486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f48a:	f7ff bf61 	b.w	800f350 <__sflush_r>
 800f48e:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <_fflush_r+0x4c>)
 800f490:	429c      	cmp	r4, r3
 800f492:	d101      	bne.n	800f498 <_fflush_r+0x38>
 800f494:	68ac      	ldr	r4, [r5, #8]
 800f496:	e7f1      	b.n	800f47c <_fflush_r+0x1c>
 800f498:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <_fflush_r+0x50>)
 800f49a:	429c      	cmp	r4, r3
 800f49c:	bf08      	it	eq
 800f49e:	68ec      	ldreq	r4, [r5, #12]
 800f4a0:	e7ec      	b.n	800f47c <_fflush_r+0x1c>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	bd38      	pop	{r3, r4, r5, pc}
 800f4a6:	bf00      	nop
 800f4a8:	0801068c 	.word	0x0801068c
 800f4ac:	080106ac 	.word	0x080106ac
 800f4b0:	0801066c 	.word	0x0801066c

0800f4b4 <_cleanup_r>:
 800f4b4:	4901      	ldr	r1, [pc, #4]	; (800f4bc <_cleanup_r+0x8>)
 800f4b6:	f000 b8a9 	b.w	800f60c <_fwalk_reent>
 800f4ba:	bf00      	nop
 800f4bc:	0800f461 	.word	0x0800f461

0800f4c0 <std.isra.0>:
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	b510      	push	{r4, lr}
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	6003      	str	r3, [r0, #0]
 800f4c8:	6043      	str	r3, [r0, #4]
 800f4ca:	6083      	str	r3, [r0, #8]
 800f4cc:	8181      	strh	r1, [r0, #12]
 800f4ce:	6643      	str	r3, [r0, #100]	; 0x64
 800f4d0:	81c2      	strh	r2, [r0, #14]
 800f4d2:	6103      	str	r3, [r0, #16]
 800f4d4:	6143      	str	r3, [r0, #20]
 800f4d6:	6183      	str	r3, [r0, #24]
 800f4d8:	4619      	mov	r1, r3
 800f4da:	2208      	movs	r2, #8
 800f4dc:	305c      	adds	r0, #92	; 0x5c
 800f4de:	f000 f94e 	bl	800f77e <memset>
 800f4e2:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <std.isra.0+0x38>)
 800f4e4:	6263      	str	r3, [r4, #36]	; 0x24
 800f4e6:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <std.isra.0+0x3c>)
 800f4e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4ea:	4b05      	ldr	r3, [pc, #20]	; (800f500 <std.isra.0+0x40>)
 800f4ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4ee:	4b05      	ldr	r3, [pc, #20]	; (800f504 <std.isra.0+0x44>)
 800f4f0:	6224      	str	r4, [r4, #32]
 800f4f2:	6323      	str	r3, [r4, #48]	; 0x30
 800f4f4:	bd10      	pop	{r4, pc}
 800f4f6:	bf00      	nop
 800f4f8:	0800ffad 	.word	0x0800ffad
 800f4fc:	0800ffcf 	.word	0x0800ffcf
 800f500:	08010007 	.word	0x08010007
 800f504:	0801002b 	.word	0x0801002b

0800f508 <__sfmoreglue>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	1e4a      	subs	r2, r1, #1
 800f50c:	2568      	movs	r5, #104	; 0x68
 800f50e:	4355      	muls	r5, r2
 800f510:	460e      	mov	r6, r1
 800f512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f516:	f000 f989 	bl	800f82c <_malloc_r>
 800f51a:	4604      	mov	r4, r0
 800f51c:	b140      	cbz	r0, 800f530 <__sfmoreglue+0x28>
 800f51e:	2100      	movs	r1, #0
 800f520:	e880 0042 	stmia.w	r0, {r1, r6}
 800f524:	300c      	adds	r0, #12
 800f526:	60a0      	str	r0, [r4, #8]
 800f528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f52c:	f000 f927 	bl	800f77e <memset>
 800f530:	4620      	mov	r0, r4
 800f532:	bd70      	pop	{r4, r5, r6, pc}

0800f534 <__sinit>:
 800f534:	6983      	ldr	r3, [r0, #24]
 800f536:	b510      	push	{r4, lr}
 800f538:	4604      	mov	r4, r0
 800f53a:	bb33      	cbnz	r3, 800f58a <__sinit+0x56>
 800f53c:	6483      	str	r3, [r0, #72]	; 0x48
 800f53e:	64c3      	str	r3, [r0, #76]	; 0x4c
 800f540:	6503      	str	r3, [r0, #80]	; 0x50
 800f542:	4b12      	ldr	r3, [pc, #72]	; (800f58c <__sinit+0x58>)
 800f544:	4a12      	ldr	r2, [pc, #72]	; (800f590 <__sinit+0x5c>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	6282      	str	r2, [r0, #40]	; 0x28
 800f54a:	4298      	cmp	r0, r3
 800f54c:	bf04      	itt	eq
 800f54e:	2301      	moveq	r3, #1
 800f550:	6183      	streq	r3, [r0, #24]
 800f552:	f000 f81f 	bl	800f594 <__sfp>
 800f556:	6060      	str	r0, [r4, #4]
 800f558:	4620      	mov	r0, r4
 800f55a:	f000 f81b 	bl	800f594 <__sfp>
 800f55e:	60a0      	str	r0, [r4, #8]
 800f560:	4620      	mov	r0, r4
 800f562:	f000 f817 	bl	800f594 <__sfp>
 800f566:	2200      	movs	r2, #0
 800f568:	60e0      	str	r0, [r4, #12]
 800f56a:	2104      	movs	r1, #4
 800f56c:	6860      	ldr	r0, [r4, #4]
 800f56e:	f7ff ffa7 	bl	800f4c0 <std.isra.0>
 800f572:	2201      	movs	r2, #1
 800f574:	2109      	movs	r1, #9
 800f576:	68a0      	ldr	r0, [r4, #8]
 800f578:	f7ff ffa2 	bl	800f4c0 <std.isra.0>
 800f57c:	2202      	movs	r2, #2
 800f57e:	2112      	movs	r1, #18
 800f580:	68e0      	ldr	r0, [r4, #12]
 800f582:	f7ff ff9d 	bl	800f4c0 <std.isra.0>
 800f586:	2301      	movs	r3, #1
 800f588:	61a3      	str	r3, [r4, #24]
 800f58a:	bd10      	pop	{r4, pc}
 800f58c:	080106cc 	.word	0x080106cc
 800f590:	0800f4b5 	.word	0x0800f4b5

0800f594 <__sfp>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	4b1c      	ldr	r3, [pc, #112]	; (800f608 <__sfp+0x74>)
 800f598:	681e      	ldr	r6, [r3, #0]
 800f59a:	69b3      	ldr	r3, [r6, #24]
 800f59c:	4607      	mov	r7, r0
 800f59e:	b913      	cbnz	r3, 800f5a6 <__sfp+0x12>
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7ff ffc7 	bl	800f534 <__sinit>
 800f5a6:	3648      	adds	r6, #72	; 0x48
 800f5a8:	68b4      	ldr	r4, [r6, #8]
 800f5aa:	6873      	ldr	r3, [r6, #4]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	d503      	bpl.n	800f5b8 <__sfp+0x24>
 800f5b0:	6833      	ldr	r3, [r6, #0]
 800f5b2:	b133      	cbz	r3, 800f5c2 <__sfp+0x2e>
 800f5b4:	6836      	ldr	r6, [r6, #0]
 800f5b6:	e7f7      	b.n	800f5a8 <__sfp+0x14>
 800f5b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f5bc:	b16d      	cbz	r5, 800f5da <__sfp+0x46>
 800f5be:	3468      	adds	r4, #104	; 0x68
 800f5c0:	e7f4      	b.n	800f5ac <__sfp+0x18>
 800f5c2:	2104      	movs	r1, #4
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	f7ff ff9f 	bl	800f508 <__sfmoreglue>
 800f5ca:	6030      	str	r0, [r6, #0]
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d1f1      	bne.n	800f5b4 <__sfp+0x20>
 800f5d0:	230c      	movs	r3, #12
 800f5d2:	603b      	str	r3, [r7, #0]
 800f5d4:	4604      	mov	r4, r0
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5de:	81e3      	strh	r3, [r4, #14]
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	81a3      	strh	r3, [r4, #12]
 800f5e4:	6665      	str	r5, [r4, #100]	; 0x64
 800f5e6:	6025      	str	r5, [r4, #0]
 800f5e8:	60a5      	str	r5, [r4, #8]
 800f5ea:	6065      	str	r5, [r4, #4]
 800f5ec:	6125      	str	r5, [r4, #16]
 800f5ee:	6165      	str	r5, [r4, #20]
 800f5f0:	61a5      	str	r5, [r4, #24]
 800f5f2:	2208      	movs	r2, #8
 800f5f4:	4629      	mov	r1, r5
 800f5f6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5fa:	f000 f8c0 	bl	800f77e <memset>
 800f5fe:	6365      	str	r5, [r4, #52]	; 0x34
 800f600:	63a5      	str	r5, [r4, #56]	; 0x38
 800f602:	64a5      	str	r5, [r4, #72]	; 0x48
 800f604:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f606:	e7e6      	b.n	800f5d6 <__sfp+0x42>
 800f608:	080106cc 	.word	0x080106cc

0800f60c <_fwalk_reent>:
 800f60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f610:	4680      	mov	r8, r0
 800f612:	4689      	mov	r9, r1
 800f614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f618:	2600      	movs	r6, #0
 800f61a:	b914      	cbnz	r4, 800f622 <_fwalk_reent+0x16>
 800f61c:	4630      	mov	r0, r6
 800f61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f622:	68a5      	ldr	r5, [r4, #8]
 800f624:	6867      	ldr	r7, [r4, #4]
 800f626:	3f01      	subs	r7, #1
 800f628:	d501      	bpl.n	800f62e <_fwalk_reent+0x22>
 800f62a:	6824      	ldr	r4, [r4, #0]
 800f62c:	e7f5      	b.n	800f61a <_fwalk_reent+0xe>
 800f62e:	89ab      	ldrh	r3, [r5, #12]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d907      	bls.n	800f644 <_fwalk_reent+0x38>
 800f634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f638:	3301      	adds	r3, #1
 800f63a:	d003      	beq.n	800f644 <_fwalk_reent+0x38>
 800f63c:	4629      	mov	r1, r5
 800f63e:	4640      	mov	r0, r8
 800f640:	47c8      	blx	r9
 800f642:	4306      	orrs	r6, r0
 800f644:	3568      	adds	r5, #104	; 0x68
 800f646:	e7ee      	b.n	800f626 <_fwalk_reent+0x1a>

0800f648 <__libc_init_array>:
 800f648:	b570      	push	{r4, r5, r6, lr}
 800f64a:	4e0d      	ldr	r6, [pc, #52]	; (800f680 <__libc_init_array+0x38>)
 800f64c:	4c0d      	ldr	r4, [pc, #52]	; (800f684 <__libc_init_array+0x3c>)
 800f64e:	1ba4      	subs	r4, r4, r6
 800f650:	10a4      	asrs	r4, r4, #2
 800f652:	2500      	movs	r5, #0
 800f654:	42a5      	cmp	r5, r4
 800f656:	d109      	bne.n	800f66c <__libc_init_array+0x24>
 800f658:	4e0b      	ldr	r6, [pc, #44]	; (800f688 <__libc_init_array+0x40>)
 800f65a:	4c0c      	ldr	r4, [pc, #48]	; (800f68c <__libc_init_array+0x44>)
 800f65c:	f000 fe66 	bl	801032c <_init>
 800f660:	1ba4      	subs	r4, r4, r6
 800f662:	10a4      	asrs	r4, r4, #2
 800f664:	2500      	movs	r5, #0
 800f666:	42a5      	cmp	r5, r4
 800f668:	d105      	bne.n	800f676 <__libc_init_array+0x2e>
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f670:	4798      	blx	r3
 800f672:	3501      	adds	r5, #1
 800f674:	e7ee      	b.n	800f654 <__libc_init_array+0xc>
 800f676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f67a:	4798      	blx	r3
 800f67c:	3501      	adds	r5, #1
 800f67e:	e7f2      	b.n	800f666 <__libc_init_array+0x1e>
 800f680:	0801070c 	.word	0x0801070c
 800f684:	0801070c 	.word	0x0801070c
 800f688:	0801070c 	.word	0x0801070c
 800f68c:	08010710 	.word	0x08010710

0800f690 <__swhatbuf_r>:
 800f690:	b570      	push	{r4, r5, r6, lr}
 800f692:	460e      	mov	r6, r1
 800f694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f698:	2900      	cmp	r1, #0
 800f69a:	b090      	sub	sp, #64	; 0x40
 800f69c:	4614      	mov	r4, r2
 800f69e:	461d      	mov	r5, r3
 800f6a0:	da07      	bge.n	800f6b2 <__swhatbuf_r+0x22>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	602b      	str	r3, [r5, #0]
 800f6a6:	89b3      	ldrh	r3, [r6, #12]
 800f6a8:	061a      	lsls	r2, r3, #24
 800f6aa:	d410      	bmi.n	800f6ce <__swhatbuf_r+0x3e>
 800f6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6b0:	e00e      	b.n	800f6d0 <__swhatbuf_r+0x40>
 800f6b2:	aa01      	add	r2, sp, #4
 800f6b4:	f000 fdbc 	bl	8010230 <_fstat_r>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	dbf2      	blt.n	800f6a2 <__swhatbuf_r+0x12>
 800f6bc:	9a02      	ldr	r2, [sp, #8]
 800f6be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f6c6:	425a      	negs	r2, r3
 800f6c8:	415a      	adcs	r2, r3
 800f6ca:	602a      	str	r2, [r5, #0]
 800f6cc:	e7ee      	b.n	800f6ac <__swhatbuf_r+0x1c>
 800f6ce:	2340      	movs	r3, #64	; 0x40
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	6023      	str	r3, [r4, #0]
 800f6d4:	b010      	add	sp, #64	; 0x40
 800f6d6:	bd70      	pop	{r4, r5, r6, pc}

0800f6d8 <__smakebuf_r>:
 800f6d8:	898b      	ldrh	r3, [r1, #12]
 800f6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6dc:	079d      	lsls	r5, r3, #30
 800f6de:	4606      	mov	r6, r0
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	d507      	bpl.n	800f6f4 <__smakebuf_r+0x1c>
 800f6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	6123      	str	r3, [r4, #16]
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	6163      	str	r3, [r4, #20]
 800f6f0:	b002      	add	sp, #8
 800f6f2:	bd70      	pop	{r4, r5, r6, pc}
 800f6f4:	ab01      	add	r3, sp, #4
 800f6f6:	466a      	mov	r2, sp
 800f6f8:	f7ff ffca 	bl	800f690 <__swhatbuf_r>
 800f6fc:	9900      	ldr	r1, [sp, #0]
 800f6fe:	4605      	mov	r5, r0
 800f700:	4630      	mov	r0, r6
 800f702:	f000 f893 	bl	800f82c <_malloc_r>
 800f706:	b948      	cbnz	r0, 800f71c <__smakebuf_r+0x44>
 800f708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f70c:	059a      	lsls	r2, r3, #22
 800f70e:	d4ef      	bmi.n	800f6f0 <__smakebuf_r+0x18>
 800f710:	f023 0303 	bic.w	r3, r3, #3
 800f714:	f043 0302 	orr.w	r3, r3, #2
 800f718:	81a3      	strh	r3, [r4, #12]
 800f71a:	e7e3      	b.n	800f6e4 <__smakebuf_r+0xc>
 800f71c:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <__smakebuf_r+0x7c>)
 800f71e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f720:	89a3      	ldrh	r3, [r4, #12]
 800f722:	6020      	str	r0, [r4, #0]
 800f724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f728:	81a3      	strh	r3, [r4, #12]
 800f72a:	9b00      	ldr	r3, [sp, #0]
 800f72c:	6163      	str	r3, [r4, #20]
 800f72e:	9b01      	ldr	r3, [sp, #4]
 800f730:	6120      	str	r0, [r4, #16]
 800f732:	b15b      	cbz	r3, 800f74c <__smakebuf_r+0x74>
 800f734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f738:	4630      	mov	r0, r6
 800f73a:	f000 fd8b 	bl	8010254 <_isatty_r>
 800f73e:	b128      	cbz	r0, 800f74c <__smakebuf_r+0x74>
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	f023 0303 	bic.w	r3, r3, #3
 800f746:	f043 0301 	orr.w	r3, r3, #1
 800f74a:	81a3      	strh	r3, [r4, #12]
 800f74c:	89a3      	ldrh	r3, [r4, #12]
 800f74e:	431d      	orrs	r5, r3
 800f750:	81a5      	strh	r5, [r4, #12]
 800f752:	e7cd      	b.n	800f6f0 <__smakebuf_r+0x18>
 800f754:	0800f4b5 	.word	0x0800f4b5

0800f758 <malloc>:
 800f758:	4b02      	ldr	r3, [pc, #8]	; (800f764 <malloc+0xc>)
 800f75a:	4601      	mov	r1, r0
 800f75c:	6818      	ldr	r0, [r3, #0]
 800f75e:	f000 b865 	b.w	800f82c <_malloc_r>
 800f762:	bf00      	nop
 800f764:	200002f4 	.word	0x200002f4

0800f768 <memcpy>:
 800f768:	b510      	push	{r4, lr}
 800f76a:	1e43      	subs	r3, r0, #1
 800f76c:	440a      	add	r2, r1
 800f76e:	4291      	cmp	r1, r2
 800f770:	d100      	bne.n	800f774 <memcpy+0xc>
 800f772:	bd10      	pop	{r4, pc}
 800f774:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f77c:	e7f7      	b.n	800f76e <memcpy+0x6>

0800f77e <memset>:
 800f77e:	4402      	add	r2, r0
 800f780:	4603      	mov	r3, r0
 800f782:	4293      	cmp	r3, r2
 800f784:	d100      	bne.n	800f788 <memset+0xa>
 800f786:	4770      	bx	lr
 800f788:	f803 1b01 	strb.w	r1, [r3], #1
 800f78c:	e7f9      	b.n	800f782 <memset+0x4>
	...

0800f790 <_free_r>:
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	4605      	mov	r5, r0
 800f794:	2900      	cmp	r1, #0
 800f796:	d045      	beq.n	800f824 <_free_r+0x94>
 800f798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f79c:	1f0c      	subs	r4, r1, #4
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	bfb8      	it	lt
 800f7a2:	18e4      	addlt	r4, r4, r3
 800f7a4:	f000 fd78 	bl	8010298 <__malloc_lock>
 800f7a8:	4a1f      	ldr	r2, [pc, #124]	; (800f828 <_free_r+0x98>)
 800f7aa:	6813      	ldr	r3, [r2, #0]
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	b933      	cbnz	r3, 800f7be <_free_r+0x2e>
 800f7b0:	6063      	str	r3, [r4, #4]
 800f7b2:	6014      	str	r4, [r2, #0]
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7ba:	f000 bd6e 	b.w	801029a <__malloc_unlock>
 800f7be:	42a3      	cmp	r3, r4
 800f7c0:	d90c      	bls.n	800f7dc <_free_r+0x4c>
 800f7c2:	6821      	ldr	r1, [r4, #0]
 800f7c4:	1862      	adds	r2, r4, r1
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	bf04      	itt	eq
 800f7ca:	681a      	ldreq	r2, [r3, #0]
 800f7cc:	685b      	ldreq	r3, [r3, #4]
 800f7ce:	6063      	str	r3, [r4, #4]
 800f7d0:	bf04      	itt	eq
 800f7d2:	1852      	addeq	r2, r2, r1
 800f7d4:	6022      	streq	r2, [r4, #0]
 800f7d6:	6004      	str	r4, [r0, #0]
 800f7d8:	e7ec      	b.n	800f7b4 <_free_r+0x24>
 800f7da:	4613      	mov	r3, r2
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	b10a      	cbz	r2, 800f7e4 <_free_r+0x54>
 800f7e0:	42a2      	cmp	r2, r4
 800f7e2:	d9fa      	bls.n	800f7da <_free_r+0x4a>
 800f7e4:	6819      	ldr	r1, [r3, #0]
 800f7e6:	1858      	adds	r0, r3, r1
 800f7e8:	42a0      	cmp	r0, r4
 800f7ea:	d10b      	bne.n	800f804 <_free_r+0x74>
 800f7ec:	6820      	ldr	r0, [r4, #0]
 800f7ee:	4401      	add	r1, r0
 800f7f0:	1858      	adds	r0, r3, r1
 800f7f2:	4282      	cmp	r2, r0
 800f7f4:	6019      	str	r1, [r3, #0]
 800f7f6:	d1dd      	bne.n	800f7b4 <_free_r+0x24>
 800f7f8:	6810      	ldr	r0, [r2, #0]
 800f7fa:	6852      	ldr	r2, [r2, #4]
 800f7fc:	605a      	str	r2, [r3, #4]
 800f7fe:	4401      	add	r1, r0
 800f800:	6019      	str	r1, [r3, #0]
 800f802:	e7d7      	b.n	800f7b4 <_free_r+0x24>
 800f804:	d902      	bls.n	800f80c <_free_r+0x7c>
 800f806:	230c      	movs	r3, #12
 800f808:	602b      	str	r3, [r5, #0]
 800f80a:	e7d3      	b.n	800f7b4 <_free_r+0x24>
 800f80c:	6820      	ldr	r0, [r4, #0]
 800f80e:	1821      	adds	r1, r4, r0
 800f810:	428a      	cmp	r2, r1
 800f812:	bf04      	itt	eq
 800f814:	6811      	ldreq	r1, [r2, #0]
 800f816:	6852      	ldreq	r2, [r2, #4]
 800f818:	6062      	str	r2, [r4, #4]
 800f81a:	bf04      	itt	eq
 800f81c:	1809      	addeq	r1, r1, r0
 800f81e:	6021      	streq	r1, [r4, #0]
 800f820:	605c      	str	r4, [r3, #4]
 800f822:	e7c7      	b.n	800f7b4 <_free_r+0x24>
 800f824:	bd38      	pop	{r3, r4, r5, pc}
 800f826:	bf00      	nop
 800f828:	200003b0 	.word	0x200003b0

0800f82c <_malloc_r>:
 800f82c:	b570      	push	{r4, r5, r6, lr}
 800f82e:	1ccd      	adds	r5, r1, #3
 800f830:	f025 0503 	bic.w	r5, r5, #3
 800f834:	3508      	adds	r5, #8
 800f836:	2d0c      	cmp	r5, #12
 800f838:	bf38      	it	cc
 800f83a:	250c      	movcc	r5, #12
 800f83c:	2d00      	cmp	r5, #0
 800f83e:	4606      	mov	r6, r0
 800f840:	db01      	blt.n	800f846 <_malloc_r+0x1a>
 800f842:	42a9      	cmp	r1, r5
 800f844:	d903      	bls.n	800f84e <_malloc_r+0x22>
 800f846:	230c      	movs	r3, #12
 800f848:	6033      	str	r3, [r6, #0]
 800f84a:	2000      	movs	r0, #0
 800f84c:	bd70      	pop	{r4, r5, r6, pc}
 800f84e:	f000 fd23 	bl	8010298 <__malloc_lock>
 800f852:	4a23      	ldr	r2, [pc, #140]	; (800f8e0 <_malloc_r+0xb4>)
 800f854:	6814      	ldr	r4, [r2, #0]
 800f856:	4621      	mov	r1, r4
 800f858:	b991      	cbnz	r1, 800f880 <_malloc_r+0x54>
 800f85a:	4c22      	ldr	r4, [pc, #136]	; (800f8e4 <_malloc_r+0xb8>)
 800f85c:	6823      	ldr	r3, [r4, #0]
 800f85e:	b91b      	cbnz	r3, 800f868 <_malloc_r+0x3c>
 800f860:	4630      	mov	r0, r6
 800f862:	f000 fb93 	bl	800ff8c <_sbrk_r>
 800f866:	6020      	str	r0, [r4, #0]
 800f868:	4629      	mov	r1, r5
 800f86a:	4630      	mov	r0, r6
 800f86c:	f000 fb8e 	bl	800ff8c <_sbrk_r>
 800f870:	1c43      	adds	r3, r0, #1
 800f872:	d126      	bne.n	800f8c2 <_malloc_r+0x96>
 800f874:	230c      	movs	r3, #12
 800f876:	6033      	str	r3, [r6, #0]
 800f878:	4630      	mov	r0, r6
 800f87a:	f000 fd0e 	bl	801029a <__malloc_unlock>
 800f87e:	e7e4      	b.n	800f84a <_malloc_r+0x1e>
 800f880:	680b      	ldr	r3, [r1, #0]
 800f882:	1b5b      	subs	r3, r3, r5
 800f884:	d41a      	bmi.n	800f8bc <_malloc_r+0x90>
 800f886:	2b0b      	cmp	r3, #11
 800f888:	d90f      	bls.n	800f8aa <_malloc_r+0x7e>
 800f88a:	600b      	str	r3, [r1, #0]
 800f88c:	50cd      	str	r5, [r1, r3]
 800f88e:	18cc      	adds	r4, r1, r3
 800f890:	4630      	mov	r0, r6
 800f892:	f000 fd02 	bl	801029a <__malloc_unlock>
 800f896:	f104 000b 	add.w	r0, r4, #11
 800f89a:	1d23      	adds	r3, r4, #4
 800f89c:	f020 0007 	bic.w	r0, r0, #7
 800f8a0:	1ac3      	subs	r3, r0, r3
 800f8a2:	d01b      	beq.n	800f8dc <_malloc_r+0xb0>
 800f8a4:	425a      	negs	r2, r3
 800f8a6:	50e2      	str	r2, [r4, r3]
 800f8a8:	bd70      	pop	{r4, r5, r6, pc}
 800f8aa:	428c      	cmp	r4, r1
 800f8ac:	bf0d      	iteet	eq
 800f8ae:	6863      	ldreq	r3, [r4, #4]
 800f8b0:	684b      	ldrne	r3, [r1, #4]
 800f8b2:	6063      	strne	r3, [r4, #4]
 800f8b4:	6013      	streq	r3, [r2, #0]
 800f8b6:	bf18      	it	ne
 800f8b8:	460c      	movne	r4, r1
 800f8ba:	e7e9      	b.n	800f890 <_malloc_r+0x64>
 800f8bc:	460c      	mov	r4, r1
 800f8be:	6849      	ldr	r1, [r1, #4]
 800f8c0:	e7ca      	b.n	800f858 <_malloc_r+0x2c>
 800f8c2:	1cc4      	adds	r4, r0, #3
 800f8c4:	f024 0403 	bic.w	r4, r4, #3
 800f8c8:	42a0      	cmp	r0, r4
 800f8ca:	d005      	beq.n	800f8d8 <_malloc_r+0xac>
 800f8cc:	1a21      	subs	r1, r4, r0
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f000 fb5c 	bl	800ff8c <_sbrk_r>
 800f8d4:	3001      	adds	r0, #1
 800f8d6:	d0cd      	beq.n	800f874 <_malloc_r+0x48>
 800f8d8:	6025      	str	r5, [r4, #0]
 800f8da:	e7d9      	b.n	800f890 <_malloc_r+0x64>
 800f8dc:	bd70      	pop	{r4, r5, r6, pc}
 800f8de:	bf00      	nop
 800f8e0:	200003b0 	.word	0x200003b0
 800f8e4:	200003b4 	.word	0x200003b4

0800f8e8 <__sfputc_r>:
 800f8e8:	6893      	ldr	r3, [r2, #8]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	b410      	push	{r4}
 800f8f0:	6093      	str	r3, [r2, #8]
 800f8f2:	da09      	bge.n	800f908 <__sfputc_r+0x20>
 800f8f4:	6994      	ldr	r4, [r2, #24]
 800f8f6:	42a3      	cmp	r3, r4
 800f8f8:	db02      	blt.n	800f900 <__sfputc_r+0x18>
 800f8fa:	b2cb      	uxtb	r3, r1
 800f8fc:	2b0a      	cmp	r3, #10
 800f8fe:	d103      	bne.n	800f908 <__sfputc_r+0x20>
 800f900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f904:	f000 bbb2 	b.w	801006c <__swbuf_r>
 800f908:	6813      	ldr	r3, [r2, #0]
 800f90a:	1c58      	adds	r0, r3, #1
 800f90c:	6010      	str	r0, [r2, #0]
 800f90e:	7019      	strb	r1, [r3, #0]
 800f910:	b2c8      	uxtb	r0, r1
 800f912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f916:	4770      	bx	lr

0800f918 <__sfputs_r>:
 800f918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91a:	4606      	mov	r6, r0
 800f91c:	460f      	mov	r7, r1
 800f91e:	4614      	mov	r4, r2
 800f920:	18d5      	adds	r5, r2, r3
 800f922:	42ac      	cmp	r4, r5
 800f924:	d101      	bne.n	800f92a <__sfputs_r+0x12>
 800f926:	2000      	movs	r0, #0
 800f928:	e007      	b.n	800f93a <__sfputs_r+0x22>
 800f92a:	463a      	mov	r2, r7
 800f92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f930:	4630      	mov	r0, r6
 800f932:	f7ff ffd9 	bl	800f8e8 <__sfputc_r>
 800f936:	1c43      	adds	r3, r0, #1
 800f938:	d1f3      	bne.n	800f922 <__sfputs_r+0xa>
 800f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f93c <_vfiprintf_r>:
 800f93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f940:	b09d      	sub	sp, #116	; 0x74
 800f942:	460c      	mov	r4, r1
 800f944:	4617      	mov	r7, r2
 800f946:	9303      	str	r3, [sp, #12]
 800f948:	4606      	mov	r6, r0
 800f94a:	b118      	cbz	r0, 800f954 <_vfiprintf_r+0x18>
 800f94c:	6983      	ldr	r3, [r0, #24]
 800f94e:	b90b      	cbnz	r3, 800f954 <_vfiprintf_r+0x18>
 800f950:	f7ff fdf0 	bl	800f534 <__sinit>
 800f954:	4b7c      	ldr	r3, [pc, #496]	; (800fb48 <_vfiprintf_r+0x20c>)
 800f956:	429c      	cmp	r4, r3
 800f958:	d157      	bne.n	800fa0a <_vfiprintf_r+0xce>
 800f95a:	6874      	ldr	r4, [r6, #4]
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	0718      	lsls	r0, r3, #28
 800f960:	d55d      	bpl.n	800fa1e <_vfiprintf_r+0xe2>
 800f962:	6923      	ldr	r3, [r4, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d05a      	beq.n	800fa1e <_vfiprintf_r+0xe2>
 800f968:	2300      	movs	r3, #0
 800f96a:	9309      	str	r3, [sp, #36]	; 0x24
 800f96c:	2320      	movs	r3, #32
 800f96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f972:	2330      	movs	r3, #48	; 0x30
 800f974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f978:	f04f 0b01 	mov.w	fp, #1
 800f97c:	46b8      	mov	r8, r7
 800f97e:	4645      	mov	r5, r8
 800f980:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f984:	2b00      	cmp	r3, #0
 800f986:	d155      	bne.n	800fa34 <_vfiprintf_r+0xf8>
 800f988:	ebb8 0a07 	subs.w	sl, r8, r7
 800f98c:	d00b      	beq.n	800f9a6 <_vfiprintf_r+0x6a>
 800f98e:	4653      	mov	r3, sl
 800f990:	463a      	mov	r2, r7
 800f992:	4621      	mov	r1, r4
 800f994:	4630      	mov	r0, r6
 800f996:	f7ff ffbf 	bl	800f918 <__sfputs_r>
 800f99a:	3001      	adds	r0, #1
 800f99c:	f000 80c4 	beq.w	800fb28 <_vfiprintf_r+0x1ec>
 800f9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9a2:	4453      	add	r3, sl
 800f9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a6:	f898 3000 	ldrb.w	r3, [r8]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f000 80bc 	beq.w	800fb28 <_vfiprintf_r+0x1ec>
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b6:	9304      	str	r3, [sp, #16]
 800f9b8:	9307      	str	r3, [sp, #28]
 800f9ba:	9205      	str	r2, [sp, #20]
 800f9bc:	9306      	str	r3, [sp, #24]
 800f9be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9c2:	931a      	str	r3, [sp, #104]	; 0x68
 800f9c4:	2205      	movs	r2, #5
 800f9c6:	7829      	ldrb	r1, [r5, #0]
 800f9c8:	4860      	ldr	r0, [pc, #384]	; (800fb4c <_vfiprintf_r+0x210>)
 800f9ca:	f7f0 fc09 	bl	80001e0 <memchr>
 800f9ce:	f105 0801 	add.w	r8, r5, #1
 800f9d2:	9b04      	ldr	r3, [sp, #16]
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d131      	bne.n	800fa3c <_vfiprintf_r+0x100>
 800f9d8:	06d9      	lsls	r1, r3, #27
 800f9da:	bf44      	itt	mi
 800f9dc:	2220      	movmi	r2, #32
 800f9de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f9e2:	071a      	lsls	r2, r3, #28
 800f9e4:	bf44      	itt	mi
 800f9e6:	222b      	movmi	r2, #43	; 0x2b
 800f9e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f9ec:	782a      	ldrb	r2, [r5, #0]
 800f9ee:	2a2a      	cmp	r2, #42	; 0x2a
 800f9f0:	d02c      	beq.n	800fa4c <_vfiprintf_r+0x110>
 800f9f2:	9a07      	ldr	r2, [sp, #28]
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	200a      	movs	r0, #10
 800f9f8:	46a8      	mov	r8, r5
 800f9fa:	3501      	adds	r5, #1
 800f9fc:	f898 3000 	ldrb.w	r3, [r8]
 800fa00:	3b30      	subs	r3, #48	; 0x30
 800fa02:	2b09      	cmp	r3, #9
 800fa04:	d96d      	bls.n	800fae2 <_vfiprintf_r+0x1a6>
 800fa06:	b371      	cbz	r1, 800fa66 <_vfiprintf_r+0x12a>
 800fa08:	e026      	b.n	800fa58 <_vfiprintf_r+0x11c>
 800fa0a:	4b51      	ldr	r3, [pc, #324]	; (800fb50 <_vfiprintf_r+0x214>)
 800fa0c:	429c      	cmp	r4, r3
 800fa0e:	d101      	bne.n	800fa14 <_vfiprintf_r+0xd8>
 800fa10:	68b4      	ldr	r4, [r6, #8]
 800fa12:	e7a3      	b.n	800f95c <_vfiprintf_r+0x20>
 800fa14:	4b4f      	ldr	r3, [pc, #316]	; (800fb54 <_vfiprintf_r+0x218>)
 800fa16:	429c      	cmp	r4, r3
 800fa18:	bf08      	it	eq
 800fa1a:	68f4      	ldreq	r4, [r6, #12]
 800fa1c:	e79e      	b.n	800f95c <_vfiprintf_r+0x20>
 800fa1e:	4621      	mov	r1, r4
 800fa20:	4630      	mov	r0, r6
 800fa22:	f000 fb87 	bl	8010134 <__swsetup_r>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d09e      	beq.n	800f968 <_vfiprintf_r+0x2c>
 800fa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2e:	b01d      	add	sp, #116	; 0x74
 800fa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa34:	2b25      	cmp	r3, #37	; 0x25
 800fa36:	d0a7      	beq.n	800f988 <_vfiprintf_r+0x4c>
 800fa38:	46a8      	mov	r8, r5
 800fa3a:	e7a0      	b.n	800f97e <_vfiprintf_r+0x42>
 800fa3c:	4a43      	ldr	r2, [pc, #268]	; (800fb4c <_vfiprintf_r+0x210>)
 800fa3e:	1a80      	subs	r0, r0, r2
 800fa40:	fa0b f000 	lsl.w	r0, fp, r0
 800fa44:	4318      	orrs	r0, r3
 800fa46:	9004      	str	r0, [sp, #16]
 800fa48:	4645      	mov	r5, r8
 800fa4a:	e7bb      	b.n	800f9c4 <_vfiprintf_r+0x88>
 800fa4c:	9a03      	ldr	r2, [sp, #12]
 800fa4e:	1d11      	adds	r1, r2, #4
 800fa50:	6812      	ldr	r2, [r2, #0]
 800fa52:	9103      	str	r1, [sp, #12]
 800fa54:	2a00      	cmp	r2, #0
 800fa56:	db01      	blt.n	800fa5c <_vfiprintf_r+0x120>
 800fa58:	9207      	str	r2, [sp, #28]
 800fa5a:	e004      	b.n	800fa66 <_vfiprintf_r+0x12a>
 800fa5c:	4252      	negs	r2, r2
 800fa5e:	f043 0302 	orr.w	r3, r3, #2
 800fa62:	9207      	str	r2, [sp, #28]
 800fa64:	9304      	str	r3, [sp, #16]
 800fa66:	f898 3000 	ldrb.w	r3, [r8]
 800fa6a:	2b2e      	cmp	r3, #46	; 0x2e
 800fa6c:	d110      	bne.n	800fa90 <_vfiprintf_r+0x154>
 800fa6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fa72:	2b2a      	cmp	r3, #42	; 0x2a
 800fa74:	f108 0101 	add.w	r1, r8, #1
 800fa78:	d137      	bne.n	800faea <_vfiprintf_r+0x1ae>
 800fa7a:	9b03      	ldr	r3, [sp, #12]
 800fa7c:	1d1a      	adds	r2, r3, #4
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	9203      	str	r2, [sp, #12]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	bfb8      	it	lt
 800fa86:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa8a:	f108 0802 	add.w	r8, r8, #2
 800fa8e:	9305      	str	r3, [sp, #20]
 800fa90:	4d31      	ldr	r5, [pc, #196]	; (800fb58 <_vfiprintf_r+0x21c>)
 800fa92:	f898 1000 	ldrb.w	r1, [r8]
 800fa96:	2203      	movs	r2, #3
 800fa98:	4628      	mov	r0, r5
 800fa9a:	f7f0 fba1 	bl	80001e0 <memchr>
 800fa9e:	b140      	cbz	r0, 800fab2 <_vfiprintf_r+0x176>
 800faa0:	2340      	movs	r3, #64	; 0x40
 800faa2:	1b40      	subs	r0, r0, r5
 800faa4:	fa03 f000 	lsl.w	r0, r3, r0
 800faa8:	9b04      	ldr	r3, [sp, #16]
 800faaa:	4303      	orrs	r3, r0
 800faac:	9304      	str	r3, [sp, #16]
 800faae:	f108 0801 	add.w	r8, r8, #1
 800fab2:	f898 1000 	ldrb.w	r1, [r8]
 800fab6:	4829      	ldr	r0, [pc, #164]	; (800fb5c <_vfiprintf_r+0x220>)
 800fab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fabc:	2206      	movs	r2, #6
 800fabe:	f108 0701 	add.w	r7, r8, #1
 800fac2:	f7f0 fb8d 	bl	80001e0 <memchr>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d034      	beq.n	800fb34 <_vfiprintf_r+0x1f8>
 800faca:	4b25      	ldr	r3, [pc, #148]	; (800fb60 <_vfiprintf_r+0x224>)
 800facc:	bb03      	cbnz	r3, 800fb10 <_vfiprintf_r+0x1d4>
 800face:	9b03      	ldr	r3, [sp, #12]
 800fad0:	3307      	adds	r3, #7
 800fad2:	f023 0307 	bic.w	r3, r3, #7
 800fad6:	3308      	adds	r3, #8
 800fad8:	9303      	str	r3, [sp, #12]
 800fada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fadc:	444b      	add	r3, r9
 800fade:	9309      	str	r3, [sp, #36]	; 0x24
 800fae0:	e74c      	b.n	800f97c <_vfiprintf_r+0x40>
 800fae2:	fb00 3202 	mla	r2, r0, r2, r3
 800fae6:	2101      	movs	r1, #1
 800fae8:	e786      	b.n	800f9f8 <_vfiprintf_r+0xbc>
 800faea:	2300      	movs	r3, #0
 800faec:	9305      	str	r3, [sp, #20]
 800faee:	4618      	mov	r0, r3
 800faf0:	250a      	movs	r5, #10
 800faf2:	4688      	mov	r8, r1
 800faf4:	3101      	adds	r1, #1
 800faf6:	f898 2000 	ldrb.w	r2, [r8]
 800fafa:	3a30      	subs	r2, #48	; 0x30
 800fafc:	2a09      	cmp	r2, #9
 800fafe:	d903      	bls.n	800fb08 <_vfiprintf_r+0x1cc>
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d0c5      	beq.n	800fa90 <_vfiprintf_r+0x154>
 800fb04:	9005      	str	r0, [sp, #20]
 800fb06:	e7c3      	b.n	800fa90 <_vfiprintf_r+0x154>
 800fb08:	fb05 2000 	mla	r0, r5, r0, r2
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	e7f0      	b.n	800faf2 <_vfiprintf_r+0x1b6>
 800fb10:	ab03      	add	r3, sp, #12
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	4622      	mov	r2, r4
 800fb16:	4b13      	ldr	r3, [pc, #76]	; (800fb64 <_vfiprintf_r+0x228>)
 800fb18:	a904      	add	r1, sp, #16
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	f3af 8000 	nop.w
 800fb20:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fb24:	4681      	mov	r9, r0
 800fb26:	d1d8      	bne.n	800fada <_vfiprintf_r+0x19e>
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	065b      	lsls	r3, r3, #25
 800fb2c:	f53f af7d 	bmi.w	800fa2a <_vfiprintf_r+0xee>
 800fb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb32:	e77c      	b.n	800fa2e <_vfiprintf_r+0xf2>
 800fb34:	ab03      	add	r3, sp, #12
 800fb36:	9300      	str	r3, [sp, #0]
 800fb38:	4622      	mov	r2, r4
 800fb3a:	4b0a      	ldr	r3, [pc, #40]	; (800fb64 <_vfiprintf_r+0x228>)
 800fb3c:	a904      	add	r1, sp, #16
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f000 f888 	bl	800fc54 <_printf_i>
 800fb44:	e7ec      	b.n	800fb20 <_vfiprintf_r+0x1e4>
 800fb46:	bf00      	nop
 800fb48:	0801068c 	.word	0x0801068c
 800fb4c:	080106d0 	.word	0x080106d0
 800fb50:	080106ac 	.word	0x080106ac
 800fb54:	0801066c 	.word	0x0801066c
 800fb58:	080106d6 	.word	0x080106d6
 800fb5c:	080106da 	.word	0x080106da
 800fb60:	00000000 	.word	0x00000000
 800fb64:	0800f919 	.word	0x0800f919

0800fb68 <_printf_common>:
 800fb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb6c:	4691      	mov	r9, r2
 800fb6e:	461f      	mov	r7, r3
 800fb70:	688a      	ldr	r2, [r1, #8]
 800fb72:	690b      	ldr	r3, [r1, #16]
 800fb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	bfb8      	it	lt
 800fb7c:	4613      	movlt	r3, r2
 800fb7e:	f8c9 3000 	str.w	r3, [r9]
 800fb82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb86:	4606      	mov	r6, r0
 800fb88:	460c      	mov	r4, r1
 800fb8a:	b112      	cbz	r2, 800fb92 <_printf_common+0x2a>
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	f8c9 3000 	str.w	r3, [r9]
 800fb92:	6823      	ldr	r3, [r4, #0]
 800fb94:	0699      	lsls	r1, r3, #26
 800fb96:	bf42      	ittt	mi
 800fb98:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fb9c:	3302      	addmi	r3, #2
 800fb9e:	f8c9 3000 	strmi.w	r3, [r9]
 800fba2:	6825      	ldr	r5, [r4, #0]
 800fba4:	f015 0506 	ands.w	r5, r5, #6
 800fba8:	d107      	bne.n	800fbba <_printf_common+0x52>
 800fbaa:	f104 0a19 	add.w	sl, r4, #25
 800fbae:	68e3      	ldr	r3, [r4, #12]
 800fbb0:	f8d9 2000 	ldr.w	r2, [r9]
 800fbb4:	1a9b      	subs	r3, r3, r2
 800fbb6:	429d      	cmp	r5, r3
 800fbb8:	db29      	blt.n	800fc0e <_printf_common+0xa6>
 800fbba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fbbe:	6822      	ldr	r2, [r4, #0]
 800fbc0:	3300      	adds	r3, #0
 800fbc2:	bf18      	it	ne
 800fbc4:	2301      	movne	r3, #1
 800fbc6:	0692      	lsls	r2, r2, #26
 800fbc8:	d42e      	bmi.n	800fc28 <_printf_common+0xc0>
 800fbca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbce:	4639      	mov	r1, r7
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	47c0      	blx	r8
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	d021      	beq.n	800fc1c <_printf_common+0xb4>
 800fbd8:	6823      	ldr	r3, [r4, #0]
 800fbda:	68e5      	ldr	r5, [r4, #12]
 800fbdc:	f8d9 2000 	ldr.w	r2, [r9]
 800fbe0:	f003 0306 	and.w	r3, r3, #6
 800fbe4:	2b04      	cmp	r3, #4
 800fbe6:	bf08      	it	eq
 800fbe8:	1aad      	subeq	r5, r5, r2
 800fbea:	68a3      	ldr	r3, [r4, #8]
 800fbec:	6922      	ldr	r2, [r4, #16]
 800fbee:	bf0c      	ite	eq
 800fbf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbf4:	2500      	movne	r5, #0
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	bfc4      	itt	gt
 800fbfa:	1a9b      	subgt	r3, r3, r2
 800fbfc:	18ed      	addgt	r5, r5, r3
 800fbfe:	f04f 0900 	mov.w	r9, #0
 800fc02:	341a      	adds	r4, #26
 800fc04:	454d      	cmp	r5, r9
 800fc06:	d11b      	bne.n	800fc40 <_printf_common+0xd8>
 800fc08:	2000      	movs	r0, #0
 800fc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc0e:	2301      	movs	r3, #1
 800fc10:	4652      	mov	r2, sl
 800fc12:	4639      	mov	r1, r7
 800fc14:	4630      	mov	r0, r6
 800fc16:	47c0      	blx	r8
 800fc18:	3001      	adds	r0, #1
 800fc1a:	d103      	bne.n	800fc24 <_printf_common+0xbc>
 800fc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc24:	3501      	adds	r5, #1
 800fc26:	e7c2      	b.n	800fbae <_printf_common+0x46>
 800fc28:	18e1      	adds	r1, r4, r3
 800fc2a:	1c5a      	adds	r2, r3, #1
 800fc2c:	2030      	movs	r0, #48	; 0x30
 800fc2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc32:	4422      	add	r2, r4
 800fc34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc3c:	3302      	adds	r3, #2
 800fc3e:	e7c4      	b.n	800fbca <_printf_common+0x62>
 800fc40:	2301      	movs	r3, #1
 800fc42:	4622      	mov	r2, r4
 800fc44:	4639      	mov	r1, r7
 800fc46:	4630      	mov	r0, r6
 800fc48:	47c0      	blx	r8
 800fc4a:	3001      	adds	r0, #1
 800fc4c:	d0e6      	beq.n	800fc1c <_printf_common+0xb4>
 800fc4e:	f109 0901 	add.w	r9, r9, #1
 800fc52:	e7d7      	b.n	800fc04 <_printf_common+0x9c>

0800fc54 <_printf_i>:
 800fc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc58:	4617      	mov	r7, r2
 800fc5a:	7e0a      	ldrb	r2, [r1, #24]
 800fc5c:	b085      	sub	sp, #20
 800fc5e:	2a6e      	cmp	r2, #110	; 0x6e
 800fc60:	4698      	mov	r8, r3
 800fc62:	4606      	mov	r6, r0
 800fc64:	460c      	mov	r4, r1
 800fc66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc68:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800fc6c:	f000 80bc 	beq.w	800fde8 <_printf_i+0x194>
 800fc70:	d81a      	bhi.n	800fca8 <_printf_i+0x54>
 800fc72:	2a63      	cmp	r2, #99	; 0x63
 800fc74:	d02e      	beq.n	800fcd4 <_printf_i+0x80>
 800fc76:	d80a      	bhi.n	800fc8e <_printf_i+0x3a>
 800fc78:	2a00      	cmp	r2, #0
 800fc7a:	f000 80c8 	beq.w	800fe0e <_printf_i+0x1ba>
 800fc7e:	2a58      	cmp	r2, #88	; 0x58
 800fc80:	f000 808a 	beq.w	800fd98 <_printf_i+0x144>
 800fc84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800fc8c:	e02a      	b.n	800fce4 <_printf_i+0x90>
 800fc8e:	2a64      	cmp	r2, #100	; 0x64
 800fc90:	d001      	beq.n	800fc96 <_printf_i+0x42>
 800fc92:	2a69      	cmp	r2, #105	; 0x69
 800fc94:	d1f6      	bne.n	800fc84 <_printf_i+0x30>
 800fc96:	6821      	ldr	r1, [r4, #0]
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800fc9e:	d023      	beq.n	800fce8 <_printf_i+0x94>
 800fca0:	1d11      	adds	r1, r2, #4
 800fca2:	6019      	str	r1, [r3, #0]
 800fca4:	6813      	ldr	r3, [r2, #0]
 800fca6:	e027      	b.n	800fcf8 <_printf_i+0xa4>
 800fca8:	2a73      	cmp	r2, #115	; 0x73
 800fcaa:	f000 80b4 	beq.w	800fe16 <_printf_i+0x1c2>
 800fcae:	d808      	bhi.n	800fcc2 <_printf_i+0x6e>
 800fcb0:	2a6f      	cmp	r2, #111	; 0x6f
 800fcb2:	d02a      	beq.n	800fd0a <_printf_i+0xb6>
 800fcb4:	2a70      	cmp	r2, #112	; 0x70
 800fcb6:	d1e5      	bne.n	800fc84 <_printf_i+0x30>
 800fcb8:	680a      	ldr	r2, [r1, #0]
 800fcba:	f042 0220 	orr.w	r2, r2, #32
 800fcbe:	600a      	str	r2, [r1, #0]
 800fcc0:	e003      	b.n	800fcca <_printf_i+0x76>
 800fcc2:	2a75      	cmp	r2, #117	; 0x75
 800fcc4:	d021      	beq.n	800fd0a <_printf_i+0xb6>
 800fcc6:	2a78      	cmp	r2, #120	; 0x78
 800fcc8:	d1dc      	bne.n	800fc84 <_printf_i+0x30>
 800fcca:	2278      	movs	r2, #120	; 0x78
 800fccc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800fcd0:	496e      	ldr	r1, [pc, #440]	; (800fe8c <_printf_i+0x238>)
 800fcd2:	e064      	b.n	800fd9e <_printf_i+0x14a>
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800fcda:	1d11      	adds	r1, r2, #4
 800fcdc:	6019      	str	r1, [r3, #0]
 800fcde:	6813      	ldr	r3, [r2, #0]
 800fce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fce4:	2301      	movs	r3, #1
 800fce6:	e0a3      	b.n	800fe30 <_printf_i+0x1dc>
 800fce8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800fcec:	f102 0104 	add.w	r1, r2, #4
 800fcf0:	6019      	str	r1, [r3, #0]
 800fcf2:	d0d7      	beq.n	800fca4 <_printf_i+0x50>
 800fcf4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	da03      	bge.n	800fd04 <_printf_i+0xb0>
 800fcfc:	222d      	movs	r2, #45	; 0x2d
 800fcfe:	425b      	negs	r3, r3
 800fd00:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fd04:	4962      	ldr	r1, [pc, #392]	; (800fe90 <_printf_i+0x23c>)
 800fd06:	220a      	movs	r2, #10
 800fd08:	e017      	b.n	800fd3a <_printf_i+0xe6>
 800fd0a:	6820      	ldr	r0, [r4, #0]
 800fd0c:	6819      	ldr	r1, [r3, #0]
 800fd0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800fd12:	d003      	beq.n	800fd1c <_printf_i+0xc8>
 800fd14:	1d08      	adds	r0, r1, #4
 800fd16:	6018      	str	r0, [r3, #0]
 800fd18:	680b      	ldr	r3, [r1, #0]
 800fd1a:	e006      	b.n	800fd2a <_printf_i+0xd6>
 800fd1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd20:	f101 0004 	add.w	r0, r1, #4
 800fd24:	6018      	str	r0, [r3, #0]
 800fd26:	d0f7      	beq.n	800fd18 <_printf_i+0xc4>
 800fd28:	880b      	ldrh	r3, [r1, #0]
 800fd2a:	4959      	ldr	r1, [pc, #356]	; (800fe90 <_printf_i+0x23c>)
 800fd2c:	2a6f      	cmp	r2, #111	; 0x6f
 800fd2e:	bf14      	ite	ne
 800fd30:	220a      	movne	r2, #10
 800fd32:	2208      	moveq	r2, #8
 800fd34:	2000      	movs	r0, #0
 800fd36:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800fd3a:	6865      	ldr	r5, [r4, #4]
 800fd3c:	60a5      	str	r5, [r4, #8]
 800fd3e:	2d00      	cmp	r5, #0
 800fd40:	f2c0 809c 	blt.w	800fe7c <_printf_i+0x228>
 800fd44:	6820      	ldr	r0, [r4, #0]
 800fd46:	f020 0004 	bic.w	r0, r0, #4
 800fd4a:	6020      	str	r0, [r4, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d13f      	bne.n	800fdd0 <_printf_i+0x17c>
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	f040 8095 	bne.w	800fe80 <_printf_i+0x22c>
 800fd56:	4675      	mov	r5, lr
 800fd58:	2a08      	cmp	r2, #8
 800fd5a:	d10b      	bne.n	800fd74 <_printf_i+0x120>
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	07da      	lsls	r2, r3, #31
 800fd60:	d508      	bpl.n	800fd74 <_printf_i+0x120>
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	6862      	ldr	r2, [r4, #4]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	bfde      	ittt	le
 800fd6a:	2330      	movle	r3, #48	; 0x30
 800fd6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd74:	ebae 0305 	sub.w	r3, lr, r5
 800fd78:	6123      	str	r3, [r4, #16]
 800fd7a:	f8cd 8000 	str.w	r8, [sp]
 800fd7e:	463b      	mov	r3, r7
 800fd80:	aa03      	add	r2, sp, #12
 800fd82:	4621      	mov	r1, r4
 800fd84:	4630      	mov	r0, r6
 800fd86:	f7ff feef 	bl	800fb68 <_printf_common>
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	d155      	bne.n	800fe3a <_printf_i+0x1e6>
 800fd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd92:	b005      	add	sp, #20
 800fd94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd98:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800fd9c:	493c      	ldr	r1, [pc, #240]	; (800fe90 <_printf_i+0x23c>)
 800fd9e:	6822      	ldr	r2, [r4, #0]
 800fda0:	6818      	ldr	r0, [r3, #0]
 800fda2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800fda6:	f100 0504 	add.w	r5, r0, #4
 800fdaa:	601d      	str	r5, [r3, #0]
 800fdac:	d001      	beq.n	800fdb2 <_printf_i+0x15e>
 800fdae:	6803      	ldr	r3, [r0, #0]
 800fdb0:	e002      	b.n	800fdb8 <_printf_i+0x164>
 800fdb2:	0655      	lsls	r5, r2, #25
 800fdb4:	d5fb      	bpl.n	800fdae <_printf_i+0x15a>
 800fdb6:	8803      	ldrh	r3, [r0, #0]
 800fdb8:	07d0      	lsls	r0, r2, #31
 800fdba:	bf44      	itt	mi
 800fdbc:	f042 0220 	orrmi.w	r2, r2, #32
 800fdc0:	6022      	strmi	r2, [r4, #0]
 800fdc2:	b91b      	cbnz	r3, 800fdcc <_printf_i+0x178>
 800fdc4:	6822      	ldr	r2, [r4, #0]
 800fdc6:	f022 0220 	bic.w	r2, r2, #32
 800fdca:	6022      	str	r2, [r4, #0]
 800fdcc:	2210      	movs	r2, #16
 800fdce:	e7b1      	b.n	800fd34 <_printf_i+0xe0>
 800fdd0:	4675      	mov	r5, lr
 800fdd2:	fbb3 f0f2 	udiv	r0, r3, r2
 800fdd6:	fb02 3310 	mls	r3, r2, r0, r3
 800fdda:	5ccb      	ldrb	r3, [r1, r3]
 800fddc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fde0:	4603      	mov	r3, r0
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d1f5      	bne.n	800fdd2 <_printf_i+0x17e>
 800fde6:	e7b7      	b.n	800fd58 <_printf_i+0x104>
 800fde8:	6808      	ldr	r0, [r1, #0]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	6949      	ldr	r1, [r1, #20]
 800fdee:	f010 0f80 	tst.w	r0, #128	; 0x80
 800fdf2:	d004      	beq.n	800fdfe <_printf_i+0x1aa>
 800fdf4:	1d10      	adds	r0, r2, #4
 800fdf6:	6018      	str	r0, [r3, #0]
 800fdf8:	6813      	ldr	r3, [r2, #0]
 800fdfa:	6019      	str	r1, [r3, #0]
 800fdfc:	e007      	b.n	800fe0e <_printf_i+0x1ba>
 800fdfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe02:	f102 0004 	add.w	r0, r2, #4
 800fe06:	6018      	str	r0, [r3, #0]
 800fe08:	6813      	ldr	r3, [r2, #0]
 800fe0a:	d0f6      	beq.n	800fdfa <_printf_i+0x1a6>
 800fe0c:	8019      	strh	r1, [r3, #0]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	6123      	str	r3, [r4, #16]
 800fe12:	4675      	mov	r5, lr
 800fe14:	e7b1      	b.n	800fd7a <_printf_i+0x126>
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	1d11      	adds	r1, r2, #4
 800fe1a:	6019      	str	r1, [r3, #0]
 800fe1c:	6815      	ldr	r5, [r2, #0]
 800fe1e:	6862      	ldr	r2, [r4, #4]
 800fe20:	2100      	movs	r1, #0
 800fe22:	4628      	mov	r0, r5
 800fe24:	f7f0 f9dc 	bl	80001e0 <memchr>
 800fe28:	b108      	cbz	r0, 800fe2e <_printf_i+0x1da>
 800fe2a:	1b40      	subs	r0, r0, r5
 800fe2c:	6060      	str	r0, [r4, #4]
 800fe2e:	6863      	ldr	r3, [r4, #4]
 800fe30:	6123      	str	r3, [r4, #16]
 800fe32:	2300      	movs	r3, #0
 800fe34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe38:	e79f      	b.n	800fd7a <_printf_i+0x126>
 800fe3a:	6923      	ldr	r3, [r4, #16]
 800fe3c:	462a      	mov	r2, r5
 800fe3e:	4639      	mov	r1, r7
 800fe40:	4630      	mov	r0, r6
 800fe42:	47c0      	blx	r8
 800fe44:	3001      	adds	r0, #1
 800fe46:	d0a2      	beq.n	800fd8e <_printf_i+0x13a>
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	079b      	lsls	r3, r3, #30
 800fe4c:	d507      	bpl.n	800fe5e <_printf_i+0x20a>
 800fe4e:	2500      	movs	r5, #0
 800fe50:	f104 0919 	add.w	r9, r4, #25
 800fe54:	68e3      	ldr	r3, [r4, #12]
 800fe56:	9a03      	ldr	r2, [sp, #12]
 800fe58:	1a9b      	subs	r3, r3, r2
 800fe5a:	429d      	cmp	r5, r3
 800fe5c:	db05      	blt.n	800fe6a <_printf_i+0x216>
 800fe5e:	68e0      	ldr	r0, [r4, #12]
 800fe60:	9b03      	ldr	r3, [sp, #12]
 800fe62:	4298      	cmp	r0, r3
 800fe64:	bfb8      	it	lt
 800fe66:	4618      	movlt	r0, r3
 800fe68:	e793      	b.n	800fd92 <_printf_i+0x13e>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	464a      	mov	r2, r9
 800fe6e:	4639      	mov	r1, r7
 800fe70:	4630      	mov	r0, r6
 800fe72:	47c0      	blx	r8
 800fe74:	3001      	adds	r0, #1
 800fe76:	d08a      	beq.n	800fd8e <_printf_i+0x13a>
 800fe78:	3501      	adds	r5, #1
 800fe7a:	e7eb      	b.n	800fe54 <_printf_i+0x200>
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d1a7      	bne.n	800fdd0 <_printf_i+0x17c>
 800fe80:	780b      	ldrb	r3, [r1, #0]
 800fe82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe8a:	e765      	b.n	800fd58 <_printf_i+0x104>
 800fe8c:	080106f2 	.word	0x080106f2
 800fe90:	080106e1 	.word	0x080106e1

0800fe94 <iprintf>:
 800fe94:	b40f      	push	{r0, r1, r2, r3}
 800fe96:	4b0a      	ldr	r3, [pc, #40]	; (800fec0 <iprintf+0x2c>)
 800fe98:	b513      	push	{r0, r1, r4, lr}
 800fe9a:	681c      	ldr	r4, [r3, #0]
 800fe9c:	b124      	cbz	r4, 800fea8 <iprintf+0x14>
 800fe9e:	69a3      	ldr	r3, [r4, #24]
 800fea0:	b913      	cbnz	r3, 800fea8 <iprintf+0x14>
 800fea2:	4620      	mov	r0, r4
 800fea4:	f7ff fb46 	bl	800f534 <__sinit>
 800fea8:	ab05      	add	r3, sp, #20
 800feaa:	9a04      	ldr	r2, [sp, #16]
 800feac:	68a1      	ldr	r1, [r4, #8]
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	4620      	mov	r0, r4
 800feb2:	f7ff fd43 	bl	800f93c <_vfiprintf_r>
 800feb6:	b002      	add	sp, #8
 800feb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800febc:	b004      	add	sp, #16
 800febe:	4770      	bx	lr
 800fec0:	200002f4 	.word	0x200002f4

0800fec4 <_puts_r>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	460e      	mov	r6, r1
 800fec8:	4605      	mov	r5, r0
 800feca:	b118      	cbz	r0, 800fed4 <_puts_r+0x10>
 800fecc:	6983      	ldr	r3, [r0, #24]
 800fece:	b90b      	cbnz	r3, 800fed4 <_puts_r+0x10>
 800fed0:	f7ff fb30 	bl	800f534 <__sinit>
 800fed4:	69ab      	ldr	r3, [r5, #24]
 800fed6:	68ac      	ldr	r4, [r5, #8]
 800fed8:	b913      	cbnz	r3, 800fee0 <_puts_r+0x1c>
 800feda:	4628      	mov	r0, r5
 800fedc:	f7ff fb2a 	bl	800f534 <__sinit>
 800fee0:	4b23      	ldr	r3, [pc, #140]	; (800ff70 <_puts_r+0xac>)
 800fee2:	429c      	cmp	r4, r3
 800fee4:	d117      	bne.n	800ff16 <_puts_r+0x52>
 800fee6:	686c      	ldr	r4, [r5, #4]
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	071b      	lsls	r3, r3, #28
 800feec:	d51d      	bpl.n	800ff2a <_puts_r+0x66>
 800feee:	6923      	ldr	r3, [r4, #16]
 800fef0:	b1db      	cbz	r3, 800ff2a <_puts_r+0x66>
 800fef2:	3e01      	subs	r6, #1
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fefa:	3b01      	subs	r3, #1
 800fefc:	60a3      	str	r3, [r4, #8]
 800fefe:	b9e9      	cbnz	r1, 800ff3c <_puts_r+0x78>
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	da2e      	bge.n	800ff62 <_puts_r+0x9e>
 800ff04:	4622      	mov	r2, r4
 800ff06:	210a      	movs	r1, #10
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f000 f8af 	bl	801006c <__swbuf_r>
 800ff0e:	3001      	adds	r0, #1
 800ff10:	d011      	beq.n	800ff36 <_puts_r+0x72>
 800ff12:	200a      	movs	r0, #10
 800ff14:	bd70      	pop	{r4, r5, r6, pc}
 800ff16:	4b17      	ldr	r3, [pc, #92]	; (800ff74 <_puts_r+0xb0>)
 800ff18:	429c      	cmp	r4, r3
 800ff1a:	d101      	bne.n	800ff20 <_puts_r+0x5c>
 800ff1c:	68ac      	ldr	r4, [r5, #8]
 800ff1e:	e7e3      	b.n	800fee8 <_puts_r+0x24>
 800ff20:	4b15      	ldr	r3, [pc, #84]	; (800ff78 <_puts_r+0xb4>)
 800ff22:	429c      	cmp	r4, r3
 800ff24:	bf08      	it	eq
 800ff26:	68ec      	ldreq	r4, [r5, #12]
 800ff28:	e7de      	b.n	800fee8 <_puts_r+0x24>
 800ff2a:	4621      	mov	r1, r4
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f000 f901 	bl	8010134 <__swsetup_r>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	d0dd      	beq.n	800fef2 <_puts_r+0x2e>
 800ff36:	f04f 30ff 	mov.w	r0, #4294967295
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	da04      	bge.n	800ff4a <_puts_r+0x86>
 800ff40:	69a2      	ldr	r2, [r4, #24]
 800ff42:	4293      	cmp	r3, r2
 800ff44:	db06      	blt.n	800ff54 <_puts_r+0x90>
 800ff46:	290a      	cmp	r1, #10
 800ff48:	d004      	beq.n	800ff54 <_puts_r+0x90>
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	1c5a      	adds	r2, r3, #1
 800ff4e:	6022      	str	r2, [r4, #0]
 800ff50:	7019      	strb	r1, [r3, #0]
 800ff52:	e7cf      	b.n	800fef4 <_puts_r+0x30>
 800ff54:	4622      	mov	r2, r4
 800ff56:	4628      	mov	r0, r5
 800ff58:	f000 f888 	bl	801006c <__swbuf_r>
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d1c9      	bne.n	800fef4 <_puts_r+0x30>
 800ff60:	e7e9      	b.n	800ff36 <_puts_r+0x72>
 800ff62:	6823      	ldr	r3, [r4, #0]
 800ff64:	200a      	movs	r0, #10
 800ff66:	1c5a      	adds	r2, r3, #1
 800ff68:	6022      	str	r2, [r4, #0]
 800ff6a:	7018      	strb	r0, [r3, #0]
 800ff6c:	bd70      	pop	{r4, r5, r6, pc}
 800ff6e:	bf00      	nop
 800ff70:	0801068c 	.word	0x0801068c
 800ff74:	080106ac 	.word	0x080106ac
 800ff78:	0801066c 	.word	0x0801066c

0800ff7c <puts>:
 800ff7c:	4b02      	ldr	r3, [pc, #8]	; (800ff88 <puts+0xc>)
 800ff7e:	4601      	mov	r1, r0
 800ff80:	6818      	ldr	r0, [r3, #0]
 800ff82:	f7ff bf9f 	b.w	800fec4 <_puts_r>
 800ff86:	bf00      	nop
 800ff88:	200002f4 	.word	0x200002f4

0800ff8c <_sbrk_r>:
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	4c06      	ldr	r4, [pc, #24]	; (800ffa8 <_sbrk_r+0x1c>)
 800ff90:	2300      	movs	r3, #0
 800ff92:	4605      	mov	r5, r0
 800ff94:	4608      	mov	r0, r1
 800ff96:	6023      	str	r3, [r4, #0]
 800ff98:	f000 f9ba 	bl	8010310 <_sbrk>
 800ff9c:	1c43      	adds	r3, r0, #1
 800ff9e:	d102      	bne.n	800ffa6 <_sbrk_r+0x1a>
 800ffa0:	6823      	ldr	r3, [r4, #0]
 800ffa2:	b103      	cbz	r3, 800ffa6 <_sbrk_r+0x1a>
 800ffa4:	602b      	str	r3, [r5, #0]
 800ffa6:	bd38      	pop	{r3, r4, r5, pc}
 800ffa8:	20000c64 	.word	0x20000c64

0800ffac <__sread>:
 800ffac:	b510      	push	{r4, lr}
 800ffae:	460c      	mov	r4, r1
 800ffb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb4:	f000 f972 	bl	801029c <_read_r>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	bfab      	itete	ge
 800ffbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ffbe:	89a3      	ldrhlt	r3, [r4, #12]
 800ffc0:	181b      	addge	r3, r3, r0
 800ffc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffc6:	bfac      	ite	ge
 800ffc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffca:	81a3      	strhlt	r3, [r4, #12]
 800ffcc:	bd10      	pop	{r4, pc}

0800ffce <__swrite>:
 800ffce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd2:	461f      	mov	r7, r3
 800ffd4:	898b      	ldrh	r3, [r1, #12]
 800ffd6:	05db      	lsls	r3, r3, #23
 800ffd8:	4605      	mov	r5, r0
 800ffda:	460c      	mov	r4, r1
 800ffdc:	4616      	mov	r6, r2
 800ffde:	d505      	bpl.n	800ffec <__swrite+0x1e>
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffe8:	f000 f944 	bl	8010274 <_lseek_r>
 800ffec:	89a3      	ldrh	r3, [r4, #12]
 800ffee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fff6:	81a3      	strh	r3, [r4, #12]
 800fff8:	4632      	mov	r2, r6
 800fffa:	463b      	mov	r3, r7
 800fffc:	4628      	mov	r0, r5
 800fffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010002:	f000 b885 	b.w	8010110 <_write_r>

08010006 <__sseek>:
 8010006:	b510      	push	{r4, lr}
 8010008:	460c      	mov	r4, r1
 801000a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801000e:	f000 f931 	bl	8010274 <_lseek_r>
 8010012:	1c43      	adds	r3, r0, #1
 8010014:	89a3      	ldrh	r3, [r4, #12]
 8010016:	bf15      	itete	ne
 8010018:	6560      	strne	r0, [r4, #84]	; 0x54
 801001a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801001e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010022:	81a3      	strheq	r3, [r4, #12]
 8010024:	bf18      	it	ne
 8010026:	81a3      	strhne	r3, [r4, #12]
 8010028:	bd10      	pop	{r4, pc}

0801002a <__sclose>:
 801002a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801002e:	f000 b8ef 	b.w	8010210 <_close_r>

08010032 <strcpy>:
 8010032:	4603      	mov	r3, r0
 8010034:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010038:	f803 2b01 	strb.w	r2, [r3], #1
 801003c:	2a00      	cmp	r2, #0
 801003e:	d1f9      	bne.n	8010034 <strcpy+0x2>
 8010040:	4770      	bx	lr

08010042 <strncpy>:
 8010042:	b570      	push	{r4, r5, r6, lr}
 8010044:	4604      	mov	r4, r0
 8010046:	b902      	cbnz	r2, 801004a <strncpy+0x8>
 8010048:	bd70      	pop	{r4, r5, r6, pc}
 801004a:	4623      	mov	r3, r4
 801004c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010050:	f803 5b01 	strb.w	r5, [r3], #1
 8010054:	1e56      	subs	r6, r2, #1
 8010056:	b91d      	cbnz	r5, 8010060 <strncpy+0x1e>
 8010058:	4414      	add	r4, r2
 801005a:	42a3      	cmp	r3, r4
 801005c:	d103      	bne.n	8010066 <strncpy+0x24>
 801005e:	bd70      	pop	{r4, r5, r6, pc}
 8010060:	461c      	mov	r4, r3
 8010062:	4632      	mov	r2, r6
 8010064:	e7ef      	b.n	8010046 <strncpy+0x4>
 8010066:	f803 5b01 	strb.w	r5, [r3], #1
 801006a:	e7f6      	b.n	801005a <strncpy+0x18>

0801006c <__swbuf_r>:
 801006c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006e:	460e      	mov	r6, r1
 8010070:	4614      	mov	r4, r2
 8010072:	4605      	mov	r5, r0
 8010074:	b118      	cbz	r0, 801007e <__swbuf_r+0x12>
 8010076:	6983      	ldr	r3, [r0, #24]
 8010078:	b90b      	cbnz	r3, 801007e <__swbuf_r+0x12>
 801007a:	f7ff fa5b 	bl	800f534 <__sinit>
 801007e:	4b21      	ldr	r3, [pc, #132]	; (8010104 <__swbuf_r+0x98>)
 8010080:	429c      	cmp	r4, r3
 8010082:	d12a      	bne.n	80100da <__swbuf_r+0x6e>
 8010084:	686c      	ldr	r4, [r5, #4]
 8010086:	69a3      	ldr	r3, [r4, #24]
 8010088:	60a3      	str	r3, [r4, #8]
 801008a:	89a3      	ldrh	r3, [r4, #12]
 801008c:	071a      	lsls	r2, r3, #28
 801008e:	d52e      	bpl.n	80100ee <__swbuf_r+0x82>
 8010090:	6923      	ldr	r3, [r4, #16]
 8010092:	b363      	cbz	r3, 80100ee <__swbuf_r+0x82>
 8010094:	6923      	ldr	r3, [r4, #16]
 8010096:	6820      	ldr	r0, [r4, #0]
 8010098:	1ac0      	subs	r0, r0, r3
 801009a:	6963      	ldr	r3, [r4, #20]
 801009c:	b2f6      	uxtb	r6, r6
 801009e:	4298      	cmp	r0, r3
 80100a0:	4637      	mov	r7, r6
 80100a2:	db04      	blt.n	80100ae <__swbuf_r+0x42>
 80100a4:	4621      	mov	r1, r4
 80100a6:	4628      	mov	r0, r5
 80100a8:	f7ff f9da 	bl	800f460 <_fflush_r>
 80100ac:	bb28      	cbnz	r0, 80100fa <__swbuf_r+0x8e>
 80100ae:	68a3      	ldr	r3, [r4, #8]
 80100b0:	3b01      	subs	r3, #1
 80100b2:	60a3      	str	r3, [r4, #8]
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	1c5a      	adds	r2, r3, #1
 80100b8:	6022      	str	r2, [r4, #0]
 80100ba:	701e      	strb	r6, [r3, #0]
 80100bc:	6963      	ldr	r3, [r4, #20]
 80100be:	3001      	adds	r0, #1
 80100c0:	4298      	cmp	r0, r3
 80100c2:	d004      	beq.n	80100ce <__swbuf_r+0x62>
 80100c4:	89a3      	ldrh	r3, [r4, #12]
 80100c6:	07db      	lsls	r3, r3, #31
 80100c8:	d519      	bpl.n	80100fe <__swbuf_r+0x92>
 80100ca:	2e0a      	cmp	r6, #10
 80100cc:	d117      	bne.n	80100fe <__swbuf_r+0x92>
 80100ce:	4621      	mov	r1, r4
 80100d0:	4628      	mov	r0, r5
 80100d2:	f7ff f9c5 	bl	800f460 <_fflush_r>
 80100d6:	b190      	cbz	r0, 80100fe <__swbuf_r+0x92>
 80100d8:	e00f      	b.n	80100fa <__swbuf_r+0x8e>
 80100da:	4b0b      	ldr	r3, [pc, #44]	; (8010108 <__swbuf_r+0x9c>)
 80100dc:	429c      	cmp	r4, r3
 80100de:	d101      	bne.n	80100e4 <__swbuf_r+0x78>
 80100e0:	68ac      	ldr	r4, [r5, #8]
 80100e2:	e7d0      	b.n	8010086 <__swbuf_r+0x1a>
 80100e4:	4b09      	ldr	r3, [pc, #36]	; (801010c <__swbuf_r+0xa0>)
 80100e6:	429c      	cmp	r4, r3
 80100e8:	bf08      	it	eq
 80100ea:	68ec      	ldreq	r4, [r5, #12]
 80100ec:	e7cb      	b.n	8010086 <__swbuf_r+0x1a>
 80100ee:	4621      	mov	r1, r4
 80100f0:	4628      	mov	r0, r5
 80100f2:	f000 f81f 	bl	8010134 <__swsetup_r>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d0cc      	beq.n	8010094 <__swbuf_r+0x28>
 80100fa:	f04f 37ff 	mov.w	r7, #4294967295
 80100fe:	4638      	mov	r0, r7
 8010100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010102:	bf00      	nop
 8010104:	0801068c 	.word	0x0801068c
 8010108:	080106ac 	.word	0x080106ac
 801010c:	0801066c 	.word	0x0801066c

08010110 <_write_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4c07      	ldr	r4, [pc, #28]	; (8010130 <_write_r+0x20>)
 8010114:	4605      	mov	r5, r0
 8010116:	4608      	mov	r0, r1
 8010118:	4611      	mov	r1, r2
 801011a:	2200      	movs	r2, #0
 801011c:	6022      	str	r2, [r4, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	f7f3 ff92 	bl	8004048 <_write>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_write_r+0x1e>
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	b103      	cbz	r3, 801012e <_write_r+0x1e>
 801012c:	602b      	str	r3, [r5, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	20000c64 	.word	0x20000c64

08010134 <__swsetup_r>:
 8010134:	4b32      	ldr	r3, [pc, #200]	; (8010200 <__swsetup_r+0xcc>)
 8010136:	b570      	push	{r4, r5, r6, lr}
 8010138:	681d      	ldr	r5, [r3, #0]
 801013a:	4606      	mov	r6, r0
 801013c:	460c      	mov	r4, r1
 801013e:	b125      	cbz	r5, 801014a <__swsetup_r+0x16>
 8010140:	69ab      	ldr	r3, [r5, #24]
 8010142:	b913      	cbnz	r3, 801014a <__swsetup_r+0x16>
 8010144:	4628      	mov	r0, r5
 8010146:	f7ff f9f5 	bl	800f534 <__sinit>
 801014a:	4b2e      	ldr	r3, [pc, #184]	; (8010204 <__swsetup_r+0xd0>)
 801014c:	429c      	cmp	r4, r3
 801014e:	d10f      	bne.n	8010170 <__swsetup_r+0x3c>
 8010150:	686c      	ldr	r4, [r5, #4]
 8010152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010156:	b29a      	uxth	r2, r3
 8010158:	0715      	lsls	r5, r2, #28
 801015a:	d42c      	bmi.n	80101b6 <__swsetup_r+0x82>
 801015c:	06d0      	lsls	r0, r2, #27
 801015e:	d411      	bmi.n	8010184 <__swsetup_r+0x50>
 8010160:	2209      	movs	r2, #9
 8010162:	6032      	str	r2, [r6, #0]
 8010164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010168:	81a3      	strh	r3, [r4, #12]
 801016a:	f04f 30ff 	mov.w	r0, #4294967295
 801016e:	bd70      	pop	{r4, r5, r6, pc}
 8010170:	4b25      	ldr	r3, [pc, #148]	; (8010208 <__swsetup_r+0xd4>)
 8010172:	429c      	cmp	r4, r3
 8010174:	d101      	bne.n	801017a <__swsetup_r+0x46>
 8010176:	68ac      	ldr	r4, [r5, #8]
 8010178:	e7eb      	b.n	8010152 <__swsetup_r+0x1e>
 801017a:	4b24      	ldr	r3, [pc, #144]	; (801020c <__swsetup_r+0xd8>)
 801017c:	429c      	cmp	r4, r3
 801017e:	bf08      	it	eq
 8010180:	68ec      	ldreq	r4, [r5, #12]
 8010182:	e7e6      	b.n	8010152 <__swsetup_r+0x1e>
 8010184:	0751      	lsls	r1, r2, #29
 8010186:	d512      	bpl.n	80101ae <__swsetup_r+0x7a>
 8010188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801018a:	b141      	cbz	r1, 801019e <__swsetup_r+0x6a>
 801018c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010190:	4299      	cmp	r1, r3
 8010192:	d002      	beq.n	801019a <__swsetup_r+0x66>
 8010194:	4630      	mov	r0, r6
 8010196:	f7ff fafb 	bl	800f790 <_free_r>
 801019a:	2300      	movs	r3, #0
 801019c:	6363      	str	r3, [r4, #52]	; 0x34
 801019e:	89a3      	ldrh	r3, [r4, #12]
 80101a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101a4:	81a3      	strh	r3, [r4, #12]
 80101a6:	2300      	movs	r3, #0
 80101a8:	6063      	str	r3, [r4, #4]
 80101aa:	6923      	ldr	r3, [r4, #16]
 80101ac:	6023      	str	r3, [r4, #0]
 80101ae:	89a3      	ldrh	r3, [r4, #12]
 80101b0:	f043 0308 	orr.w	r3, r3, #8
 80101b4:	81a3      	strh	r3, [r4, #12]
 80101b6:	6923      	ldr	r3, [r4, #16]
 80101b8:	b94b      	cbnz	r3, 80101ce <__swsetup_r+0x9a>
 80101ba:	89a3      	ldrh	r3, [r4, #12]
 80101bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101c4:	d003      	beq.n	80101ce <__swsetup_r+0x9a>
 80101c6:	4621      	mov	r1, r4
 80101c8:	4630      	mov	r0, r6
 80101ca:	f7ff fa85 	bl	800f6d8 <__smakebuf_r>
 80101ce:	89a2      	ldrh	r2, [r4, #12]
 80101d0:	f012 0301 	ands.w	r3, r2, #1
 80101d4:	d00c      	beq.n	80101f0 <__swsetup_r+0xbc>
 80101d6:	2300      	movs	r3, #0
 80101d8:	60a3      	str	r3, [r4, #8]
 80101da:	6963      	ldr	r3, [r4, #20]
 80101dc:	425b      	negs	r3, r3
 80101de:	61a3      	str	r3, [r4, #24]
 80101e0:	6923      	ldr	r3, [r4, #16]
 80101e2:	b953      	cbnz	r3, 80101fa <__swsetup_r+0xc6>
 80101e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80101ec:	d1ba      	bne.n	8010164 <__swsetup_r+0x30>
 80101ee:	bd70      	pop	{r4, r5, r6, pc}
 80101f0:	0792      	lsls	r2, r2, #30
 80101f2:	bf58      	it	pl
 80101f4:	6963      	ldrpl	r3, [r4, #20]
 80101f6:	60a3      	str	r3, [r4, #8]
 80101f8:	e7f2      	b.n	80101e0 <__swsetup_r+0xac>
 80101fa:	2000      	movs	r0, #0
 80101fc:	e7f7      	b.n	80101ee <__swsetup_r+0xba>
 80101fe:	bf00      	nop
 8010200:	200002f4 	.word	0x200002f4
 8010204:	0801068c 	.word	0x0801068c
 8010208:	080106ac 	.word	0x080106ac
 801020c:	0801066c 	.word	0x0801066c

08010210 <_close_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4c06      	ldr	r4, [pc, #24]	; (801022c <_close_r+0x1c>)
 8010214:	2300      	movs	r3, #0
 8010216:	4605      	mov	r5, r0
 8010218:	4608      	mov	r0, r1
 801021a:	6023      	str	r3, [r4, #0]
 801021c:	f000 f850 	bl	80102c0 <_close>
 8010220:	1c43      	adds	r3, r0, #1
 8010222:	d102      	bne.n	801022a <_close_r+0x1a>
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	b103      	cbz	r3, 801022a <_close_r+0x1a>
 8010228:	602b      	str	r3, [r5, #0]
 801022a:	bd38      	pop	{r3, r4, r5, pc}
 801022c:	20000c64 	.word	0x20000c64

08010230 <_fstat_r>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	4c07      	ldr	r4, [pc, #28]	; (8010250 <_fstat_r+0x20>)
 8010234:	2300      	movs	r3, #0
 8010236:	4605      	mov	r5, r0
 8010238:	4608      	mov	r0, r1
 801023a:	4611      	mov	r1, r2
 801023c:	6023      	str	r3, [r4, #0]
 801023e:	f000 f847 	bl	80102d0 <_fstat>
 8010242:	1c43      	adds	r3, r0, #1
 8010244:	d102      	bne.n	801024c <_fstat_r+0x1c>
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	b103      	cbz	r3, 801024c <_fstat_r+0x1c>
 801024a:	602b      	str	r3, [r5, #0]
 801024c:	bd38      	pop	{r3, r4, r5, pc}
 801024e:	bf00      	nop
 8010250:	20000c64 	.word	0x20000c64

08010254 <_isatty_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4c06      	ldr	r4, [pc, #24]	; (8010270 <_isatty_r+0x1c>)
 8010258:	2300      	movs	r3, #0
 801025a:	4605      	mov	r5, r0
 801025c:	4608      	mov	r0, r1
 801025e:	6023      	str	r3, [r4, #0]
 8010260:	f000 f83e 	bl	80102e0 <_isatty>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_isatty_r+0x1a>
 8010268:	6823      	ldr	r3, [r4, #0]
 801026a:	b103      	cbz	r3, 801026e <_isatty_r+0x1a>
 801026c:	602b      	str	r3, [r5, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	20000c64 	.word	0x20000c64

08010274 <_lseek_r>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	4c07      	ldr	r4, [pc, #28]	; (8010294 <_lseek_r+0x20>)
 8010278:	4605      	mov	r5, r0
 801027a:	4608      	mov	r0, r1
 801027c:	4611      	mov	r1, r2
 801027e:	2200      	movs	r2, #0
 8010280:	6022      	str	r2, [r4, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	f000 f834 	bl	80102f0 <_lseek>
 8010288:	1c43      	adds	r3, r0, #1
 801028a:	d102      	bne.n	8010292 <_lseek_r+0x1e>
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	b103      	cbz	r3, 8010292 <_lseek_r+0x1e>
 8010290:	602b      	str	r3, [r5, #0]
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	20000c64 	.word	0x20000c64

08010298 <__malloc_lock>:
 8010298:	4770      	bx	lr

0801029a <__malloc_unlock>:
 801029a:	4770      	bx	lr

0801029c <_read_r>:
 801029c:	b538      	push	{r3, r4, r5, lr}
 801029e:	4c07      	ldr	r4, [pc, #28]	; (80102bc <_read_r+0x20>)
 80102a0:	4605      	mov	r5, r0
 80102a2:	4608      	mov	r0, r1
 80102a4:	4611      	mov	r1, r2
 80102a6:	2200      	movs	r2, #0
 80102a8:	6022      	str	r2, [r4, #0]
 80102aa:	461a      	mov	r2, r3
 80102ac:	f000 f828 	bl	8010300 <_read>
 80102b0:	1c43      	adds	r3, r0, #1
 80102b2:	d102      	bne.n	80102ba <_read_r+0x1e>
 80102b4:	6823      	ldr	r3, [r4, #0]
 80102b6:	b103      	cbz	r3, 80102ba <_read_r+0x1e>
 80102b8:	602b      	str	r3, [r5, #0]
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
 80102bc:	20000c64 	.word	0x20000c64

080102c0 <_close>:
 80102c0:	4b02      	ldr	r3, [pc, #8]	; (80102cc <_close+0xc>)
 80102c2:	2258      	movs	r2, #88	; 0x58
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ca:	4770      	bx	lr
 80102cc:	20000c64 	.word	0x20000c64

080102d0 <_fstat>:
 80102d0:	4b02      	ldr	r3, [pc, #8]	; (80102dc <_fstat+0xc>)
 80102d2:	2258      	movs	r2, #88	; 0x58
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	f04f 30ff 	mov.w	r0, #4294967295
 80102da:	4770      	bx	lr
 80102dc:	20000c64 	.word	0x20000c64

080102e0 <_isatty>:
 80102e0:	4b02      	ldr	r3, [pc, #8]	; (80102ec <_isatty+0xc>)
 80102e2:	2258      	movs	r2, #88	; 0x58
 80102e4:	601a      	str	r2, [r3, #0]
 80102e6:	2000      	movs	r0, #0
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop
 80102ec:	20000c64 	.word	0x20000c64

080102f0 <_lseek>:
 80102f0:	4b02      	ldr	r3, [pc, #8]	; (80102fc <_lseek+0xc>)
 80102f2:	2258      	movs	r2, #88	; 0x58
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	f04f 30ff 	mov.w	r0, #4294967295
 80102fa:	4770      	bx	lr
 80102fc:	20000c64 	.word	0x20000c64

08010300 <_read>:
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <_read+0xc>)
 8010302:	2258      	movs	r2, #88	; 0x58
 8010304:	601a      	str	r2, [r3, #0]
 8010306:	f04f 30ff 	mov.w	r0, #4294967295
 801030a:	4770      	bx	lr
 801030c:	20000c64 	.word	0x20000c64

08010310 <_sbrk>:
 8010310:	4b04      	ldr	r3, [pc, #16]	; (8010324 <_sbrk+0x14>)
 8010312:	6819      	ldr	r1, [r3, #0]
 8010314:	4602      	mov	r2, r0
 8010316:	b909      	cbnz	r1, 801031c <_sbrk+0xc>
 8010318:	4903      	ldr	r1, [pc, #12]	; (8010328 <_sbrk+0x18>)
 801031a:	6019      	str	r1, [r3, #0]
 801031c:	6818      	ldr	r0, [r3, #0]
 801031e:	4402      	add	r2, r0
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	4770      	bx	lr
 8010324:	200003b8 	.word	0x200003b8
 8010328:	20000c68 	.word	0x20000c68

0801032c <_init>:
 801032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032e:	bf00      	nop
 8010330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010332:	bc08      	pop	{r3}
 8010334:	469e      	mov	lr, r3
 8010336:	4770      	bx	lr

08010338 <_fini>:
 8010338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033a:	bf00      	nop
 801033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801033e:	bc08      	pop	{r3}
 8010340:	469e      	mov	lr, r3
 8010342:	4770      	bx	lr
