
RSWDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080050a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000274  20000070  08005110  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e4  08005110  000202e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001646a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cdc  00000000  00000000  0003650a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b58  00000000  00000000  000391e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a10  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006265  00000000  00000000  0003a750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000034f9  00000000  00000000  000409b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043eae  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003460  00000000  00000000  00043f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  0004738c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  00047410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d88 	.word	0x08004d88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004d88 	.word	0x08004d88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fd5b 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f003 f946 	bl	8003854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd73 	bl	80010de <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 fd3b 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000098 	.word	0x20000098

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000098 	.word	0x20000098

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f7      	bcc.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e033      	b.n	8000736 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f002 fddd 	bl	80032a4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d118      	bne.n	8000728 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006fe:	f023 0302 	bic.w	r3, r3, #2
 8000702:	f043 0202 	orr.w	r2, r3, #2
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 fa76 	bl	8000bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f023 0303 	bic.w	r3, r3, #3
 800071e:	f043 0201 	orr.w	r2, r3, #1
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
 8000726:	e001      	b.n	800072c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000756:	2b01      	cmp	r3, #1
 8000758:	d101      	bne.n	800075e <HAL_ADC_Start_DMA+0x1e>
 800075a:	2302      	movs	r3, #2
 800075c:	e0b0      	b.n	80008c0 <HAL_ADC_Start_DMA+0x180>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2201      	movs	r2, #1
 8000762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b01      	cmp	r3, #1
 8000772:	d018      	beq.n	80007a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	6892      	ldr	r2, [r2, #8]
 800077e:	f042 0201 	orr.w	r2, r2, #1
 8000782:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000784:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <HAL_ADC_Start_DMA+0x188>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a50      	ldr	r2, [pc, #320]	; (80008cc <HAL_ADC_Start_DMA+0x18c>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	0c9a      	lsrs	r2, r3, #18
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000798:	e002      	b.n	80007a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	3b01      	subs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f9      	bne.n	800079a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f000 8084 	beq.w	80008be <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d007      	beq.n	80007e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d006      	beq.n	8000802 <HAL_ADC_Start_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f8:	f023 0206 	bic.w	r2, r3, #6
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	645a      	str	r2, [r3, #68]	; 0x44
 8000800:	e002      	b.n	8000808 <HAL_ADC_Start_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2200      	movs	r2, #0
 8000806:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <HAL_ADC_Start_DMA+0x190>)
 8000812:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <HAL_ADC_Start_DMA+0x194>)
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <HAL_ADC_Start_DMA+0x198>)
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000828:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <HAL_ADC_Start_DMA+0x19c>)
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000834:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000844:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	6892      	ldr	r2, [r2, #8]
 8000850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000854:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	334c      	adds	r3, #76	; 0x4c
 8000860:	4619      	mov	r1, r3
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f000 fd1f 	bl	80012a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10f      	bne.n	8000896 <HAL_ADC_Start_DMA+0x156>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d11c      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	6892      	ldr	r2, [r2, #8]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	e013      	b.n	80008be <HAL_ADC_Start_DMA+0x17e>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_ADC_Start_DMA+0x1a0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10e      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d107      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	6892      	ldr	r2, [r2, #8]
 80008b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000008 	.word	0x20000008
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	40012300 	.word	0x40012300
 80008d4:	08000df1 	.word	0x08000df1
 80008d8:	08000e97 	.word	0x08000e97
 80008dc:	08000eb3 	.word	0x08000eb3
 80008e0:	40012000 	.word	0x40012000

080008e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <HAL_ADC_Stop_DMA+0x1a>
 80008fa:	2302      	movs	r3, #2
 80008fc:	e038      	b.n	8000970 <HAL_ADC_Stop_DMA+0x8c>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	6892      	ldr	r2, [r2, #8]
 8000910:	f022 0201 	bic.w	r2, r2, #1
 8000914:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d120      	bne.n	8000966 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	6892      	ldr	r2, [r2, #8]
 800092e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000932:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fd15 	bl	8001368 <HAL_DMA_Abort>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6812      	ldr	r2, [r2, #0]
 800094a:	6852      	ldr	r2, [r2, #4]
 800094c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000950:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800095a:	f023 0301 	bic.w	r3, r3, #1
 800095e:	f043 0201 	orr.w	r2, r3, #1
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009b4:	b490      	push	{r4, r7}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <HAL_ADC_ConfigChannel+0x1c>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e107      	b.n	8000be0 <HAL_ADC_ConfigChannel+0x22c>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d926      	bls.n	8000a2e <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	68d9      	ldr	r1, [r3, #12]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	4603      	mov	r3, r0
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4403      	add	r3, r0
 80009f8:	3b1e      	subs	r3, #30
 80009fa:	2007      	movs	r0, #7
 80009fc:	fa00 f303 	lsl.w	r3, r0, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	400b      	ands	r3, r1
 8000a04:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68d9      	ldr	r1, [r3, #12]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	6898      	ldr	r0, [r3, #8]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4423      	add	r3, r4
 8000a22:	3b1e      	subs	r3, #30
 8000a24:	fa00 f303 	lsl.w	r3, r0, r3
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	60d3      	str	r3, [r2, #12]
 8000a2c:	e023      	b.n	8000a76 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6919      	ldr	r1, [r3, #16]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	4603      	mov	r3, r0
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4403      	add	r3, r0
 8000a46:	2007      	movs	r0, #7
 8000a48:	fa00 f303 	lsl.w	r3, r0, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	400b      	ands	r3, r1
 8000a50:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6919      	ldr	r1, [r3, #16]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6898      	ldr	r0, [r3, #8]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	461c      	mov	r4, r3
 8000a68:	4623      	mov	r3, r4
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4423      	add	r3, r4
 8000a6e:	fa00 f303 	lsl.w	r3, r0, r3
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d824      	bhi.n	8000ac8 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6819      	ldr	r1, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	3b05      	subs	r3, #5
 8000a94:	221f      	movs	r2, #31
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4003      	ands	r3, r0
 8000a9e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6819      	ldr	r1, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	3b05      	subs	r3, #5
 8000abe:	fa04 f303 	lsl.w	r3, r4, r3
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	634b      	str	r3, [r1, #52]	; 0x34
 8000ac6:	e04c      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b0c      	cmp	r3, #12
 8000ace:	d824      	bhi.n	8000b1a <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6819      	ldr	r1, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b23      	subs	r3, #35	; 0x23
 8000ae6:	221f      	movs	r2, #31
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4003      	ands	r3, r0
 8000af0:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	461c      	mov	r4, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3b23      	subs	r3, #35	; 0x23
 8000b10:	fa04 f303 	lsl.w	r3, r4, r3
 8000b14:	4303      	orrs	r3, r0
 8000b16:	630b      	str	r3, [r1, #48]	; 0x30
 8000b18:	e023      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b41      	subs	r3, #65	; 0x41
 8000b30:	221f      	movs	r2, #31
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4003      	ands	r3, r0
 8000b3a:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	3b41      	subs	r3, #65	; 0x41
 8000b5a:	fa04 f303 	lsl.w	r3, r4, r3
 8000b5e:	4303      	orrs	r3, r0
 8000b60:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_ADC_ConfigChannel+0x238>)
 8000b64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d109      	bne.n	8000b84 <HAL_ADC_ConfigChannel+0x1d0>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d105      	bne.n	8000b84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d123      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d003      	beq.n	8000b9e <HAL_ADC_ConfigChannel+0x1ea>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b11      	cmp	r3, #17
 8000b9c:	d11b      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	d111      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_ADC_ConfigChannel+0x240>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_ADC_ConfigChannel+0x244>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9a      	lsrs	r2, r3, #18
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bc8:	e002      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f9      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc90      	pop	{r4, r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40012300 	.word	0x40012300
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	431bde83 	.word	0x431bde83

08000bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c04:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <ADC_Init+0x1ec>)
 8000c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	6852      	ldr	r2, [r2, #4]
 8000c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	6851      	ldr	r1, [r2, #4]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	6912      	ldr	r2, [r2, #16]
 8000c40:	0212      	lsls	r2, r2, #8
 8000c42:	430a      	orrs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	6852      	ldr	r2, [r2, #4]
 8000c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	6851      	ldr	r1, [r2, #4]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6892      	ldr	r2, [r2, #8]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	6892      	ldr	r2, [r2, #8]
 8000c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	6891      	ldr	r1, [r2, #8]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68d2      	ldr	r2, [r2, #12]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8e:	4a57      	ldr	r2, [pc, #348]	; (8000dec <ADC_Init+0x1f0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d022      	beq.n	8000cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	6892      	ldr	r2, [r2, #8]
 8000c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	6891      	ldr	r1, [r2, #8]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	6892      	ldr	r2, [r2, #8]
 8000cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	6891      	ldr	r1, [r2, #8]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	e00f      	b.n	8000cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	6892      	ldr	r2, [r2, #8]
 8000ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	6892      	ldr	r2, [r2, #8]
 8000cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	6892      	ldr	r2, [r2, #8]
 8000d04:	f022 0202 	bic.w	r2, r2, #2
 8000d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	6891      	ldr	r1, [r2, #8]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6992      	ldr	r2, [r2, #24]
 8000d18:	0052      	lsls	r2, r2, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01b      	beq.n	8000d5e <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	6852      	ldr	r2, [r2, #4]
 8000d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d34:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	6852      	ldr	r2, [r2, #4]
 8000d40:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d44:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	6851      	ldr	r1, [r2, #4]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d54:	3a01      	subs	r2, #1
 8000d56:	0352      	lsls	r2, r2, #13
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	e007      	b.n	8000d6e <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	6852      	ldr	r2, [r2, #4]
 8000d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	69d2      	ldr	r2, [r2, #28]
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	0512      	lsls	r2, r2, #20
 8000d90:	430a      	orrs	r2, r1
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	6892      	ldr	r2, [r2, #8]
 8000d9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	6891      	ldr	r1, [r2, #8]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000db2:	0252      	lsls	r2, r2, #9
 8000db4:	430a      	orrs	r2, r1
 8000db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	6892      	ldr	r2, [r2, #8]
 8000dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	6891      	ldr	r1, [r2, #8]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6952      	ldr	r2, [r2, #20]
 8000dd6:	0292      	lsls	r2, r2, #10
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	609a      	str	r2, [r3, #8]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40012300 	.word	0x40012300
 8000dec:	0f000001 	.word	0x0f000001

08000df0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d13c      	bne.n	8000e84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d12b      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d127      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d119      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	6852      	ldr	r2, [r2, #4]
 8000e52:	f022 0220 	bic.w	r2, r2, #32
 8000e56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f043 0201 	orr.w	r2, r3, #1
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f7ff fd7b 	bl	8000978 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000e82:	e004      	b.n	8000e8e <ADC_DMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fd71 	bl	800098c <HAL_ADC_ConvHalfCpltCallback>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2240      	movs	r2, #64	; 0x40
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f043 0204 	orr.w	r2, r3, #4
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fd64 	bl	80009a0 <HAL_ADC_ErrorCallback>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f4e:	4909      	ldr	r1, [pc, #36]	; (8000f74 <NVIC_EnableIRQ+0x30>)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	f002 021f 	and.w	r2, r2, #31
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da0b      	bge.n	8000fa4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <NVIC_SetPriority+0x4c>)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	3b04      	subs	r3, #4
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa2:	e009      	b.n	8000fb8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <NVIC_SetPriority+0x50>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	2201      	movs	r2, #1
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	401a      	ands	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001012:	2101      	movs	r1, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	1e59      	subs	r1, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2f 	bl	8000ee0 <NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff44 	bl	8000f28 <NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff37 	bl	8000f44 <NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d106      	bne.n	8001114 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001112:	e005      	b.n	8001120 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 0304 	bic.w	r3, r3, #4
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001134:	f000 f802 	bl	800113c <HAL_SYSTICK_Callback>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fa80 	bl	800065c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e099      	b.n	800129c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001188:	e00f      	b.n	80011aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800118a:	f7ff fa67 	bl	800065c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b05      	cmp	r3, #5
 8001196:	d908      	bls.n	80011aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2220      	movs	r2, #32
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e078      	b.n	800129c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e8      	bne.n	800118a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <HAL_DMA_Init+0x158>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	2b04      	cmp	r3, #4
 8001202:	d107      	bne.n	8001214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4313      	orrs	r3, r2
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f023 0307 	bic.w	r3, r3, #7
 800122a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2b04      	cmp	r3, #4
 800123c:	d117      	bne.n	800126e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00e      	beq.n	800126e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fae7 	bl	8001824 <DMA_CheckFifoParam>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800126a:	2301      	movs	r3, #1
 800126c:	e016      	b.n	800129c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fa9e 	bl	80017b8 <DMA_CalcBaseAndBitshift>
 800127c:	4603      	mov	r3, r0
 800127e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	223f      	movs	r2, #63	; 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	f010803f 	.word	0xf010803f

080012a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_DMA_Start_IT+0x26>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e048      	b.n	8001360 <HAL_DMA_Start_IT+0xb8>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d137      	bne.n	8001352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2202      	movs	r2, #2
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 fa30 	bl	800175c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	223f      	movs	r2, #63	; 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	f042 0216 	orr.w	r2, r2, #22
 8001316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	6952      	ldr	r2, [r2, #20]
 8001322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001326:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f042 0208 	orr.w	r2, r2, #8
 800133e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e005      	b.n	800135e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001376:	f7ff f971 	bl	800065c <HAL_GetTick>
 800137a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d008      	beq.n	800139a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e052      	b.n	8001440 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	f022 0216 	bic.w	r2, r2, #22
 80013a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	6952      	ldr	r2, [r2, #20]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <HAL_DMA_Abort+0x62>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f022 0208 	bic.w	r2, r2, #8
 80013d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ea:	e013      	b.n	8001414 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ec:	f7ff f936 	bl	800065c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d90c      	bls.n	8001414 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2220      	movs	r2, #32
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e015      	b.n	8001440 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e4      	bne.n	80013ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	223f      	movs	r2, #63	; 0x3f
 8001428:	409a      	lsls	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_DMA_IRQHandler+0x258>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a92      	ldr	r2, [pc, #584]	; (80016a4 <HAL_DMA_IRQHandler+0x25c>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	2208      	movs	r2, #8
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01a      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2208      	movs	r2, #8
 80014a2:	409a      	lsls	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2201      	movs	r2, #1
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d012      	beq.n	80014ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2201      	movs	r2, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f043 0202 	orr.w	r2, r3, #2
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	2204      	movs	r2, #4
 80014f0:	409a      	lsls	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	2204      	movs	r2, #4
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f043 0204 	orr.w	r2, r3, #4
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2210      	movs	r2, #16
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d043      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03c      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2210      	movs	r2, #16
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d018      	beq.n	800158a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d108      	bne.n	8001578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
 8001576:	e01f      	b.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01b      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
 8001588:	e016      	b.n	80015b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f022 0208 	bic.w	r2, r2, #8
 80015a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	2220      	movs	r2, #32
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 808e 	beq.w	80016e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8086 	beq.w	80016e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2220      	movs	r2, #32
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d136      	bne.n	8001660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	f022 0216 	bic.w	r2, r2, #22
 8001600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	6952      	ldr	r2, [r2, #20]
 800160c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <HAL_DMA_IRQHandler+0x1da>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f022 0208 	bic.w	r2, r2, #8
 8001630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	223f      	movs	r2, #63	; 0x3f
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	2b00      	cmp	r3, #0
 8001654:	d07d      	beq.n	8001752 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
        }
        return;
 800165e:	e078      	b.n	8001752 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01c      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	2b00      	cmp	r3, #0
 8001682:	d030      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
 800168c:	e02b      	b.n	80016e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d027      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e022      	b.n	80016e6 <HAL_DMA_IRQHandler+0x29e>
 80016a0:	20000008 	.word	0x20000008
 80016a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f022 0210 	bic.w	r2, r2, #16
 80016c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d032      	beq.n	8001754 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d022      	beq.n	8001740 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2205      	movs	r2, #5
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3301      	adds	r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4293      	cmp	r3, r2
 800171c:	d807      	bhi.n	800172e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f2      	bne.n	8001712 <HAL_DMA_IRQHandler+0x2ca>
 800172c:	e000      	b.n	8001730 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800172e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
 8001750:	e000      	b.n	8001754 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001752:	bf00      	nop
    }
  }
}
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop

0800175c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001778:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b40      	cmp	r3, #64	; 0x40
 8001788:	d108      	bne.n	800179c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800179a:	e007      	b.n	80017ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	60da      	str	r2, [r3, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b10      	subs	r3, #16
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <DMA_CalcBaseAndBitshift+0x64>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <DMA_CalcBaseAndBitshift+0x68>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d909      	bls.n	80017fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	1d1a      	adds	r2, r3, #4
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	659a      	str	r2, [r3, #88]	; 0x58
 80017f8:	e007      	b.n	800180a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	aaaaaaab 	.word	0xaaaaaaab
 8001820:	08004fd8 	.word	0x08004fd8

08001824 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11f      	bne.n	800187e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d855      	bhi.n	80018f0 <DMA_CheckFifoParam+0xcc>
 8001844:	a201      	add	r2, pc, #4	; (adr r2, 800184c <DMA_CheckFifoParam+0x28>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	0800185d 	.word	0x0800185d
 8001850:	0800186f 	.word	0x0800186f
 8001854:	0800185d 	.word	0x0800185d
 8001858:	080018f1 	.word	0x080018f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d045      	beq.n	80018f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800186c:	e042      	b.n	80018f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001876:	d13f      	bne.n	80018f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187c:	e03c      	b.n	80018f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001886:	d121      	bne.n	80018cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d836      	bhi.n	80018fc <DMA_CheckFifoParam+0xd8>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <DMA_CheckFifoParam+0x70>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080018ab 	.word	0x080018ab
 800189c:	080018a5 	.word	0x080018a5
 80018a0:	080018bd 	.word	0x080018bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
      break;
 80018a8:	e02f      	b.n	800190a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d024      	beq.n	8001900 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ba:	e021      	b.n	8001900 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018c4:	d11e      	bne.n	8001904 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ca:	e01b      	b.n	8001904 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d902      	bls.n	80018d8 <DMA_CheckFifoParam+0xb4>
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d003      	beq.n	80018de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018d6:	e018      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
      break;
 80018dc:	e015      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00e      	beq.n	8001908 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
      break;
 80018ee:	e00b      	b.n	8001908 <DMA_CheckFifoParam+0xe4>
      break;
 80018f0:	bf00      	nop
 80018f2:	e00a      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      break;
 80018f4:	bf00      	nop
 80018f6:	e008      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      break;
 80018f8:	bf00      	nop
 80018fa:	e006      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      break;
 80018fc:	bf00      	nop
 80018fe:	e004      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      break;
 8001900:	bf00      	nop
 8001902:	e002      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      break;   
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <DMA_CheckFifoParam+0xe6>
      break;
 8001908:	bf00      	nop
    }
  } 
  
  return status; 
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e159      	b.n	8001be8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8148 	bne.w	8001be2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x4a>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b12      	cmp	r3, #18
 8001960:	d123      	bne.n	80019aa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	69b9      	ldr	r1, [r7, #24]
 80019a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0203 	and.w	r2, r3, #3
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d00b      	beq.n	80019fe <HAL_GPIO_Init+0xe6>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f2:	2b11      	cmp	r3, #17
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a2 	beq.w	8001be2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x2e4>)
 8001aa4:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <HAL_GPIO_Init+0x2e4>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_GPIO_Init+0x2e4>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_GPIO_Init+0x2e8>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <HAL_GPIO_Init+0x2ec>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x202>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_GPIO_Init+0x2f0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x1fe>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_GPIO_Init+0x2f4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x1fa>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <HAL_GPIO_Init+0x2f8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x1f6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <HAL_GPIO_Init+0x2fc>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x1f2>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x204>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4934      	ldr	r1, [pc, #208]	; (8001c00 <HAL_GPIO_Init+0x2e8>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_GPIO_Init+0x300>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f aea2 	bls.w	8001934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3724      	adds	r7, #36	; 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0c8      	b.n	8001dfc <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f001 fc38 	bl	80034f4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c9c:	f000 fcc0 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8001ca0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_I2C_Init+0x1b4>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0c9b      	lsrs	r3, r3, #18
 8001cac:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4952      	ldr	r1, [pc, #328]	; (8001e08 <HAL_I2C_Init+0x1b8>)
 8001cc0:	428b      	cmp	r3, r1
 8001cc2:	d802      	bhi.n	8001cca <HAL_I2C_Init+0x7a>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	e009      	b.n	8001cde <HAL_I2C_Init+0x8e>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_I2C_Init+0x1bc>)
 8001cd6:	fba1 1303 	umull	r1, r3, r1, r3
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	3301      	adds	r3, #1
 8001cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_I2C_Init+0x1b8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d812      	bhi.n	8001d14 <HAL_I2C_Init+0xc4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d906      	bls.n	8001d10 <HAL_I2C_Init+0xc0>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	e045      	b.n	8001d9c <HAL_I2C_Init+0x14c>
 8001d10:	2304      	movs	r3, #4
 8001d12:	e043      	b.n	8001d9c <HAL_I2C_Init+0x14c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <HAL_I2C_Init+0xec>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e010      	b.n	8001d5e <HAL_I2C_Init+0x10e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009a      	lsls	r2, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x116>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e01a      	b.n	8001d9c <HAL_I2C_Init+0x14c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <HAL_I2C_Init+0x134>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d82:	e00b      	b.n	8001d9c <HAL_I2C_Init+0x14c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009a      	lsls	r2, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d9c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	69d1      	ldr	r1, [r2, #28]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6a12      	ldr	r2, [r2, #32]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6911      	ldr	r1, [r2, #16]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68d2      	ldr	r2, [r2, #12]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6951      	ldr	r1, [r2, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6992      	ldr	r2, [r2, #24]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	000186a0 	.word	0x000186a0
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e22d      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4ba0      	ldr	r3, [pc, #640]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b9d      	ldr	r3, [pc, #628]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b99      	ldr	r3, [pc, #612]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e208      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4a91      	ldr	r2, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	4b90      	ldr	r3, [pc, #576]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4a8b      	ldr	r2, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	4b8a      	ldr	r3, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4a88      	ldr	r2, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	4b87      	ldr	r3, [pc, #540]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4a84      	ldr	r2, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4a81      	ldr	r2, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fbc8 	bl	800065c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7fe fbc4 	bl	800065c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1cd      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fbb4 	bl	800065c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fbb0 	bl	800065c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1b9      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e18d      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4956      	ldr	r1, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	4b55      	ldr	r3, [pc, #340]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x2b0>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fb69 	bl	800065c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fb65 	bl	800065c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e16e      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4943      	ldr	r1, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_RCC_OscConfig+0x2b0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fb48 	bl	800065c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7fe fb44 	bl	800065c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e14d      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d030      	beq.n	800205c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x2b4>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7fe fb28 	bl	800065c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002010:	f7fe fb24 	bl	800065c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e12d      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
 800202e:	e015      	b.n	800205c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x2b4>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7fe fb11 	bl	800065c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203e:	f7fe fb0d 	bl	800065c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e116      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80a0 	beq.w	80021aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d121      	bne.n	80020ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fad3 	bl	800065c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e011      	b.n	80020de <HAL_RCC_OscConfig+0x2ce>
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	42470000 	.word	0x42470000
 80020c4:	42470e80 	.word	0x42470e80
 80020c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7fe fac6 	bl	800065c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0cf      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_RCC_OscConfig+0x478>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x2f0>
 80020f2:	4a66      	ldr	r2, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 80020f4:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	e01c      	b.n	800213a <HAL_RCC_OscConfig+0x32a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x312>
 8002108:	4a60      	ldr	r2, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	4a5d      	ldr	r2, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x32a>
 8002122:	4a5a      	ldr	r2, [pc, #360]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 8002130:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe fa8b 	bl	800065c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fa87 	bl	800065c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e08e      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCC_OscConfig+0x33a>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe fa75 	bl	800065c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fa71 	bl	800065c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e078      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	4b3f      	ldr	r3, [pc, #252]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ee      	bne.n	8002176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4a3b      	ldr	r2, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d064      	beq.n	800227c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d05c      	beq.n	8002278 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d141      	bne.n	800224a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x480>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fa46 	bl	800065c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fa42 	bl	800065c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e04b      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f2:	4926      	ldr	r1, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_RCC_OscConfig+0x480>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fa1b 	bl	800065c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe fa17 	bl	800065c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e020      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x41a>
 8002248:	e018      	b.n	800227c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_OscConfig+0x480>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fa04 	bl	800065c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fa00 	bl	800065c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e009      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_OscConfig+0x47c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x448>
 8002276:	e001      	b.n	800227c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000
 800228c:	40023800 	.word	0x40023800
 8002290:	42470060 	.word	0x42470060

08002294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0ca      	b.n	800243e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d20c      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b64      	ldr	r3, [pc, #400]	; (8002448 <HAL_RCC_ClockConfig+0x1b4>)
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b62      	ldr	r3, [pc, #392]	; (8002448 <HAL_RCC_ClockConfig+0x1b4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b6      	b.n	800243e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	4b52      	ldr	r3, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800230a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	494f      	ldr	r1, [pc, #316]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	4b4f      	ldr	r3, [pc, #316]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d044      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d119      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07d      	b.n	800243e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d003      	beq.n	8002352 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234e:	2b03      	cmp	r3, #3
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e06d      	b.n	800243e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e065      	b.n	800243e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002372:	4936      	ldr	r1, [pc, #216]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 0203 	bic.w	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002384:	f7fe f96a 	bl	800065c <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238c:	f7fe f966 	bl	800065c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e04d      	b.n	800243e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 020c 	and.w	r2, r3, #12
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1eb      	bne.n	800238c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_ClockConfig+0x1b4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 020f 	and.w	r2, r3, #15
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_RCC_ClockConfig+0x1b4>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <HAL_RCC_ClockConfig+0x1b4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 020f 	and.w	r2, r3, #15
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e030      	b.n	800243e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4918      	ldr	r1, [pc, #96]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002406:	4911      	ldr	r1, [pc, #68]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f81d 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 800241e:	4601      	mov	r1, r0
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	fa21 f303 	lsr.w	r3, r1, r3
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe f8cc 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00
 800244c:	40023800 	.word	0x40023800
 8002450:	08004fe0 	.word	0x08004fe0
 8002454:	20000008 	.word	0x20000008

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245c:	b08f      	sub	sp, #60	; 0x3c
 800245e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002470:	4b62      	ldr	r3, [pc, #392]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b04      	cmp	r3, #4
 800247a:	d007      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 800247c:	2b08      	cmp	r3, #8
 800247e:	d008      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x3a>
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 80b2 	bne.w	80025ea <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002486:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800248a:	e0b1      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800248c:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002490:	e0ae      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002492:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249c:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d04e      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a8:	4b54      	ldr	r3, [pc, #336]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	f04f 0400 	mov.w	r4, #0
 80024b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	ea01 0103 	and.w	r1, r1, r3
 80024be:	ea02 0204 	and.w	r2, r2, r4
 80024c2:	460b      	mov	r3, r1
 80024c4:	4614      	mov	r4, r2
 80024c6:	0160      	lsls	r0, r4, #5
 80024c8:	6278      	str	r0, [r7, #36]	; 0x24
 80024ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024cc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	623b      	str	r3, [r7, #32]
 80024d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80024da:	1a5b      	subs	r3, r3, r1
 80024dc:	eb64 0402 	sbc.w	r4, r4, r2
 80024e0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80024e4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80024e8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80024ec:	ebb8 0803 	subs.w	r8, r8, r3
 80024f0:	eb69 0904 	sbc.w	r9, r9, r4
 80024f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800250c:	eb18 0801 	adds.w	r8, r8, r1
 8002510:	eb49 0902 	adc.w	r9, r9, r2
 8002514:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800252c:	4640      	mov	r0, r8
 800252e:	4649      	mov	r1, r9
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	f04f 0400 	mov.w	r4, #0
 8002536:	461a      	mov	r2, r3
 8002538:	4623      	mov	r3, r4
 800253a:	f7fd fea1 	bl	8000280 <__aeabi_uldivmod>
 800253e:	4603      	mov	r3, r0
 8002540:	460c      	mov	r4, r1
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
 8002544:	e043      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	f04f 0400 	mov.w	r4, #0
 8002550:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	ea01 0103 	and.w	r1, r1, r3
 800255c:	ea02 0204 	and.w	r2, r2, r4
 8002560:	460b      	mov	r3, r1
 8002562:	4614      	mov	r4, r2
 8002564:	0160      	lsls	r0, r4, #5
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	015b      	lsls	r3, r3, #5
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002578:	1a5b      	subs	r3, r3, r1
 800257a:	eb64 0402 	sbc.w	r4, r4, r2
 800257e:	01a6      	lsls	r6, r4, #6
 8002580:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002584:	019d      	lsls	r5, r3, #6
 8002586:	1aed      	subs	r5, r5, r3
 8002588:	eb66 0604 	sbc.w	r6, r6, r4
 800258c:	00f3      	lsls	r3, r6, #3
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	00eb      	lsls	r3, r5, #3
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	e897 0060 	ldmia.w	r7, {r5, r6}
 80025a0:	186d      	adds	r5, r5, r1
 80025a2:	eb46 0602 	adc.w	r6, r6, r2
 80025a6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80025aa:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80025ae:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80025b2:	4655      	mov	r5, sl
 80025b4:	465e      	mov	r6, fp
 80025b6:	4628      	mov	r0, r5
 80025b8:	4631      	mov	r1, r6
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	f04f 0400 	mov.w	r4, #0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	f7fd fe5c 	bl	8000280 <__aeabi_uldivmod>
 80025c8:	4603      	mov	r3, r0
 80025ca:	460c      	mov	r4, r1
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	3301      	adds	r3, #1
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80025de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	373c      	adds	r7, #60	; 0x3c
 80025f6:	46bd      	mov	sp, r7
 80025f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	00f42400 	.word	0x00f42400
 8002604:	007a1200 	.word	0x007a1200

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_RCC_GetHCLKFreq+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000008 	.word	0x20000008

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002624:	f7ff fff0 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002628:	4601      	mov	r1, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4a03      	ldr	r2, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	08004ff0 	.word	0x08004ff0

08002648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800264c:	f7ff ffdc 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002650:	4601      	mov	r1, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0b5b      	lsrs	r3, r3, #13
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4a03      	ldr	r2, [pc, #12]	; (800266c <HAL_RCC_GetPCLK2Freq+0x24>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	08004ff0 	.word	0x08004ff0

08002670 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e03f      	b.n	8002702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f001 faf6 	bl	8003c88 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fac5 	bl	8002c44 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	6912      	ldr	r2, [r2, #16]
 80026c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	6952      	ldr	r2, [r2, #20]
 80026d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	68d2      	ldr	r2, [r2, #12]
 80026e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af02      	add	r7, sp, #8
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	f040 8082 	bne.w	8002830 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_UART_Transmit+0x2e>
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e07a      	b.n	8002832 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_UART_Transmit+0x40>
 8002746:	2302      	movs	r3, #2
 8002748:	e073      	b.n	8002832 <HAL_UART_Transmit+0x128>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002760:	f7fd ff7c 	bl	800065c <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002772:	e041      	b.n	80027f8 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d121      	bne.n	80027d0 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f9d5 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e045      	b.n	8002832 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b6:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3302      	adds	r3, #2
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	e017      	b.n	80027f8 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	3301      	adds	r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	e013      	b.n	80027f8 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f9b3 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e023      	b.n	8002832 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1c59      	adds	r1, r3, #1
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1b8      	bne.n	8002774 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	2140      	movs	r1, #64	; 0x40
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f99a 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e00a      	b.n	8002832 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e000      	b.n	8002832 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002830:	2302      	movs	r3, #2
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b20      	cmp	r3, #32
 8002854:	d166      	bne.n	8002924 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_UART_Receive_DMA+0x26>
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e05f      	b.n	8002926 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_UART_Receive_DMA+0x38>
 8002870:	2302      	movs	r3, #2
 8002872:	e058      	b.n	8002926 <HAL_UART_Receive_DMA+0xea>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	88fa      	ldrh	r2, [r7, #6]
 8002886:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2222      	movs	r2, #34	; 0x22
 8002892:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	4a25      	ldr	r2, [pc, #148]	; (8002930 <HAL_UART_Receive_DMA+0xf4>)
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_UART_Receive_DMA+0xf8>)
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_UART_Receive_DMA+0xfc>)
 80028ac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	2200      	movs	r2, #0
 80028b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3304      	adds	r3, #4
 80028c6:	4619      	mov	r1, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	f7fe fceb 	bl	80012a8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	6952      	ldr	r2, [r2, #20]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	6952      	ldr	r2, [r2, #20]
 800291a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8002924:	2302      	movs	r3, #2
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08002a2f 	.word	0x08002a2f
 8002934:	08002a97 	.word	0x08002a97
 8002938:	08002ab3 	.word	0x08002ab3

0800293c <HAL_UART_DMAStop>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b21      	cmp	r3, #33	; 0x21
 8002968:	d116      	bne.n	8002998 <HAL_UART_DMAStop+0x5c>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	6952      	ldr	r2, [r2, #20]
 800297a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fceb 	bl	8001368 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f921 	bl	8002bda <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b22      	cmp	r3, #34	; 0x22
 80029b8:	d116      	bne.n	80029e8 <HAL_UART_DMAStop+0xac>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	6952      	ldr	r2, [r2, #20]
 80029ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ce:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d004      	beq.n	80029e2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fcc3 	bl	8001368 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f90f 	bl	8002c06 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11e      	bne.n	8002a88 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a5e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	6952      	ldr	r2, [r2, #20]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	6952      	ldr	r2, [r2, #20]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7e:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff ffb2 	bl	80029f2 <HAL_UART_RxCpltCallback>
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ffae 	bl	8002a06 <HAL_UART_RxHalfCpltCallback>
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b21      	cmp	r3, #33	; 0x21
 8002ae4:	d108      	bne.n	8002af8 <UART_DMAError+0x46>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002af2:	68b8      	ldr	r0, [r7, #8]
 8002af4:	f000 f871 	bl	8002bda <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b22      	cmp	r3, #34	; 0x22
 8002b18:	d108      	bne.n	8002b2c <UART_DMAError+0x7a>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002b26:	68b8      	ldr	r0, [r7, #8]
 8002b28:	f000 f86d 	bl	8002c06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f7ff ff6e 	bl	8002a1a <HAL_UART_ErrorCallback>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002b56:	e02c      	b.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d028      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b66:	f7fd fd79 	bl	800065c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	1ad2      	subs	r2, r2, r3
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d91d      	bls.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	68d2      	ldr	r2, [r2, #12]
 8002b80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	6952      	ldr	r2, [r2, #20]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0c3      	beq.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	68d2      	ldr	r2, [r2, #12]
 8002bec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002bf0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	68d2      	ldr	r2, [r2, #12]
 8002c18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c1c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	6952      	ldr	r2, [r2, #20]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c80:	f023 030c 	bic.w	r3, r3, #12
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb8:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd4:	f040 80e4 	bne.w	8002ea0 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4aab      	ldr	r2, [pc, #684]	; (8002f8c <UART_SetConfig+0x348>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <UART_SetConfig+0xa8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4aaa      	ldr	r2, [pc, #680]	; (8002f90 <UART_SetConfig+0x34c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d16c      	bne.n	8002dc6 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681c      	ldr	r4, [r3, #0]
 8002cf0:	f7ff fcaa 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4aa2      	ldr	r2, [pc, #648]	; (8002f94 <UART_SetConfig+0x350>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	011d      	lsls	r5, r3, #4
 8002d14:	f7ff fc98 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009a      	lsls	r2, r3, #2
 8002d22:	441a      	add	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d2e:	f7ff fc8b 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	4a92      	ldr	r2, [pc, #584]	; (8002f94 <UART_SetConfig+0x350>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2264      	movs	r2, #100	; 0x64
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	1af3      	subs	r3, r6, r3
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	3332      	adds	r3, #50	; 0x32
 8002d5c:	4a8d      	ldr	r2, [pc, #564]	; (8002f94 <UART_SetConfig+0x350>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d6a:	441d      	add	r5, r3
 8002d6c:	f7ff fc6c 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009a      	lsls	r2, r3, #2
 8002d7a:	441a      	add	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d86:	f7ff fc5f 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009a      	lsls	r2, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	4a7c      	ldr	r2, [pc, #496]	; (8002f94 <UART_SetConfig+0x350>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2264      	movs	r2, #100	; 0x64
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	1af3      	subs	r3, r6, r3
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	3332      	adds	r3, #50	; 0x32
 8002db4:	4a77      	ldr	r2, [pc, #476]	; (8002f94 <UART_SetConfig+0x350>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	442b      	add	r3, r5
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	e154      	b.n	8003070 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681c      	ldr	r4, [r3, #0]
 8002dca:	f7ff fc29 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	4a6b      	ldr	r2, [pc, #428]	; (8002f94 <UART_SetConfig+0x350>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	011d      	lsls	r5, r3, #4
 8002dee:	f7ff fc17 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009a      	lsls	r2, r3, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e08:	f7ff fc0a 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009a      	lsls	r2, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4a5c      	ldr	r2, [pc, #368]	; (8002f94 <UART_SetConfig+0x350>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	2264      	movs	r2, #100	; 0x64
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	1af3      	subs	r3, r6, r3
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	3332      	adds	r3, #50	; 0x32
 8002e36:	4a57      	ldr	r2, [pc, #348]	; (8002f94 <UART_SetConfig+0x350>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e44:	441d      	add	r5, r3
 8002e46:	f7ff fbeb 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009a      	lsls	r2, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e60:	f7ff fbde 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	441a      	add	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7a:	4a46      	ldr	r2, [pc, #280]	; (8002f94 <UART_SetConfig+0x350>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2264      	movs	r2, #100	; 0x64
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	1af3      	subs	r3, r6, r3
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	3332      	adds	r3, #50	; 0x32
 8002e8e:	4a41      	ldr	r2, [pc, #260]	; (8002f94 <UART_SetConfig+0x350>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	442b      	add	r3, r5
 8002e9c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e9e:	e0e7      	b.n	8003070 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a39      	ldr	r2, [pc, #228]	; (8002f8c <UART_SetConfig+0x348>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <UART_SetConfig+0x270>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a38      	ldr	r2, [pc, #224]	; (8002f90 <UART_SetConfig+0x34c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d171      	bne.n	8002f98 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681c      	ldr	r4, [r3, #0]
 8002eb8:	f7ff fbc6 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <UART_SetConfig+0x350>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	011d      	lsls	r5, r3, #4
 8002edc:	f7ff fbb4 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009a      	lsls	r2, r3, #2
 8002eea:	441a      	add	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ef6:	f7ff fba7 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009a      	lsls	r2, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <UART_SetConfig+0x350>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2264      	movs	r2, #100	; 0x64
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	1af3      	subs	r3, r6, r3
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	3332      	adds	r3, #50	; 0x32
 8002f24:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <UART_SetConfig+0x350>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f30:	441d      	add	r5, r3
 8002f32:	f7ff fb89 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	441a      	add	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f4c:	f7ff fb7c 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009a      	lsls	r2, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <UART_SetConfig+0x350>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	2264      	movs	r2, #100	; 0x64
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	1af3      	subs	r3, r6, r3
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	3332      	adds	r3, #50	; 0x32
 8002f7a:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <UART_SetConfig+0x350>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	442b      	add	r3, r5
 8002f88:	60a3      	str	r3, [r4, #8]
 8002f8a:	e071      	b.n	8003070 <UART_SetConfig+0x42c>
 8002f8c:	40011000 	.word	0x40011000
 8002f90:	40011400 	.word	0x40011400
 8002f94:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681c      	ldr	r4, [r3, #0]
 8002f9c:	f7ff fb40 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009a      	lsls	r2, r3, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	4a30      	ldr	r2, [pc, #192]	; (8003078 <UART_SetConfig+0x434>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	011d      	lsls	r5, r3, #4
 8002fc0:	f7ff fb2e 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009a      	lsls	r2, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fda:	f7ff fb21 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <UART_SetConfig+0x434>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2264      	movs	r2, #100	; 0x64
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	1af3      	subs	r3, r6, r3
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	3332      	adds	r3, #50	; 0x32
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <UART_SetConfig+0x434>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003014:	441d      	add	r5, r3
 8003016:	f7ff fb03 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 800301a:	4602      	mov	r2, r0
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	009a      	lsls	r2, r3, #2
 8003024:	441a      	add	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003030:	f7ff faf6 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8003034:	4602      	mov	r2, r0
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009a      	lsls	r2, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <UART_SetConfig+0x434>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	2264      	movs	r2, #100	; 0x64
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	1af3      	subs	r3, r6, r3
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	3332      	adds	r3, #50	; 0x32
 800305e:	4a06      	ldr	r2, [pc, #24]	; (8003078 <UART_SetConfig+0x434>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	442b      	add	r3, r5
 800306c:	60a3      	str	r3, [r4, #8]
}
 800306e:	e7ff      	b.n	8003070 <UART_SetConfig+0x42c>
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003078:	51eb851f 	.word	0x51eb851f

0800307c <lidar_init>:
#include "TFMini.h"

bool lidar_init() {
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	lidar_raw_values = malloc(number_of_characters*sizeof(uint8_t));
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <lidar_init+0x34>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fedd 	bl	8003e44 <malloc>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <lidar_init+0x38>)
 8003090:	601a      	str	r2, [r3, #0]

	if (lidar_raw_values == NULL) {
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <lidar_init+0x38>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <lidar_init+0x28>
		printf("lidar malloc failed\r\n");
 800309a:	4807      	ldr	r0, [pc, #28]	; (80030b8 <lidar_init+0x3c>)
 800309c:	f000 fffa 	bl	8004094 <puts>
		return false;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e003      	b.n	80030ac <lidar_init+0x30>
	}
	printf("lidar malloc succeeded\r\n");
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <lidar_init+0x40>)
 80030a6:	f000 fff5 	bl	8004094 <puts>
	return true;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000005 	.word	0x20000005
 80030b4:	2000009c 	.word	0x2000009c
 80030b8:	08004da0 	.word	0x08004da0
 80030bc:	08004db8 	.word	0x08004db8

080030c0 <lidar_read>:
	free (lidar_raw_values);
	printf("lidar free succeeded\r\n");
	return true;
}

bool lidar_read() {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart6, lidar_raw_values,number_of_characters);
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <lidar_read+0xb0>)
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <lidar_read+0xb4>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	4829      	ldr	r0, [pc, #164]	; (8003178 <lidar_read+0xb8>)
 80030d4:	f7ff fbb2 	bl	800283c <HAL_UART_Receive_DMA>
	HAL_Delay(20);
 80030d8:	2014      	movs	r0, #20
 80030da:	f7fd facb 	bl	8000674 <HAL_Delay>
	HAL_UART_DMAStop(&huart6);
 80030de:	4826      	ldr	r0, [pc, #152]	; (8003178 <lidar_read+0xb8>)
 80030e0:	f7ff fc2c 	bl	800293c <HAL_UART_DMAStop>

	if(lidar_raw_values[0] != 0x59 || lidar_raw_values[1] != 0x59 || lidar_raw_values[7] != 0x00)
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <lidar_read+0xb0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b59      	cmp	r3, #89	; 0x59
 80030ec:	d10b      	bne.n	8003106 <lidar_read+0x46>
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <lidar_read+0xb0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3301      	adds	r3, #1
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b59      	cmp	r3, #89	; 0x59
 80030f8:	d105      	bne.n	8003106 <lidar_read+0x46>
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <lidar_read+0xb0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3307      	adds	r3, #7
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <lidar_read+0x50>
	{
		printf("reading lidar data - failed\r\n");
 8003106:	481d      	ldr	r0, [pc, #116]	; (800317c <lidar_read+0xbc>)
 8003108:	f000 ffc4 	bl	8004094 <puts>
		return false;
 800310c:	2300      	movs	r3, #0
 800310e:	e02a      	b.n	8003166 <lidar_read+0xa6>
	}

	uint16_t checksum = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	80fb      	strh	r3, [r7, #6]
	uint8_t number_without_checksum = number_of_characters - 1;
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <lidar_read+0xb4>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	3b01      	subs	r3, #1
 800311a:	713b      	strb	r3, [r7, #4]

	for(uint8_t i = 0; i < number_without_checksum; ++i)
 800311c:	2300      	movs	r3, #0
 800311e:	717b      	strb	r3, [r7, #5]
 8003120:	e00b      	b.n	800313a <lidar_read+0x7a>
		checksum +=lidar_raw_values[i];
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <lidar_read+0xb0>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	797b      	ldrb	r3, [r7, #5]
 8003128:	4413      	add	r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b29a      	uxth	r2, r3
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	4413      	add	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0; i < number_without_checksum; ++i)
 8003134:	797b      	ldrb	r3, [r7, #5]
 8003136:	3301      	adds	r3, #1
 8003138:	717b      	strb	r3, [r7, #5]
 800313a:	797a      	ldrb	r2, [r7, #5]
 800313c:	793b      	ldrb	r3, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d3ef      	bcc.n	8003122 <lidar_read+0x62>

	if((checksum & 0xFF) != lidar_raw_values[number_without_checksum] )
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <lidar_read+0xb0>)
 8003148:	6811      	ldr	r1, [r2, #0]
 800314a:	793a      	ldrb	r2, [r7, #4]
 800314c:	440a      	add	r2, r1
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <lidar_read+0x9e>
	{
		printf("reading lidar data - failed2\r\n");
 8003154:	480a      	ldr	r0, [pc, #40]	; (8003180 <lidar_read+0xc0>)
 8003156:	f000 ff9d 	bl	8004094 <puts>
		return false;
 800315a:	2300      	movs	r3, #0
 800315c:	e003      	b.n	8003166 <lidar_read+0xa6>
	}

	printf("reading lidar data - successful\r\n");
 800315e:	4809      	ldr	r0, [pc, #36]	; (8003184 <lidar_read+0xc4>)
 8003160:	f000 ff98 	bl	8004094 <puts>
	return true;
 8003164:	2301      	movs	r3, #1
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000009c 	.word	0x2000009c
 8003174:	20000005 	.word	0x20000005
 8003178:	20000260 	.word	0x20000260
 800317c:	08004e08 	.word	0x08004e08
 8003180:	08004e28 	.word	0x08004e28
 8003184:	08004e48 	.word	0x08004e48

08003188 <lidar_distance_cm>:

uint16_t lidar_distance_cm()
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
	return lidar_raw_values[3] << 8 | lidar_raw_values[2];
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <lidar_distance_cm+0x2c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3303      	adds	r3, #3
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21a      	sxth	r2, r3
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <lidar_distance_cm+0x2c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3302      	adds	r3, #2
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b21b      	sxth	r3, r3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	b29b      	uxth	r3, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	2000009c 	.word	0x2000009c

080031b8 <lidar_strength>:
{
	return (lidar_raw_values[3] << 8 | lidar_raw_values[2])/100.0f;
}

uint16_t lidar_strength()
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
	return lidar_raw_values[5] << 8 | lidar_raw_values[4];
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <lidar_strength+0x2c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3305      	adds	r3, #5
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	b21a      	sxth	r2, r3
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <lidar_strength+0x2c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3304      	adds	r3, #4
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	4313      	orrs	r3, r2
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	b29b      	uxth	r3, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	2000009c 	.word	0x2000009c

080031e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <MX_ADC1_Init+0xac>)
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <MX_ADC1_Init+0xb0>)
 80031f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <MX_ADC1_Init+0xac>)
 80031f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <MX_ADC1_Init+0xac>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <MX_ADC1_Init+0xac>)
 8003204:	2201      	movs	r2, #1
 8003206:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003208:	4b22      	ldr	r3, [pc, #136]	; (8003294 <MX_ADC1_Init+0xac>)
 800320a:	2201      	movs	r2, #1
 800320c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800320e:	4b21      	ldr	r3, [pc, #132]	; (8003294 <MX_ADC1_Init+0xac>)
 8003210:	2200      	movs	r2, #0
 8003212:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <MX_ADC1_Init+0xac>)
 8003216:	2200      	movs	r2, #0
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <MX_ADC1_Init+0xac>)
 800321c:	4a1f      	ldr	r2, [pc, #124]	; (800329c <MX_ADC1_Init+0xb4>)
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003220:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <MX_ADC1_Init+0xac>)
 8003222:	2200      	movs	r2, #0
 8003224:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003226:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <MX_ADC1_Init+0xac>)
 8003228:	2202      	movs	r2, #2
 800322a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <MX_ADC1_Init+0xac>)
 800322e:	2201      	movs	r2, #1
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <MX_ADC1_Init+0xac>)
 8003234:	2201      	movs	r2, #1
 8003236:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003238:	4816      	ldr	r0, [pc, #88]	; (8003294 <MX_ADC1_Init+0xac>)
 800323a:	f7fd fa3d 	bl	80006b8 <HAL_ADC_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003244:	214a      	movs	r1, #74	; 0x4a
 8003246:	4816      	ldr	r0, [pc, #88]	; (80032a0 <MX_ADC1_Init+0xb8>)
 8003248:	f000 fab0 	bl	80037ac <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 800324c:	230a      	movs	r3, #10
 800324e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003250:	2301      	movs	r3, #1
 8003252:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003254:	2307      	movs	r3, #7
 8003256:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003258:	463b      	mov	r3, r7
 800325a:	4619      	mov	r1, r3
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <MX_ADC1_Init+0xac>)
 800325e:	f7fd fba9 	bl	80009b4 <HAL_ADC_ConfigChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003268:	2154      	movs	r1, #84	; 0x54
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <MX_ADC1_Init+0xb8>)
 800326c:	f000 fa9e 	bl	80037ac <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Rank = 2;
 8003270:	2302      	movs	r3, #2
 8003272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003274:	463b      	mov	r3, r7
 8003276:	4619      	mov	r1, r3
 8003278:	4806      	ldr	r0, [pc, #24]	; (8003294 <MX_ADC1_Init+0xac>)
 800327a:	f7fd fb9b 	bl	80009b4 <HAL_ADC_ConfigChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <MX_ADC1_Init+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003284:	215c      	movs	r1, #92	; 0x5c
 8003286:	4806      	ldr	r0, [pc, #24]	; (80032a0 <MX_ADC1_Init+0xb8>)
 8003288:	f000 fa90 	bl	80037ac <_Error_Handler>
  }

}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200000a0 	.word	0x200000a0
 8003298:	40012000 	.word	0x40012000
 800329c:	0f000001 	.word	0x0f000001
 80032a0:	08004e6c 	.word	0x08004e6c

080032a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_ADC_MspInit+0xb4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d14b      	bne.n	800334e <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_ADC_MspInit+0xb8>)
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_ADC_MspInit+0xb8>)
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b25      	ldr	r3, [pc, #148]	; (800335c <HAL_ADC_MspInit+0xb8>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032d2:	2303      	movs	r3, #3
 80032d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032d6:	2303      	movs	r3, #3
 80032d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	4619      	mov	r1, r3
 80032e4:	481e      	ldr	r0, [pc, #120]	; (8003360 <HAL_ADC_MspInit+0xbc>)
 80032e6:	f7fe fb17 	bl	8001918 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_ADC_MspInit+0xc4>)
 80032ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003302:	4b18      	ldr	r3, [pc, #96]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 8003304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003308:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 800330c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003310:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 8003314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003318:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 800331c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003320:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800332e:	480d      	ldr	r0, [pc, #52]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 8003330:	f7fd ff0c 	bl	800114c <HAL_DMA_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_ADC_MspInit+0x9e>
    {
      _Error_Handler(__FILE__, __LINE__);
 800333a:	2184      	movs	r1, #132	; 0x84
 800333c:	480b      	ldr	r0, [pc, #44]	; (800336c <HAL_ADC_MspInit+0xc8>)
 800333e:	f000 fa35 	bl	80037ac <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <HAL_ADC_MspInit+0xc0>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800334e:	bf00      	nop
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40012000 	.word	0x40012000
 800335c:	40023800 	.word	0x40023800
 8003360:	40020800 	.word	0x40020800
 8003364:	200000e8 	.word	0x200000e8
 8003368:	40026410 	.word	0x40026410
 800336c:	08004e6c 	.word	0x08004e6c

08003370 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <MX_DMA_Init+0x4c>)
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <MX_DMA_Init+0x4c>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <MX_DMA_Init+0x4c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	2100      	movs	r1, #0
 8003396:	2038      	movs	r0, #56	; 0x38
 8003398:	f7fd fe77 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800339c:	2038      	movs	r0, #56	; 0x38
 800339e:	f7fd fe90 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2039      	movs	r0, #57	; 0x39
 80033a8:	f7fd fe6f 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80033ac:	2039      	movs	r0, #57	; 0x39
 80033ae:	f7fd fe88 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <MX_GPIO_Init+0xc0>)
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <MX_GPIO_Init+0xc0>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <MX_GPIO_Init+0xc0>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4a26      	ldr	r2, [pc, #152]	; (8003480 <MX_GPIO_Init+0xc0>)
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <MX_GPIO_Init+0xc0>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <MX_GPIO_Init+0xc0>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <MX_GPIO_Init+0xc0>)
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <MX_GPIO_Init+0xc0>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <MX_GPIO_Init+0xc0>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	4a18      	ldr	r2, [pc, #96]	; (8003480 <MX_GPIO_Init+0xc0>)
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <MX_GPIO_Init+0xc0>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b15      	ldr	r3, [pc, #84]	; (8003480 <MX_GPIO_Init+0xc0>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003436:	2200      	movs	r2, #0
 8003438:	2120      	movs	r1, #32
 800343a:	4812      	ldr	r0, [pc, #72]	; (8003484 <MX_GPIO_Init+0xc4>)
 800343c:	f7fe fbee 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <MX_GPIO_Init+0xc8>)
 8003448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4619      	mov	r1, r3
 8003454:	480d      	ldr	r0, [pc, #52]	; (800348c <MX_GPIO_Init+0xcc>)
 8003456:	f7fe fa5f 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800345a:	2320      	movs	r3, #32
 800345c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345e:	2301      	movs	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	4619      	mov	r1, r3
 8003470:	4804      	ldr	r0, [pc, #16]	; (8003484 <MX_GPIO_Init+0xc4>)
 8003472:	f7fe fa51 	bl	8001918 <HAL_GPIO_Init>

}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40020000 	.word	0x40020000
 8003488:	10110000 	.word	0x10110000
 800348c:	40020800 	.word	0x40020800

08003490 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <MX_I2C1_Init+0x54>)
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <MX_I2C1_Init+0x58>)
 8003498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <MX_I2C1_Init+0x54>)
 800349c:	4a13      	ldr	r2, [pc, #76]	; (80034ec <MX_I2C1_Init+0x5c>)
 800349e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034cc:	4805      	ldr	r0, [pc, #20]	; (80034e4 <MX_I2C1_Init+0x54>)
 80034ce:	f7fe fbbf 	bl	8001c50 <HAL_I2C_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034d8:	2143      	movs	r1, #67	; 0x43
 80034da:	4805      	ldr	r0, [pc, #20]	; (80034f0 <MX_I2C1_Init+0x60>)
 80034dc:	f000 f966 	bl	80037ac <_Error_Handler>
  }

}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	2000019c 	.word	0x2000019c
 80034e8:	40005400 	.word	0x40005400
 80034ec:	00061a80 	.word	0x00061a80
 80034f0:	08004e7c 	.word	0x08004e7c

080034f4 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <HAL_I2C_MspInit+0xc4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d11e      	bne.n	8003544 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003506:	23c0      	movs	r3, #192	; 0xc0
 8003508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800350a:	2312      	movs	r3, #18
 800350c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800350e:	2301      	movs	r3, #1
 8003510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003512:	2303      	movs	r3, #3
 8003514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003516:	2304      	movs	r3, #4
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4826      	ldr	r0, [pc, #152]	; (80035bc <HAL_I2C_MspInit+0xc8>)
 8003522:	f7fe f9f9 	bl	8001918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <HAL_I2C_MspInit+0xcc>)
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_I2C_MspInit+0xcc>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_I2C_MspInit+0xcc>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003542:	e034      	b.n	80035ae <HAL_I2C_MspInit+0xba>
  else if(i2cHandle->Instance==I2C3)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <HAL_I2C_MspInit+0xd0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d12f      	bne.n	80035ae <HAL_I2C_MspInit+0xba>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800354e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003554:	2312      	movs	r3, #18
 8003556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003558:	2301      	movs	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355c:	2303      	movs	r3, #3
 800355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003560:	2304      	movs	r3, #4
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4619      	mov	r1, r3
 800356a:	4817      	ldr	r0, [pc, #92]	; (80035c8 <HAL_I2C_MspInit+0xd4>)
 800356c:	f7fe f9d4 	bl	8001918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003576:	2312      	movs	r3, #18
 8003578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800357a:	2301      	movs	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357e:	2303      	movs	r3, #3
 8003580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003582:	2304      	movs	r3, #4
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003586:	f107 0314 	add.w	r3, r7, #20
 800358a:	4619      	mov	r1, r3
 800358c:	480f      	ldr	r0, [pc, #60]	; (80035cc <HAL_I2C_MspInit+0xd8>)
 800358e:	f7fe f9c3 	bl	8001918 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <HAL_I2C_MspInit+0xcc>)
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_I2C_MspInit+0xcc>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <HAL_I2C_MspInit+0xcc>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	bf00      	nop
 80035b0:	3728      	adds	r7, #40	; 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40005400 	.word	0x40005400
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40005c00 	.word	0x40005c00
 80035c8:	40020800 	.word	0x40020800
 80035cc:	40020000 	.word	0x40020000

080035d0 <_write>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	2332      	movs	r3, #50	; 0x32
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <_write+0x24>)
 80035e6:	f7ff f890 	bl	800270a <HAL_UART_Transmit>
	return len;
 80035ea:	687b      	ldr	r3, [r7, #4]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	200002a0 	.word	0x200002a0

080035f8 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 80035f8:	b598      	push	{r3, r4, r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80035fc:	f7fc ffc8 	bl	8000590 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003600:	f000 f85c 	bl	80036bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003604:	f7ff fedc 	bl	80033c0 <MX_GPIO_Init>
	MX_DMA_Init();
 8003608:	f7ff feb2 	bl	8003370 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800360c:	f000 fae0 	bl	8003bd0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8003610:	f7ff fdea 	bl	80031e8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8003614:	f7ff ff3c 	bl	8003490 <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8003618:	f000 fb08 	bl	8003c2c <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("Program has been started\r\n");
 800361c:	4823      	ldr	r0, [pc, #140]	; (80036ac <main+0xb4>)
 800361e:	f000 fd39 	bl	8004094 <puts>
	PSD_init();
 8003622:	f000 f8c9 	bl	80037b8 <PSD_init>
	lidar_init();
 8003626:	f7ff fd29 	bl	800307c <lidar_init>
	stopwatch_init();
 800362a:	f000 f9df 	bl	80039ec <stopwatch_init>

	set_stopwatch_blocking_time(0, 0);
 800362e:	2100      	movs	r1, #0
 8003630:	2000      	movs	r0, #0
 8003632:	f000 fa7b 	bl	8003b2c <set_stopwatch_blocking_time>
	set_stopwatch_blocking_time(1, 0);
 8003636:	2100      	movs	r1, #0
 8003638:	2001      	movs	r0, #1
 800363a:	f000 fa77 	bl	8003b2c <set_stopwatch_blocking_time>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (is_locked(0) == false) {
 800363e:	2000      	movs	r0, #0
 8003640:	f000 fa62 	bl	8003b08 <is_locked>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d104      	bne.n	8003654 <main+0x5c>
			PSD_read();
 800364a:	f000 f8d5 	bl	80037f8 <PSD_read>
			stopwatch_on(0);
 800364e:	2000      	movs	r0, #0
 8003650:	f000 fa2a 	bl	8003aa8 <stopwatch_on>
		}

		if (is_locked(1) == false) {
 8003654:	2001      	movs	r0, #1
 8003656:	f000 fa57 	bl	8003b08 <is_locked>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <main+0x72>
			lidar_read();
 8003660:	f7ff fd2e 	bl	80030c0 <lidar_read>
			stopwatch_on(1);
 8003664:	2001      	movs	r0, #1
 8003666:	f000 fa1f 	bl	8003aa8 <stopwatch_on>
		}

		printf("values: %d, %d\r\n", PSD_short_value(), PSD_long_value());
 800366a:	f000 f8db 	bl	8003824 <PSD_short_value>
 800366e:	4603      	mov	r3, r0
 8003670:	461c      	mov	r4, r3
 8003672:	f000 f8e3 	bl	800383c <PSD_long_value>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	4621      	mov	r1, r4
 800367c:	480c      	ldr	r0, [pc, #48]	; (80036b0 <main+0xb8>)
 800367e:	f000 fc95 	bl	8003fac <iprintf>
		printf("distance: %d cm\r\n", lidar_distance_cm());
 8003682:	f7ff fd81 	bl	8003188 <lidar_distance_cm>
 8003686:	4603      	mov	r3, r0
 8003688:	4619      	mov	r1, r3
 800368a:	480a      	ldr	r0, [pc, #40]	; (80036b4 <main+0xbc>)
 800368c:	f000 fc8e 	bl	8003fac <iprintf>
		printf("strength: %d\r\n", lidar_strength());
 8003690:	f7ff fd92 	bl	80031b8 <lidar_strength>
 8003694:	4603      	mov	r3, r0
 8003696:	4619      	mov	r1, r3
 8003698:	4807      	ldr	r0, [pc, #28]	; (80036b8 <main+0xc0>)
 800369a:	f000 fc87 	bl	8003fac <iprintf>

		stopwatch_update();
 800369e:	f000 fa5d 	bl	8003b5c <stopwatch_update>
		HAL_Delay(100);
 80036a2:	2064      	movs	r0, #100	; 0x64
 80036a4:	f7fc ffe6 	bl	8000674 <HAL_Delay>
		if (is_locked(0) == false) {
 80036a8:	e7c9      	b.n	800363e <main+0x46>
 80036aa:	bf00      	nop
 80036ac:	08004e8c 	.word	0x08004e8c
 80036b0:	08004ea8 	.word	0x08004ea8
 80036b4:	08004ebc 	.word	0x08004ebc
 80036b8:	08004ed0 	.word	0x08004ed0

080036bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b094      	sub	sp, #80	; 0x50
 80036c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	4a35      	ldr	r2, [pc, #212]	; (800379c <SystemClock_Config+0xe0>)
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <SystemClock_Config+0xe0>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b32      	ldr	r3, [pc, #200]	; (800379c <SystemClock_Config+0xe0>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <SystemClock_Config+0xe4>)
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <SystemClock_Config+0xe4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <SystemClock_Config+0xe4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036fe:	2302      	movs	r3, #2
 8003700:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003702:	2301      	movs	r3, #1
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8003706:	2310      	movs	r3, #16
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800370a:	2302      	movs	r3, #2
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800370e:	2300      	movs	r3, #0
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8003712:	2310      	movs	r3, #16
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8003716:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800371a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800371c:	2304      	movs	r3, #4
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003720:	2307      	movs	r3, #7
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003724:	f107 0320 	add.w	r3, r7, #32
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fb71 	bl	8001e10 <HAL_RCC_OscConfig>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <SystemClock_Config+0x80>
		_Error_Handler(__FILE__, __LINE__);
 8003734:	21b5      	movs	r1, #181	; 0xb5
 8003736:	481b      	ldr	r0, [pc, #108]	; (80037a4 <SystemClock_Config+0xe8>)
 8003738:	f000 f838 	bl	80037ac <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800373c:	230f      	movs	r3, #15
 800373e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003740:	2302      	movs	r3, #2
 8003742:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800374c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fd9b 	bl	8002294 <HAL_RCC_ClockConfig>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <SystemClock_Config+0xb0>
		_Error_Handler(__FILE__, __LINE__);
 8003764:	21c2      	movs	r1, #194	; 0xc2
 8003766:	480f      	ldr	r0, [pc, #60]	; (80037a4 <SystemClock_Config+0xe8>)
 8003768:	f000 f820 	bl	80037ac <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800376c:	f7fe ff4c 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <SystemClock_Config+0xec>)
 8003774:	fba3 2302 	umull	r2, r3, r3, r2
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fcaf 	bl	80010de <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003780:	2004      	movs	r0, #4
 8003782:	f7fd fcb9 	bl	80010f8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	f04f 30ff 	mov.w	r0, #4294967295
 800378e:	f7fd fc7c 	bl	800108a <HAL_NVIC_SetPriority>
}
 8003792:	bf00      	nop
 8003794:	3750      	adds	r7, #80	; 0x50
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	08004ee0 	.word	0x08004ee0
 80037a8:	10624dd3 	.word	0x10624dd3

080037ac <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80037b6:	e7fe      	b.n	80037b6 <_Error_Handler+0xa>

080037b8 <PSD_init>:
#include "psd.h"

bool PSD_init() {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	psd_raw_values = malloc(number_of_sensors * sizeof(uint16_t));
 80037bc:	2302      	movs	r3, #2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fb3f 	bl	8003e44 <malloc>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <PSD_init+0x34>)
 80037cc:	601a      	str	r2, [r3, #0]

	if (psd_raw_values == NULL) {
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <PSD_init+0x34>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <PSD_init+0x28>
		printf("psd malloc failed\r\n");
 80037d6:	4806      	ldr	r0, [pc, #24]	; (80037f0 <PSD_init+0x38>)
 80037d8:	f000 fc5c 	bl	8004094 <puts>
		return false;
 80037dc:	2300      	movs	r3, #0
 80037de:	e003      	b.n	80037e8 <PSD_init+0x30>
	}
	printf("psd malloc succeeded\r\n");
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <PSD_init+0x3c>)
 80037e2:	f000 fc57 	bl	8004094 <puts>
	return true;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	200001f4 	.word	0x200001f4
 80037f0:	08004ef0 	.word	0x08004ef0
 80037f4:	08004f04 	.word	0x08004f04

080037f8 <PSD_read>:
	free(psd_raw_values);
	printf("psd free succeeded\r\n");
	return true;
}

void PSD_read() {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) psd_raw_values, number_of_sensors);
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <PSD_read+0x24>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2202      	movs	r2, #2
 8003802:	4619      	mov	r1, r3
 8003804:	4806      	ldr	r0, [pc, #24]	; (8003820 <PSD_read+0x28>)
 8003806:	f7fc ff9b 	bl	8000740 <HAL_ADC_Start_DMA>
	HAL_Delay(20);
 800380a:	2014      	movs	r0, #20
 800380c:	f7fc ff32 	bl	8000674 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1);
 8003810:	4803      	ldr	r0, [pc, #12]	; (8003820 <PSD_read+0x28>)
 8003812:	f7fd f867 	bl	80008e4 <HAL_ADC_Stop_DMA>
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200001f4 	.word	0x200001f4
 8003820:	200000a0 	.word	0x200000a0

08003824 <PSD_short_value>:

uint16_t PSD_short_value() {
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
	return psd_raw_values[0];
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <PSD_short_value+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	881b      	ldrh	r3, [r3, #0]
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	200001f4 	.word	0x200001f4

0800383c <PSD_long_value>:

uint16_t PSD_long_value() {
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	return psd_raw_values[1];
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <PSD_long_value+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	885b      	ldrh	r3, [r3, #2]
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	200001f4 	.word	0x200001f4

08003854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	4a25      	ldr	r2, [pc, #148]	; (80038f4 <HAL_MspInit+0xa0>)
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_MspInit+0xa0>)
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <HAL_MspInit+0xa0>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <HAL_MspInit+0xa0>)
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_MspInit+0xa0>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_MspInit+0xa0>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003892:	2007      	movs	r0, #7
 8003894:	f7fd fbee 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003898:	2200      	movs	r2, #0
 800389a:	2100      	movs	r1, #0
 800389c:	f06f 000b 	mvn.w	r0, #11
 80038a0:	f7fd fbf3 	bl	800108a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	f06f 000a 	mvn.w	r0, #10
 80038ac:	f7fd fbed 	bl	800108a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2100      	movs	r1, #0
 80038b4:	f06f 0009 	mvn.w	r0, #9
 80038b8:	f7fd fbe7 	bl	800108a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	f06f 0004 	mvn.w	r0, #4
 80038c4:	f7fd fbe1 	bl	800108a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2100      	movs	r1, #0
 80038cc:	f06f 0003 	mvn.w	r0, #3
 80038d0:	f7fd fbdb 	bl	800108a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80038d4:	2200      	movs	r2, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	f06f 0001 	mvn.w	r0, #1
 80038dc:	f7fd fbd5 	bl	800108a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2100      	movs	r1, #0
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	f7fd fbcf 	bl	800108a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800

080038f8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800390a:	e7fe      	b.n	800390a <HardFault_Handler+0x4>

0800390c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003910:	e7fe      	b.n	8003910 <MemManage_Handler+0x4>

08003912 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003916:	e7fe      	b.n	8003916 <BusFault_Handler+0x4>

08003918 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800391c:	e7fe      	b.n	800391c <UsageFault_Handler+0x4>

0800391e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800394c:	f7fc fe72 	bl	8000634 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003950:	f7fd fbee 	bl	8001130 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}

08003958 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <DMA2_Stream0_IRQHandler+0x10>)
 800395e:	f7fd fd73 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200000e8 	.word	0x200000e8

0800396c <DMA2_Stream1_IRQHandler>:

/**
* @brief This function handles DMA2 stream1 global interrupt.
*/
void DMA2_Stream1_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <DMA2_Stream1_IRQHandler+0x10>)
 8003972:	f7fd fd69 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000200 	.word	0x20000200

08003980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <SystemInit+0x60>)
 8003986:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <SystemInit+0x60>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003994:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <SystemInit+0x64>)
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <SystemInit+0x64>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <SystemInit+0x64>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80039a6:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <SystemInit+0x64>)
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <SystemInit+0x64>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <SystemInit+0x64>)
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <SystemInit+0x68>)
 80039ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <SystemInit+0x64>)
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <SystemInit+0x64>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <SystemInit+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SystemInit+0x60>)
 80039d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039d4:	609a      	str	r2, [r3, #8]
#endif
}
 80039d6:	bf00      	nop
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00
 80039e4:	40023800 	.word	0x40023800
 80039e8:	24003010 	.word	0x24003010

080039ec <stopwatch_init>:
#include "timer.h"

bool stopwatch_init() {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
	stopwatch = malloc(number_of_stopwatches * sizeof(uint16_t));
 80039f2:	2302      	movs	r3, #2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fa24 	bl	8003e44 <malloc>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <stopwatch_init+0xa8>)
 8003a02:	601a      	str	r2, [r3, #0]
	is_stopwatch_on = malloc(number_of_stopwatches * sizeof(bool));
 8003a04:	2302      	movs	r3, #2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fa1c 	bl	8003e44 <malloc>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <stopwatch_init+0xac>)
 8003a12:	601a      	str	r2, [r3, #0]
	stopwatch_lock_time = malloc(number_of_stopwatches * sizeof(uint16_t));
 8003a14:	2302      	movs	r3, #2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fa13 	bl	8003e44 <malloc>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <stopwatch_init+0xb0>)
 8003a24:	601a      	str	r2, [r3, #0]

	if (stopwatch == NULL || is_stopwatch_on == NULL
 8003a26:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <stopwatch_init+0xa8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <stopwatch_init+0x52>
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <stopwatch_init+0xac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <stopwatch_init+0x52>
			|| stopwatch_lock_time == NULL) {
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <stopwatch_init+0xb0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <stopwatch_init+0x5c>
		printf("stopwatch malloc failed\r\n");
 8003a3e:	4818      	ldr	r0, [pc, #96]	; (8003aa0 <stopwatch_init+0xb4>)
 8003a40:	f000 fb28 	bl	8004094 <puts>
		return false;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e021      	b.n	8003a8c <stopwatch_init+0xa0>
	}

	for(uint8_t i = 0; i<number_of_stopwatches; ++i)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	71fb      	strb	r3, [r7, #7]
 8003a4c:	e016      	b.n	8003a7c <stopwatch_init+0x90>
	{
		stopwatch[i] = 0;
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <stopwatch_init+0xa8>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	2200      	movs	r2, #0
 8003a5a:	801a      	strh	r2, [r3, #0]
		is_stopwatch_on[i] = false;
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <stopwatch_init+0xac>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	4413      	add	r3, r2
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
		stopwatch_lock_time[i] = 0;
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <stopwatch_init+0xb0>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<number_of_stopwatches; ++i)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	71fb      	strb	r3, [r7, #7]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d3e4      	bcc.n	8003a4e <stopwatch_init+0x62>
	}

	printf("stopwatch malloc succeeded\r\n");
 8003a84:	4807      	ldr	r0, [pc, #28]	; (8003aa4 <stopwatch_init+0xb8>)
 8003a86:	f000 fb05 	bl	8004094 <puts>
	return true;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200001fc 	.word	0x200001fc
 8003a98:	200001f8 	.word	0x200001f8
 8003a9c:	200001f0 	.word	0x200001f0
 8003aa0:	08004f50 	.word	0x08004f50
 8003aa4:	08004f6c 	.word	0x08004f6c

08003aa8 <stopwatch_on>:

	printf("stopwatch free succeeded\r\n");
	return true;
}

void stopwatch_on(uint8_t _stopwatch_number) {
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
	is_stopwatch_on[_stopwatch_number] = true;
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <stopwatch_on+0x30>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	4413      	add	r3, r2
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
	stopwatch[_stopwatch_number] = 0;
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <stopwatch_on+0x34>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	2200      	movs	r2, #0
 8003aca:	801a      	strh	r2, [r3, #0]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	200001f8 	.word	0x200001f8
 8003adc:	200001fc 	.word	0x200001fc

08003ae0 <stopwatch_off>:

void stopwatch_off(uint8_t _stopwatch_number) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
	is_stopwatch_on[_stopwatch_number] = false;
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <stopwatch_off+0x24>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	4413      	add	r3, r2
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	200001f8 	.word	0x200001f8

08003b08 <is_locked>:

bool is_locked(uint8_t _stopwatch_number) {
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
	return is_stopwatch_on[_stopwatch_number];
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <is_locked+0x20>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	4413      	add	r3, r2
 8003b1a:	781b      	ldrb	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	200001f8 	.word	0x200001f8

08003b2c <set_stopwatch_blocking_time>:

void set_stopwatch_blocking_time(uint8_t _stopwatch_number, uint16_t _blocking_time) {
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	460a      	mov	r2, r1
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	80bb      	strh	r3, [r7, #4]
	stopwatch_lock_time[_stopwatch_number] = _blocking_time;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <set_stopwatch_blocking_time+0x2c>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	88ba      	ldrh	r2, [r7, #4]
 8003b48:	801a      	strh	r2, [r3, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	200001f0 	.word	0x200001f0

08003b5c <stopwatch_update>:

void stopwatch_update() {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < number_of_stopwatches; ++i) {
 8003b62:	2300      	movs	r3, #0
 8003b64:	71fb      	strb	r3, [r7, #7]
 8003b66:	e025      	b.n	8003bb4 <stopwatch_update+0x58>
		if ((is_stopwatch_on[i] == true)
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <stopwatch_update+0x68>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d117      	bne.n	8003ba6 <stopwatch_update+0x4a>
				&& (stopwatch[i] < stopwatch_lock_time[i]))
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <stopwatch_update+0x6c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	881a      	ldrh	r2, [r3, #0]
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <stopwatch_update+0x70>)
 8003b84:	6819      	ldr	r1, [r3, #0]
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	440b      	add	r3, r1
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d209      	bcs.n	8003ba6 <stopwatch_update+0x4a>
			++stopwatch[i];
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <stopwatch_update+0x6c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	3201      	adds	r2, #1
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	801a      	strh	r2, [r3, #0]
 8003ba4:	e003      	b.n	8003bae <stopwatch_update+0x52>
		else
			stopwatch_off(i);
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff99 	bl	8003ae0 <stopwatch_off>
	for (uint8_t i = 0; i < number_of_stopwatches; ++i) {
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	71fb      	strb	r3, [r7, #7]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d3d5      	bcc.n	8003b68 <stopwatch_update+0xc>
	}
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	200001f8 	.word	0x200001f8
 8003bc8:	200001fc 	.word	0x200001fc
 8003bcc:	200001f0 	.word	0x200001f0

08003bd0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003bd6:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <MX_USART2_UART_Init+0x54>)
 8003bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c06:	4806      	ldr	r0, [pc, #24]	; (8003c20 <MX_USART2_UART_Init+0x50>)
 8003c08:	f7fe fd32 	bl	8002670 <HAL_UART_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c12:	2145      	movs	r1, #69	; 0x45
 8003c14:	4804      	ldr	r0, [pc, #16]	; (8003c28 <MX_USART2_UART_Init+0x58>)
 8003c16:	f7ff fdc9 	bl	80037ac <_Error_Handler>
  }

}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200002a0 	.word	0x200002a0
 8003c24:	40004400 	.word	0x40004400
 8003c28:	08004fc8 	.word	0x08004fc8

08003c2c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c32:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <MX_USART6_UART_Init+0x54>)
 8003c34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c52:	2204      	movs	r2, #4
 8003c54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c62:	4806      	ldr	r0, [pc, #24]	; (8003c7c <MX_USART6_UART_Init+0x50>)
 8003c64:	f7fe fd04 	bl	8002670 <HAL_UART_Init>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <MX_USART6_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c6e:	2158      	movs	r1, #88	; 0x58
 8003c70:	4804      	ldr	r0, [pc, #16]	; (8003c84 <MX_USART6_UART_Init+0x58>)
 8003c72:	f7ff fd9b 	bl	80037ac <_Error_Handler>
  }

}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000260 	.word	0x20000260
 8003c80:	40011400 	.word	0x40011400
 8003c84:	08004fc8 	.word	0x08004fc8

08003c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <HAL_UART_MspInit+0x100>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d11e      	bne.n	8003cd8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_UART_MspInit+0x104>)
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_UART_MspInit+0x104>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_UART_MspInit+0x104>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cc6:	2307      	movs	r3, #7
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cca:	f107 0314 	add.w	r3, r7, #20
 8003cce:	4619      	mov	r1, r3
 8003cd0:	482f      	ldr	r0, [pc, #188]	; (8003d90 <HAL_UART_MspInit+0x108>)
 8003cd2:	f7fd fe21 	bl	8001918 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003cd6:	e053      	b.n	8003d80 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART6)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2d      	ldr	r2, [pc, #180]	; (8003d94 <HAL_UART_MspInit+0x10c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d14e      	bne.n	8003d80 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_UART_MspInit+0x104>)
 8003ce8:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_UART_MspInit+0x104>)
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	f043 0320 	orr.w	r3, r3, #32
 8003cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf2:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <HAL_UART_MspInit+0x104>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cfe:	23c0      	movs	r3, #192	; 0xc0
 8003d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d0e:	2308      	movs	r3, #8
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d12:	f107 0314 	add.w	r3, r7, #20
 8003d16:	4619      	mov	r1, r3
 8003d18:	481f      	ldr	r0, [pc, #124]	; (8003d98 <HAL_UART_MspInit+0x110>)
 8003d1a:	f7fd fdfd 	bl	8001918 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003d1e:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_UART_MspInit+0x118>)
 8003d22:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d26:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003d2a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d3e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d52:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003d60:	480e      	ldr	r0, [pc, #56]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d62:	f7fd f9f3 	bl	800114c <HAL_DMA_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_UART_MspInit+0xec>
      _Error_Handler(__FILE__, __LINE__);
 8003d6c:	2199      	movs	r1, #153	; 0x99
 8003d6e:	480d      	ldr	r0, [pc, #52]	; (8003da4 <HAL_UART_MspInit+0x11c>)
 8003d70:	f7ff fd1c 	bl	80037ac <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d80:	bf00      	nop
 8003d82:	3728      	adds	r7, #40	; 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40004400 	.word	0x40004400
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40011400 	.word	0x40011400
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	20000200 	.word	0x20000200
 8003da0:	40026428 	.word	0x40026428
 8003da4:	08004fc8 	.word	0x08004fc8

08003da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dae:	e003      	b.n	8003db8 <LoopCopyDataInit>

08003db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003db6:	3104      	adds	r1, #4

08003db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003db8:	480b      	ldr	r0, [pc, #44]	; (8003de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dc0:	d3f6      	bcc.n	8003db0 <CopyDataInit>
  ldr  r2, =_sbss
 8003dc2:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003dc4:	e002      	b.n	8003dcc <LoopFillZerobss>

08003dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003dc8:	f842 3b04 	str.w	r3, [r2], #4

08003dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dd0:	d3f9      	bcc.n	8003dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dd2:	f7ff fdd5 	bl	8003980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dd6:	f000 f811 	bl	8003dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dda:	f7ff fc0d 	bl	80035f8 <main>
  bx  lr    
 8003dde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003de0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003de4:	080050a0 	.word	0x080050a0
  ldr  r0, =_sdata
 8003de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003dec:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003df0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003df4:	200002e4 	.word	0x200002e4

08003df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df8:	e7fe      	b.n	8003df8 <ADC_IRQHandler>
	...

08003dfc <__libc_init_array>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	4e0d      	ldr	r6, [pc, #52]	; (8003e34 <__libc_init_array+0x38>)
 8003e00:	4c0d      	ldr	r4, [pc, #52]	; (8003e38 <__libc_init_array+0x3c>)
 8003e02:	1ba4      	subs	r4, r4, r6
 8003e04:	10a4      	asrs	r4, r4, #2
 8003e06:	2500      	movs	r5, #0
 8003e08:	42a5      	cmp	r5, r4
 8003e0a:	d109      	bne.n	8003e20 <__libc_init_array+0x24>
 8003e0c:	4e0b      	ldr	r6, [pc, #44]	; (8003e3c <__libc_init_array+0x40>)
 8003e0e:	4c0c      	ldr	r4, [pc, #48]	; (8003e40 <__libc_init_array+0x44>)
 8003e10:	f000 ffba 	bl	8004d88 <_init>
 8003e14:	1ba4      	subs	r4, r4, r6
 8003e16:	10a4      	asrs	r4, r4, #2
 8003e18:	2500      	movs	r5, #0
 8003e1a:	42a5      	cmp	r5, r4
 8003e1c:	d105      	bne.n	8003e2a <__libc_init_array+0x2e>
 8003e1e:	bd70      	pop	{r4, r5, r6, pc}
 8003e20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e24:	4798      	blx	r3
 8003e26:	3501      	adds	r5, #1
 8003e28:	e7ee      	b.n	8003e08 <__libc_init_array+0xc>
 8003e2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e2e:	4798      	blx	r3
 8003e30:	3501      	adds	r5, #1
 8003e32:	e7f2      	b.n	8003e1a <__libc_init_array+0x1e>
 8003e34:	08005098 	.word	0x08005098
 8003e38:	08005098 	.word	0x08005098
 8003e3c:	08005098 	.word	0x08005098
 8003e40:	0800509c 	.word	0x0800509c

08003e44 <malloc>:
 8003e44:	4b02      	ldr	r3, [pc, #8]	; (8003e50 <malloc+0xc>)
 8003e46:	4601      	mov	r1, r0
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	f000 b851 	b.w	8003ef0 <_malloc_r>
 8003e4e:	bf00      	nop
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <_free_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4605      	mov	r5, r0
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d045      	beq.n	8003ee8 <_free_r+0x94>
 8003e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e60:	1f0c      	subs	r4, r1, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfb8      	it	lt
 8003e66:	18e4      	addlt	r4, r4, r3
 8003e68:	f000 fbd4 	bl	8004614 <__malloc_lock>
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <_free_r+0x98>)
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	4610      	mov	r0, r2
 8003e72:	b933      	cbnz	r3, 8003e82 <_free_r+0x2e>
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	6014      	str	r4, [r2, #0]
 8003e78:	4628      	mov	r0, r5
 8003e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e7e:	f000 bbca 	b.w	8004616 <__malloc_unlock>
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	d90c      	bls.n	8003ea0 <_free_r+0x4c>
 8003e86:	6821      	ldr	r1, [r4, #0]
 8003e88:	1862      	adds	r2, r4, r1
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bf04      	itt	eq
 8003e8e:	681a      	ldreq	r2, [r3, #0]
 8003e90:	685b      	ldreq	r3, [r3, #4]
 8003e92:	6063      	str	r3, [r4, #4]
 8003e94:	bf04      	itt	eq
 8003e96:	1852      	addeq	r2, r2, r1
 8003e98:	6022      	streq	r2, [r4, #0]
 8003e9a:	6004      	str	r4, [r0, #0]
 8003e9c:	e7ec      	b.n	8003e78 <_free_r+0x24>
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	b10a      	cbz	r2, 8003ea8 <_free_r+0x54>
 8003ea4:	42a2      	cmp	r2, r4
 8003ea6:	d9fa      	bls.n	8003e9e <_free_r+0x4a>
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	1858      	adds	r0, r3, r1
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d10b      	bne.n	8003ec8 <_free_r+0x74>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	4401      	add	r1, r0
 8003eb4:	1858      	adds	r0, r3, r1
 8003eb6:	4282      	cmp	r2, r0
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	d1dd      	bne.n	8003e78 <_free_r+0x24>
 8003ebc:	6810      	ldr	r0, [r2, #0]
 8003ebe:	6852      	ldr	r2, [r2, #4]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	4401      	add	r1, r0
 8003ec4:	6019      	str	r1, [r3, #0]
 8003ec6:	e7d7      	b.n	8003e78 <_free_r+0x24>
 8003ec8:	d902      	bls.n	8003ed0 <_free_r+0x7c>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	602b      	str	r3, [r5, #0]
 8003ece:	e7d3      	b.n	8003e78 <_free_r+0x24>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	1821      	adds	r1, r4, r0
 8003ed4:	428a      	cmp	r2, r1
 8003ed6:	bf04      	itt	eq
 8003ed8:	6811      	ldreq	r1, [r2, #0]
 8003eda:	6852      	ldreq	r2, [r2, #4]
 8003edc:	6062      	str	r2, [r4, #4]
 8003ede:	bf04      	itt	eq
 8003ee0:	1809      	addeq	r1, r1, r0
 8003ee2:	6021      	streq	r1, [r4, #0]
 8003ee4:	605c      	str	r4, [r3, #4]
 8003ee6:	e7c7      	b.n	8003e78 <_free_r+0x24>
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	2000008c 	.word	0x2000008c

08003ef0 <_malloc_r>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	1ccd      	adds	r5, r1, #3
 8003ef4:	f025 0503 	bic.w	r5, r5, #3
 8003ef8:	3508      	adds	r5, #8
 8003efa:	2d0c      	cmp	r5, #12
 8003efc:	bf38      	it	cc
 8003efe:	250c      	movcc	r5, #12
 8003f00:	2d00      	cmp	r5, #0
 8003f02:	4606      	mov	r6, r0
 8003f04:	db01      	blt.n	8003f0a <_malloc_r+0x1a>
 8003f06:	42a9      	cmp	r1, r5
 8003f08:	d903      	bls.n	8003f12 <_malloc_r+0x22>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	2000      	movs	r0, #0
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	f000 fb7f 	bl	8004614 <__malloc_lock>
 8003f16:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <_malloc_r+0xb4>)
 8003f18:	6814      	ldr	r4, [r2, #0]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	b991      	cbnz	r1, 8003f44 <_malloc_r+0x54>
 8003f1e:	4c22      	ldr	r4, [pc, #136]	; (8003fa8 <_malloc_r+0xb8>)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	b91b      	cbnz	r3, 8003f2c <_malloc_r+0x3c>
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 f8bd 	bl	80040a4 <_sbrk_r>
 8003f2a:	6020      	str	r0, [r4, #0]
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f8b8 	bl	80040a4 <_sbrk_r>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d126      	bne.n	8003f86 <_malloc_r+0x96>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 fb6a 	bl	8004616 <__malloc_unlock>
 8003f42:	e7e4      	b.n	8003f0e <_malloc_r+0x1e>
 8003f44:	680b      	ldr	r3, [r1, #0]
 8003f46:	1b5b      	subs	r3, r3, r5
 8003f48:	d41a      	bmi.n	8003f80 <_malloc_r+0x90>
 8003f4a:	2b0b      	cmp	r3, #11
 8003f4c:	d90f      	bls.n	8003f6e <_malloc_r+0x7e>
 8003f4e:	600b      	str	r3, [r1, #0]
 8003f50:	50cd      	str	r5, [r1, r3]
 8003f52:	18cc      	adds	r4, r1, r3
 8003f54:	4630      	mov	r0, r6
 8003f56:	f000 fb5e 	bl	8004616 <__malloc_unlock>
 8003f5a:	f104 000b 	add.w	r0, r4, #11
 8003f5e:	1d23      	adds	r3, r4, #4
 8003f60:	f020 0007 	bic.w	r0, r0, #7
 8003f64:	1ac3      	subs	r3, r0, r3
 8003f66:	d01b      	beq.n	8003fa0 <_malloc_r+0xb0>
 8003f68:	425a      	negs	r2, r3
 8003f6a:	50e2      	str	r2, [r4, r3]
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	428c      	cmp	r4, r1
 8003f70:	bf0d      	iteet	eq
 8003f72:	6863      	ldreq	r3, [r4, #4]
 8003f74:	684b      	ldrne	r3, [r1, #4]
 8003f76:	6063      	strne	r3, [r4, #4]
 8003f78:	6013      	streq	r3, [r2, #0]
 8003f7a:	bf18      	it	ne
 8003f7c:	460c      	movne	r4, r1
 8003f7e:	e7e9      	b.n	8003f54 <_malloc_r+0x64>
 8003f80:	460c      	mov	r4, r1
 8003f82:	6849      	ldr	r1, [r1, #4]
 8003f84:	e7ca      	b.n	8003f1c <_malloc_r+0x2c>
 8003f86:	1cc4      	adds	r4, r0, #3
 8003f88:	f024 0403 	bic.w	r4, r4, #3
 8003f8c:	42a0      	cmp	r0, r4
 8003f8e:	d005      	beq.n	8003f9c <_malloc_r+0xac>
 8003f90:	1a21      	subs	r1, r4, r0
 8003f92:	4630      	mov	r0, r6
 8003f94:	f000 f886 	bl	80040a4 <_sbrk_r>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d0cd      	beq.n	8003f38 <_malloc_r+0x48>
 8003f9c:	6025      	str	r5, [r4, #0]
 8003f9e:	e7d9      	b.n	8003f54 <_malloc_r+0x64>
 8003fa0:	bd70      	pop	{r4, r5, r6, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000008c 	.word	0x2000008c
 8003fa8:	20000090 	.word	0x20000090

08003fac <iprintf>:
 8003fac:	b40f      	push	{r0, r1, r2, r3}
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <iprintf+0x2c>)
 8003fb0:	b513      	push	{r0, r1, r4, lr}
 8003fb2:	681c      	ldr	r4, [r3, #0]
 8003fb4:	b124      	cbz	r4, 8003fc0 <iprintf+0x14>
 8003fb6:	69a3      	ldr	r3, [r4, #24]
 8003fb8:	b913      	cbnz	r3, 8003fc0 <iprintf+0x14>
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 fa34 	bl	8004428 <__sinit>
 8003fc0:	ab05      	add	r3, sp, #20
 8003fc2:	9a04      	ldr	r2, [sp, #16]
 8003fc4:	68a1      	ldr	r1, [r4, #8]
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 fb4f 	bl	800466c <_vfiprintf_r>
 8003fce:	b002      	add	sp, #8
 8003fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd4:	b004      	add	sp, #16
 8003fd6:	4770      	bx	lr
 8003fd8:	2000000c 	.word	0x2000000c

08003fdc <_puts_r>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	460e      	mov	r6, r1
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	b118      	cbz	r0, 8003fec <_puts_r+0x10>
 8003fe4:	6983      	ldr	r3, [r0, #24]
 8003fe6:	b90b      	cbnz	r3, 8003fec <_puts_r+0x10>
 8003fe8:	f000 fa1e 	bl	8004428 <__sinit>
 8003fec:	69ab      	ldr	r3, [r5, #24]
 8003fee:	68ac      	ldr	r4, [r5, #8]
 8003ff0:	b913      	cbnz	r3, 8003ff8 <_puts_r+0x1c>
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fa18 	bl	8004428 <__sinit>
 8003ff8:	4b23      	ldr	r3, [pc, #140]	; (8004088 <_puts_r+0xac>)
 8003ffa:	429c      	cmp	r4, r3
 8003ffc:	d117      	bne.n	800402e <_puts_r+0x52>
 8003ffe:	686c      	ldr	r4, [r5, #4]
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	071b      	lsls	r3, r3, #28
 8004004:	d51d      	bpl.n	8004042 <_puts_r+0x66>
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	b1db      	cbz	r3, 8004042 <_puts_r+0x66>
 800400a:	3e01      	subs	r6, #1
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004012:	3b01      	subs	r3, #1
 8004014:	60a3      	str	r3, [r4, #8]
 8004016:	b9e9      	cbnz	r1, 8004054 <_puts_r+0x78>
 8004018:	2b00      	cmp	r3, #0
 800401a:	da2e      	bge.n	800407a <_puts_r+0x9e>
 800401c:	4622      	mov	r2, r4
 800401e:	210a      	movs	r1, #10
 8004020:	4628      	mov	r0, r5
 8004022:	f000 f84f 	bl	80040c4 <__swbuf_r>
 8004026:	3001      	adds	r0, #1
 8004028:	d011      	beq.n	800404e <_puts_r+0x72>
 800402a:	200a      	movs	r0, #10
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <_puts_r+0xb0>)
 8004030:	429c      	cmp	r4, r3
 8004032:	d101      	bne.n	8004038 <_puts_r+0x5c>
 8004034:	68ac      	ldr	r4, [r5, #8]
 8004036:	e7e3      	b.n	8004000 <_puts_r+0x24>
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <_puts_r+0xb4>)
 800403a:	429c      	cmp	r4, r3
 800403c:	bf08      	it	eq
 800403e:	68ec      	ldreq	r4, [r5, #12]
 8004040:	e7de      	b.n	8004000 <_puts_r+0x24>
 8004042:	4621      	mov	r1, r4
 8004044:	4628      	mov	r0, r5
 8004046:	f000 f88f 	bl	8004168 <__swsetup_r>
 800404a:	2800      	cmp	r0, #0
 800404c:	d0dd      	beq.n	800400a <_puts_r+0x2e>
 800404e:	f04f 30ff 	mov.w	r0, #4294967295
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	2b00      	cmp	r3, #0
 8004056:	da04      	bge.n	8004062 <_puts_r+0x86>
 8004058:	69a2      	ldr	r2, [r4, #24]
 800405a:	4293      	cmp	r3, r2
 800405c:	db06      	blt.n	800406c <_puts_r+0x90>
 800405e:	290a      	cmp	r1, #10
 8004060:	d004      	beq.n	800406c <_puts_r+0x90>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	7019      	strb	r1, [r3, #0]
 800406a:	e7cf      	b.n	800400c <_puts_r+0x30>
 800406c:	4622      	mov	r2, r4
 800406e:	4628      	mov	r0, r5
 8004070:	f000 f828 	bl	80040c4 <__swbuf_r>
 8004074:	3001      	adds	r0, #1
 8004076:	d1c9      	bne.n	800400c <_puts_r+0x30>
 8004078:	e7e9      	b.n	800404e <_puts_r+0x72>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	200a      	movs	r0, #10
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	6022      	str	r2, [r4, #0]
 8004082:	7018      	strb	r0, [r3, #0]
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	bf00      	nop
 8004088:	08005018 	.word	0x08005018
 800408c:	08005038 	.word	0x08005038
 8004090:	08004ff8 	.word	0x08004ff8

08004094 <puts>:
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <puts+0xc>)
 8004096:	4601      	mov	r1, r0
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	f7ff bf9f 	b.w	8003fdc <_puts_r>
 800409e:	bf00      	nop
 80040a0:	2000000c 	.word	0x2000000c

080040a4 <_sbrk_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4c06      	ldr	r4, [pc, #24]	; (80040c0 <_sbrk_r+0x1c>)
 80040a8:	2300      	movs	r3, #0
 80040aa:	4605      	mov	r5, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	f000 fe5c 	bl	8004d6c <_sbrk>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_sbrk_r+0x1a>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	b103      	cbz	r3, 80040be <_sbrk_r+0x1a>
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	200002e0 	.word	0x200002e0

080040c4 <__swbuf_r>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	460e      	mov	r6, r1
 80040c8:	4614      	mov	r4, r2
 80040ca:	4605      	mov	r5, r0
 80040cc:	b118      	cbz	r0, 80040d6 <__swbuf_r+0x12>
 80040ce:	6983      	ldr	r3, [r0, #24]
 80040d0:	b90b      	cbnz	r3, 80040d6 <__swbuf_r+0x12>
 80040d2:	f000 f9a9 	bl	8004428 <__sinit>
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <__swbuf_r+0x98>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	d12a      	bne.n	8004132 <__swbuf_r+0x6e>
 80040dc:	686c      	ldr	r4, [r5, #4]
 80040de:	69a3      	ldr	r3, [r4, #24]
 80040e0:	60a3      	str	r3, [r4, #8]
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	071a      	lsls	r2, r3, #28
 80040e6:	d52e      	bpl.n	8004146 <__swbuf_r+0x82>
 80040e8:	6923      	ldr	r3, [r4, #16]
 80040ea:	b363      	cbz	r3, 8004146 <__swbuf_r+0x82>
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	6820      	ldr	r0, [r4, #0]
 80040f0:	1ac0      	subs	r0, r0, r3
 80040f2:	6963      	ldr	r3, [r4, #20]
 80040f4:	b2f6      	uxtb	r6, r6
 80040f6:	4298      	cmp	r0, r3
 80040f8:	4637      	mov	r7, r6
 80040fa:	db04      	blt.n	8004106 <__swbuf_r+0x42>
 80040fc:	4621      	mov	r1, r4
 80040fe:	4628      	mov	r0, r5
 8004100:	f000 f928 	bl	8004354 <_fflush_r>
 8004104:	bb28      	cbnz	r0, 8004152 <__swbuf_r+0x8e>
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	3b01      	subs	r3, #1
 800410a:	60a3      	str	r3, [r4, #8]
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	6022      	str	r2, [r4, #0]
 8004112:	701e      	strb	r6, [r3, #0]
 8004114:	6963      	ldr	r3, [r4, #20]
 8004116:	3001      	adds	r0, #1
 8004118:	4298      	cmp	r0, r3
 800411a:	d004      	beq.n	8004126 <__swbuf_r+0x62>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	07db      	lsls	r3, r3, #31
 8004120:	d519      	bpl.n	8004156 <__swbuf_r+0x92>
 8004122:	2e0a      	cmp	r6, #10
 8004124:	d117      	bne.n	8004156 <__swbuf_r+0x92>
 8004126:	4621      	mov	r1, r4
 8004128:	4628      	mov	r0, r5
 800412a:	f000 f913 	bl	8004354 <_fflush_r>
 800412e:	b190      	cbz	r0, 8004156 <__swbuf_r+0x92>
 8004130:	e00f      	b.n	8004152 <__swbuf_r+0x8e>
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <__swbuf_r+0x9c>)
 8004134:	429c      	cmp	r4, r3
 8004136:	d101      	bne.n	800413c <__swbuf_r+0x78>
 8004138:	68ac      	ldr	r4, [r5, #8]
 800413a:	e7d0      	b.n	80040de <__swbuf_r+0x1a>
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <__swbuf_r+0xa0>)
 800413e:	429c      	cmp	r4, r3
 8004140:	bf08      	it	eq
 8004142:	68ec      	ldreq	r4, [r5, #12]
 8004144:	e7cb      	b.n	80040de <__swbuf_r+0x1a>
 8004146:	4621      	mov	r1, r4
 8004148:	4628      	mov	r0, r5
 800414a:	f000 f80d 	bl	8004168 <__swsetup_r>
 800414e:	2800      	cmp	r0, #0
 8004150:	d0cc      	beq.n	80040ec <__swbuf_r+0x28>
 8004152:	f04f 37ff 	mov.w	r7, #4294967295
 8004156:	4638      	mov	r0, r7
 8004158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415a:	bf00      	nop
 800415c:	08005018 	.word	0x08005018
 8004160:	08005038 	.word	0x08005038
 8004164:	08004ff8 	.word	0x08004ff8

08004168 <__swsetup_r>:
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <__swsetup_r+0xcc>)
 800416a:	b570      	push	{r4, r5, r6, lr}
 800416c:	681d      	ldr	r5, [r3, #0]
 800416e:	4606      	mov	r6, r0
 8004170:	460c      	mov	r4, r1
 8004172:	b125      	cbz	r5, 800417e <__swsetup_r+0x16>
 8004174:	69ab      	ldr	r3, [r5, #24]
 8004176:	b913      	cbnz	r3, 800417e <__swsetup_r+0x16>
 8004178:	4628      	mov	r0, r5
 800417a:	f000 f955 	bl	8004428 <__sinit>
 800417e:	4b2e      	ldr	r3, [pc, #184]	; (8004238 <__swsetup_r+0xd0>)
 8004180:	429c      	cmp	r4, r3
 8004182:	d10f      	bne.n	80041a4 <__swsetup_r+0x3c>
 8004184:	686c      	ldr	r4, [r5, #4]
 8004186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800418a:	b29a      	uxth	r2, r3
 800418c:	0715      	lsls	r5, r2, #28
 800418e:	d42c      	bmi.n	80041ea <__swsetup_r+0x82>
 8004190:	06d0      	lsls	r0, r2, #27
 8004192:	d411      	bmi.n	80041b8 <__swsetup_r+0x50>
 8004194:	2209      	movs	r2, #9
 8004196:	6032      	str	r2, [r6, #0]
 8004198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419c:	81a3      	strh	r3, [r4, #12]
 800419e:	f04f 30ff 	mov.w	r0, #4294967295
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <__swsetup_r+0xd4>)
 80041a6:	429c      	cmp	r4, r3
 80041a8:	d101      	bne.n	80041ae <__swsetup_r+0x46>
 80041aa:	68ac      	ldr	r4, [r5, #8]
 80041ac:	e7eb      	b.n	8004186 <__swsetup_r+0x1e>
 80041ae:	4b24      	ldr	r3, [pc, #144]	; (8004240 <__swsetup_r+0xd8>)
 80041b0:	429c      	cmp	r4, r3
 80041b2:	bf08      	it	eq
 80041b4:	68ec      	ldreq	r4, [r5, #12]
 80041b6:	e7e6      	b.n	8004186 <__swsetup_r+0x1e>
 80041b8:	0751      	lsls	r1, r2, #29
 80041ba:	d512      	bpl.n	80041e2 <__swsetup_r+0x7a>
 80041bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041be:	b141      	cbz	r1, 80041d2 <__swsetup_r+0x6a>
 80041c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041c4:	4299      	cmp	r1, r3
 80041c6:	d002      	beq.n	80041ce <__swsetup_r+0x66>
 80041c8:	4630      	mov	r0, r6
 80041ca:	f7ff fe43 	bl	8003e54 <_free_r>
 80041ce:	2300      	movs	r3, #0
 80041d0:	6363      	str	r3, [r4, #52]	; 0x34
 80041d2:	89a3      	ldrh	r3, [r4, #12]
 80041d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	2300      	movs	r3, #0
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	6923      	ldr	r3, [r4, #16]
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	81a3      	strh	r3, [r4, #12]
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	b94b      	cbnz	r3, 8004202 <__swsetup_r+0x9a>
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f8:	d003      	beq.n	8004202 <__swsetup_r+0x9a>
 80041fa:	4621      	mov	r1, r4
 80041fc:	4630      	mov	r0, r6
 80041fe:	f000 f9c1 	bl	8004584 <__smakebuf_r>
 8004202:	89a2      	ldrh	r2, [r4, #12]
 8004204:	f012 0301 	ands.w	r3, r2, #1
 8004208:	d00c      	beq.n	8004224 <__swsetup_r+0xbc>
 800420a:	2300      	movs	r3, #0
 800420c:	60a3      	str	r3, [r4, #8]
 800420e:	6963      	ldr	r3, [r4, #20]
 8004210:	425b      	negs	r3, r3
 8004212:	61a3      	str	r3, [r4, #24]
 8004214:	6923      	ldr	r3, [r4, #16]
 8004216:	b953      	cbnz	r3, 800422e <__swsetup_r+0xc6>
 8004218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800421c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004220:	d1ba      	bne.n	8004198 <__swsetup_r+0x30>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	0792      	lsls	r2, r2, #30
 8004226:	bf58      	it	pl
 8004228:	6963      	ldrpl	r3, [r4, #20]
 800422a:	60a3      	str	r3, [r4, #8]
 800422c:	e7f2      	b.n	8004214 <__swsetup_r+0xac>
 800422e:	2000      	movs	r0, #0
 8004230:	e7f7      	b.n	8004222 <__swsetup_r+0xba>
 8004232:	bf00      	nop
 8004234:	2000000c 	.word	0x2000000c
 8004238:	08005018 	.word	0x08005018
 800423c:	08005038 	.word	0x08005038
 8004240:	08004ff8 	.word	0x08004ff8

08004244 <__sflush_r>:
 8004244:	898a      	ldrh	r2, [r1, #12]
 8004246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800424a:	4605      	mov	r5, r0
 800424c:	0710      	lsls	r0, r2, #28
 800424e:	460c      	mov	r4, r1
 8004250:	d45a      	bmi.n	8004308 <__sflush_r+0xc4>
 8004252:	684b      	ldr	r3, [r1, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	dc05      	bgt.n	8004264 <__sflush_r+0x20>
 8004258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	dc02      	bgt.n	8004264 <__sflush_r+0x20>
 800425e:	2000      	movs	r0, #0
 8004260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004266:	2e00      	cmp	r6, #0
 8004268:	d0f9      	beq.n	800425e <__sflush_r+0x1a>
 800426a:	2300      	movs	r3, #0
 800426c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004270:	682f      	ldr	r7, [r5, #0]
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	d033      	beq.n	80042de <__sflush_r+0x9a>
 8004276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	075a      	lsls	r2, r3, #29
 800427c:	d505      	bpl.n	800428a <__sflush_r+0x46>
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	1ac0      	subs	r0, r0, r3
 8004282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004284:	b10b      	cbz	r3, 800428a <__sflush_r+0x46>
 8004286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004288:	1ac0      	subs	r0, r0, r3
 800428a:	2300      	movs	r3, #0
 800428c:	4602      	mov	r2, r0
 800428e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004290:	6a21      	ldr	r1, [r4, #32]
 8004292:	4628      	mov	r0, r5
 8004294:	47b0      	blx	r6
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	d106      	bne.n	80042aa <__sflush_r+0x66>
 800429c:	6829      	ldr	r1, [r5, #0]
 800429e:	291d      	cmp	r1, #29
 80042a0:	d84b      	bhi.n	800433a <__sflush_r+0xf6>
 80042a2:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <__sflush_r+0x10c>)
 80042a4:	40ca      	lsrs	r2, r1
 80042a6:	07d6      	lsls	r6, r2, #31
 80042a8:	d547      	bpl.n	800433a <__sflush_r+0xf6>
 80042aa:	2200      	movs	r2, #0
 80042ac:	6062      	str	r2, [r4, #4]
 80042ae:	04d9      	lsls	r1, r3, #19
 80042b0:	6922      	ldr	r2, [r4, #16]
 80042b2:	6022      	str	r2, [r4, #0]
 80042b4:	d504      	bpl.n	80042c0 <__sflush_r+0x7c>
 80042b6:	1c42      	adds	r2, r0, #1
 80042b8:	d101      	bne.n	80042be <__sflush_r+0x7a>
 80042ba:	682b      	ldr	r3, [r5, #0]
 80042bc:	b903      	cbnz	r3, 80042c0 <__sflush_r+0x7c>
 80042be:	6560      	str	r0, [r4, #84]	; 0x54
 80042c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042c2:	602f      	str	r7, [r5, #0]
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d0ca      	beq.n	800425e <__sflush_r+0x1a>
 80042c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042cc:	4299      	cmp	r1, r3
 80042ce:	d002      	beq.n	80042d6 <__sflush_r+0x92>
 80042d0:	4628      	mov	r0, r5
 80042d2:	f7ff fdbf 	bl	8003e54 <_free_r>
 80042d6:	2000      	movs	r0, #0
 80042d8:	6360      	str	r0, [r4, #52]	; 0x34
 80042da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042de:	6a21      	ldr	r1, [r4, #32]
 80042e0:	2301      	movs	r3, #1
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b0      	blx	r6
 80042e6:	1c41      	adds	r1, r0, #1
 80042e8:	d1c6      	bne.n	8004278 <__sflush_r+0x34>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0c3      	beq.n	8004278 <__sflush_r+0x34>
 80042f0:	2b1d      	cmp	r3, #29
 80042f2:	d001      	beq.n	80042f8 <__sflush_r+0xb4>
 80042f4:	2b16      	cmp	r3, #22
 80042f6:	d101      	bne.n	80042fc <__sflush_r+0xb8>
 80042f8:	602f      	str	r7, [r5, #0]
 80042fa:	e7b0      	b.n	800425e <__sflush_r+0x1a>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004308:	690f      	ldr	r7, [r1, #16]
 800430a:	2f00      	cmp	r7, #0
 800430c:	d0a7      	beq.n	800425e <__sflush_r+0x1a>
 800430e:	0793      	lsls	r3, r2, #30
 8004310:	680e      	ldr	r6, [r1, #0]
 8004312:	bf08      	it	eq
 8004314:	694b      	ldreq	r3, [r1, #20]
 8004316:	600f      	str	r7, [r1, #0]
 8004318:	bf18      	it	ne
 800431a:	2300      	movne	r3, #0
 800431c:	eba6 0807 	sub.w	r8, r6, r7
 8004320:	608b      	str	r3, [r1, #8]
 8004322:	f1b8 0f00 	cmp.w	r8, #0
 8004326:	dd9a      	ble.n	800425e <__sflush_r+0x1a>
 8004328:	4643      	mov	r3, r8
 800432a:	463a      	mov	r2, r7
 800432c:	6a21      	ldr	r1, [r4, #32]
 800432e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004330:	4628      	mov	r0, r5
 8004332:	47b0      	blx	r6
 8004334:	2800      	cmp	r0, #0
 8004336:	dc07      	bgt.n	8004348 <__sflush_r+0x104>
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800433e:	81a3      	strh	r3, [r4, #12]
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004348:	4407      	add	r7, r0
 800434a:	eba8 0800 	sub.w	r8, r8, r0
 800434e:	e7e8      	b.n	8004322 <__sflush_r+0xde>
 8004350:	20400001 	.word	0x20400001

08004354 <_fflush_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	4605      	mov	r5, r0
 800435a:	460c      	mov	r4, r1
 800435c:	b1db      	cbz	r3, 8004396 <_fflush_r+0x42>
 800435e:	b118      	cbz	r0, 8004368 <_fflush_r+0x14>
 8004360:	6983      	ldr	r3, [r0, #24]
 8004362:	b90b      	cbnz	r3, 8004368 <_fflush_r+0x14>
 8004364:	f000 f860 	bl	8004428 <__sinit>
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <_fflush_r+0x48>)
 800436a:	429c      	cmp	r4, r3
 800436c:	d109      	bne.n	8004382 <_fflush_r+0x2e>
 800436e:	686c      	ldr	r4, [r5, #4]
 8004370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004374:	b17b      	cbz	r3, 8004396 <_fflush_r+0x42>
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800437e:	f7ff bf61 	b.w	8004244 <__sflush_r>
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <_fflush_r+0x4c>)
 8004384:	429c      	cmp	r4, r3
 8004386:	d101      	bne.n	800438c <_fflush_r+0x38>
 8004388:	68ac      	ldr	r4, [r5, #8]
 800438a:	e7f1      	b.n	8004370 <_fflush_r+0x1c>
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <_fflush_r+0x50>)
 800438e:	429c      	cmp	r4, r3
 8004390:	bf08      	it	eq
 8004392:	68ec      	ldreq	r4, [r5, #12]
 8004394:	e7ec      	b.n	8004370 <_fflush_r+0x1c>
 8004396:	2000      	movs	r0, #0
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	08005018 	.word	0x08005018
 80043a0:	08005038 	.word	0x08005038
 80043a4:	08004ff8 	.word	0x08004ff8

080043a8 <_cleanup_r>:
 80043a8:	4901      	ldr	r1, [pc, #4]	; (80043b0 <_cleanup_r+0x8>)
 80043aa:	f000 b8a9 	b.w	8004500 <_fwalk_reent>
 80043ae:	bf00      	nop
 80043b0:	08004355 	.word	0x08004355

080043b4 <std.isra.0>:
 80043b4:	2300      	movs	r3, #0
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	6003      	str	r3, [r0, #0]
 80043bc:	6043      	str	r3, [r0, #4]
 80043be:	6083      	str	r3, [r0, #8]
 80043c0:	8181      	strh	r1, [r0, #12]
 80043c2:	6643      	str	r3, [r0, #100]	; 0x64
 80043c4:	81c2      	strh	r2, [r0, #14]
 80043c6:	6103      	str	r3, [r0, #16]
 80043c8:	6143      	str	r3, [r0, #20]
 80043ca:	6183      	str	r3, [r0, #24]
 80043cc:	4619      	mov	r1, r3
 80043ce:	2208      	movs	r2, #8
 80043d0:	305c      	adds	r0, #92	; 0x5c
 80043d2:	f000 f917 	bl	8004604 <memset>
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <std.isra.0+0x38>)
 80043d8:	6263      	str	r3, [r4, #36]	; 0x24
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <std.isra.0+0x3c>)
 80043dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <std.isra.0+0x40>)
 80043e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <std.isra.0+0x44>)
 80043e4:	6224      	str	r4, [r4, #32]
 80043e6:	6323      	str	r3, [r4, #48]	; 0x30
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	bf00      	nop
 80043ec:	08004bc5 	.word	0x08004bc5
 80043f0:	08004be7 	.word	0x08004be7
 80043f4:	08004c1f 	.word	0x08004c1f
 80043f8:	08004c43 	.word	0x08004c43

080043fc <__sfmoreglue>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	1e4a      	subs	r2, r1, #1
 8004400:	2568      	movs	r5, #104	; 0x68
 8004402:	4355      	muls	r5, r2
 8004404:	460e      	mov	r6, r1
 8004406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800440a:	f7ff fd71 	bl	8003ef0 <_malloc_r>
 800440e:	4604      	mov	r4, r0
 8004410:	b140      	cbz	r0, 8004424 <__sfmoreglue+0x28>
 8004412:	2100      	movs	r1, #0
 8004414:	e880 0042 	stmia.w	r0, {r1, r6}
 8004418:	300c      	adds	r0, #12
 800441a:	60a0      	str	r0, [r4, #8]
 800441c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004420:	f000 f8f0 	bl	8004604 <memset>
 8004424:	4620      	mov	r0, r4
 8004426:	bd70      	pop	{r4, r5, r6, pc}

08004428 <__sinit>:
 8004428:	6983      	ldr	r3, [r0, #24]
 800442a:	b510      	push	{r4, lr}
 800442c:	4604      	mov	r4, r0
 800442e:	bb33      	cbnz	r3, 800447e <__sinit+0x56>
 8004430:	6483      	str	r3, [r0, #72]	; 0x48
 8004432:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004434:	6503      	str	r3, [r0, #80]	; 0x50
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <__sinit+0x58>)
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <__sinit+0x5c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6282      	str	r2, [r0, #40]	; 0x28
 800443e:	4298      	cmp	r0, r3
 8004440:	bf04      	itt	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	6183      	streq	r3, [r0, #24]
 8004446:	f000 f81f 	bl	8004488 <__sfp>
 800444a:	6060      	str	r0, [r4, #4]
 800444c:	4620      	mov	r0, r4
 800444e:	f000 f81b 	bl	8004488 <__sfp>
 8004452:	60a0      	str	r0, [r4, #8]
 8004454:	4620      	mov	r0, r4
 8004456:	f000 f817 	bl	8004488 <__sfp>
 800445a:	2200      	movs	r2, #0
 800445c:	60e0      	str	r0, [r4, #12]
 800445e:	2104      	movs	r1, #4
 8004460:	6860      	ldr	r0, [r4, #4]
 8004462:	f7ff ffa7 	bl	80043b4 <std.isra.0>
 8004466:	2201      	movs	r2, #1
 8004468:	2109      	movs	r1, #9
 800446a:	68a0      	ldr	r0, [r4, #8]
 800446c:	f7ff ffa2 	bl	80043b4 <std.isra.0>
 8004470:	2202      	movs	r2, #2
 8004472:	2112      	movs	r1, #18
 8004474:	68e0      	ldr	r0, [r4, #12]
 8004476:	f7ff ff9d 	bl	80043b4 <std.isra.0>
 800447a:	2301      	movs	r3, #1
 800447c:	61a3      	str	r3, [r4, #24]
 800447e:	bd10      	pop	{r4, pc}
 8004480:	08005058 	.word	0x08005058
 8004484:	080043a9 	.word	0x080043a9

08004488 <__sfp>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <__sfp+0x74>)
 800448c:	681e      	ldr	r6, [r3, #0]
 800448e:	69b3      	ldr	r3, [r6, #24]
 8004490:	4607      	mov	r7, r0
 8004492:	b913      	cbnz	r3, 800449a <__sfp+0x12>
 8004494:	4630      	mov	r0, r6
 8004496:	f7ff ffc7 	bl	8004428 <__sinit>
 800449a:	3648      	adds	r6, #72	; 0x48
 800449c:	68b4      	ldr	r4, [r6, #8]
 800449e:	6873      	ldr	r3, [r6, #4]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	d503      	bpl.n	80044ac <__sfp+0x24>
 80044a4:	6833      	ldr	r3, [r6, #0]
 80044a6:	b133      	cbz	r3, 80044b6 <__sfp+0x2e>
 80044a8:	6836      	ldr	r6, [r6, #0]
 80044aa:	e7f7      	b.n	800449c <__sfp+0x14>
 80044ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044b0:	b16d      	cbz	r5, 80044ce <__sfp+0x46>
 80044b2:	3468      	adds	r4, #104	; 0x68
 80044b4:	e7f4      	b.n	80044a0 <__sfp+0x18>
 80044b6:	2104      	movs	r1, #4
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff ff9f 	bl	80043fc <__sfmoreglue>
 80044be:	6030      	str	r0, [r6, #0]
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d1f1      	bne.n	80044a8 <__sfp+0x20>
 80044c4:	230c      	movs	r3, #12
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4604      	mov	r4, r0
 80044ca:	4620      	mov	r0, r4
 80044cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044d2:	81e3      	strh	r3, [r4, #14]
 80044d4:	2301      	movs	r3, #1
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	6665      	str	r5, [r4, #100]	; 0x64
 80044da:	6025      	str	r5, [r4, #0]
 80044dc:	60a5      	str	r5, [r4, #8]
 80044de:	6065      	str	r5, [r4, #4]
 80044e0:	6125      	str	r5, [r4, #16]
 80044e2:	6165      	str	r5, [r4, #20]
 80044e4:	61a5      	str	r5, [r4, #24]
 80044e6:	2208      	movs	r2, #8
 80044e8:	4629      	mov	r1, r5
 80044ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ee:	f000 f889 	bl	8004604 <memset>
 80044f2:	6365      	str	r5, [r4, #52]	; 0x34
 80044f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80044f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80044f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80044fa:	e7e6      	b.n	80044ca <__sfp+0x42>
 80044fc:	08005058 	.word	0x08005058

08004500 <_fwalk_reent>:
 8004500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004504:	4680      	mov	r8, r0
 8004506:	4689      	mov	r9, r1
 8004508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800450c:	2600      	movs	r6, #0
 800450e:	b914      	cbnz	r4, 8004516 <_fwalk_reent+0x16>
 8004510:	4630      	mov	r0, r6
 8004512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004516:	68a5      	ldr	r5, [r4, #8]
 8004518:	6867      	ldr	r7, [r4, #4]
 800451a:	3f01      	subs	r7, #1
 800451c:	d501      	bpl.n	8004522 <_fwalk_reent+0x22>
 800451e:	6824      	ldr	r4, [r4, #0]
 8004520:	e7f5      	b.n	800450e <_fwalk_reent+0xe>
 8004522:	89ab      	ldrh	r3, [r5, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d907      	bls.n	8004538 <_fwalk_reent+0x38>
 8004528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800452c:	3301      	adds	r3, #1
 800452e:	d003      	beq.n	8004538 <_fwalk_reent+0x38>
 8004530:	4629      	mov	r1, r5
 8004532:	4640      	mov	r0, r8
 8004534:	47c8      	blx	r9
 8004536:	4306      	orrs	r6, r0
 8004538:	3568      	adds	r5, #104	; 0x68
 800453a:	e7ee      	b.n	800451a <_fwalk_reent+0x1a>

0800453c <__swhatbuf_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	460e      	mov	r6, r1
 8004540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004544:	2900      	cmp	r1, #0
 8004546:	b090      	sub	sp, #64	; 0x40
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	da07      	bge.n	800455e <__swhatbuf_r+0x22>
 800454e:	2300      	movs	r3, #0
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	89b3      	ldrh	r3, [r6, #12]
 8004554:	061a      	lsls	r2, r3, #24
 8004556:	d410      	bmi.n	800457a <__swhatbuf_r+0x3e>
 8004558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800455c:	e00e      	b.n	800457c <__swhatbuf_r+0x40>
 800455e:	aa01      	add	r2, sp, #4
 8004560:	f000 fb96 	bl	8004c90 <_fstat_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	dbf2      	blt.n	800454e <__swhatbuf_r+0x12>
 8004568:	9a02      	ldr	r2, [sp, #8]
 800456a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800456e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004572:	425a      	negs	r2, r3
 8004574:	415a      	adcs	r2, r3
 8004576:	602a      	str	r2, [r5, #0]
 8004578:	e7ee      	b.n	8004558 <__swhatbuf_r+0x1c>
 800457a:	2340      	movs	r3, #64	; 0x40
 800457c:	2000      	movs	r0, #0
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	b010      	add	sp, #64	; 0x40
 8004582:	bd70      	pop	{r4, r5, r6, pc}

08004584 <__smakebuf_r>:
 8004584:	898b      	ldrh	r3, [r1, #12]
 8004586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004588:	079d      	lsls	r5, r3, #30
 800458a:	4606      	mov	r6, r0
 800458c:	460c      	mov	r4, r1
 800458e:	d507      	bpl.n	80045a0 <__smakebuf_r+0x1c>
 8004590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	2301      	movs	r3, #1
 800459a:	6163      	str	r3, [r4, #20]
 800459c:	b002      	add	sp, #8
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	ab01      	add	r3, sp, #4
 80045a2:	466a      	mov	r2, sp
 80045a4:	f7ff ffca 	bl	800453c <__swhatbuf_r>
 80045a8:	9900      	ldr	r1, [sp, #0]
 80045aa:	4605      	mov	r5, r0
 80045ac:	4630      	mov	r0, r6
 80045ae:	f7ff fc9f 	bl	8003ef0 <_malloc_r>
 80045b2:	b948      	cbnz	r0, 80045c8 <__smakebuf_r+0x44>
 80045b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b8:	059a      	lsls	r2, r3, #22
 80045ba:	d4ef      	bmi.n	800459c <__smakebuf_r+0x18>
 80045bc:	f023 0303 	bic.w	r3, r3, #3
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	e7e3      	b.n	8004590 <__smakebuf_r+0xc>
 80045c8:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <__smakebuf_r+0x7c>)
 80045ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	6020      	str	r0, [r4, #0]
 80045d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	9b00      	ldr	r3, [sp, #0]
 80045d8:	6163      	str	r3, [r4, #20]
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	6120      	str	r0, [r4, #16]
 80045de:	b15b      	cbz	r3, 80045f8 <__smakebuf_r+0x74>
 80045e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 fb65 	bl	8004cb4 <_isatty_r>
 80045ea:	b128      	cbz	r0, 80045f8 <__smakebuf_r+0x74>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	431d      	orrs	r5, r3
 80045fc:	81a5      	strh	r5, [r4, #12]
 80045fe:	e7cd      	b.n	800459c <__smakebuf_r+0x18>
 8004600:	080043a9 	.word	0x080043a9

08004604 <memset>:
 8004604:	4402      	add	r2, r0
 8004606:	4603      	mov	r3, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <__malloc_lock>:
 8004614:	4770      	bx	lr

08004616 <__malloc_unlock>:
 8004616:	4770      	bx	lr

08004618 <__sfputc_r>:
 8004618:	6893      	ldr	r3, [r2, #8]
 800461a:	3b01      	subs	r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	b410      	push	{r4}
 8004620:	6093      	str	r3, [r2, #8]
 8004622:	da09      	bge.n	8004638 <__sfputc_r+0x20>
 8004624:	6994      	ldr	r4, [r2, #24]
 8004626:	42a3      	cmp	r3, r4
 8004628:	db02      	blt.n	8004630 <__sfputc_r+0x18>
 800462a:	b2cb      	uxtb	r3, r1
 800462c:	2b0a      	cmp	r3, #10
 800462e:	d103      	bne.n	8004638 <__sfputc_r+0x20>
 8004630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004634:	f7ff bd46 	b.w	80040c4 <__swbuf_r>
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	1c58      	adds	r0, r3, #1
 800463c:	6010      	str	r0, [r2, #0]
 800463e:	7019      	strb	r1, [r3, #0]
 8004640:	b2c8      	uxtb	r0, r1
 8004642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004646:	4770      	bx	lr

08004648 <__sfputs_r>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	4606      	mov	r6, r0
 800464c:	460f      	mov	r7, r1
 800464e:	4614      	mov	r4, r2
 8004650:	18d5      	adds	r5, r2, r3
 8004652:	42ac      	cmp	r4, r5
 8004654:	d101      	bne.n	800465a <__sfputs_r+0x12>
 8004656:	2000      	movs	r0, #0
 8004658:	e007      	b.n	800466a <__sfputs_r+0x22>
 800465a:	463a      	mov	r2, r7
 800465c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004660:	4630      	mov	r0, r6
 8004662:	f7ff ffd9 	bl	8004618 <__sfputc_r>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	d1f3      	bne.n	8004652 <__sfputs_r+0xa>
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800466c <_vfiprintf_r>:
 800466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	b09d      	sub	sp, #116	; 0x74
 8004672:	460c      	mov	r4, r1
 8004674:	4617      	mov	r7, r2
 8004676:	9303      	str	r3, [sp, #12]
 8004678:	4606      	mov	r6, r0
 800467a:	b118      	cbz	r0, 8004684 <_vfiprintf_r+0x18>
 800467c:	6983      	ldr	r3, [r0, #24]
 800467e:	b90b      	cbnz	r3, 8004684 <_vfiprintf_r+0x18>
 8004680:	f7ff fed2 	bl	8004428 <__sinit>
 8004684:	4b7c      	ldr	r3, [pc, #496]	; (8004878 <_vfiprintf_r+0x20c>)
 8004686:	429c      	cmp	r4, r3
 8004688:	d157      	bne.n	800473a <_vfiprintf_r+0xce>
 800468a:	6874      	ldr	r4, [r6, #4]
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	0718      	lsls	r0, r3, #28
 8004690:	d55d      	bpl.n	800474e <_vfiprintf_r+0xe2>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05a      	beq.n	800474e <_vfiprintf_r+0xe2>
 8004698:	2300      	movs	r3, #0
 800469a:	9309      	str	r3, [sp, #36]	; 0x24
 800469c:	2320      	movs	r3, #32
 800469e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046a2:	2330      	movs	r3, #48	; 0x30
 80046a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046a8:	f04f 0b01 	mov.w	fp, #1
 80046ac:	46b8      	mov	r8, r7
 80046ae:	4645      	mov	r5, r8
 80046b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d155      	bne.n	8004764 <_vfiprintf_r+0xf8>
 80046b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80046bc:	d00b      	beq.n	80046d6 <_vfiprintf_r+0x6a>
 80046be:	4653      	mov	r3, sl
 80046c0:	463a      	mov	r2, r7
 80046c2:	4621      	mov	r1, r4
 80046c4:	4630      	mov	r0, r6
 80046c6:	f7ff ffbf 	bl	8004648 <__sfputs_r>
 80046ca:	3001      	adds	r0, #1
 80046cc:	f000 80c4 	beq.w	8004858 <_vfiprintf_r+0x1ec>
 80046d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d2:	4453      	add	r3, sl
 80046d4:	9309      	str	r3, [sp, #36]	; 0x24
 80046d6:	f898 3000 	ldrb.w	r3, [r8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80bc 	beq.w	8004858 <_vfiprintf_r+0x1ec>
 80046e0:	2300      	movs	r3, #0
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	9205      	str	r2, [sp, #20]
 80046ec:	9306      	str	r3, [sp, #24]
 80046ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046f2:	931a      	str	r3, [sp, #104]	; 0x68
 80046f4:	2205      	movs	r2, #5
 80046f6:	7829      	ldrb	r1, [r5, #0]
 80046f8:	4860      	ldr	r0, [pc, #384]	; (800487c <_vfiprintf_r+0x210>)
 80046fa:	f7fb fd71 	bl	80001e0 <memchr>
 80046fe:	f105 0801 	add.w	r8, r5, #1
 8004702:	9b04      	ldr	r3, [sp, #16]
 8004704:	2800      	cmp	r0, #0
 8004706:	d131      	bne.n	800476c <_vfiprintf_r+0x100>
 8004708:	06d9      	lsls	r1, r3, #27
 800470a:	bf44      	itt	mi
 800470c:	2220      	movmi	r2, #32
 800470e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004712:	071a      	lsls	r2, r3, #28
 8004714:	bf44      	itt	mi
 8004716:	222b      	movmi	r2, #43	; 0x2b
 8004718:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800471c:	782a      	ldrb	r2, [r5, #0]
 800471e:	2a2a      	cmp	r2, #42	; 0x2a
 8004720:	d02c      	beq.n	800477c <_vfiprintf_r+0x110>
 8004722:	9a07      	ldr	r2, [sp, #28]
 8004724:	2100      	movs	r1, #0
 8004726:	200a      	movs	r0, #10
 8004728:	46a8      	mov	r8, r5
 800472a:	3501      	adds	r5, #1
 800472c:	f898 3000 	ldrb.w	r3, [r8]
 8004730:	3b30      	subs	r3, #48	; 0x30
 8004732:	2b09      	cmp	r3, #9
 8004734:	d96d      	bls.n	8004812 <_vfiprintf_r+0x1a6>
 8004736:	b371      	cbz	r1, 8004796 <_vfiprintf_r+0x12a>
 8004738:	e026      	b.n	8004788 <_vfiprintf_r+0x11c>
 800473a:	4b51      	ldr	r3, [pc, #324]	; (8004880 <_vfiprintf_r+0x214>)
 800473c:	429c      	cmp	r4, r3
 800473e:	d101      	bne.n	8004744 <_vfiprintf_r+0xd8>
 8004740:	68b4      	ldr	r4, [r6, #8]
 8004742:	e7a3      	b.n	800468c <_vfiprintf_r+0x20>
 8004744:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <_vfiprintf_r+0x218>)
 8004746:	429c      	cmp	r4, r3
 8004748:	bf08      	it	eq
 800474a:	68f4      	ldreq	r4, [r6, #12]
 800474c:	e79e      	b.n	800468c <_vfiprintf_r+0x20>
 800474e:	4621      	mov	r1, r4
 8004750:	4630      	mov	r0, r6
 8004752:	f7ff fd09 	bl	8004168 <__swsetup_r>
 8004756:	2800      	cmp	r0, #0
 8004758:	d09e      	beq.n	8004698 <_vfiprintf_r+0x2c>
 800475a:	f04f 30ff 	mov.w	r0, #4294967295
 800475e:	b01d      	add	sp, #116	; 0x74
 8004760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004764:	2b25      	cmp	r3, #37	; 0x25
 8004766:	d0a7      	beq.n	80046b8 <_vfiprintf_r+0x4c>
 8004768:	46a8      	mov	r8, r5
 800476a:	e7a0      	b.n	80046ae <_vfiprintf_r+0x42>
 800476c:	4a43      	ldr	r2, [pc, #268]	; (800487c <_vfiprintf_r+0x210>)
 800476e:	1a80      	subs	r0, r0, r2
 8004770:	fa0b f000 	lsl.w	r0, fp, r0
 8004774:	4318      	orrs	r0, r3
 8004776:	9004      	str	r0, [sp, #16]
 8004778:	4645      	mov	r5, r8
 800477a:	e7bb      	b.n	80046f4 <_vfiprintf_r+0x88>
 800477c:	9a03      	ldr	r2, [sp, #12]
 800477e:	1d11      	adds	r1, r2, #4
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	9103      	str	r1, [sp, #12]
 8004784:	2a00      	cmp	r2, #0
 8004786:	db01      	blt.n	800478c <_vfiprintf_r+0x120>
 8004788:	9207      	str	r2, [sp, #28]
 800478a:	e004      	b.n	8004796 <_vfiprintf_r+0x12a>
 800478c:	4252      	negs	r2, r2
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	9207      	str	r2, [sp, #28]
 8004794:	9304      	str	r3, [sp, #16]
 8004796:	f898 3000 	ldrb.w	r3, [r8]
 800479a:	2b2e      	cmp	r3, #46	; 0x2e
 800479c:	d110      	bne.n	80047c0 <_vfiprintf_r+0x154>
 800479e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80047a2:	2b2a      	cmp	r3, #42	; 0x2a
 80047a4:	f108 0101 	add.w	r1, r8, #1
 80047a8:	d137      	bne.n	800481a <_vfiprintf_r+0x1ae>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	1d1a      	adds	r2, r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	9203      	str	r2, [sp, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfb8      	it	lt
 80047b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80047ba:	f108 0802 	add.w	r8, r8, #2
 80047be:	9305      	str	r3, [sp, #20]
 80047c0:	4d31      	ldr	r5, [pc, #196]	; (8004888 <_vfiprintf_r+0x21c>)
 80047c2:	f898 1000 	ldrb.w	r1, [r8]
 80047c6:	2203      	movs	r2, #3
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7fb fd09 	bl	80001e0 <memchr>
 80047ce:	b140      	cbz	r0, 80047e2 <_vfiprintf_r+0x176>
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	1b40      	subs	r0, r0, r5
 80047d4:	fa03 f000 	lsl.w	r0, r3, r0
 80047d8:	9b04      	ldr	r3, [sp, #16]
 80047da:	4303      	orrs	r3, r0
 80047dc:	9304      	str	r3, [sp, #16]
 80047de:	f108 0801 	add.w	r8, r8, #1
 80047e2:	f898 1000 	ldrb.w	r1, [r8]
 80047e6:	4829      	ldr	r0, [pc, #164]	; (800488c <_vfiprintf_r+0x220>)
 80047e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ec:	2206      	movs	r2, #6
 80047ee:	f108 0701 	add.w	r7, r8, #1
 80047f2:	f7fb fcf5 	bl	80001e0 <memchr>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d034      	beq.n	8004864 <_vfiprintf_r+0x1f8>
 80047fa:	4b25      	ldr	r3, [pc, #148]	; (8004890 <_vfiprintf_r+0x224>)
 80047fc:	bb03      	cbnz	r3, 8004840 <_vfiprintf_r+0x1d4>
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	3307      	adds	r3, #7
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	3308      	adds	r3, #8
 8004808:	9303      	str	r3, [sp, #12]
 800480a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480c:	444b      	add	r3, r9
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	e74c      	b.n	80046ac <_vfiprintf_r+0x40>
 8004812:	fb00 3202 	mla	r2, r0, r2, r3
 8004816:	2101      	movs	r1, #1
 8004818:	e786      	b.n	8004728 <_vfiprintf_r+0xbc>
 800481a:	2300      	movs	r3, #0
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	4618      	mov	r0, r3
 8004820:	250a      	movs	r5, #10
 8004822:	4688      	mov	r8, r1
 8004824:	3101      	adds	r1, #1
 8004826:	f898 2000 	ldrb.w	r2, [r8]
 800482a:	3a30      	subs	r2, #48	; 0x30
 800482c:	2a09      	cmp	r2, #9
 800482e:	d903      	bls.n	8004838 <_vfiprintf_r+0x1cc>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0c5      	beq.n	80047c0 <_vfiprintf_r+0x154>
 8004834:	9005      	str	r0, [sp, #20]
 8004836:	e7c3      	b.n	80047c0 <_vfiprintf_r+0x154>
 8004838:	fb05 2000 	mla	r0, r5, r0, r2
 800483c:	2301      	movs	r3, #1
 800483e:	e7f0      	b.n	8004822 <_vfiprintf_r+0x1b6>
 8004840:	ab03      	add	r3, sp, #12
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4622      	mov	r2, r4
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <_vfiprintf_r+0x228>)
 8004848:	a904      	add	r1, sp, #16
 800484a:	4630      	mov	r0, r6
 800484c:	f3af 8000 	nop.w
 8004850:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004854:	4681      	mov	r9, r0
 8004856:	d1d8      	bne.n	800480a <_vfiprintf_r+0x19e>
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	065b      	lsls	r3, r3, #25
 800485c:	f53f af7d 	bmi.w	800475a <_vfiprintf_r+0xee>
 8004860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004862:	e77c      	b.n	800475e <_vfiprintf_r+0xf2>
 8004864:	ab03      	add	r3, sp, #12
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4622      	mov	r2, r4
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <_vfiprintf_r+0x228>)
 800486c:	a904      	add	r1, sp, #16
 800486e:	4630      	mov	r0, r6
 8004870:	f000 f888 	bl	8004984 <_printf_i>
 8004874:	e7ec      	b.n	8004850 <_vfiprintf_r+0x1e4>
 8004876:	bf00      	nop
 8004878:	08005018 	.word	0x08005018
 800487c:	0800505c 	.word	0x0800505c
 8004880:	08005038 	.word	0x08005038
 8004884:	08004ff8 	.word	0x08004ff8
 8004888:	08005062 	.word	0x08005062
 800488c:	08005066 	.word	0x08005066
 8004890:	00000000 	.word	0x00000000
 8004894:	08004649 	.word	0x08004649

08004898 <_printf_common>:
 8004898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800489c:	4691      	mov	r9, r2
 800489e:	461f      	mov	r7, r3
 80048a0:	688a      	ldr	r2, [r1, #8]
 80048a2:	690b      	ldr	r3, [r1, #16]
 80048a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a8:	4293      	cmp	r3, r2
 80048aa:	bfb8      	it	lt
 80048ac:	4613      	movlt	r3, r2
 80048ae:	f8c9 3000 	str.w	r3, [r9]
 80048b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b6:	4606      	mov	r6, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	b112      	cbz	r2, 80048c2 <_printf_common+0x2a>
 80048bc:	3301      	adds	r3, #1
 80048be:	f8c9 3000 	str.w	r3, [r9]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	0699      	lsls	r1, r3, #26
 80048c6:	bf42      	ittt	mi
 80048c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048cc:	3302      	addmi	r3, #2
 80048ce:	f8c9 3000 	strmi.w	r3, [r9]
 80048d2:	6825      	ldr	r5, [r4, #0]
 80048d4:	f015 0506 	ands.w	r5, r5, #6
 80048d8:	d107      	bne.n	80048ea <_printf_common+0x52>
 80048da:	f104 0a19 	add.w	sl, r4, #25
 80048de:	68e3      	ldr	r3, [r4, #12]
 80048e0:	f8d9 2000 	ldr.w	r2, [r9]
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	429d      	cmp	r5, r3
 80048e8:	db29      	blt.n	800493e <_printf_common+0xa6>
 80048ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048ee:	6822      	ldr	r2, [r4, #0]
 80048f0:	3300      	adds	r3, #0
 80048f2:	bf18      	it	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	0692      	lsls	r2, r2, #26
 80048f8:	d42e      	bmi.n	8004958 <_printf_common+0xc0>
 80048fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048fe:	4639      	mov	r1, r7
 8004900:	4630      	mov	r0, r6
 8004902:	47c0      	blx	r8
 8004904:	3001      	adds	r0, #1
 8004906:	d021      	beq.n	800494c <_printf_common+0xb4>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	68e5      	ldr	r5, [r4, #12]
 800490c:	f8d9 2000 	ldr.w	r2, [r9]
 8004910:	f003 0306 	and.w	r3, r3, #6
 8004914:	2b04      	cmp	r3, #4
 8004916:	bf08      	it	eq
 8004918:	1aad      	subeq	r5, r5, r2
 800491a:	68a3      	ldr	r3, [r4, #8]
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	bf0c      	ite	eq
 8004920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004924:	2500      	movne	r5, #0
 8004926:	4293      	cmp	r3, r2
 8004928:	bfc4      	itt	gt
 800492a:	1a9b      	subgt	r3, r3, r2
 800492c:	18ed      	addgt	r5, r5, r3
 800492e:	f04f 0900 	mov.w	r9, #0
 8004932:	341a      	adds	r4, #26
 8004934:	454d      	cmp	r5, r9
 8004936:	d11b      	bne.n	8004970 <_printf_common+0xd8>
 8004938:	2000      	movs	r0, #0
 800493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493e:	2301      	movs	r3, #1
 8004940:	4652      	mov	r2, sl
 8004942:	4639      	mov	r1, r7
 8004944:	4630      	mov	r0, r6
 8004946:	47c0      	blx	r8
 8004948:	3001      	adds	r0, #1
 800494a:	d103      	bne.n	8004954 <_printf_common+0xbc>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	3501      	adds	r5, #1
 8004956:	e7c2      	b.n	80048de <_printf_common+0x46>
 8004958:	18e1      	adds	r1, r4, r3
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	2030      	movs	r0, #48	; 0x30
 800495e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004962:	4422      	add	r2, r4
 8004964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800496c:	3302      	adds	r3, #2
 800496e:	e7c4      	b.n	80048fa <_printf_common+0x62>
 8004970:	2301      	movs	r3, #1
 8004972:	4622      	mov	r2, r4
 8004974:	4639      	mov	r1, r7
 8004976:	4630      	mov	r0, r6
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d0e6      	beq.n	800494c <_printf_common+0xb4>
 800497e:	f109 0901 	add.w	r9, r9, #1
 8004982:	e7d7      	b.n	8004934 <_printf_common+0x9c>

08004984 <_printf_i>:
 8004984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004988:	4617      	mov	r7, r2
 800498a:	7e0a      	ldrb	r2, [r1, #24]
 800498c:	b085      	sub	sp, #20
 800498e:	2a6e      	cmp	r2, #110	; 0x6e
 8004990:	4698      	mov	r8, r3
 8004992:	4606      	mov	r6, r0
 8004994:	460c      	mov	r4, r1
 8004996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004998:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800499c:	f000 80bc 	beq.w	8004b18 <_printf_i+0x194>
 80049a0:	d81a      	bhi.n	80049d8 <_printf_i+0x54>
 80049a2:	2a63      	cmp	r2, #99	; 0x63
 80049a4:	d02e      	beq.n	8004a04 <_printf_i+0x80>
 80049a6:	d80a      	bhi.n	80049be <_printf_i+0x3a>
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	f000 80c8 	beq.w	8004b3e <_printf_i+0x1ba>
 80049ae:	2a58      	cmp	r2, #88	; 0x58
 80049b0:	f000 808a 	beq.w	8004ac8 <_printf_i+0x144>
 80049b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80049bc:	e02a      	b.n	8004a14 <_printf_i+0x90>
 80049be:	2a64      	cmp	r2, #100	; 0x64
 80049c0:	d001      	beq.n	80049c6 <_printf_i+0x42>
 80049c2:	2a69      	cmp	r2, #105	; 0x69
 80049c4:	d1f6      	bne.n	80049b4 <_printf_i+0x30>
 80049c6:	6821      	ldr	r1, [r4, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049ce:	d023      	beq.n	8004a18 <_printf_i+0x94>
 80049d0:	1d11      	adds	r1, r2, #4
 80049d2:	6019      	str	r1, [r3, #0]
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	e027      	b.n	8004a28 <_printf_i+0xa4>
 80049d8:	2a73      	cmp	r2, #115	; 0x73
 80049da:	f000 80b4 	beq.w	8004b46 <_printf_i+0x1c2>
 80049de:	d808      	bhi.n	80049f2 <_printf_i+0x6e>
 80049e0:	2a6f      	cmp	r2, #111	; 0x6f
 80049e2:	d02a      	beq.n	8004a3a <_printf_i+0xb6>
 80049e4:	2a70      	cmp	r2, #112	; 0x70
 80049e6:	d1e5      	bne.n	80049b4 <_printf_i+0x30>
 80049e8:	680a      	ldr	r2, [r1, #0]
 80049ea:	f042 0220 	orr.w	r2, r2, #32
 80049ee:	600a      	str	r2, [r1, #0]
 80049f0:	e003      	b.n	80049fa <_printf_i+0x76>
 80049f2:	2a75      	cmp	r2, #117	; 0x75
 80049f4:	d021      	beq.n	8004a3a <_printf_i+0xb6>
 80049f6:	2a78      	cmp	r2, #120	; 0x78
 80049f8:	d1dc      	bne.n	80049b4 <_printf_i+0x30>
 80049fa:	2278      	movs	r2, #120	; 0x78
 80049fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004a00:	496e      	ldr	r1, [pc, #440]	; (8004bbc <_printf_i+0x238>)
 8004a02:	e064      	b.n	8004ace <_printf_i+0x14a>
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004a0a:	1d11      	adds	r1, r2, #4
 8004a0c:	6019      	str	r1, [r3, #0]
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0a3      	b.n	8004b60 <_printf_i+0x1dc>
 8004a18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004a1c:	f102 0104 	add.w	r1, r2, #4
 8004a20:	6019      	str	r1, [r3, #0]
 8004a22:	d0d7      	beq.n	80049d4 <_printf_i+0x50>
 8004a24:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da03      	bge.n	8004a34 <_printf_i+0xb0>
 8004a2c:	222d      	movs	r2, #45	; 0x2d
 8004a2e:	425b      	negs	r3, r3
 8004a30:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a34:	4962      	ldr	r1, [pc, #392]	; (8004bc0 <_printf_i+0x23c>)
 8004a36:	220a      	movs	r2, #10
 8004a38:	e017      	b.n	8004a6a <_printf_i+0xe6>
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004a42:	d003      	beq.n	8004a4c <_printf_i+0xc8>
 8004a44:	1d08      	adds	r0, r1, #4
 8004a46:	6018      	str	r0, [r3, #0]
 8004a48:	680b      	ldr	r3, [r1, #0]
 8004a4a:	e006      	b.n	8004a5a <_printf_i+0xd6>
 8004a4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a50:	f101 0004 	add.w	r0, r1, #4
 8004a54:	6018      	str	r0, [r3, #0]
 8004a56:	d0f7      	beq.n	8004a48 <_printf_i+0xc4>
 8004a58:	880b      	ldrh	r3, [r1, #0]
 8004a5a:	4959      	ldr	r1, [pc, #356]	; (8004bc0 <_printf_i+0x23c>)
 8004a5c:	2a6f      	cmp	r2, #111	; 0x6f
 8004a5e:	bf14      	ite	ne
 8004a60:	220a      	movne	r2, #10
 8004a62:	2208      	moveq	r2, #8
 8004a64:	2000      	movs	r0, #0
 8004a66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004a6a:	6865      	ldr	r5, [r4, #4]
 8004a6c:	60a5      	str	r5, [r4, #8]
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	f2c0 809c 	blt.w	8004bac <_printf_i+0x228>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	f020 0004 	bic.w	r0, r0, #4
 8004a7a:	6020      	str	r0, [r4, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13f      	bne.n	8004b00 <_printf_i+0x17c>
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	f040 8095 	bne.w	8004bb0 <_printf_i+0x22c>
 8004a86:	4675      	mov	r5, lr
 8004a88:	2a08      	cmp	r2, #8
 8004a8a:	d10b      	bne.n	8004aa4 <_printf_i+0x120>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	07da      	lsls	r2, r3, #31
 8004a90:	d508      	bpl.n	8004aa4 <_printf_i+0x120>
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6862      	ldr	r2, [r4, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	bfde      	ittt	le
 8004a9a:	2330      	movle	r3, #48	; 0x30
 8004a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aa4:	ebae 0305 	sub.w	r3, lr, r5
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	f8cd 8000 	str.w	r8, [sp]
 8004aae:	463b      	mov	r3, r7
 8004ab0:	aa03      	add	r2, sp, #12
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff feef 	bl	8004898 <_printf_common>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d155      	bne.n	8004b6a <_printf_i+0x1e6>
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	b005      	add	sp, #20
 8004ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ac8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004acc:	493c      	ldr	r1, [pc, #240]	; (8004bc0 <_printf_i+0x23c>)
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ad6:	f100 0504 	add.w	r5, r0, #4
 8004ada:	601d      	str	r5, [r3, #0]
 8004adc:	d001      	beq.n	8004ae2 <_printf_i+0x15e>
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	e002      	b.n	8004ae8 <_printf_i+0x164>
 8004ae2:	0655      	lsls	r5, r2, #25
 8004ae4:	d5fb      	bpl.n	8004ade <_printf_i+0x15a>
 8004ae6:	8803      	ldrh	r3, [r0, #0]
 8004ae8:	07d0      	lsls	r0, r2, #31
 8004aea:	bf44      	itt	mi
 8004aec:	f042 0220 	orrmi.w	r2, r2, #32
 8004af0:	6022      	strmi	r2, [r4, #0]
 8004af2:	b91b      	cbnz	r3, 8004afc <_printf_i+0x178>
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	f022 0220 	bic.w	r2, r2, #32
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	2210      	movs	r2, #16
 8004afe:	e7b1      	b.n	8004a64 <_printf_i+0xe0>
 8004b00:	4675      	mov	r5, lr
 8004b02:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b06:	fb02 3310 	mls	r3, r2, r0, r3
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b10:	4603      	mov	r3, r0
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d1f5      	bne.n	8004b02 <_printf_i+0x17e>
 8004b16:	e7b7      	b.n	8004a88 <_printf_i+0x104>
 8004b18:	6808      	ldr	r0, [r1, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6949      	ldr	r1, [r1, #20]
 8004b1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004b22:	d004      	beq.n	8004b2e <_printf_i+0x1aa>
 8004b24:	1d10      	adds	r0, r2, #4
 8004b26:	6018      	str	r0, [r3, #0]
 8004b28:	6813      	ldr	r3, [r2, #0]
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	e007      	b.n	8004b3e <_printf_i+0x1ba>
 8004b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b32:	f102 0004 	add.w	r0, r2, #4
 8004b36:	6018      	str	r0, [r3, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	d0f6      	beq.n	8004b2a <_printf_i+0x1a6>
 8004b3c:	8019      	strh	r1, [r3, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	4675      	mov	r5, lr
 8004b44:	e7b1      	b.n	8004aaa <_printf_i+0x126>
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	1d11      	adds	r1, r2, #4
 8004b4a:	6019      	str	r1, [r3, #0]
 8004b4c:	6815      	ldr	r5, [r2, #0]
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	2100      	movs	r1, #0
 8004b52:	4628      	mov	r0, r5
 8004b54:	f7fb fb44 	bl	80001e0 <memchr>
 8004b58:	b108      	cbz	r0, 8004b5e <_printf_i+0x1da>
 8004b5a:	1b40      	subs	r0, r0, r5
 8004b5c:	6060      	str	r0, [r4, #4]
 8004b5e:	6863      	ldr	r3, [r4, #4]
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	2300      	movs	r3, #0
 8004b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b68:	e79f      	b.n	8004aaa <_printf_i+0x126>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	4639      	mov	r1, r7
 8004b70:	4630      	mov	r0, r6
 8004b72:	47c0      	blx	r8
 8004b74:	3001      	adds	r0, #1
 8004b76:	d0a2      	beq.n	8004abe <_printf_i+0x13a>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	079b      	lsls	r3, r3, #30
 8004b7c:	d507      	bpl.n	8004b8e <_printf_i+0x20a>
 8004b7e:	2500      	movs	r5, #0
 8004b80:	f104 0919 	add.w	r9, r4, #25
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	9a03      	ldr	r2, [sp, #12]
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	429d      	cmp	r5, r3
 8004b8c:	db05      	blt.n	8004b9a <_printf_i+0x216>
 8004b8e:	68e0      	ldr	r0, [r4, #12]
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	4298      	cmp	r0, r3
 8004b94:	bfb8      	it	lt
 8004b96:	4618      	movlt	r0, r3
 8004b98:	e793      	b.n	8004ac2 <_printf_i+0x13e>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	464a      	mov	r2, r9
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d08a      	beq.n	8004abe <_printf_i+0x13a>
 8004ba8:	3501      	adds	r5, #1
 8004baa:	e7eb      	b.n	8004b84 <_printf_i+0x200>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1a7      	bne.n	8004b00 <_printf_i+0x17c>
 8004bb0:	780b      	ldrb	r3, [r1, #0]
 8004bb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bba:	e765      	b.n	8004a88 <_printf_i+0x104>
 8004bbc:	0800507e 	.word	0x0800507e
 8004bc0:	0800506d 	.word	0x0800506d

08004bc4 <__sread>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	f000 f894 	bl	8004cf8 <_read_r>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	bfab      	itete	ge
 8004bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bd8:	181b      	addge	r3, r3, r0
 8004bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bde:	bfac      	ite	ge
 8004be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004be2:	81a3      	strhlt	r3, [r4, #12]
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <__swrite>:
 8004be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	461f      	mov	r7, r3
 8004bec:	898b      	ldrh	r3, [r1, #12]
 8004bee:	05db      	lsls	r3, r3, #23
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	d505      	bpl.n	8004c04 <__swrite+0x1e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	f000 f868 	bl	8004cd4 <_lseek_r>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	4632      	mov	r2, r6
 8004c12:	463b      	mov	r3, r7
 8004c14:	4628      	mov	r0, r5
 8004c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	f000 b817 	b.w	8004c4c <_write_r>

08004c1e <__sseek>:
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	460c      	mov	r4, r1
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	f000 f855 	bl	8004cd4 <_lseek_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	bf15      	itete	ne
 8004c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3a:	81a3      	strheq	r3, [r4, #12]
 8004c3c:	bf18      	it	ne
 8004c3e:	81a3      	strhne	r3, [r4, #12]
 8004c40:	bd10      	pop	{r4, pc}

08004c42 <__sclose>:
 8004c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c46:	f000 b813 	b.w	8004c70 <_close_r>
	...

08004c4c <_write_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4c07      	ldr	r4, [pc, #28]	; (8004c6c <_write_r+0x20>)
 8004c50:	4605      	mov	r5, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fe fcb8 	bl	80035d0 <_write>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_write_r+0x1e>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_write_r+0x1e>
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	200002e0 	.word	0x200002e0

08004c70 <_close_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4c06      	ldr	r4, [pc, #24]	; (8004c8c <_close_r+0x1c>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	4605      	mov	r5, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	f000 f84e 	bl	8004d1c <_close>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_close_r+0x1a>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_close_r+0x1a>
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	200002e0 	.word	0x200002e0

08004c90 <_fstat_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4c07      	ldr	r4, [pc, #28]	; (8004cb0 <_fstat_r+0x20>)
 8004c94:	2300      	movs	r3, #0
 8004c96:	4605      	mov	r5, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	f000 f845 	bl	8004d2c <_fstat>
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	d102      	bne.n	8004cac <_fstat_r+0x1c>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	b103      	cbz	r3, 8004cac <_fstat_r+0x1c>
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
 8004cae:	bf00      	nop
 8004cb0:	200002e0 	.word	0x200002e0

08004cb4 <_isatty_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4c06      	ldr	r4, [pc, #24]	; (8004cd0 <_isatty_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4605      	mov	r5, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	f000 f83c 	bl	8004d3c <_isatty>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_isatty_r+0x1a>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_isatty_r+0x1a>
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	200002e0 	.word	0x200002e0

08004cd4 <_lseek_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4c07      	ldr	r4, [pc, #28]	; (8004cf4 <_lseek_r+0x20>)
 8004cd8:	4605      	mov	r5, r0
 8004cda:	4608      	mov	r0, r1
 8004cdc:	4611      	mov	r1, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	6022      	str	r2, [r4, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 f832 	bl	8004d4c <_lseek>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_lseek_r+0x1e>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_lseek_r+0x1e>
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	200002e0 	.word	0x200002e0

08004cf8 <_read_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4c07      	ldr	r4, [pc, #28]	; (8004d18 <_read_r+0x20>)
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	4608      	mov	r0, r1
 8004d00:	4611      	mov	r1, r2
 8004d02:	2200      	movs	r2, #0
 8004d04:	6022      	str	r2, [r4, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f000 f828 	bl	8004d5c <_read>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_read_r+0x1e>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_read_r+0x1e>
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	200002e0 	.word	0x200002e0

08004d1c <_close>:
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <_close+0xc>)
 8004d1e:	2258      	movs	r2, #88	; 0x58
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295
 8004d26:	4770      	bx	lr
 8004d28:	200002e0 	.word	0x200002e0

08004d2c <_fstat>:
 8004d2c:	4b02      	ldr	r3, [pc, #8]	; (8004d38 <_fstat+0xc>)
 8004d2e:	2258      	movs	r2, #88	; 0x58
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	4770      	bx	lr
 8004d38:	200002e0 	.word	0x200002e0

08004d3c <_isatty>:
 8004d3c:	4b02      	ldr	r3, [pc, #8]	; (8004d48 <_isatty+0xc>)
 8004d3e:	2258      	movs	r2, #88	; 0x58
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	2000      	movs	r0, #0
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	200002e0 	.word	0x200002e0

08004d4c <_lseek>:
 8004d4c:	4b02      	ldr	r3, [pc, #8]	; (8004d58 <_lseek+0xc>)
 8004d4e:	2258      	movs	r2, #88	; 0x58
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f04f 30ff 	mov.w	r0, #4294967295
 8004d56:	4770      	bx	lr
 8004d58:	200002e0 	.word	0x200002e0

08004d5c <_read>:
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <_read+0xc>)
 8004d5e:	2258      	movs	r2, #88	; 0x58
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295
 8004d66:	4770      	bx	lr
 8004d68:	200002e0 	.word	0x200002e0

08004d6c <_sbrk>:
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <_sbrk+0x14>)
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	4602      	mov	r2, r0
 8004d72:	b909      	cbnz	r1, 8004d78 <_sbrk+0xc>
 8004d74:	4903      	ldr	r1, [pc, #12]	; (8004d84 <_sbrk+0x18>)
 8004d76:	6019      	str	r1, [r3, #0]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	4402      	add	r2, r0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	4770      	bx	lr
 8004d80:	20000094 	.word	0x20000094
 8004d84:	200002e4 	.word	0x200002e4

08004d88 <_init>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	bf00      	nop
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr

08004d94 <_fini>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr
