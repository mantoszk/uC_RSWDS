
RSWDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011214  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080113b4  080113b4  000213b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801170c  0801170c  0002170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011714  08011714  00021714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011718  08011718  00021718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000370  20000000  0801171c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000af0  20000370  08011a8c  00030370  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e60  08011a8c  00030e60  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 10 .debug_info   000422c3  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005408  00000000  00000000  00072663  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001c18  00000000  00000000  00077a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000019d0  00000000  00000000  00079688  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e3f1  00000000  00000000  0007b058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000c549  00000000  00000000  00089449  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00095992  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007dc4  00000000  00000000  00095a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  0009d7d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014b  00000000  00000000  0009d858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000370 	.word	0x20000370
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801139c 	.word	0x0801139c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000374 	.word	0x20000374
 80001dc:	0801139c 	.word	0x0801139c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fd5b 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f004 fefc 	bl	80053c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd73 	bl	80010de <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 fd3b 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000002c 	.word	0x2000002c
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	200008f4 	.word	0x200008f4

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200008f4 	.word	0x200008f4

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f7      	bcc.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e033      	b.n	8000736 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f004 f8f7 	bl	80048d8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d118      	bne.n	8000728 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006fe:	f023 0302 	bic.w	r3, r3, #2
 8000702:	f043 0202 	orr.w	r2, r3, #2
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 fa76 	bl	8000bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f023 0303 	bic.w	r3, r3, #3
 800071e:	f043 0201 	orr.w	r2, r3, #1
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
 8000726:	e001      	b.n	800072c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000756:	2b01      	cmp	r3, #1
 8000758:	d101      	bne.n	800075e <HAL_ADC_Start_DMA+0x1e>
 800075a:	2302      	movs	r3, #2
 800075c:	e0b0      	b.n	80008c0 <HAL_ADC_Start_DMA+0x180>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2201      	movs	r2, #1
 8000762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b01      	cmp	r3, #1
 8000772:	d018      	beq.n	80007a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	6892      	ldr	r2, [r2, #8]
 800077e:	f042 0201 	orr.w	r2, r2, #1
 8000782:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000784:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <HAL_ADC_Start_DMA+0x188>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a50      	ldr	r2, [pc, #320]	; (80008cc <HAL_ADC_Start_DMA+0x18c>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	0c9a      	lsrs	r2, r3, #18
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000798:	e002      	b.n	80007a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	3b01      	subs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f9      	bne.n	800079a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f000 8084 	beq.w	80008be <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d007      	beq.n	80007e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d006      	beq.n	8000802 <HAL_ADC_Start_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f8:	f023 0206 	bic.w	r2, r3, #6
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	645a      	str	r2, [r3, #68]	; 0x44
 8000800:	e002      	b.n	8000808 <HAL_ADC_Start_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2200      	movs	r2, #0
 8000806:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <HAL_ADC_Start_DMA+0x190>)
 8000812:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <HAL_ADC_Start_DMA+0x194>)
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <HAL_ADC_Start_DMA+0x198>)
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000828:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <HAL_ADC_Start_DMA+0x19c>)
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000834:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000844:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	6892      	ldr	r2, [r2, #8]
 8000850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000854:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	334c      	adds	r3, #76	; 0x4c
 8000860:	4619      	mov	r1, r3
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f000 fd1f 	bl	80012a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10f      	bne.n	8000896 <HAL_ADC_Start_DMA+0x156>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d11c      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	6892      	ldr	r2, [r2, #8]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	e013      	b.n	80008be <HAL_ADC_Start_DMA+0x17e>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_ADC_Start_DMA+0x1a0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10e      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d107      	bne.n	80008be <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	6892      	ldr	r2, [r2, #8]
 80008b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	40012300 	.word	0x40012300
 80008d4:	08000df1 	.word	0x08000df1
 80008d8:	08000e97 	.word	0x08000e97
 80008dc:	08000eb3 	.word	0x08000eb3
 80008e0:	40012000 	.word	0x40012000

080008e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <HAL_ADC_Stop_DMA+0x1a>
 80008fa:	2302      	movs	r3, #2
 80008fc:	e038      	b.n	8000970 <HAL_ADC_Stop_DMA+0x8c>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	6892      	ldr	r2, [r2, #8]
 8000910:	f022 0201 	bic.w	r2, r2, #1
 8000914:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d120      	bne.n	8000966 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	6892      	ldr	r2, [r2, #8]
 800092e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000932:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fd15 	bl	8001368 <HAL_DMA_Abort>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6812      	ldr	r2, [r2, #0]
 800094a:	6852      	ldr	r2, [r2, #4]
 800094c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000950:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800095a:	f023 0301 	bic.w	r3, r3, #1
 800095e:	f043 0201 	orr.w	r2, r3, #1
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009b4:	b490      	push	{r4, r7}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <HAL_ADC_ConfigChannel+0x1c>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e107      	b.n	8000be0 <HAL_ADC_ConfigChannel+0x22c>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d926      	bls.n	8000a2e <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	68d9      	ldr	r1, [r3, #12]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	4603      	mov	r3, r0
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4403      	add	r3, r0
 80009f8:	3b1e      	subs	r3, #30
 80009fa:	2007      	movs	r0, #7
 80009fc:	fa00 f303 	lsl.w	r3, r0, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	400b      	ands	r3, r1
 8000a04:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68d9      	ldr	r1, [r3, #12]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	6898      	ldr	r0, [r3, #8]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4423      	add	r3, r4
 8000a22:	3b1e      	subs	r3, #30
 8000a24:	fa00 f303 	lsl.w	r3, r0, r3
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	60d3      	str	r3, [r2, #12]
 8000a2c:	e023      	b.n	8000a76 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6919      	ldr	r1, [r3, #16]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	4603      	mov	r3, r0
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4403      	add	r3, r0
 8000a46:	2007      	movs	r0, #7
 8000a48:	fa00 f303 	lsl.w	r3, r0, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	400b      	ands	r3, r1
 8000a50:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6919      	ldr	r1, [r3, #16]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6898      	ldr	r0, [r3, #8]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	461c      	mov	r4, r3
 8000a68:	4623      	mov	r3, r4
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4423      	add	r3, r4
 8000a6e:	fa00 f303 	lsl.w	r3, r0, r3
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d824      	bhi.n	8000ac8 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6819      	ldr	r1, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	3b05      	subs	r3, #5
 8000a94:	221f      	movs	r2, #31
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4003      	ands	r3, r0
 8000a9e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6819      	ldr	r1, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	3b05      	subs	r3, #5
 8000abe:	fa04 f303 	lsl.w	r3, r4, r3
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	634b      	str	r3, [r1, #52]	; 0x34
 8000ac6:	e04c      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b0c      	cmp	r3, #12
 8000ace:	d824      	bhi.n	8000b1a <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6819      	ldr	r1, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b23      	subs	r3, #35	; 0x23
 8000ae6:	221f      	movs	r2, #31
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4003      	ands	r3, r0
 8000af0:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	461c      	mov	r4, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3b23      	subs	r3, #35	; 0x23
 8000b10:	fa04 f303 	lsl.w	r3, r4, r3
 8000b14:	4303      	orrs	r3, r0
 8000b16:	630b      	str	r3, [r1, #48]	; 0x30
 8000b18:	e023      	b.n	8000b62 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b41      	subs	r3, #65	; 0x41
 8000b30:	221f      	movs	r2, #31
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4003      	ands	r3, r0
 8000b3a:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	3b41      	subs	r3, #65	; 0x41
 8000b5a:	fa04 f303 	lsl.w	r3, r4, r3
 8000b5e:	4303      	orrs	r3, r0
 8000b60:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_ADC_ConfigChannel+0x238>)
 8000b64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d109      	bne.n	8000b84 <HAL_ADC_ConfigChannel+0x1d0>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d105      	bne.n	8000b84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_ADC_ConfigChannel+0x23c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d123      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d003      	beq.n	8000b9e <HAL_ADC_ConfigChannel+0x1ea>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b11      	cmp	r3, #17
 8000b9c:	d11b      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	d111      	bne.n	8000bd6 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_ADC_ConfigChannel+0x240>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_ADC_ConfigChannel+0x244>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9a      	lsrs	r2, r3, #18
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bc8:	e002      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f9      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc90      	pop	{r4, r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40012300 	.word	0x40012300
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	2000002c 	.word	0x2000002c
 8000bf8:	431bde83 	.word	0x431bde83

08000bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c04:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <ADC_Init+0x1ec>)
 8000c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	6852      	ldr	r2, [r2, #4]
 8000c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	6851      	ldr	r1, [r2, #4]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	6912      	ldr	r2, [r2, #16]
 8000c40:	0212      	lsls	r2, r2, #8
 8000c42:	430a      	orrs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	6852      	ldr	r2, [r2, #4]
 8000c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	6851      	ldr	r1, [r2, #4]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6892      	ldr	r2, [r2, #8]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	6892      	ldr	r2, [r2, #8]
 8000c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	6891      	ldr	r1, [r2, #8]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68d2      	ldr	r2, [r2, #12]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8e:	4a57      	ldr	r2, [pc, #348]	; (8000dec <ADC_Init+0x1f0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d022      	beq.n	8000cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	6892      	ldr	r2, [r2, #8]
 8000c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	6891      	ldr	r1, [r2, #8]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	6892      	ldr	r2, [r2, #8]
 8000cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	6891      	ldr	r1, [r2, #8]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	e00f      	b.n	8000cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	6892      	ldr	r2, [r2, #8]
 8000ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	6892      	ldr	r2, [r2, #8]
 8000cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	6892      	ldr	r2, [r2, #8]
 8000d04:	f022 0202 	bic.w	r2, r2, #2
 8000d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	6891      	ldr	r1, [r2, #8]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6992      	ldr	r2, [r2, #24]
 8000d18:	0052      	lsls	r2, r2, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01b      	beq.n	8000d5e <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	6852      	ldr	r2, [r2, #4]
 8000d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d34:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	6852      	ldr	r2, [r2, #4]
 8000d40:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d44:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	6851      	ldr	r1, [r2, #4]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d54:	3a01      	subs	r2, #1
 8000d56:	0352      	lsls	r2, r2, #13
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	e007      	b.n	8000d6e <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	6852      	ldr	r2, [r2, #4]
 8000d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	69d2      	ldr	r2, [r2, #28]
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	0512      	lsls	r2, r2, #20
 8000d90:	430a      	orrs	r2, r1
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	6892      	ldr	r2, [r2, #8]
 8000d9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	6891      	ldr	r1, [r2, #8]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000db2:	0252      	lsls	r2, r2, #9
 8000db4:	430a      	orrs	r2, r1
 8000db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	6892      	ldr	r2, [r2, #8]
 8000dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	6891      	ldr	r1, [r2, #8]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6952      	ldr	r2, [r2, #20]
 8000dd6:	0292      	lsls	r2, r2, #10
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	609a      	str	r2, [r3, #8]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40012300 	.word	0x40012300
 8000dec:	0f000001 	.word	0x0f000001

08000df0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d13c      	bne.n	8000e84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d12b      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d127      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d119      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	6852      	ldr	r2, [r2, #4]
 8000e52:	f022 0220 	bic.w	r2, r2, #32
 8000e56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f043 0201 	orr.w	r2, r3, #1
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f7ff fd7b 	bl	8000978 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000e82:	e004      	b.n	8000e8e <ADC_DMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fd71 	bl	800098c <HAL_ADC_ConvHalfCpltCallback>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2240      	movs	r2, #64	; 0x40
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f043 0204 	orr.w	r2, r3, #4
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fd64 	bl	80009a0 <HAL_ADC_ErrorCallback>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f4e:	4909      	ldr	r1, [pc, #36]	; (8000f74 <NVIC_EnableIRQ+0x30>)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	f002 021f 	and.w	r2, r2, #31
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da0b      	bge.n	8000fa4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <NVIC_SetPriority+0x4c>)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	3b04      	subs	r3, #4
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa2:	e009      	b.n	8000fb8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <NVIC_SetPriority+0x50>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	2201      	movs	r2, #1
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	401a      	ands	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001012:	2101      	movs	r1, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	1e59      	subs	r1, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2f 	bl	8000ee0 <NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff44 	bl	8000f28 <NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff37 	bl	8000f44 <NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d106      	bne.n	8001114 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001112:	e005      	b.n	8001120 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 0304 	bic.w	r3, r3, #4
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001134:	f000 f802 	bl	800113c <HAL_SYSTICK_Callback>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fa80 	bl	800065c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e099      	b.n	800129c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001188:	e00f      	b.n	80011aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800118a:	f7ff fa67 	bl	800065c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b05      	cmp	r3, #5
 8001196:	d908      	bls.n	80011aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2220      	movs	r2, #32
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e078      	b.n	800129c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e8      	bne.n	800118a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <HAL_DMA_Init+0x158>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	2b04      	cmp	r3, #4
 8001202:	d107      	bne.n	8001214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4313      	orrs	r3, r2
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f023 0307 	bic.w	r3, r3, #7
 800122a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2b04      	cmp	r3, #4
 800123c:	d117      	bne.n	800126e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00e      	beq.n	800126e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fb09 	bl	8001868 <DMA_CheckFifoParam>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800126a:	2301      	movs	r3, #1
 800126c:	e016      	b.n	800129c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fac0 	bl	80017fc <DMA_CalcBaseAndBitshift>
 800127c:	4603      	mov	r3, r0
 800127e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	223f      	movs	r2, #63	; 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	f010803f 	.word	0xf010803f

080012a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_DMA_Start_IT+0x26>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e048      	b.n	8001360 <HAL_DMA_Start_IT+0xb8>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d137      	bne.n	8001352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2202      	movs	r2, #2
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 fa52 	bl	80017a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	223f      	movs	r2, #63	; 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	f042 0216 	orr.w	r2, r2, #22
 8001316:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	6952      	ldr	r2, [r2, #20]
 8001322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001326:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f042 0208 	orr.w	r2, r2, #8
 800133e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e005      	b.n	800135e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001376:	f7ff f971 	bl	800065c <HAL_GetTick>
 800137a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d008      	beq.n	800139a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e052      	b.n	8001440 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	f022 0216 	bic.w	r2, r2, #22
 80013a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	6952      	ldr	r2, [r2, #20]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <HAL_DMA_Abort+0x62>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f022 0208 	bic.w	r2, r2, #8
 80013d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ea:	e013      	b.n	8001414 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ec:	f7ff f936 	bl	800065c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d90c      	bls.n	8001414 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2220      	movs	r2, #32
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e015      	b.n	8001440 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e4      	bne.n	80013ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	223f      	movs	r2, #63	; 0x3f
 8001428:	409a      	lsls	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d004      	beq.n	8001466 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00c      	b.n	8001480 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2205      	movs	r2, #5
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <HAL_DMA_IRQHandler+0x258>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <HAL_DMA_IRQHandler+0x25c>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0a9b      	lsrs	r3, r3, #10
 80014a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b6:	2208      	movs	r2, #8
 80014b8:	409a      	lsls	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01a      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	f022 0204 	bic.w	r2, r2, #4
 80014de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	2208      	movs	r2, #8
 80014e6:	409a      	lsls	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2201      	movs	r2, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d012      	beq.n	800152e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2201      	movs	r2, #1
 800151c:	409a      	lsls	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	f043 0202 	orr.w	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2204      	movs	r2, #4
 8001534:	409a      	lsls	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d012      	beq.n	8001564 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	2204      	movs	r2, #4
 8001552:	409a      	lsls	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	f043 0204 	orr.w	r2, r3, #4
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2210      	movs	r2, #16
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d043      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03c      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	2210      	movs	r2, #16
 8001588:	409a      	lsls	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d018      	beq.n	80015ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d108      	bne.n	80015bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d024      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	4798      	blx	r3
 80015ba:	e01f      	b.n	80015fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01b      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
 80015cc:	e016      	b.n	80015fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	f022 0208 	bic.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	2220      	movs	r2, #32
 8001602:	409a      	lsls	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 808e 	beq.w	800172a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8086 	beq.w	800172a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2220      	movs	r2, #32
 8001624:	409a      	lsls	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b05      	cmp	r3, #5
 8001634:	d136      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f022 0216 	bic.w	r2, r2, #22
 8001644:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	6952      	ldr	r2, [r2, #20]
 8001650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001654:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <HAL_DMA_IRQHandler+0x1da>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	f022 0208 	bic.w	r2, r2, #8
 8001674:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	223f      	movs	r2, #63	; 0x3f
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001696:	2b00      	cmp	r3, #0
 8001698:	d07d      	beq.n	8001796 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
        }
        return;
 80016a2:	e078      	b.n	8001796 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d01c      	beq.n	80016ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d108      	bne.n	80016d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d030      	beq.n	800172a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
 80016d0:	e02b      	b.n	800172a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d027      	beq.n	800172a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
 80016e2:	e022      	b.n	800172a <HAL_DMA_IRQHandler+0x29e>
 80016e4:	2000002c 	.word	0x2000002c
 80016e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f022 0210 	bic.w	r2, r2, #16
 8001708:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	2b00      	cmp	r3, #0
 8001730:	d032      	beq.n	8001798 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d022      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4293      	cmp	r3, r2
 8001760:	d807      	bhi.n	8001772 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f2      	bne.n	8001756 <HAL_DMA_IRQHandler+0x2ca>
 8001770:	e000      	b.n	8001774 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001772:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e000      	b.n	8001798 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001796:	bf00      	nop
    }
  }
}
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop

080017a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d108      	bne.n	80017e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017de:	e007      	b.n	80017f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3b10      	subs	r3, #16
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <DMA_CalcBaseAndBitshift+0x64>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <DMA_CalcBaseAndBitshift+0x68>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d909      	bls.n	800183e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	1d1a      	adds	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	659a      	str	r2, [r3, #88]	; 0x58
 800183c:	e007      	b.n	800184e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001846:	f023 0303 	bic.w	r3, r3, #3
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	aaaaaaab 	.word	0xaaaaaaab
 8001864:	08011654 	.word	0x08011654

08001868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11f      	bne.n	80018c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d855      	bhi.n	8001934 <DMA_CheckFifoParam+0xcc>
 8001888:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <DMA_CheckFifoParam+0x28>)
 800188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188e:	bf00      	nop
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018b3 	.word	0x080018b3
 8001898:	080018a1 	.word	0x080018a1
 800189c:	08001935 	.word	0x08001935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d045      	beq.n	8001938 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b0:	e042      	b.n	8001938 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018ba:	d13f      	bne.n	800193c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c0:	e03c      	b.n	800193c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ca:	d121      	bne.n	8001910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d836      	bhi.n	8001940 <DMA_CheckFifoParam+0xd8>
 80018d2:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <DMA_CheckFifoParam+0x70>)
 80018d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	080018ef 	.word	0x080018ef
 80018e0:	080018e9 	.word	0x080018e9
 80018e4:	08001901 	.word	0x08001901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
      break;
 80018ec:	e02f      	b.n	800194e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d024      	beq.n	8001944 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018fe:	e021      	b.n	8001944 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001908:	d11e      	bne.n	8001948 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800190e:	e01b      	b.n	8001948 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d902      	bls.n	800191c <DMA_CheckFifoParam+0xb4>
 8001916:	2b03      	cmp	r3, #3
 8001918:	d003      	beq.n	8001922 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800191a:	e018      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      break;
 8001920:	e015      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00e      	beq.n	800194c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
      break;
 8001932:	e00b      	b.n	800194c <DMA_CheckFifoParam+0xe4>
      break;
 8001934:	bf00      	nop
 8001936:	e00a      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 8001938:	bf00      	nop
 800193a:	e008      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 800193c:	bf00      	nop
 800193e:	e006      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 8001940:	bf00      	nop
 8001942:	e004      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 8001944:	bf00      	nop
 8001946:	e002      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;   
 8001948:	bf00      	nop
 800194a:	e000      	b.n	800194e <DMA_CheckFifoParam+0xe6>
      break;
 800194c:	bf00      	nop
    }
  } 
  
  return status; 
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	e159      	b.n	8001c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001978:	2201      	movs	r2, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8148 	bne.w	8001c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x4a>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d123      	bne.n	80019ee <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	69b9      	ldr	r1, [r7, #24]
 80019ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0203 	and.w	r2, r3, #3
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d00b      	beq.n	8001a42 <HAL_GPIO_Init+0xe6>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a36:	2b11      	cmp	r3, #17
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a2 	beq.w	8001c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afe:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2ec>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x202>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x1fe>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_GPIO_Init+0x2f4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x1fa>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_GPIO_Init+0x2f8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x1f6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <HAL_GPIO_Init+0x2fc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x1f2>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x204>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b70:	4934      	ldr	r1, [pc, #208]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bcc:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_GPIO_Init+0x300>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	f67f aea2 	bls.w	8001978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	3724      	adds	r7, #36	; 0x24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40013c00 	.word	0x40013c00

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	405a      	eors	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	615a      	str	r2, [r3, #20]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 f81e 	bl	8004d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0c8      	b.n	8001e94 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f002 ff7c 	bl	8004c14 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2224      	movs	r2, #36	; 0x24
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d34:	f001 faf6 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8001d38:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_I2C_Init+0x1b4>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0c9b      	lsrs	r3, r3, #18
 8001d44:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4952      	ldr	r1, [pc, #328]	; (8001ea0 <HAL_I2C_Init+0x1b8>)
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d802      	bhi.n	8001d62 <HAL_I2C_Init+0x7a>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	e009      	b.n	8001d76 <HAL_I2C_Init+0x8e>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	494d      	ldr	r1, [pc, #308]	; (8001ea4 <HAL_I2C_Init+0x1bc>)
 8001d6e:	fba1 1303 	umull	r1, r3, r1, r3
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	3301      	adds	r3, #1
 8001d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a47      	ldr	r2, [pc, #284]	; (8001ea0 <HAL_I2C_Init+0x1b8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d812      	bhi.n	8001dac <HAL_I2C_Init+0xc4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d906      	bls.n	8001da8 <HAL_I2C_Init+0xc0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	e045      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e043      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10f      	bne.n	8001dd4 <HAL_I2C_Init+0xec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	e010      	b.n	8001df6 <HAL_I2C_Init+0x10e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009a      	lsls	r2, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x116>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e01a      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10a      	bne.n	8001e1c <HAL_I2C_Init+0x134>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1a:	e00b      	b.n	8001e34 <HAL_I2C_Init+0x14c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009a      	lsls	r2, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e34:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	69d1      	ldr	r1, [r2, #28]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a12      	ldr	r2, [r2, #32]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6911      	ldr	r1, [r2, #16]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6951      	ldr	r1, [r2, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6992      	ldr	r2, [r2, #24]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	000186a0 	.word	0x000186a0
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	817b      	strh	r3, [r7, #10]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec0:	f7fe fbcc 	bl	800065c <HAL_GetTick>
 8001ec4:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	f040 80ee 	bne.w	80020b0 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2319      	movs	r3, #25
 8001eda:	2201      	movs	r2, #1
 8001edc:	4977      	ldr	r1, [pc, #476]	; (80020bc <HAL_I2C_Master_Transmit+0x214>)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fc6c 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0e1      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2C_Master_Transmit+0x54>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0da      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d007      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2221      	movs	r2, #33	; 0x21
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_I2C_Master_Transmit+0x218>)
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fadc 	bl	8002528 <I2C_MasterRequestWrite>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00f      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d105      	bne.n	8001f8a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e093      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e08d      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001fac:	e066      	b.n	800207c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fcc1 	bl	800293a <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00f      	beq.n	8001fde <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d109      	bne.n	8001fda <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06b      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e069      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	1c58      	adds	r0, r3, #1
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	6248      	str	r0, [r1, #36]	; 0x24
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d119      	bne.n	800204c <HAL_I2C_Master_Transmit+0x1a4>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c58      	adds	r0, r3, #1
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	6248      	str	r0, [r1, #36]	; 0x24
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6a39      	ldr	r1, [r7, #32]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fcaf 	bl	80029b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00f      	beq.n	800207c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b04      	cmp	r3, #4
 8002062:	d109      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002072:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e01c      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e01a      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d194      	bne.n	8001fae <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	00100002 	.word	0x00100002
 80020c0:	ffff0000 	.word	0xffff0000

080020c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	460b      	mov	r3, r1
 80020d2:	817b      	strh	r3, [r7, #10]
 80020d4:	4613      	mov	r3, r2
 80020d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020dc:	f7fe fabe 	bl	800065c <HAL_GetTick>
 80020e0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 8215 	bne.w	800251a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4985      	ldr	r1, [pc, #532]	; (8002310 <HAL_I2C_Master_Receive+0x24c>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fb5e 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e208      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Master_Receive+0x54>
 8002114:	2302      	movs	r3, #2
 8002116:	e201      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2222      	movs	r2, #34	; 0x22
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a68      	ldr	r2, [pc, #416]	; (8002314 <HAL_I2C_Master_Receive+0x250>)
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa50 	bl	800262c <I2C_MasterRequestRead>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00f      	beq.n	80021b2 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b04      	cmp	r3, #4
 8002198:	d105      	bne.n	80021a6 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1ba      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1b4      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	623b      	str	r3, [r7, #32]
 80021ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e188      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d11b      	bne.n	8002222 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e168      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	2b02      	cmp	r3, #2
 8002228:	d11b      	bne.n	8002262 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	e148      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002288:	e134      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	2b03      	cmp	r3, #3
 8002290:	f200 80eb 	bhi.w	800246a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	2b01      	cmp	r3, #1
 800229a:	d127      	bne.n	80022ec <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fbc4 	bl	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e131      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e12f      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	1c59      	adds	r1, r3, #1
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	6251      	str	r1, [r2, #36]	; 0x24
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	6912      	ldr	r2, [r2, #16]
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ea:	e103      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d14a      	bne.n	800238a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	2200      	movs	r2, #0
 80022fc:	4906      	ldr	r1, [pc, #24]	; (8002318 <HAL_I2C_Master_Receive+0x254>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fa5c 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e106      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
 800230e:	bf00      	nop
 8002310:	00100002 	.word	0x00100002
 8002314:	ffff0000 	.word	0xffff0000
 8002318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6251      	str	r1, [r2, #36]	; 0x24
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	6912      	ldr	r2, [r2, #16]
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6251      	str	r1, [r2, #36]	; 0x24
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	6912      	ldr	r2, [r2, #16]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002388:	e0b4      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	2200      	movs	r2, #0
 8002392:	4964      	ldr	r1, [pc, #400]	; (8002524 <HAL_I2C_Master_Receive+0x460>)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fa11 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0bb      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6251      	str	r1, [r2, #36]	; 0x24
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	6912      	ldr	r2, [r2, #16]
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	2200      	movs	r2, #0
 80023ea:	494e      	ldr	r1, [pc, #312]	; (8002524 <HAL_I2C_Master_Receive+0x460>)
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f9e5 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e08f      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c59      	adds	r1, r3, #1
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	6251      	str	r1, [r2, #36]	; 0x24
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	6912      	ldr	r2, [r2, #16]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6251      	str	r1, [r2, #36]	; 0x24
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	6912      	ldr	r2, [r2, #16]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002468:	e044      	b.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fadd 	bl	8002a2e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b20      	cmp	r3, #32
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04a      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e048      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	6251      	str	r1, [r2, #36]	; 0x24
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	6912      	ldr	r2, [r2, #16]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d116      	bne.n	80024f4 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	6251      	str	r1, [r2, #36]	; 0x24
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	6912      	ldr	r2, [r2, #16]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f aec6 	bne.w	800228a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010004 	.word	0x00010004

08002528 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	460b      	mov	r3, r1
 8002536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d006      	beq.n	8002552 <I2C_MasterRequestWrite+0x2a>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d003      	beq.n	8002552 <I2C_MasterRequestWrite+0x2a>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002550:	d108      	bne.n	8002564 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e00b      	b.n	800257c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	2b12      	cmp	r3, #18
 800256a:	d107      	bne.n	800257c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f917 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e040      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a0:	d107      	bne.n	80025b2 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	897a      	ldrh	r2, [r7, #10]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	e021      	b.n	80025f6 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	897a      	ldrh	r2, [r7, #10]
 80025b8:	11d2      	asrs	r2, r2, #7
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f002 0206 	and.w	r2, r2, #6
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f062 020f 	orn	r2, r2, #15
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4915      	ldr	r1, [pc, #84]	; (8002624 <I2C_MasterRequestWrite+0xfc>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f944 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d101      	bne.n	80025e8 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e018      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e016      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	897a      	ldrh	r2, [r7, #10]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	490b      	ldr	r1, [pc, #44]	; (8002628 <I2C_MasterRequestWrite+0x100>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f92e 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b04      	cmp	r3, #4
 800260e:	d101      	bne.n	8002614 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e002      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e000      	b.n	800261a <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	00010008 	.word	0x00010008
 8002628:	00010002 	.word	0x00010002

0800262c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	460b      	mov	r3, r1
 800263a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d006      	beq.n	8002666 <I2C_MasterRequestRead+0x3a>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d003      	beq.n	8002666 <I2C_MasterRequestRead+0x3a>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002664:	d108      	bne.n	8002678 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e00b      	b.n	8002690 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	2b11      	cmp	r3, #17
 800267e:	d107      	bne.n	8002690 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f88d 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e07f      	b.n	80027ac <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b4:	d108      	bne.n	80026c8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	897a      	ldrh	r2, [r7, #10]
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	611a      	str	r2, [r3, #16]
 80026c6:	e05f      	b.n	8002788 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	897a      	ldrh	r2, [r7, #10]
 80026ce:	11d2      	asrs	r2, r2, #7
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 0206 	and.w	r2, r2, #6
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f062 020f 	orn	r2, r2, #15
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4933      	ldr	r1, [pc, #204]	; (80027b4 <I2C_MasterRequestRead+0x188>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f8b9 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d101      	bne.n	80026fe <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e056      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e054      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	897a      	ldrh	r2, [r7, #10]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4929      	ldr	r1, [pc, #164]	; (80027b8 <I2C_MasterRequestRead+0x18c>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8a3 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b04      	cmp	r3, #4
 8002724:	d101      	bne.n	800272a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e040      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e03e      	b.n	80027ac <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f82b 	bl	80027bc <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e01d      	b.n	80027ac <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	897a      	ldrh	r2, [r7, #10]
 8002776:	11d2      	asrs	r2, r2, #7
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 0206 	and.w	r2, r2, #6
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f062 020e 	orn	r2, r2, #14
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	490a      	ldr	r1, [pc, #40]	; (80027b8 <I2C_MasterRequestRead+0x18c>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f865 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d101      	bne.n	80027a6 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e002      	b.n	80027ac <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e000      	b.n	80027ac <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	00010008 	.word	0x00010008
 80027b8:	00010002 	.word	0x00010002

080027bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80027cc:	e01f      	b.n	800280e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d01b      	beq.n	800280e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80027dc:	f7fd ff3e 	bl	800065c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad2      	subs	r2, r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d910      	bls.n	800280e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e023      	b.n	8002856 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10d      	bne.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	e00c      	b.n	800284e <I2C_WaitOnFlagUntilTimeout+0x92>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	429a      	cmp	r2, r3
 8002852:	d0bc      	beq.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800286c:	e040      	b.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d11c      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002896:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2204      	movs	r2, #4
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e03c      	b.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d017      	beq.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80028c6:	f7fd fec9 	bl	800065c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90c      	bls.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e020      	b.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10c      	bne.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e00b      	b.n	800292c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4013      	ands	r3, r2
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d19e      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002946:	e029      	b.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f8ba 	bl	8002ac2 <I2C_IsAcknowledgeFailed>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e029      	b.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d01d      	beq.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002966:	f7fd fe79 	bl	800065c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	429a      	cmp	r2, r3
 8002974:	d912      	bls.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e007      	b.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d1ce      	bne.n	8002948 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c0:	e029      	b.n	8002a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f87d 	bl	8002ac2 <I2C_IsAcknowledgeFailed>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e029      	b.n	8002a26 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d01d      	beq.n	8002a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029e0:	f7fd fe3c 	bl	800065c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad2      	subs	r2, r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d912      	bls.n	8002a16 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e007      	b.n	8002a26 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d1ce      	bne.n	80029c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a3a:	e036      	b.n	8002aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d114      	bne.n	8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0210 	mvn.w	r2, #16
 8002a52:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e022      	b.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002a7a:	f7fd fdef 	bl	800065c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d90f      	bls.n	8002aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e007      	b.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d1c1      	bne.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad8:	d114      	bne.n	8002b04 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae2:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e22d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d075      	beq.n	8002c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b32:	4ba3      	ldr	r3, [pc, #652]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d00c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3e:	4ba0      	ldr	r3, [pc, #640]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d112      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b9d      	ldr	r3, [pc, #628]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b56:	d10b      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	4b99      	ldr	r3, [pc, #612]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d05b      	beq.n	8002c1c <HAL_RCC_OscConfig+0x108>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d157      	bne.n	8002c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e208      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x74>
 8002b7a:	4a91      	ldr	r2, [pc, #580]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	4b90      	ldr	r3, [pc, #576]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e01d      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x98>
 8002b92:	4a8b      	ldr	r2, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	4b8a      	ldr	r3, [pc, #552]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4a88      	ldr	r2, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	4b87      	ldr	r3, [pc, #540]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002bac:	4a84      	ldr	r2, [pc, #528]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	4b84      	ldr	r3, [pc, #528]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4a81      	ldr	r2, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fd fd46 	bl	800065c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fd fd42 	bl	800065c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1cd      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xc0>
 8002bf2:	e014      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd fd32 	bl	800065c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fd fd2e 	bl	800065c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1b9      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0xe8>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d063      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c36:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d11c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e18d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	4956      	ldr	r1, [pc, #344]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	e03a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c84:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCC_OscConfig+0x2b0>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fd fce7 	bl	800065c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c92:	f7fd fce3 	bl	800065c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e16e      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4943      	ldr	r1, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0x2b0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fd fcc6 	bl	800065c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fd fcc2 	bl	800065c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e14d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d030      	beq.n	8002d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d06:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <HAL_RCC_OscConfig+0x2b4>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fd fca6 	bl	800065c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d14:	f7fd fca2 	bl	800065c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e12d      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x200>
 8002d32:	e015      	b.n	8002d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCC_OscConfig+0x2b4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7fd fc8f 	bl	800065c <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d42:	f7fd fc8b 	bl	800065c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e116      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a0 	beq.w	8002eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_OscConfig+0x2b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d121      	bne.n	8002dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_RCC_OscConfig+0x2b8>)
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCC_OscConfig+0x2b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fd fc51 	bl	800065c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	e011      	b.n	8002de2 <HAL_RCC_OscConfig+0x2ce>
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	42470000 	.word	0x42470000
 8002dc8:	42470e80 	.word	0x42470e80
 8002dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fd fc44 	bl	800065c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0cf      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b6a      	ldr	r3, [pc, #424]	; (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2f0>
 8002df6:	4a66      	ldr	r2, [pc, #408]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002df8:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	e01c      	b.n	8002e3e <HAL_RCC_OscConfig+0x32a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x312>
 8002e0c:	4a60      	ldr	r2, [pc, #384]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e0e:	4b60      	ldr	r3, [pc, #384]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
 8002e18:	4a5d      	ldr	r2, [pc, #372]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	e00b      	b.n	8002e3e <HAL_RCC_OscConfig+0x32a>
 8002e26:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	4a57      	ldr	r2, [pc, #348]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e34:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fd fc09 	bl	800065c <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fd fc05 	bl	800065c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e08e      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b4a      	ldr	r3, [pc, #296]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCC_OscConfig+0x33a>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fd fbf3 	bl	800065c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fd fbef 	bl	800065c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e078      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4a3b      	ldr	r2, [pc, #236]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002ea4:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d064      	beq.n	8002f80 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb6:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d05c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d141      	bne.n	8002f4e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCC_OscConfig+0x480>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fd fbc4 	bl	800065c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fd fbc0 	bl	800065c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e04b      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef6:	4926      	ldr	r1, [pc, #152]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	019b      	lsls	r3, r3, #6
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_OscConfig+0x480>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fd fb99 	bl	800065c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fd fb95 	bl	800065c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e020      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x41a>
 8002f4c:	e018      	b.n	8002f80 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_OscConfig+0x480>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fd fb82 	bl	800065c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fd fb7e 	bl	800065c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e009      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCC_OscConfig+0x47c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x448>
 8002f7a:	e001      	b.n	8002f80 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	40023800 	.word	0x40023800
 8002f94:	42470060 	.word	0x42470060

08002f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0ca      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d20c      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b62      	ldr	r3, [pc, #392]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0b6      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fec:	4a58      	ldr	r2, [pc, #352]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8002fee:	4b58      	ldr	r3, [pc, #352]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003004:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003006:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800300e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	494f      	ldr	r1, [pc, #316]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	4b4f      	ldr	r3, [pc, #316]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d044      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d119      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07d      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d003      	beq.n	8003056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003052:	2b03      	cmp	r3, #3
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06d      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e065      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4936      	ldr	r1, [pc, #216]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 0203 	bic.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003088:	f7fd fae8 	bl	800065c <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fd fae4 	bl	800065c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e04d      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d90c      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_RCC_ClockConfig+0x1b4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e030      	b.n	8003142 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4918      	ldr	r1, [pc, #96]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310a:	4911      	ldr	r1, [pc, #68]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800311e:	f000 f81d 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8003122:	4601      	mov	r1, r0
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	fa21 f303 	lsr.w	r3, r1, r3
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800313a:	2000      	movs	r0, #0
 800313c:	f7fd fa4a 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023c00 	.word	0x40023c00
 8003150:	40023800 	.word	0x40023800
 8003154:	0801165c 	.word	0x0801165c
 8003158:	2000002c 	.word	0x2000002c

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	b08f      	sub	sp, #60	; 0x3c
 8003162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
 800316c:	2300      	movs	r3, #0
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b04      	cmp	r3, #4
 800317e:	d007      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 8003180:	2b08      	cmp	r3, #8
 8003182:	d008      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x3a>
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 80b2 	bne.w	80032ee <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800318a:	4b5e      	ldr	r3, [pc, #376]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800318e:	e0b1      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003190:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003194:	e0ae      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003196:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d04e      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ac:	4b54      	ldr	r3, [pc, #336]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	f04f 0400 	mov.w	r4, #0
 80031b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	ea01 0103 	and.w	r1, r1, r3
 80031c2:	ea02 0204 	and.w	r2, r2, r4
 80031c6:	460b      	mov	r3, r1
 80031c8:	4614      	mov	r4, r2
 80031ca:	0160      	lsls	r0, r4, #5
 80031cc:	6278      	str	r0, [r7, #36]	; 0x24
 80031ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80031d4:	6278      	str	r0, [r7, #36]	; 0x24
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80031de:	1a5b      	subs	r3, r3, r1
 80031e0:	eb64 0402 	sbc.w	r4, r4, r2
 80031e4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80031e8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80031ec:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80031f0:	ebb8 0803 	subs.w	r8, r8, r3
 80031f4:	eb69 0904 	sbc.w	r9, r9, r4
 80031f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003210:	eb18 0801 	adds.w	r8, r8, r1
 8003214:	eb49 0902 	adc.w	r9, r9, r2
 8003218:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003230:	4640      	mov	r0, r8
 8003232:	4649      	mov	r1, r9
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	461a      	mov	r2, r3
 800323c:	4623      	mov	r3, r4
 800323e:	f7fd f81f 	bl	8000280 <__aeabi_uldivmod>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
 8003248:	e043      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	ea01 0103 	and.w	r1, r1, r3
 8003260:	ea02 0204 	and.w	r2, r2, r4
 8003264:	460b      	mov	r3, r1
 8003266:	4614      	mov	r4, r2
 8003268:	0160      	lsls	r0, r4, #5
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	015b      	lsls	r3, r3, #5
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800327c:	1a5b      	subs	r3, r3, r1
 800327e:	eb64 0402 	sbc.w	r4, r4, r2
 8003282:	01a6      	lsls	r6, r4, #6
 8003284:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003288:	019d      	lsls	r5, r3, #6
 800328a:	1aed      	subs	r5, r5, r3
 800328c:	eb66 0604 	sbc.w	r6, r6, r4
 8003290:	00f3      	lsls	r3, r6, #3
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80032a4:	186d      	adds	r5, r5, r1
 80032a6:	eb46 0602 	adc.w	r6, r6, r2
 80032aa:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80032ae:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80032b2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80032b6:	4655      	mov	r5, sl
 80032b8:	465e      	mov	r6, fp
 80032ba:	4628      	mov	r0, r5
 80032bc:	4631      	mov	r1, r6
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	f04f 0400 	mov.w	r4, #0
 80032c4:	461a      	mov	r2, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	f7fc ffda 	bl	8000280 <__aeabi_uldivmod>
 80032cc:	4603      	mov	r3, r0
 80032ce:	460c      	mov	r4, r1
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	3301      	adds	r3, #1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80032e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	373c      	adds	r7, #60	; 0x3c
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	00f42400 	.word	0x00f42400
 8003308:	007a1200 	.word	0x007a1200

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	2000002c 	.word	0x2000002c

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4601      	mov	r1, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4a03      	ldr	r2, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	0801166c 	.word	0x0801166c

0800334c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003350:	f7ff ffdc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003354:	4601      	mov	r1, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0b5b      	lsrs	r3, r3, #13
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	0801166c 	.word	0x0801166c

08003374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e055      	b.n	8003432 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f001 ffdb 	bl	800535c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6851      	ldr	r1, [r2, #4]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68d2      	ldr	r2, [r2, #12]
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6912      	ldr	r2, [r2, #16]
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6952      	ldr	r2, [r2, #20]
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6992      	ldr	r2, [r2, #24]
 80033e2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	69d2      	ldr	r2, [r2, #28]
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6a12      	ldr	r2, [r2, #32]
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6992      	ldr	r2, [r2, #24]
 8003404:	0c12      	lsrs	r2, r2, #16
 8003406:	f002 0104 	and.w	r1, r2, #4
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	69d2      	ldr	r2, [r2, #28]
 800341c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003420:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e03f      	b.n	80034cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f002 f92f 	bl	80056c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2224      	movs	r2, #36	; 0x24
 800346a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	68d2      	ldr	r2, [r2, #12]
 8003478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fd4c 	bl	8003f1c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	6912      	ldr	r2, [r2, #16]
 800348e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003492:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	6952      	ldr	r2, [r2, #20]
 800349e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	f040 8082 	bne.w	80035fa <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_Transmit+0x2e>
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07a      	b.n	80035fc <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_UART_Transmit+0x40>
 8003510:	2302      	movs	r3, #2
 8003512:	e073      	b.n	80035fc <HAL_UART_Transmit+0x128>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2221      	movs	r2, #33	; 0x21
 8003526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800352a:	f7fd f897 	bl	800065c <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800353c:	e041      	b.n	80035c2 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d121      	bne.n	800359a <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fb63 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e045      	b.n	80035fc <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003580:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3302      	adds	r3, #2
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	e017      	b.n	80035c2 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	e013      	b.n	80035c2 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fb41 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e023      	b.n	80035fc <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1b8      	bne.n	800353e <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fb28 	bl	8003c2c <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00a      	b.n	80035fc <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d130      	bne.n	8003680 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL ) || (Size == 0)) 
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_Transmit_IT+0x26>
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e029      	b.n	8003682 <HAL_UART_Transmit_IT+0x7e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit_IT+0x38>
 8003638:	2302      	movs	r3, #2
 800363a:	e022      	b.n	8003682 <HAL_UART_Transmit_IT+0x7e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2221      	movs	r2, #33	; 0x21
 8003660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	68d2      	ldr	r2, [r2, #12]
 8003676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367a:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;   
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d138      	bne.n	800371a <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Receive_IT+0x26>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e031      	b.n	800371c <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Receive_IT+0x38>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e02a      	b.n	800371c <HAL_UART_Receive_IT+0x8e>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2222      	movs	r2, #34	; 0x22
 80036ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	6952      	ldr	r2, [r2, #20]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	68d2      	ldr	r2, [r2, #12]
 8003710:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003714:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e000      	b.n	800371c <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 800371a:	2302      	movs	r3, #2
  }
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	d166      	bne.n	8003810 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_UART_Receive_DMA+0x26>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e05f      	b.n	8003812 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_UART_Receive_DMA+0x38>
 800375c:	2302      	movs	r3, #2
 800375e:	e058      	b.n	8003812 <HAL_UART_Receive_DMA+0xea>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2222      	movs	r2, #34	; 0x22
 800377e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_UART_Receive_DMA+0xf4>)
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	4a24      	ldr	r2, [pc, #144]	; (8003820 <HAL_UART_Receive_DMA+0xf8>)
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_UART_Receive_DMA+0xfc>)
 8003798:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	2200      	movs	r2, #0
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	f7fd fd75 	bl	80012a8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	6952      	ldr	r2, [r2, #20]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	6952      	ldr	r2, [r2, #20]
 8003806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800380a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	08003b15 	.word	0x08003b15
 8003820:	08003b7d 	.word	0x08003b7d
 8003824:	08003b99 	.word	0x08003b99

08003828 <HAL_UART_DMAStop>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b21      	cmp	r3, #33	; 0x21
 8003854:	d116      	bne.n	8003884 <HAL_UART_DMAStop+0x5c>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6952      	ldr	r2, [r2, #20]
 8003866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if(huart->hdmatx != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fd75 	bl	8001368 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa1e 	bl	8003cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b22      	cmp	r3, #34	; 0x22
 80038a4:	d116      	bne.n	80038d4 <HAL_UART_DMAStop+0xac>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6952      	ldr	r2, [r2, #20]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if(huart->hdmarx != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fd4d 	bl	8001368 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa0c 	bl	8003cec <UART_EndRxTransfer>
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_UART_IRQHandler+0x52>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa7d 	bl	8003e2a <UART_Receive_IT>
      return;
 8003930:	e0cc      	b.n	8003acc <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ab 	beq.w	8003a90 <HAL_UART_IRQHandler+0x1b0>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_UART_IRQHandler+0x70>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80a0 	beq.w	8003a90 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_UART_IRQHandler+0x90>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_UART_IRQHandler+0xb0>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	f043 0202 	orr.w	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_UART_IRQHandler+0xd0>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_UART_IRQHandler+0xf0>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f043 0208 	orr.w	r2, r3, #8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d078      	beq.n	8003aca <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_UART_IRQHandler+0x112>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fa1c 	bl	8003e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf14      	ite	ne
 8003a00:	2301      	movne	r3, #1
 8003a02:	2300      	moveq	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <HAL_UART_IRQHandler+0x13a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d031      	beq.n	8003a7e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f966 	bl	8003cec <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	6952      	ldr	r2, [r2, #20]
 8003a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3c:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d013      	beq.n	8003a6e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_UART_IRQHandler+0x1f4>)
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fcf8 	bl	8001448 <HAL_DMA_Abort_IT>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	e00e      	b.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f846 	bl	8003b00 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	e00a      	b.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f842 	bl	8003b00 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e006      	b.n	8003a8c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f83e 	bl	8003b00 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a8a:	e01e      	b.n	8003aca <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	bf00      	nop
    return;
 8003a8e:	e01c      	b.n	8003aca <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_UART_IRQHandler+0x1cc>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f953 	bl	8003d50 <UART_Transmit_IT>
    return;
 8003aaa:	e00f      	b.n	8003acc <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_UART_IRQHandler+0x1ec>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f99a 	bl	8003dfa <UART_EndTransmit_IT>
    return;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_UART_IRQHandler+0x1ec>
    return;
 8003aca:	bf00      	nop
  }
}
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08003d29 	.word	0x08003d29

08003ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11e      	bne.n	8003b6e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	68d2      	ldr	r2, [r2, #12]
 8003b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b44:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	6952      	ldr	r2, [r2, #20]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	6952      	ldr	r2, [r2, #20]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f001 f8e8 	bl	8004d44 <HAL_UART_RxCpltCallback>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff ffae 	bl	8003aec <HAL_UART_RxHalfCpltCallback>
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b21      	cmp	r3, #33	; 0x21
 8003bca:	d108      	bne.n	8003bde <UART_DMAError+0x46>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003bd8:	68b8      	ldr	r0, [r7, #8]
 8003bda:	f000 f871 	bl	8003cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b22      	cmp	r3, #34	; 0x22
 8003bfe:	d108      	bne.n	8003c12 <UART_DMAError+0x7a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c0c:	68b8      	ldr	r0, [r7, #8]
 8003c0e:	f000 f86d 	bl	8003cec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	f043 0210 	orr.w	r2, r3, #16
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003c1e:	68b8      	ldr	r0, [r7, #8]
 8003c20:	f7ff ff6e 	bl	8003b00 <HAL_UART_ErrorCallback>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003c3c:	e02c      	b.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d028      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4c:	f7fc fd06 	bl	800065c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	1ad2      	subs	r2, r2, r3
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d91d      	bls.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	6952      	ldr	r2, [r2, #20]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e00f      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d0c3      	beq.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cd6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	68d2      	ldr	r2, [r2, #12]
 8003cfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	6952      	ldr	r2, [r2, #20]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff fedc 	bl	8003b00 <HAL_UART_ErrorCallback>
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b21      	cmp	r3, #33	; 0x21
 8003d62:	d143      	bne.n	8003dec <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d119      	bne.n	8003da2 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d80:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]
 8003d94:	e00e      	b.n	8003db4 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]
 8003da0:	e008      	b.n	8003db4 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	1c58      	adds	r0, r3, #1
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6208      	str	r0, [r1, #32]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10f      	bne.n	8003de8 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	68d2      	ldr	r2, [r2, #12]
 8003e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e10:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fe5c 	bl	8003ad8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b22      	cmp	r3, #34	; 0x22
 8003e3c:	d169      	bne.n	8003f12 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d123      	bne.n	8003e90 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10e      	bne.n	8003e74 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	1c9a      	adds	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
 8003e72:	e029      	b.n	8003ec8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e8e:	e01b      	b.n	8003ec8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	1c59      	adds	r1, r3, #1
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6291      	str	r1, [r2, #40]	; 0x28
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	6852      	ldr	r2, [r2, #4]
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e00c      	b.n	8003ec8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	1c59      	adds	r1, r3, #1
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6291      	str	r1, [r2, #40]	; 0x28
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	6852      	ldr	r2, [r2, #4]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d118      	bne.n	8003f0e <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	68d2      	ldr	r2, [r2, #12]
 8003ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	6952      	ldr	r2, [r2, #20]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 ff1d 	bl	8004d44 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e002      	b.n	8003f14 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f58:	f023 030c 	bic.w	r3, r3, #12
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fac:	f040 80e4 	bne.w	8004178 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4aab      	ldr	r2, [pc, #684]	; (8004264 <UART_SetConfig+0x348>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <UART_SetConfig+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4aaa      	ldr	r2, [pc, #680]	; (8004268 <UART_SetConfig+0x34c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d16c      	bne.n	800409e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681c      	ldr	r4, [r3, #0]
 8003fc8:	f7ff f9c0 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	4aa2      	ldr	r2, [pc, #648]	; (800426c <UART_SetConfig+0x350>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	011d      	lsls	r5, r3, #4
 8003fec:	f7ff f9ae 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fbb2 f6f3 	udiv	r6, r2, r3
 8004006:	f7ff f9a1 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 800400a:	4602      	mov	r2, r0
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	4a92      	ldr	r2, [pc, #584]	; (800426c <UART_SetConfig+0x350>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2264      	movs	r2, #100	; 0x64
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	1af3      	subs	r3, r6, r3
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	3332      	adds	r3, #50	; 0x32
 8004034:	4a8d      	ldr	r2, [pc, #564]	; (800426c <UART_SetConfig+0x350>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004042:	441d      	add	r5, r3
 8004044:	f7ff f982 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004048:	4602      	mov	r2, r0
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009a      	lsls	r2, r3, #2
 8004052:	441a      	add	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fbb2 f6f3 	udiv	r6, r2, r3
 800405e:	f7ff f975 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004062:	4602      	mov	r2, r0
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	4a7c      	ldr	r2, [pc, #496]	; (800426c <UART_SetConfig+0x350>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2264      	movs	r2, #100	; 0x64
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	1af3      	subs	r3, r6, r3
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a77      	ldr	r2, [pc, #476]	; (800426c <UART_SetConfig+0x350>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	442b      	add	r3, r5
 800409a:	60a3      	str	r3, [r4, #8]
 800409c:	e154      	b.n	8004348 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681c      	ldr	r4, [r3, #0]
 80040a2:	f7ff f93f 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009a      	lsls	r2, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	4a6b      	ldr	r2, [pc, #428]	; (800426c <UART_SetConfig+0x350>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011d      	lsls	r5, r3, #4
 80040c6:	f7ff f92d 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80040e0:	f7ff f920 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009a      	lsls	r2, r3, #2
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	4a5c      	ldr	r2, [pc, #368]	; (800426c <UART_SetConfig+0x350>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2264      	movs	r2, #100	; 0x64
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	1af3      	subs	r3, r6, r3
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a57      	ldr	r2, [pc, #348]	; (800426c <UART_SetConfig+0x350>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800411c:	441d      	add	r5, r3
 800411e:	f7ff f901 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8004122:	4602      	mov	r2, r0
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009a      	lsls	r2, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb2 f6f3 	udiv	r6, r2, r3
 8004138:	f7ff f8f4 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800413c:	4602      	mov	r2, r0
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009a      	lsls	r2, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	4a46      	ldr	r2, [pc, #280]	; (800426c <UART_SetConfig+0x350>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2264      	movs	r2, #100	; 0x64
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	1af3      	subs	r3, r6, r3
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	3332      	adds	r3, #50	; 0x32
 8004166:	4a41      	ldr	r2, [pc, #260]	; (800426c <UART_SetConfig+0x350>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	442b      	add	r3, r5
 8004174:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004176:	e0e7      	b.n	8004348 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <UART_SetConfig+0x348>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <UART_SetConfig+0x270>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <UART_SetConfig+0x34c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d171      	bne.n	8004270 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681c      	ldr	r4, [r3, #0]
 8004190:	f7ff f8dc 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004194:	4602      	mov	r2, r0
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009a      	lsls	r2, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	4a30      	ldr	r2, [pc, #192]	; (800426c <UART_SetConfig+0x350>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	011d      	lsls	r5, r3, #4
 80041b4:	f7ff f8ca 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009a      	lsls	r2, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80041ce:	f7ff f8bd 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009a      	lsls	r2, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <UART_SetConfig+0x350>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2264      	movs	r2, #100	; 0x64
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	1af3      	subs	r3, r6, r3
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	3332      	adds	r3, #50	; 0x32
 80041fc:	4a1b      	ldr	r2, [pc, #108]	; (800426c <UART_SetConfig+0x350>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004208:	441d      	add	r5, r3
 800420a:	f7ff f89f 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 800420e:	4602      	mov	r2, r0
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009a      	lsls	r2, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	fbb2 f6f3 	udiv	r6, r2, r3
 8004224:	f7ff f892 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004228:	4602      	mov	r2, r0
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009a      	lsls	r2, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	4a0b      	ldr	r2, [pc, #44]	; (800426c <UART_SetConfig+0x350>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	2264      	movs	r2, #100	; 0x64
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	1af3      	subs	r3, r6, r3
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	3332      	adds	r3, #50	; 0x32
 8004252:	4a06      	ldr	r2, [pc, #24]	; (800426c <UART_SetConfig+0x350>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	442b      	add	r3, r5
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	e071      	b.n	8004348 <UART_SetConfig+0x42c>
 8004264:	40011000 	.word	0x40011000
 8004268:	40011400 	.word	0x40011400
 800426c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681c      	ldr	r4, [r3, #0]
 8004274:	f7ff f856 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8004278:	4602      	mov	r2, r0
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009a      	lsls	r2, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	4a30      	ldr	r2, [pc, #192]	; (8004350 <UART_SetConfig+0x434>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	011d      	lsls	r5, r3, #4
 8004298:	f7ff f844 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800429c:	4602      	mov	r2, r0
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009a      	lsls	r2, r3, #2
 80042a6:	441a      	add	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80042b2:	f7ff f837 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009a      	lsls	r2, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <UART_SetConfig+0x434>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2264      	movs	r2, #100	; 0x64
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	1af3      	subs	r3, r6, r3
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	3332      	adds	r3, #50	; 0x32
 80042e0:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <UART_SetConfig+0x434>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ec:	441d      	add	r5, r3
 80042ee:	f7ff f819 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009a      	lsls	r2, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fbb2 f6f3 	udiv	r6, r2, r3
 8004308:	f7ff f80c 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800430c:	4602      	mov	r2, r0
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009a      	lsls	r2, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <UART_SetConfig+0x434>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	2264      	movs	r2, #100	; 0x64
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	1af3      	subs	r3, r6, r3
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	3332      	adds	r3, #50	; 0x32
 8004336:	4a06      	ldr	r2, [pc, #24]	; (8004350 <UART_SetConfig+0x434>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	442b      	add	r3, r5
 8004344:	60a3      	str	r3, [r4, #8]
}
 8004346:	e7ff      	b.n	8004348 <UART_SetConfig+0x42c>
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004350:	51eb851f 	.word	0x51eb851f

08004354 <lidar_init>:
#include "TFMini.h"

bool lidar_init() {
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
	lidar_raw_values = malloc(number_of_characters * sizeof(uint8_t));
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <lidar_init+0x34>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f00c f9cd 	bl	80106fc <malloc>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <lidar_init+0x38>)
 8004368:	601a      	str	r2, [r3, #0]

	if (lidar_raw_values == NULL) {
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <lidar_init+0x38>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <lidar_init+0x28>
		printf("lidar malloc failed\r\n");
 8004372:	4807      	ldr	r0, [pc, #28]	; (8004390 <lidar_init+0x3c>)
 8004374:	f00c fc7c 	bl	8010c70 <puts>
		return false;
 8004378:	2300      	movs	r3, #0
 800437a:	e003      	b.n	8004384 <lidar_init+0x30>
	}
	printf("lidar malloc succeeded\r\n");
 800437c:	4805      	ldr	r0, [pc, #20]	; (8004394 <lidar_init+0x40>)
 800437e:	f00c fc77 	bl	8010c70 <puts>
	return true;
 8004382:	2301      	movs	r3, #1
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000008 	.word	0x20000008
 800438c:	200008f8 	.word	0x200008f8
 8004390:	080113b4 	.word	0x080113b4
 8004394:	080113cc 	.word	0x080113cc

08004398 <lidar_read>:
	free(lidar_raw_values);
	printf("lidar free succeeded\r\n");
	return true;
}

bool lidar_read() {
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart6, lidar_raw_values, number_of_characters);
 800439e:	4b34      	ldr	r3, [pc, #208]	; (8004470 <lidar_read+0xd8>)
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	4b34      	ldr	r3, [pc, #208]	; (8004474 <lidar_read+0xdc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	4833      	ldr	r0, [pc, #204]	; (8004478 <lidar_read+0xe0>)
 80043ac:	f7ff f9bc 	bl	8003728 <HAL_UART_Receive_DMA>
	HAL_Delay(20);
 80043b0:	2014      	movs	r0, #20
 80043b2:	f7fc f95f 	bl	8000674 <HAL_Delay>
	HAL_UART_DMAStop(&huart6);
 80043b6:	4830      	ldr	r0, [pc, #192]	; (8004478 <lidar_read+0xe0>)
 80043b8:	f7ff fa36 	bl	8003828 <HAL_UART_DMAStop>

	if (lidar_raw_values[0] != 0x59 || lidar_raw_values[1] != 0x59 || lidar_raw_values[7] != 0x00) {
 80043bc:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <lidar_read+0xd8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b59      	cmp	r3, #89	; 0x59
 80043c4:	d10b      	bne.n	80043de <lidar_read+0x46>
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <lidar_read+0xd8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3301      	adds	r3, #1
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b59      	cmp	r3, #89	; 0x59
 80043d0:	d105      	bne.n	80043de <lidar_read+0x46>
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <lidar_read+0xd8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3307      	adds	r3, #7
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <lidar_read+0x64>
		printf("reading lidar data - failed\r\n");
 80043de:	4827      	ldr	r0, [pc, #156]	; (800447c <lidar_read+0xe4>)
 80043e0:	f00c fc46 	bl	8010c70 <puts>
		lidar_raw_values[2] = 0;
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <lidar_read+0xd8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3302      	adds	r3, #2
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
		lidar_raw_values[3] = 0;
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <lidar_read+0xd8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3303      	adds	r3, #3
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
		return false;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e035      	b.n	8004468 <lidar_read+0xd0>
	}

	uint16_t checksum = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	80fb      	strh	r3, [r7, #6]
	uint8_t number_without_checksum = number_of_characters - 1;
 8004400:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <lidar_read+0xdc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	713b      	strb	r3, [r7, #4]

	for (uint8_t i = 0; i < number_without_checksum; ++i)
 800440a:	2300      	movs	r3, #0
 800440c:	717b      	strb	r3, [r7, #5]
 800440e:	e00b      	b.n	8004428 <lidar_read+0x90>
		checksum += lidar_raw_values[i];
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <lidar_read+0xd8>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	797b      	ldrb	r3, [r7, #5]
 8004416:	4413      	add	r3, r2
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b29a      	uxth	r2, r3
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	4413      	add	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < number_without_checksum; ++i)
 8004422:	797b      	ldrb	r3, [r7, #5]
 8004424:	3301      	adds	r3, #1
 8004426:	717b      	strb	r3, [r7, #5]
 8004428:	797a      	ldrb	r2, [r7, #5]
 800442a:	793b      	ldrb	r3, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d3ef      	bcc.n	8004410 <lidar_read+0x78>

	if ((checksum & 0xFF) != lidar_raw_values[number_without_checksum]) {
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <lidar_read+0xd8>)
 8004436:	6811      	ldr	r1, [r2, #0]
 8004438:	793a      	ldrb	r2, [r7, #4]
 800443a:	440a      	add	r2, r1
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <lidar_read+0xc8>
		printf("reading lidar data - failed2\r\n");
 8004442:	480f      	ldr	r0, [pc, #60]	; (8004480 <lidar_read+0xe8>)
 8004444:	f00c fc14 	bl	8010c70 <puts>
		lidar_raw_values[2] = 0;
 8004448:	4b09      	ldr	r3, [pc, #36]	; (8004470 <lidar_read+0xd8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3302      	adds	r3, #2
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
		lidar_raw_values[3] = 0;
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <lidar_read+0xd8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3303      	adds	r3, #3
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
		return false;
 800445c:	2300      	movs	r3, #0
 800445e:	e003      	b.n	8004468 <lidar_read+0xd0>
	}

	printf("reading lidar data - successful\r\n");
 8004460:	4808      	ldr	r0, [pc, #32]	; (8004484 <lidar_read+0xec>)
 8004462:	f00c fc05 	bl	8010c70 <puts>
	return true;
 8004466:	2301      	movs	r3, #1
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	200008f8 	.word	0x200008f8
 8004474:	20000008 	.word	0x20000008
 8004478:	20000c9c 	.word	0x20000c9c
 800447c:	0801141c 	.word	0x0801141c
 8004480:	0801143c 	.word	0x0801143c
 8004484:	0801145c 	.word	0x0801145c

08004488 <lidar_distance_cm>:

uint16_t lidar_distance_cm() {
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
	return lidar_raw_values[3] << 8 | lidar_raw_values[2];
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <lidar_distance_cm+0x2c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3303      	adds	r3, #3
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	b21a      	sxth	r2, r3
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <lidar_distance_cm+0x2c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3302      	adds	r3, #2
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b21b      	sxth	r3, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	b21b      	sxth	r3, r3
 80044a6:	b29b      	uxth	r3, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	200008f8 	.word	0x200008f8

080044b8 <my_VL53L0X_init>:
#include "VL53L0X.h"

bool my_VL53L0X_init() {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
	Dev0->I2cDevAddr = 0x52;
 80044be:	4b50      	ldr	r3, [pc, #320]	; (8004600 <my_VL53L0X_init+0x148>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2252      	movs	r2, #82	; 0x52
 80044c4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	Dev0->i2c_handle = &hi2c1;
 80044c8:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <my_VL53L0X_init+0x148>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a4d      	ldr	r2, [pc, #308]	; (8004604 <my_VL53L0X_init+0x14c>)
 80044ce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	Dev0->comms_speed_khz = 400;
 80044d2:	4b4b      	ldr	r3, [pc, #300]	; (8004600 <my_VL53L0X_init+0x148>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80044da:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	VL53L0X_status = VL53L0X_WaitDeviceBooted(Dev0);
 80044de:	4b48      	ldr	r3, [pc, #288]	; (8004600 <my_VL53L0X_init+0x148>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 fce4 	bl	8005eb0 <VL53L0X_WaitDeviceBooted>
 80044e8:	4603      	mov	r3, r0
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b46      	ldr	r3, [pc, #280]	; (8004608 <my_VL53L0X_init+0x150>)
 80044ee:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_DataInit(Dev0);
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <my_VL53L0X_init+0x148>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 f9f5 	bl	80058e4 <VL53L0X_DataInit>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461a      	mov	r2, r3
 80044fe:	4b42      	ldr	r3, [pc, #264]	; (8004608 <my_VL53L0X_init+0x150>)
 8004500:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_StaticInit(Dev0);
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <my_VL53L0X_init+0x148>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fb50 	bl	8005bac <VL53L0X_StaticInit>
 800450c:	4603      	mov	r3, r0
 800450e:	461a      	mov	r2, r3
 8004510:	4b3d      	ldr	r3, [pc, #244]	; (8004608 <my_VL53L0X_init+0x150>)
 8004512:	601a      	str	r2, [r3, #0]
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    VL53L0X_status = VL53L0X_PerformRefCalibration(Dev0, &VhvSettings, &PhaseCal);
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <my_VL53L0X_init+0x148>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1c7a      	adds	r2, r7, #1
 800451a:	1cb9      	adds	r1, r7, #2
 800451c:	4618      	mov	r0, r3
 800451e:	f002 fa35 	bl	800698c <VL53L0X_PerformRefCalibration>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	4b38      	ldr	r3, [pc, #224]	; (8004608 <my_VL53L0X_init+0x150>)
 8004528:	601a      	str	r2, [r3, #0]
    VL53L0X_status = VL53L0X_PerformRefSpadManagement(Dev0,&refSpadCount, &isApertureSpads);
 800452a:	4b35      	ldr	r3, [pc, #212]	; (8004600 <my_VL53L0X_init+0x148>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	1cfa      	adds	r2, r7, #3
 8004530:	1d39      	adds	r1, r7, #4
 8004532:	4618      	mov	r0, r3
 8004534:	f002 feb6 	bl	80072a4 <VL53L0X_PerformRefSpadManagement>
 8004538:	4603      	mov	r3, r0
 800453a:	461a      	mov	r2, r3
 800453c:	4b32      	ldr	r3, [pc, #200]	; (8004608 <my_VL53L0X_init+0x150>)
 800453e:	601a      	str	r2, [r3, #0]


	VL53L0X_status = VL53L0X_SetDeviceMode(Dev0, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004540:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <my_VL53L0X_init+0x148>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f001 fd50 	bl	8005fec <VL53L0X_SetDeviceMode>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <my_VL53L0X_init+0x150>)
 8004552:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev0, 33000);
 8004554:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <my_VL53L0X_init+0x148>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800455c:	4618      	mov	r0, r3
 800455e:	f001 fdbf 	bl	80060e0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <my_VL53L0X_init+0x150>)
 8004568:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev0, 200);
 800456a:	4b25      	ldr	r3, [pc, #148]	; (8004600 <my_VL53L0X_init+0x148>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	21c8      	movs	r1, #200	; 0xc8
 8004570:	4618      	mov	r0, r3
 8004572:	f001 ff55 	bl	8006420 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <my_VL53L0X_init+0x150>)
 800457c:	601a      	str	r2, [r3, #0]

	FixPoint1616_t signalLimit = (FixPoint1616_t) (0.1 * 65536);
 800457e:	f641 1399 	movw	r3, #6553	; 0x1999
 8004582:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t) (60 * 65536);
 8004584:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004588:	60bb      	str	r3, [r7, #8]
	VL53L0X_status = VL53L0X_SetLimitCheckValue(Dev0, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <my_VL53L0X_init+0x148>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f002 f8a4 	bl	80066e0 <VL53L0X_SetLimitCheckValue>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <my_VL53L0X_init+0x150>)
 800459e:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetLimitCheckValue(Dev0, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <my_VL53L0X_init+0x148>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f002 f899 	bl	80066e0 <VL53L0X_SetLimitCheckValue>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <my_VL53L0X_init+0x150>)
 80045b4:	601a      	str	r2, [r3, #0]

	VL53L0X_status = VL53L0X_SetVcselPulsePeriod(Dev0, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <my_VL53L0X_init+0x148>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2212      	movs	r2, #18
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 fdb4 	bl	800612c <VL53L0X_SetVcselPulsePeriod>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <my_VL53L0X_init+0x150>)
 80045ca:	601a      	str	r2, [r3, #0]
	VL53L0X_status = VL53L0X_SetVcselPulsePeriod(Dev0, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <my_VL53L0X_init+0x148>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	220e      	movs	r2, #14
 80045d2:	2101      	movs	r1, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fda9 	bl	800612c <VL53L0X_SetVcselPulsePeriod>
 80045da:	4603      	mov	r3, r0
 80045dc:	461a      	mov	r2, r3
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <my_VL53L0X_init+0x150>)
 80045e0:	601a      	str	r2, [r3, #0]

	if (VL53L0X_status != VL53L0X_ERROR_NONE) {
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <my_VL53L0X_init+0x150>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <my_VL53L0X_init+0x13c>
		printf("VL53L0_StartMeasurement failed \r\n");
 80045ea:	4808      	ldr	r0, [pc, #32]	; (800460c <my_VL53L0X_init+0x154>)
 80045ec:	f00c fb40 	bl	8010c70 <puts>
		return false;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <my_VL53L0X_init+0x13e>
	}

	return true;
 80045f4:	2301      	movs	r3, #1
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
 8004604:	200009f8 	.word	0x200009f8
 8004608:	200004f8 	.word	0x200004f8
 800460c:	08011480 	.word	0x08011480

08004610 <my_VL53L0X_read>:

bool my_VL53L0X_read() {
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	VL53L0X_status = VL53L0X_PerformSingleRangingMeasurement(Dev0, &VL53L0X_RangingData);
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <my_VL53L0X_read+0x38>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	490c      	ldr	r1, [pc, #48]	; (800464c <my_VL53L0X_read+0x3c>)
 800461a:	4618      	mov	r0, r3
 800461c:	f002 fc58 	bl	8006ed0 <VL53L0X_PerformSingleRangingMeasurement>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <my_VL53L0X_read+0x40>)
 8004626:	601a      	str	r2, [r3, #0]
	VL53L0X_ClearInterruptMask(Dev0, 0);
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <my_VL53L0X_read+0x38>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f002 fdd6 	bl	80071e0 <VL53L0X_ClearInterruptMask>

	if(VL53L0X_status == VL53L0X_ERROR_NONE)
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <my_VL53L0X_read+0x40>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <my_VL53L0X_read+0x30>
		return true;
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <my_VL53L0X_read+0x32>
	else
		return false;
 8004640:	2300      	movs	r3, #0

}
 8004642:	4618      	mov	r0, r3
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000000c 	.word	0x2000000c
 800464c:	200004fc 	.word	0x200004fc
 8004650:	200004f8 	.word	0x200004f8

08004654 <my_VL53L0X_distance_mm>:

uint16_t my_VL53L0X_distance_mm()
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
	if(VL53L0X_RangingData.RangeMilliMeter < 3000)
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <my_VL53L0X_distance_mm+0x24>)
 800465a:	891b      	ldrh	r3, [r3, #8]
 800465c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004660:	4293      	cmp	r3, r2
 8004662:	d802      	bhi.n	800466a <my_VL53L0X_distance_mm+0x16>
		return VL53L0X_RangingData.RangeMilliMeter;
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <my_VL53L0X_distance_mm+0x24>)
 8004666:	891b      	ldrh	r3, [r3, #8]
 8004668:	e001      	b.n	800466e <my_VL53L0X_distance_mm+0x1a>
	else
		return -1;
 800466a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	200004fc 	.word	0x200004fc

0800467c <my_VL53L1X_init>:
#include "VL53L1X.h"

bool my_VL53L1X_init() {
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0

	Dev1->I2cDevAddr = 0x52;
 8004680:	4b33      	ldr	r3, [pc, #204]	; (8004750 <my_VL53L1X_init+0xd4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2252      	movs	r2, #82	; 0x52
 8004686:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	Dev1->I2cHandle = &hi2c3;
 800468a:	4b31      	ldr	r3, [pc, #196]	; (8004750 <my_VL53L1X_init+0xd4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a31      	ldr	r2, [pc, #196]	; (8004754 <my_VL53L1X_init+0xd8>)
 8004690:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Dev1->comms_speed_khz = 400;
 8004694:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <my_VL53L1X_init+0xd4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800469c:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a

	VL53L1X_status = VL53L1_WaitDeviceBooted(Dev1);
 80046a0:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <my_VL53L1X_init+0xd4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f006 fac9 	bl	800ac3c <VL53L1_WaitDeviceBooted>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <my_VL53L1X_init+0xdc>)
 80046b0:	601a      	str	r2, [r3, #0]
	VL53L1X_status = VL53L1_DataInit(Dev1);
 80046b2:	4b27      	ldr	r3, [pc, #156]	; (8004750 <my_VL53L1X_init+0xd4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f006 fa44 	bl	800ab44 <VL53L1_DataInit>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <my_VL53L1X_init+0xdc>)
 80046c2:	601a      	str	r2, [r3, #0]
	VL53L1X_status = VL53L1_StaticInit(Dev1);
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <my_VL53L1X_init+0xd4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f006 fa90 	bl	800abee <VL53L1_StaticInit>
 80046ce:	4603      	mov	r3, r0
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b21      	ldr	r3, [pc, #132]	; (8004758 <my_VL53L1X_init+0xdc>)
 80046d4:	601a      	str	r2, [r3, #0]
	VL53L1X_status = VL53L1_SetPresetMode(Dev1, VL53L1_PRESETMODE_AUTONOMOUS);
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <my_VL53L1X_init+0xd4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2103      	movs	r1, #3
 80046dc:	4618      	mov	r0, r3
 80046de:	f006 fb92 	bl	800ae06 <VL53L1_SetPresetMode>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <my_VL53L1X_init+0xdc>)
 80046e8:	601a      	str	r2, [r3, #0]
	VL53L1X_status = VL53L1_SetDistanceMode(Dev1, VL53L1_DISTANCEMODE_LONG);
 80046ea:	4b19      	ldr	r3, [pc, #100]	; (8004750 <my_VL53L1X_init+0xd4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2103      	movs	r1, #3
 80046f0:	4618      	mov	r0, r3
 80046f2:	f006 fbd0 	bl	800ae96 <VL53L1_SetDistanceMode>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <my_VL53L1X_init+0xdc>)
 80046fc:	601a      	str	r2, [r3, #0]
	VL53L1X_status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev1, 70000);
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <my_VL53L1X_init+0xd4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4916      	ldr	r1, [pc, #88]	; (800475c <my_VL53L1X_init+0xe0>)
 8004704:	4618      	mov	r0, r3
 8004706:	f006 fc4d 	bl	800afa4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <my_VL53L1X_init+0xdc>)
 8004710:	601a      	str	r2, [r3, #0]
	VL53L1X_status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev1, 200);
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <my_VL53L1X_init+0xd4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	21c8      	movs	r1, #200	; 0xc8
 8004718:	4618      	mov	r0, r3
 800471a:	f006 fdc1 	bl	800b2a0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <my_VL53L1X_init+0xdc>)
 8004724:	601a      	str	r2, [r3, #0]
	VL53L1X_status = VL53L1_StartMeasurement(Dev1);
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <my_VL53L1X_init+0xd4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f006 ff2e 	bl	800b58c <VL53L1_StartMeasurement>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <my_VL53L1X_init+0xdc>)
 8004736:	601a      	str	r2, [r3, #0]

	if (VL53L1X_status) {
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <my_VL53L1X_init+0xdc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <my_VL53L1X_init+0xce>
		printf("VL53L1_StartMeasurement failed \r\n");
 8004740:	4807      	ldr	r0, [pc, #28]	; (8004760 <my_VL53L1X_init+0xe4>)
 8004742:	f00c fa95 	bl	8010c70 <puts>
		return false;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <my_VL53L1X_init+0xd0>
	}

	return true;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000010 	.word	0x20000010
 8004754:	200009a4 	.word	0x200009a4
 8004758:	200008bc 	.word	0x200008bc
 800475c:	00011170 	.word	0x00011170
 8004760:	080114a4 	.word	0x080114a4

08004764 <my_VL53L1X_read>:

bool my_VL53L1X_read() {
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
			VL53L1X_callback_counter = 0;
			VL53L1X_status = VL53L1_GetRangingMeasurementData(Dev1, &VL53L1X_RangingData);
			VL53L1X_status = VL53L1_ClearInterruptAndStartMeasurement(Dev1);
		}
	} else {
		VL53L1X_status = VL53L1_WaitMeasurementDataReady(Dev1);
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <my_VL53L1X_read+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f007 f82b 	bl	800b7c8 <VL53L1_WaitMeasurementDataReady>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <my_VL53L1X_read+0x5c>)
 8004778:	601a      	str	r2, [r3, #0]
		if (!VL53L1X_status) {
 800477a:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <my_VL53L1X_read+0x5c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d112      	bne.n	80047a8 <my_VL53L1X_read+0x44>
			VL53L1X_status = VL53L1_GetRangingMeasurementData(Dev1, &VL53L1X_RangingData);
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <my_VL53L1X_read+0x58>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	490f      	ldr	r1, [pc, #60]	; (80047c4 <my_VL53L1X_read+0x60>)
 8004788:	4618      	mov	r0, r3
 800478a:	f007 f9f7 	bl	800bb7c <VL53L1_GetRangingMeasurementData>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <my_VL53L1X_read+0x5c>)
 8004794:	601a      	str	r2, [r3, #0]
			VL53L1X_status = VL53L1_ClearInterruptAndStartMeasurement(Dev1);
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <my_VL53L1X_read+0x58>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f006 ffec 	bl	800b778 <VL53L1_ClearInterruptAndStartMeasurement>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <my_VL53L1X_read+0x5c>)
 80047a6:	601a      	str	r2, [r3, #0]
		}
	}

	if(VL53L1X_status == VL53L1_ERROR_NONE)
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <my_VL53L1X_read+0x5c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <my_VL53L1X_read+0x50>
		return true;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <my_VL53L1X_read+0x52>
	else
		return false;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000010 	.word	0x20000010
 80047c0:	200008bc 	.word	0x200008bc
 80047c4:	200008c0 	.word	0x200008c0

080047c8 <my_VL53L1X_distance_mm>:

uint16_t my_VL53L1X_distance_mm() {
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
	if(VL53L1X_RangingData.RangeMilliMeter < 5000)
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <my_VL53L1X_distance_mm+0x2c>)
 80047ce:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80047d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80047d6:	4293      	cmp	r3, r2
 80047d8:	dc04      	bgt.n	80047e4 <my_VL53L1X_distance_mm+0x1c>
		return VL53L1X_RangingData.RangeMilliMeter;
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <my_VL53L1X_distance_mm+0x2c>)
 80047dc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	e001      	b.n	80047e8 <my_VL53L1X_distance_mm+0x20>
	else
		return -1;
 80047e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	200008c0 	.word	0x200008c0

080047f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80047fe:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004800:	4a32      	ldr	r2, [pc, #200]	; (80048cc <MX_ADC1_Init+0xd4>)
 8004802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004804:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004806:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800480a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800480c:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <MX_ADC1_Init+0xd0>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004812:	4b2d      	ldr	r3, [pc, #180]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004814:	2201      	movs	r2, #1
 8004816:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <MX_ADC1_Init+0xd0>)
 800481a:	2201      	movs	r2, #1
 800481c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800481e:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004820:	2200      	movs	r2, #0
 8004822:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004826:	2200      	movs	r2, #0
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <MX_ADC1_Init+0xd0>)
 800482c:	4a28      	ldr	r2, [pc, #160]	; (80048d0 <MX_ADC1_Init+0xd8>)
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004832:	2200      	movs	r2, #0
 8004834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004838:	2203      	movs	r2, #3
 800483a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800483c:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <MX_ADC1_Init+0xd0>)
 800483e:	2201      	movs	r2, #1
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004842:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <MX_ADC1_Init+0xd0>)
 8004844:	2201      	movs	r2, #1
 8004846:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004848:	481f      	ldr	r0, [pc, #124]	; (80048c8 <MX_ADC1_Init+0xd0>)
 800484a:	f7fb ff35 	bl	80006b8 <HAL_ADC_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004854:	214a      	movs	r1, #74	; 0x4a
 8004856:	481f      	ldr	r0, [pc, #124]	; (80048d4 <MX_ADC1_Init+0xdc>)
 8004858:	f000 fc9a 	bl	8005190 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 800485c:	230a      	movs	r3, #10
 800485e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004860:	2301      	movs	r3, #1
 8004862:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004864:	2307      	movs	r3, #7
 8004866:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004868:	463b      	mov	r3, r7
 800486a:	4619      	mov	r1, r3
 800486c:	4816      	ldr	r0, [pc, #88]	; (80048c8 <MX_ADC1_Init+0xd0>)
 800486e:	f7fc f8a1 	bl	80009b4 <HAL_ADC_ConfigChannel>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004878:	2154      	movs	r1, #84	; 0x54
 800487a:	4816      	ldr	r0, [pc, #88]	; (80048d4 <MX_ADC1_Init+0xdc>)
 800487c:	f000 fc88 	bl	8005190 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 8004880:	230b      	movs	r3, #11
 8004882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004884:	2302      	movs	r3, #2
 8004886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004888:	463b      	mov	r3, r7
 800488a:	4619      	mov	r1, r3
 800488c:	480e      	ldr	r0, [pc, #56]	; (80048c8 <MX_ADC1_Init+0xd0>)
 800488e:	f7fc f891 	bl	80009b4 <HAL_ADC_ConfigChannel>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <MX_ADC1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004898:	215d      	movs	r1, #93	; 0x5d
 800489a:	480e      	ldr	r0, [pc, #56]	; (80048d4 <MX_ADC1_Init+0xdc>)
 800489c:	f000 fc78 	bl	8005190 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 80048a0:	230c      	movs	r3, #12
 80048a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80048a4:	2303      	movs	r3, #3
 80048a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048a8:	463b      	mov	r3, r7
 80048aa:	4619      	mov	r1, r3
 80048ac:	4806      	ldr	r0, [pc, #24]	; (80048c8 <MX_ADC1_Init+0xd0>)
 80048ae:	f7fc f881 	bl	80009b4 <HAL_ADC_ConfigChannel>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <MX_ADC1_Init+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048b8:	2166      	movs	r1, #102	; 0x66
 80048ba:	4806      	ldr	r0, [pc, #24]	; (80048d4 <MX_ADC1_Init+0xdc>)
 80048bc:	f000 fc68 	bl	8005190 <_Error_Handler>
  }

}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	200008fc 	.word	0x200008fc
 80048cc:	40012000 	.word	0x40012000
 80048d0:	0f000001 	.word	0x0f000001
 80048d4:	080114c8 	.word	0x080114c8

080048d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a29      	ldr	r2, [pc, #164]	; (800498c <HAL_ADC_MspInit+0xb4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d14b      	bne.n	8004982 <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	4a28      	ldr	r2, [pc, #160]	; (8004990 <HAL_ADC_MspInit+0xb8>)
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_ADC_MspInit+0xb8>)
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6453      	str	r3, [r2, #68]	; 0x44
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_ADC_MspInit+0xb8>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = SHARP_SMALL_1_ADC_Pin|SHARP_SMALL_2_ADC_Pin|SHARP_BIG_ADC_Pin;
 8004906:	2307      	movs	r3, #7
 8004908:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800490a:	2303      	movs	r3, #3
 800490c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	4619      	mov	r1, r3
 8004918:	481e      	ldr	r0, [pc, #120]	; (8004994 <HAL_ADC_MspInit+0xbc>)
 800491a:	f7fd f81f 	bl	800195c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004920:	4a1e      	ldr	r2, [pc, #120]	; (800499c <HAL_ADC_MspInit+0xc4>)
 8004922:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004924:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004926:	2200      	movs	r2, #0
 8004928:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800493c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004944:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800494c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004954:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800495c:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 800495e:	2200      	movs	r2, #0
 8004960:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004962:	480d      	ldr	r0, [pc, #52]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 8004964:	f7fc fbf2 	bl	800114c <HAL_DMA_Init>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_ADC_MspInit+0x9e>
    {
      _Error_Handler(__FILE__, __LINE__);
 800496e:	218f      	movs	r1, #143	; 0x8f
 8004970:	480b      	ldr	r0, [pc, #44]	; (80049a0 <HAL_ADC_MspInit+0xc8>)
 8004972:	f000 fc0d 	bl	8005190 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
 800497c:	4a06      	ldr	r2, [pc, #24]	; (8004998 <HAL_ADC_MspInit+0xc0>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004982:	bf00      	nop
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40012000 	.word	0x40012000
 8004990:	40023800 	.word	0x40023800
 8004994:	40020800 	.word	0x40020800
 8004998:	20000944 	.word	0x20000944
 800499c:	40026410 	.word	0x40026410
 80049a0:	080114c8 	.word	0x080114c8

080049a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <MX_DMA_Init+0x5c>)
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <MX_DMA_Init+0x5c>)
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <MX_DMA_Init+0x5c>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	2038      	movs	r0, #56	; 0x38
 80049cc:	f7fc fb5d 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80049d0:	2038      	movs	r0, #56	; 0x38
 80049d2:	f7fc fb76 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	2039      	movs	r0, #57	; 0x39
 80049dc:	f7fc fb55 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80049e0:	2039      	movs	r0, #57	; 0x39
 80049e2:	f7fc fb6e 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2100      	movs	r1, #0
 80049ea:	2045      	movs	r0, #69	; 0x45
 80049ec:	f7fc fb4d 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80049f0:	2045      	movs	r0, #69	; 0x45
 80049f2:	f7fc fb66 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	; 0x28
 8004a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	4a49      	ldr	r2, [pc, #292]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a10:	4b48      	ldr	r3, [pc, #288]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1a:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	4a42      	ldr	r2, [pc, #264]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a2c:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	6313      	str	r3, [r2, #48]	; 0x30
 8004a36:	4b3f      	ldr	r3, [pc, #252]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	4a3b      	ldr	r2, [pc, #236]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a48:	4b3a      	ldr	r3, [pc, #232]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6313      	str	r3, [r2, #48]	; 0x30
 8004a52:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a64:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <MX_GPIO_Init+0x130>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHARP_BIG_TRIGGER_Pin|SHARP_SMALL_2_TRIGGER_Pin|VL53L0X_TRIGGER_Pin|LASER_TRIGGER_Pin, GPIO_PIN_SET);
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8004a80:	482d      	ldr	r0, [pc, #180]	; (8004b38 <MX_GPIO_Init+0x134>)
 8004a82:	f7fd f8ed 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VL53L1X_TRIGGER_Pin|SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_SET);
 8004a86:	2201      	movs	r2, #1
 8004a88:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8004a8c:	482b      	ldr	r0, [pc, #172]	; (8004b3c <MX_GPIO_Init+0x138>)
 8004a8e:	f7fd f8e7 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_RESET);
 8004a92:	2200      	movs	r2, #0
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	4829      	ldr	r0, [pc, #164]	; (8004b3c <MX_GPIO_Init+0x138>)
 8004a98:	f7fd f8e2 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004aa2:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <MX_GPIO_Init+0x13c>)
 8004aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aaa:	f107 0314 	add.w	r3, r7, #20
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4824      	ldr	r0, [pc, #144]	; (8004b44 <MX_GPIO_Init+0x140>)
 8004ab2:	f7fc ff53 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin|VL53L0X_INT_Pin;
 8004ab6:	2330      	movs	r3, #48	; 0x30
 8004ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <MX_GPIO_Init+0x144>)
 8004abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	481b      	ldr	r0, [pc, #108]	; (8004b38 <MX_GPIO_Init+0x134>)
 8004aca:	f7fc ff47 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SHARP_BIG_TRIGGER_Pin|SHARP_SMALL_2_TRIGGER_Pin|VL53L0X_TRIGGER_Pin|LASER_TRIGGER_Pin;
 8004ace:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 8004ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004adc:	2301      	movs	r3, #1
 8004ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4814      	ldr	r0, [pc, #80]	; (8004b38 <MX_GPIO_Init+0x134>)
 8004ae8:	f7fc ff38 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VL53L1X_TRIGGER_Pin|SHARP_SMALL_1_TRIGGER_Pin|TFMini_TRIGGER_Pin;
 8004aec:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8004af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af2:	2301      	movs	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004afa:	2301      	movs	r3, #1
 8004afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afe:	f107 0314 	add.w	r3, r7, #20
 8004b02:	4619      	mov	r1, r3
 8004b04:	480d      	ldr	r0, [pc, #52]	; (8004b3c <MX_GPIO_Init+0x138>)
 8004b06:	f7fc ff29 	bl	800195c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	200a      	movs	r0, #10
 8004b10:	f7fc fabb 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004b14:	200a      	movs	r0, #10
 8004b16:	f7fc fad4 	bl	80010c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2017      	movs	r0, #23
 8004b20:	f7fc fab3 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b24:	2017      	movs	r0, #23
 8004b26:	f7fc facc 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 8004b2a:	bf00      	nop
 8004b2c:	3728      	adds	r7, #40	; 0x28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40020000 	.word	0x40020000
 8004b3c:	40020400 	.word	0x40020400
 8004b40:	10110000 	.word	0x10110000
 8004b44:	40020800 	.word	0x40020800
 8004b48:	10210000 	.word	0x10210000

08004b4c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b52:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <MX_I2C1_Init+0x58>)
 8004b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004b56:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <MX_I2C1_Init+0x5c>)
 8004b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b62:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b7c:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b88:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <MX_I2C1_Init+0x54>)
 8004b8a:	f7fd f8ad 	bl	8001ce8 <HAL_I2C_Init>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004b94:	2143      	movs	r1, #67	; 0x43
 8004b96:	4805      	ldr	r0, [pc, #20]	; (8004bac <MX_I2C1_Init+0x60>)
 8004b98:	f000 fafa 	bl	8005190 <_Error_Handler>
  }

}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	200009f8 	.word	0x200009f8
 8004ba4:	40005400 	.word	0x40005400
 8004ba8:	00061a80 	.word	0x00061a80
 8004bac:	080114d8 	.word	0x080114d8

08004bb0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8004bb4:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <MX_I2C3_Init+0x58>)
 8004bb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <MX_I2C3_Init+0x5c>)
 8004bbe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bd2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004bec:	4805      	ldr	r0, [pc, #20]	; (8004c04 <MX_I2C3_Init+0x54>)
 8004bee:	f7fd f87b 	bl	8001ce8 <HAL_I2C_Init>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004bf8:	2156      	movs	r1, #86	; 0x56
 8004bfa:	4805      	ldr	r0, [pc, #20]	; (8004c10 <MX_I2C3_Init+0x60>)
 8004bfc:	f000 fac8 	bl	8005190 <_Error_Handler>
  }

}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200009a4 	.word	0x200009a4
 8004c08:	40005c00 	.word	0x40005c00
 8004c0c:	00061a80 	.word	0x00061a80
 8004c10:	080114d8 	.word	0x080114d8

08004c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2d      	ldr	r2, [pc, #180]	; (8004cd8 <HAL_I2C_MspInit+0xc4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d11f      	bne.n	8004c66 <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = VL53L0X_SCL_Pin|VL53L0X_SDA_Pin;
 8004c26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c2c:	2312      	movs	r3, #18
 8004c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c30:	2301      	movs	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c34:	2303      	movs	r3, #3
 8004c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c38:	2304      	movs	r3, #4
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4619      	mov	r1, r3
 8004c42:	4826      	ldr	r0, [pc, #152]	; (8004cdc <HAL_I2C_MspInit+0xc8>)
 8004c44:	f7fc fe8a 	bl	800195c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <HAL_I2C_MspInit+0xcc>)
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_I2C_MspInit+0xcc>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c56:	6413      	str	r3, [r2, #64]	; 0x40
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <HAL_I2C_MspInit+0xcc>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004c64:	e034      	b.n	8004cd0 <HAL_I2C_MspInit+0xbc>
  else if(i2cHandle->Instance==I2C3)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ce4 <HAL_I2C_MspInit+0xd0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d12f      	bne.n	8004cd0 <HAL_I2C_MspInit+0xbc>
    GPIO_InitStruct.Pin = VL53L1X_SDA_Pin;
 8004c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c76:	2312      	movs	r3, #18
 8004c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c82:	2304      	movs	r3, #4
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VL53L1X_SDA_GPIO_Port, &GPIO_InitStruct);
 8004c86:	f107 0314 	add.w	r3, r7, #20
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4816      	ldr	r0, [pc, #88]	; (8004ce8 <HAL_I2C_MspInit+0xd4>)
 8004c8e:	f7fc fe65 	bl	800195c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VL53L1X_SCL_Pin;
 8004c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c98:	2312      	movs	r3, #18
 8004c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VL53L1X_SCL_GPIO_Port, &GPIO_InitStruct);
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4619      	mov	r1, r3
 8004cae:	480f      	ldr	r0, [pc, #60]	; (8004cec <HAL_I2C_MspInit+0xd8>)
 8004cb0:	f7fc fe54 	bl	800195c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <HAL_I2C_MspInit+0xcc>)
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_I2C_MspInit+0xcc>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_I2C_MspInit+0xcc>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	3728      	adds	r7, #40	; 0x28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40005400 	.word	0x40005400
 8004cdc:	40020400 	.word	0x40020400
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40005c00 	.word	0x40005c00
 8004ce8:	40020800 	.word	0x40020800
 8004cec:	40020000 	.word	0x40020000

08004cf0 <_write>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	2332      	movs	r3, #50	; 0x32
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	4803      	ldr	r0, [pc, #12]	; (8004d14 <_write+0x24>)
 8004d06:	f7fe fbe5 	bl	80034d4 <HAL_UART_Transmit>
	return len;
 8004d0a:	687b      	ldr	r3, [r7, #4]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000cdc 	.word	0x20000cdc

08004d18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == VL53L1X_INT_Pin) {
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d104      	bne.n	8004d32 <HAL_GPIO_EXTI_Callback+0x1a>
		++VL53L1X_callback_counter;
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_GPIO_EXTI_Callback+0x28>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <HAL_GPIO_EXTI_Callback+0x28>)
 8004d30:	6013      	str	r3, [r2, #0]
	}
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	200008dc 	.word	0x200008dc

08004d44 <HAL_UART_RxCpltCallback>:
int message_buff2[50];
int message_size2 = 0;

uint16_t temp_data[9];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b090      	sub	sp, #64	; 0x40
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <HAL_UART_RxCpltCallback+0x74>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d12d      	bne.n	8004db0 <HAL_UART_RxCpltCallback+0x6c>
		uint8_t buffer[50];
		uint16_t size = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	87fb      	strh	r3, [r7, #62]	; 0x3e

		switch (received) {
 8004d58:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <HAL_UART_RxCpltCallback+0x78>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b78      	cmp	r3, #120	; 0x78
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_RxCpltCallback+0x2e>
 8004d60:	2b7a      	cmp	r3, #122	; 0x7a
 8004d62:	d10d      	bne.n	8004d80 <HAL_UART_RxCpltCallback+0x3c>
		case 122:
			++read_flag;
 8004d64:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <HAL_UART_RxCpltCallback+0x7c>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <HAL_UART_RxCpltCallback+0x7c>)
 8004d6e:	701a      	strb	r2, [r3, #0]
			break;
 8004d70:	e012      	b.n	8004d98 <HAL_UART_RxCpltCallback+0x54>

		case 120:
			++laser_flag;
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_UART_RxCpltCallback+0x80>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_UART_RxCpltCallback+0x80>)
 8004d7c:	701a      	strb	r2, [r3, #0]
			break;
 8004d7e:	e00b      	b.n	8004d98 <HAL_UART_RxCpltCallback+0x54>

		default:
			size = sprintf(buffer, "Odebrano nieznany znak: %c\n\r", received);
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <HAL_UART_RxCpltCallback+0x78>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	f107 030c 	add.w	r3, r7, #12
 8004d8a:	490f      	ldr	r1, [pc, #60]	; (8004dc8 <HAL_UART_RxCpltCallback+0x84>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f00b ff87 	bl	8010ca0 <siprintf>
 8004d92:	4603      	mov	r3, r0
 8004d94:	87fb      	strh	r3, [r7, #62]	; 0x3e
			break;
 8004d96:	bf00      	nop
		}
		HAL_UART_Transmit_IT(&huart2, buffer, size);
 8004d98:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004d9a:	f107 030c 	add.w	r3, r7, #12
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4805      	ldr	r0, [pc, #20]	; (8004db8 <HAL_UART_RxCpltCallback+0x74>)
 8004da2:	f7fe fc2f 	bl	8003604 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &received, 1);
 8004da6:	2201      	movs	r2, #1
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_UART_RxCpltCallback+0x78>)
 8004daa:	4803      	ldr	r0, [pc, #12]	; (8004db8 <HAL_UART_RxCpltCallback+0x74>)
 8004dac:	f7fe fc6f 	bl	800368e <HAL_UART_Receive_IT>

	}
}
 8004db0:	bf00      	nop
 8004db2:	3740      	adds	r7, #64	; 0x40
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000cdc 	.word	0x20000cdc
 8004dbc:	200008e0 	.word	0x200008e0
 8004dc0:	200008e1 	.word	0x200008e1
 8004dc4:	200008e2 	.word	0x200008e2
 8004dc8:	080114e8 	.word	0x080114e8

08004dcc <simultaneous_read>:
				temp_data[3], temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
		HAL_UART_Transmit_IT(&huart2, message_buff2, message_size2);
	}
}

void simultaneous_read(uint8_t samples_amount, uint8_t delay_time_ms) {
 8004dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dce:	b08d      	sub	sp, #52	; 0x34
 8004dd0:	af08      	add	r7, sp, #32
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	71fb      	strb	r3, [r7, #7]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71bb      	strb	r3, [r7, #6]
	int i, j;
	my_VL53L0X_init();
 8004ddc:	f7ff fb6c 	bl	80044b8 <my_VL53L0X_init>
	my_VL53L1X_init();
 8004de0:	f7ff fc4c 	bl	800467c <my_VL53L1X_init>

	for (j = 0; j < samples_amount; ++j) {
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	e0bb      	b.n	8004f62 <simultaneous_read+0x196>

		HAL_GPIO_WritePin(VL53L0X_TRIGGER_GPIO_Port, VL53L0X_TRIGGER_Pin, GPIO_PIN_RESET);
 8004dea:	2200      	movs	r2, #0
 8004dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004df0:	4860      	ldr	r0, [pc, #384]	; (8004f74 <simultaneous_read+0x1a8>)
 8004df2:	f7fc ff35 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53L1X_TRIGGER_GPIO_Port, VL53L1X_TRIGGER_Pin, GPIO_PIN_RESET);
 8004df6:	2200      	movs	r2, #0
 8004df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dfc:	485e      	ldr	r0, [pc, #376]	; (8004f78 <simultaneous_read+0x1ac>)
 8004dfe:	f7fc ff2f 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SHARP_SMALL_1_TRIGGER_GPIO_Port, SHARP_SMALL_1_TRIGGER_Pin, GPIO_PIN_RESET);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2140      	movs	r1, #64	; 0x40
 8004e06:	485c      	ldr	r0, [pc, #368]	; (8004f78 <simultaneous_read+0x1ac>)
 8004e08:	f7fc ff2a 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SHARP_SMALL_2_TRIGGER_GPIO_Port, SHARP_SMALL_2_TRIGGER_Pin, GPIO_PIN_RESET);
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	4858      	ldr	r0, [pc, #352]	; (8004f74 <simultaneous_read+0x1a8>)
 8004e12:	f7fc ff25 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SHARP_BIG_TRIGGER_GPIO_Port, SHARP_BIG_TRIGGER_Pin, GPIO_PIN_RESET);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2140      	movs	r1, #64	; 0x40
 8004e1a:	4856      	ldr	r0, [pc, #344]	; (8004f74 <simultaneous_read+0x1a8>)
 8004e1c:	f7fc ff20 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TFMini_TRIGGER_GPIO_Port, TFMini_TRIGGER_Pin, GPIO_PIN_RESET);
 8004e20:	2200      	movs	r2, #0
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	4854      	ldr	r0, [pc, #336]	; (8004f78 <simultaneous_read+0x1ac>)
 8004e26:	f7fc ff1b 	bl	8001c60 <HAL_GPIO_WritePin>
		HAL_Delay(delay_time_ms);
 8004e2a:	79bb      	ldrb	r3, [r7, #6]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb fc21 	bl	8000674 <HAL_Delay>

		PSD_read();
 8004e32:	f000 f9d3 	bl	80051dc <PSD_read>
		lidar_read();
 8004e36:	f7ff faaf 	bl	8004398 <lidar_read>
		my_VL53L0X_read();
 8004e3a:	f7ff fbe9 	bl	8004610 <my_VL53L0X_read>
		my_VL53L1X_read();
 8004e3e:	f7ff fc91 	bl	8004764 <my_VL53L1X_read>

		temp_data[1] = PSD_short_distance_cm(sharp_short_1_a, sharp_short_1_b);
 8004e42:	4b4e      	ldr	r3, [pc, #312]	; (8004f7c <simultaneous_read+0x1b0>)
 8004e44:	edd3 7a00 	vldr	s15, [r3]
 8004e48:	4b4d      	ldr	r3, [pc, #308]	; (8004f80 <simultaneous_read+0x1b4>)
 8004e4a:	ed93 7a00 	vldr	s14, [r3]
 8004e4e:	eef0 0a47 	vmov.f32	s1, s14
 8004e52:	eeb0 0a67 	vmov.f32	s0, s15
 8004e56:	f000 f9d7 	bl	8005208 <PSD_short_distance_cm>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b49      	ldr	r3, [pc, #292]	; (8004f84 <simultaneous_read+0x1b8>)
 8004e60:	805a      	strh	r2, [r3, #2]
		temp_data[2] = PSD_short2_distance_cm(sharp_short_2_a, sharp_short_2_b);
 8004e62:	4b49      	ldr	r3, [pc, #292]	; (8004f88 <simultaneous_read+0x1bc>)
 8004e64:	edd3 7a00 	vldr	s15, [r3]
 8004e68:	4b48      	ldr	r3, [pc, #288]	; (8004f8c <simultaneous_read+0x1c0>)
 8004e6a:	ed93 7a00 	vldr	s14, [r3]
 8004e6e:	eef0 0a47 	vmov.f32	s1, s14
 8004e72:	eeb0 0a67 	vmov.f32	s0, s15
 8004e76:	f000 f9eb 	bl	8005250 <PSD_short2_distance_cm>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b41      	ldr	r3, [pc, #260]	; (8004f84 <simultaneous_read+0x1b8>)
 8004e80:	809a      	strh	r2, [r3, #4]
		temp_data[3] = PSD_big_distance_cm(sharp_big_a, sharp_big_b);
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <simultaneous_read+0x1c4>)
 8004e84:	edd3 7a00 	vldr	s15, [r3]
 8004e88:	4b42      	ldr	r3, [pc, #264]	; (8004f94 <simultaneous_read+0x1c8>)
 8004e8a:	ed93 7a00 	vldr	s14, [r3]
 8004e8e:	eef0 0a47 	vmov.f32	s1, s14
 8004e92:	eeb0 0a67 	vmov.f32	s0, s15
 8004e96:	f000 fa01 	bl	800529c <PSD_big_distance_cm>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4b39      	ldr	r3, [pc, #228]	; (8004f84 <simultaneous_read+0x1b8>)
 8004ea0:	80da      	strh	r2, [r3, #6]
		temp_data[4] = lidar_distance_cm();
 8004ea2:	f7ff faf1 	bl	8004488 <lidar_distance_cm>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <simultaneous_read+0x1b8>)
 8004eac:	811a      	strh	r2, [r3, #8]
		temp_data[5] = my_VL53L0X_distance_mm();
 8004eae:	f7ff fbd1 	bl	8004654 <my_VL53L0X_distance_mm>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <simultaneous_read+0x1b8>)
 8004eb8:	815a      	strh	r2, [r3, #10]
		temp_data[6] = my_VL53L1X_distance_mm();
 8004eba:	f7ff fc85 	bl	80047c8 <my_VL53L1X_distance_mm>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <simultaneous_read+0x1b8>)
 8004ec4:	819a      	strh	r2, [r3, #12]

		for (i = 0; i < 8; ++i)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e00c      	b.n	8004ee6 <simultaneous_read+0x11a>
			temp_data[8] += temp_data[i];
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <simultaneous_read+0x1b8>)
 8004ece:	8a1a      	ldrh	r2, [r3, #16]
 8004ed0:	492c      	ldr	r1, [pc, #176]	; (8004f84 <simultaneous_read+0x1b8>)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ed8:	4413      	add	r3, r2
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <simultaneous_read+0x1b8>)
 8004ede:	821a      	strh	r2, [r3, #16]
		for (i = 0; i < 8; ++i)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b07      	cmp	r3, #7
 8004eea:	ddef      	ble.n	8004ecc <simultaneous_read+0x100>

		temp_data[8] &= 0xFF;
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <simultaneous_read+0x1b8>)
 8004eee:	8a1b      	ldrh	r3, [r3, #16]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <simultaneous_read+0x1b8>)
 8004ef6:	821a      	strh	r2, [r3, #16]
		 message_size = sprintf(message_buff, "%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3], temp_data[4],
		 temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
		 HAL_UART_Transmit_IT(&huart2, message_buff, message_size);
		 */

		message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2],
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <simultaneous_read+0x1b8>)
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	469e      	mov	lr, r3
 8004efe:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f00:	885b      	ldrh	r3, [r3, #2]
 8004f02:	469c      	mov	ip, r3
 8004f04:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f06:	889b      	ldrh	r3, [r3, #4]
 8004f08:	461a      	mov	r2, r3
				temp_data[3], temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f0c:	88db      	ldrh	r3, [r3, #6]
		message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2],
 8004f0e:	4619      	mov	r1, r3
				temp_data[3], temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8004f10:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f12:	891b      	ldrh	r3, [r3, #8]
		message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2],
 8004f14:	4618      	mov	r0, r3
				temp_data[3], temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f18:	895b      	ldrh	r3, [r3, #10]
		message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2],
 8004f1a:	461c      	mov	r4, r3
				temp_data[3], temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f1e:	899b      	ldrh	r3, [r3, #12]
		message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2],
 8004f20:	461d      	mov	r5, r3
				temp_data[3], temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8004f22:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f24:	89db      	ldrh	r3, [r3, #14]
		message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2],
 8004f26:	461e      	mov	r6, r3
				temp_data[3], temp_data[4], temp_data[5], temp_data[6], temp_data[7], temp_data[8]);
 8004f28:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <simultaneous_read+0x1b8>)
 8004f2a:	8a1b      	ldrh	r3, [r3, #16]
		message_size2 = sprintf(message_buff2, "%04d %04d %04d %04d %04d %04d %04d %04d %04d\r\n", temp_data[0], temp_data[1], temp_data[2],
 8004f2c:	9306      	str	r3, [sp, #24]
 8004f2e:	9605      	str	r6, [sp, #20]
 8004f30:	9504      	str	r5, [sp, #16]
 8004f32:	9403      	str	r4, [sp, #12]
 8004f34:	9002      	str	r0, [sp, #8]
 8004f36:	9101      	str	r1, [sp, #4]
 8004f38:	9200      	str	r2, [sp, #0]
 8004f3a:	4663      	mov	r3, ip
 8004f3c:	4672      	mov	r2, lr
 8004f3e:	4916      	ldr	r1, [pc, #88]	; (8004f98 <simultaneous_read+0x1cc>)
 8004f40:	4816      	ldr	r0, [pc, #88]	; (8004f9c <simultaneous_read+0x1d0>)
 8004f42:	f00b fead 	bl	8010ca0 <siprintf>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <simultaneous_read+0x1d4>)
 8004f4a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, message_buff2, message_size2);
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <simultaneous_read+0x1d4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	4911      	ldr	r1, [pc, #68]	; (8004f9c <simultaneous_read+0x1d0>)
 8004f56:	4813      	ldr	r0, [pc, #76]	; (8004fa4 <simultaneous_read+0x1d8>)
 8004f58:	f7fe fb54 	bl	8003604 <HAL_UART_Transmit_IT>
	for (j = 0; j < samples_amount; ++j) {
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	79fa      	ldrb	r2, [r7, #7]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	f73f af3f 	bgt.w	8004dea <simultaneous_read+0x1e>
	}
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f74:	40020000 	.word	0x40020000
 8004f78:	40020400 	.word	0x40020400
 8004f7c:	20000014 	.word	0x20000014
 8004f80:	20000018 	.word	0x20000018
 8004f84:	20000a54 	.word	0x20000a54
 8004f88:	2000001c 	.word	0x2000001c
 8004f8c:	20000020 	.word	0x20000020
 8004f90:	20000024 	.word	0x20000024
 8004f94:	20000028 	.word	0x20000028
 8004f98:	08011508 	.word	0x08011508
 8004f9c:	20000a78 	.word	0x20000a78
 8004fa0:	200008e4 	.word	0x200008e4
 8004fa4:	20000cdc 	.word	0x20000cdc

08004fa8 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 8004fa8:	b5b0      	push	{r4, r5, r7, lr}
 8004faa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004fac:	f7fb faf0 	bl	8000590 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004fb0:	f000 f874 	bl	800509c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004fb4:	f7ff fd26 	bl	8004a04 <MX_GPIO_Init>
	MX_DMA_Init();
 8004fb8:	f7ff fcf4 	bl	80049a4 <MX_DMA_Init>
	MX_ADC1_Init();
 8004fbc:	f7ff fc1c 	bl	80047f8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8004fc0:	f7ff fdc4 	bl	8004b4c <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8004fc4:	f000 fb50 	bl	8005668 <MX_USART6_UART_Init>
	MX_I2C3_Init();
 8004fc8:	f7ff fdf2 	bl	8004bb0 <MX_I2C3_Init>
	MX_USART2_UART_Init();
 8004fcc:	f000 fb1e 	bl	800560c <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8004fd0:	f000 faee 	bl	80055b0 <MX_USART1_UART_Init>
	MX_SPI3_Init();
 8004fd4:	f000 f988 	bl	80052e8 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8004fd8:	2064      	movs	r0, #100	; 0x64
 8004fda:	f7fb fb4b 	bl	8000674 <HAL_Delay>
	PSD_init();
 8004fde:	f000 f8dd 	bl	800519c <PSD_init>
	lidar_init();
 8004fe2:	f7ff f9b7 	bl	8004354 <lidar_init>
	HAL_UART_Receive_IT(&huart2, &received, 1);
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4922      	ldr	r1, [pc, #136]	; (8005074 <main+0xcc>)
 8004fea:	4823      	ldr	r0, [pc, #140]	; (8005078 <main+0xd0>)
 8004fec:	f7fe fb4f 	bl	800368e <HAL_UART_Receive_IT>
	printf("Program has been started\r\n");
 8004ff0:	4822      	ldr	r0, [pc, #136]	; (800507c <main+0xd4>)
 8004ff2:	f00b fe3d 	bl	8010c70 <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	temp_data[0] = 105; //frame header
 8004ff6:	4b22      	ldr	r3, [pc, #136]	; (8005080 <main+0xd8>)
 8004ff8:	2269      	movs	r2, #105	; 0x69
 8004ffa:	801a      	strh	r2, [r3, #0]
	temp_data[7] = 0; //temp sonar val
 8004ffc:	4b20      	ldr	r3, [pc, #128]	; (8005080 <main+0xd8>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	81da      	strh	r2, [r3, #14]

	while (1) {

		if (read_flag != 0) {
 8005002:	4b20      	ldr	r3, [pc, #128]	; (8005084 <main+0xdc>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d023      	beq.n	8005052 <main+0xaa>
			//sequential_read(10, 20);
			simultaneous_read(10,20);
 800500a:	2114      	movs	r1, #20
 800500c:	200a      	movs	r0, #10
 800500e:	f7ff fedd 	bl	8004dcc <simultaneous_read>

			HAL_Delay(20);
 8005012:	2014      	movs	r0, #20
 8005014:	f7fb fb2e 	bl	8000674 <HAL_Delay>
			read_flag = 0;
 8005018:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <main+0xdc>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
			message_size2 = sprintf(message_buff2, "--------------------------------------------\r\n");
 800501e:	4a1a      	ldr	r2, [pc, #104]	; (8005088 <main+0xe0>)
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <main+0xe4>)
 8005022:	4614      	mov	r4, r2
 8005024:	461d      	mov	r5, r3
 8005026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800502a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800502c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800502e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005032:	c407      	stmia	r4!, {r0, r1, r2}
 8005034:	8023      	strh	r3, [r4, #0]
 8005036:	3402      	adds	r4, #2
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	7023      	strb	r3, [r4, #0]
 800503c:	222e      	movs	r2, #46	; 0x2e
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <main+0xe8>)
 8005040:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_buff2, message_size2);
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <main+0xe8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	490f      	ldr	r1, [pc, #60]	; (8005088 <main+0xe0>)
 800504c:	480a      	ldr	r0, [pc, #40]	; (8005078 <main+0xd0>)
 800504e:	f7fe fad9 	bl	8003604 <HAL_UART_Transmit_IT>
		}

		if (laser_flag != 0) {
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <main+0xec>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <main+0xc2>
			HAL_GPIO_TogglePin(LASER_TRIGGER_GPIO_Port, LASER_TRIGGER_Pin);
 800505a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800505e:	480e      	ldr	r0, [pc, #56]	; (8005098 <main+0xf0>)
 8005060:	f7fc fe17 	bl	8001c92 <HAL_GPIO_TogglePin>
			laser_flag = 0;
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <main+0xec>)
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(10);
 800506a:	200a      	movs	r0, #10
 800506c:	f7fb fb02 	bl	8000674 <HAL_Delay>
		if (read_flag != 0) {
 8005070:	e7c7      	b.n	8005002 <main+0x5a>
 8005072:	bf00      	nop
 8005074:	200008e0 	.word	0x200008e0
 8005078:	20000cdc 	.word	0x20000cdc
 800507c:	08011538 	.word	0x08011538
 8005080:	20000a54 	.word	0x20000a54
 8005084:	200008e1 	.word	0x200008e1
 8005088:	20000a78 	.word	0x20000a78
 800508c:	08011554 	.word	0x08011554
 8005090:	200008e4 	.word	0x200008e4
 8005094:	200008e2 	.word	0x200008e2
 8005098:	40020000 	.word	0x40020000

0800509c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b094      	sub	sp, #80	; 0x50
 80050a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	4a36      	ldr	r2, [pc, #216]	; (8005180 <SystemClock_Config+0xe4>)
 80050a8:	4b35      	ldr	r3, [pc, #212]	; (8005180 <SystemClock_Config+0xe4>)
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40
 80050b2:	4b33      	ldr	r3, [pc, #204]	; (8005180 <SystemClock_Config+0xe4>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	4a30      	ldr	r2, [pc, #192]	; (8005184 <SystemClock_Config+0xe8>)
 80050c4:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <SystemClock_Config+0xe8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80050cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <SystemClock_Config+0xe8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80050de:	2302      	movs	r3, #2
 80050e0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050e2:	2301      	movs	r3, #1
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 80050e6:	2310      	movs	r3, #16
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050ea:	2302      	movs	r3, #2
 80050ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80050ee:	2300      	movs	r3, #0
 80050f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80050f2:	2310      	movs	r3, #16
 80050f4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80050f6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80050fa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80050fc:	2304      	movs	r3, #4
 80050fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8005100:	2307      	movs	r3, #7
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005104:	f107 0320 	add.w	r3, r7, #32
 8005108:	4618      	mov	r0, r3
 800510a:	f7fd fd03 	bl	8002b14 <HAL_RCC_OscConfig>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <SystemClock_Config+0x82>
		_Error_Handler(__FILE__, __LINE__);
 8005114:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8005118:	481b      	ldr	r0, [pc, #108]	; (8005188 <SystemClock_Config+0xec>)
 800511a:	f000 f839 	bl	8005190 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800511e:	230f      	movs	r3, #15
 8005120:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005122:	2302      	movs	r3, #2
 8005124:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800512a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800512e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	2102      	movs	r1, #2
 800513a:	4618      	mov	r0, r3
 800513c:	f7fd ff2c 	bl	8002f98 <HAL_RCC_ClockConfig>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <SystemClock_Config+0xb4>
		_Error_Handler(__FILE__, __LINE__);
 8005146:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800514a:	480f      	ldr	r0, [pc, #60]	; (8005188 <SystemClock_Config+0xec>)
 800514c:	f000 f820 	bl	8005190 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8005150:	f7fe f8dc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <SystemClock_Config+0xf0>)
 8005158:	fba3 2302 	umull	r2, r3, r3, r2
 800515c:	099b      	lsrs	r3, r3, #6
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb ffbd 	bl	80010de <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005164:	2004      	movs	r0, #4
 8005166:	f7fb ffc7 	bl	80010f8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800516a:	2200      	movs	r2, #0
 800516c:	2100      	movs	r1, #0
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	f7fb ff8a 	bl	800108a <HAL_NVIC_SetPriority>
}
 8005176:	bf00      	nop
 8005178:	3750      	adds	r7, #80	; 0x50
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800
 8005184:	40007000 	.word	0x40007000
 8005188:	08011584 	.word	0x08011584
 800518c:	10624dd3 	.word	0x10624dd3

08005190 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 800519a:	e7fe      	b.n	800519a <_Error_Handler+0xa>

0800519c <PSD_init>:
#include "psd.h"

bool PSD_init() {
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
	psd_raw_values = malloc(number_of_sensors * sizeof(uint16_t));
 80051a0:	2303      	movs	r3, #3
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f00b faa9 	bl	80106fc <malloc>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <PSD_init+0x34>)
 80051b0:	601a      	str	r2, [r3, #0]

	if (psd_raw_values == NULL) {
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <PSD_init+0x34>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <PSD_init+0x28>
		printf("psd malloc failed\r\n");
 80051ba:	4806      	ldr	r0, [pc, #24]	; (80051d4 <PSD_init+0x38>)
 80051bc:	f00b fd58 	bl	8010c70 <puts>
		return false;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e003      	b.n	80051cc <PSD_init+0x30>
	}
	printf("psd malloc succeeded\r\n");
 80051c4:	4804      	ldr	r0, [pc, #16]	; (80051d8 <PSD_init+0x3c>)
 80051c6:	f00b fd53 	bl	8010c70 <puts>
	return true;
 80051ca:	2301      	movs	r3, #1
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000a50 	.word	0x20000a50
 80051d4:	08011594 	.word	0x08011594
 80051d8:	080115a8 	.word	0x080115a8

080051dc <PSD_read>:
	free(psd_raw_values);
	printf("psd free succeeded\r\n");
	return true;
}

void PSD_read() {
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) psd_raw_values, number_of_sensors);
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <PSD_read+0x24>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2203      	movs	r2, #3
 80051e6:	4619      	mov	r1, r3
 80051e8:	4806      	ldr	r0, [pc, #24]	; (8005204 <PSD_read+0x28>)
 80051ea:	f7fb faa9 	bl	8000740 <HAL_ADC_Start_DMA>
	HAL_Delay(20);
 80051ee:	2014      	movs	r0, #20
 80051f0:	f7fb fa40 	bl	8000674 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1);
 80051f4:	4803      	ldr	r0, [pc, #12]	; (8005204 <PSD_read+0x28>)
 80051f6:	f7fb fb75 	bl	80008e4 <HAL_ADC_Stop_DMA>
}
 80051fa:	bf00      	nop
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000a50 	.word	0x20000a50
 8005204:	200008fc 	.word	0x200008fc

08005208 <PSD_short_distance_cm>:

uint16_t PSD_big_value() {
	return psd_raw_values[2];
}

uint16_t PSD_short_distance_cm(float a, float b) {
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005212:	edc7 0a02 	vstr	s1, [r7, #8]
	return (uint16_t) ((a/psd_raw_values[0])-b);
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <PSD_short_distance_cm+0x44>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005224:	edd7 6a03 	vldr	s13, [r7, #12]
 8005228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005238:	edc7 7a01 	vstr	s15, [r7, #4]
 800523c:	88bb      	ldrh	r3, [r7, #4]
 800523e:	b29b      	uxth	r3, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000a50 	.word	0x20000a50

08005250 <PSD_short2_distance_cm>:

uint16_t PSD_short2_distance_cm(float a, float b) {
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	ed87 0a03 	vstr	s0, [r7, #12]
 800525a:	edc7 0a02 	vstr	s1, [r7, #8]
	return (uint16_t) ((a/psd_raw_values[1])-b);
 800525e:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <PSD_short2_distance_cm+0x48>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3302      	adds	r3, #2
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526e:	edd7 6a03 	vldr	s13, [r7, #12]
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	edd7 7a02 	vldr	s15, [r7, #8]
 800527a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800527e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005282:	edc7 7a01 	vstr	s15, [r7, #4]
 8005286:	88bb      	ldrh	r3, [r7, #4]
 8005288:	b29b      	uxth	r3, r3
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000a50 	.word	0x20000a50

0800529c <PSD_big_distance_cm>:

uint16_t PSD_big_distance_cm(float a, float b) {
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80052a6:	edc7 0a02 	vstr	s1, [r7, #8]
	return (uint16_t) ((a/psd_raw_values[2])-b);
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <PSD_big_distance_cm+0x48>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3304      	adds	r3, #4
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052ba:	edd7 6a03 	vldr	s13, [r7, #12]
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80052c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80052d2:	88bb      	ldrh	r3, [r7, #4]
 80052d4:	b29b      	uxth	r3, r3
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000a50 	.word	0x20000a50

080052e8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80052ec:	4b18      	ldr	r3, [pc, #96]	; (8005350 <MX_SPI3_Init+0x68>)
 80052ee:	4a19      	ldr	r2, [pc, #100]	; (8005354 <MX_SPI3_Init+0x6c>)
 80052f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80052f2:	4b17      	ldr	r3, [pc, #92]	; (8005350 <MX_SPI3_Init+0x68>)
 80052f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <MX_SPI3_Init+0x68>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005300:	4b13      	ldr	r3, [pc, #76]	; (8005350 <MX_SPI3_Init+0x68>)
 8005302:	2200      	movs	r2, #0
 8005304:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <MX_SPI3_Init+0x68>)
 8005308:	2200      	movs	r2, #0
 800530a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <MX_SPI3_Init+0x68>)
 800530e:	2200      	movs	r2, #0
 8005310:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <MX_SPI3_Init+0x68>)
 8005314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005318:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <MX_SPI3_Init+0x68>)
 800531c:	2200      	movs	r2, #0
 800531e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <MX_SPI3_Init+0x68>)
 8005322:	2200      	movs	r2, #0
 8005324:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <MX_SPI3_Init+0x68>)
 8005328:	2200      	movs	r2, #0
 800532a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <MX_SPI3_Init+0x68>)
 800532e:	2200      	movs	r2, #0
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005332:	4b07      	ldr	r3, [pc, #28]	; (8005350 <MX_SPI3_Init+0x68>)
 8005334:	220a      	movs	r2, #10
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005338:	4805      	ldr	r0, [pc, #20]	; (8005350 <MX_SPI3_Init+0x68>)
 800533a:	f7fe f81b 	bl	8003374 <HAL_SPI_Init>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <MX_SPI3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005344:	2145      	movs	r1, #69	; 0x45
 8005346:	4804      	ldr	r0, [pc, #16]	; (8005358 <MX_SPI3_Init+0x70>)
 8005348:	f7ff ff22 	bl	8005190 <_Error_Handler>
  }

}
 800534c:	bf00      	nop
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000b44 	.word	0x20000b44
 8005354:	40003c00 	.word	0x40003c00
 8005358:	080115f4 	.word	0x080115f4

0800535c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <HAL_SPI_MspInit+0x58>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d11e      	bne.n	80053ac <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <HAL_SPI_MspInit+0x5c>)
 8005374:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_SPI_MspInit+0x5c>)
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537c:	6413      	str	r3, [r2, #64]	; 0x40
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_SPI_MspInit+0x5c>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = SONAR_SCK_Pin|SONAR_MISO_Pin|SONAR_MOSI_Pin;
 800538a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800538e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005390:	2302      	movs	r3, #2
 8005392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005398:	2303      	movs	r3, #3
 800539a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800539c:	2306      	movs	r3, #6
 800539e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a0:	f107 030c 	add.w	r3, r7, #12
 80053a4:	4619      	mov	r1, r3
 80053a6:	4805      	ldr	r0, [pc, #20]	; (80053bc <HAL_SPI_MspInit+0x60>)
 80053a8:	f7fc fad8 	bl	800195c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80053ac:	bf00      	nop
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40003c00 	.word	0x40003c00
 80053b8:	40023800 	.word	0x40023800
 80053bc:	40020800 	.word	0x40020800

080053c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	4a25      	ldr	r2, [pc, #148]	; (8005460 <HAL_MspInit+0xa0>)
 80053cc:	4b24      	ldr	r3, [pc, #144]	; (8005460 <HAL_MspInit+0xa0>)
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053d4:	6453      	str	r3, [r2, #68]	; 0x44
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_MspInit+0xa0>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <HAL_MspInit+0xa0>)
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <HAL_MspInit+0xa0>)
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6413      	str	r3, [r2, #64]	; 0x40
 80053f2:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <HAL_MspInit+0xa0>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80053fe:	2007      	movs	r0, #7
 8005400:	f7fb fe38 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005404:	2200      	movs	r2, #0
 8005406:	2100      	movs	r1, #0
 8005408:	f06f 000b 	mvn.w	r0, #11
 800540c:	f7fb fe3d 	bl	800108a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005410:	2200      	movs	r2, #0
 8005412:	2100      	movs	r1, #0
 8005414:	f06f 000a 	mvn.w	r0, #10
 8005418:	f7fb fe37 	bl	800108a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800541c:	2200      	movs	r2, #0
 800541e:	2100      	movs	r1, #0
 8005420:	f06f 0009 	mvn.w	r0, #9
 8005424:	f7fb fe31 	bl	800108a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005428:	2200      	movs	r2, #0
 800542a:	2100      	movs	r1, #0
 800542c:	f06f 0004 	mvn.w	r0, #4
 8005430:	f7fb fe2b 	bl	800108a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005434:	2200      	movs	r2, #0
 8005436:	2100      	movs	r1, #0
 8005438:	f06f 0003 	mvn.w	r0, #3
 800543c:	f7fb fe25 	bl	800108a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005440:	2200      	movs	r2, #0
 8005442:	2100      	movs	r1, #0
 8005444:	f06f 0001 	mvn.w	r0, #1
 8005448:	f7fb fe1f 	bl	800108a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800544c:	2200      	movs	r2, #0
 800544e:	2100      	movs	r1, #0
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	f7fb fe19 	bl	800108a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800

08005464 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005476:	e7fe      	b.n	8005476 <HardFault_Handler+0x4>

08005478 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800547c:	e7fe      	b.n	800547c <MemManage_Handler+0x4>

0800547e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800547e:	b480      	push	{r7}
 8005480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005482:	e7fe      	b.n	8005482 <BusFault_Handler+0x4>

08005484 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005488:	e7fe      	b.n	8005488 <UsageFault_Handler+0x4>

0800548a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800548a:	b480      	push	{r7}
 800548c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054b8:	f7fb f8bc 	bl	8000634 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80054bc:	f7fb fe38 	bl	8001130 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054c0:	bf00      	nop
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80054c8:	2010      	movs	r0, #16
 80054ca:	f7fc fbf5 	bl	8001cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80054d6:	2020      	movs	r0, #32
 80054d8:	f7fc fbee 	bl	8001cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054dc:	bf00      	nop
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054e4:	4802      	ldr	r0, [pc, #8]	; (80054f0 <USART2_IRQHandler+0x10>)
 80054e6:	f7fe f9fb 	bl	80038e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000cdc 	.word	0x20000cdc

080054f4 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054f8:	4802      	ldr	r0, [pc, #8]	; (8005504 <DMA2_Stream0_IRQHandler+0x10>)
 80054fa:	f7fb ffc7 	bl	800148c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000944 	.word	0x20000944

08005508 <DMA2_Stream1_IRQHandler>:

/**
* @brief This function handles DMA2 stream1 global interrupt.
*/
void DMA2_Stream1_IRQHandler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800550c:	4802      	ldr	r0, [pc, #8]	; (8005518 <DMA2_Stream1_IRQHandler+0x10>)
 800550e:	f7fb ffbd 	bl	800148c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000b9c 	.word	0x20000b9c

0800551c <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <DMA2_Stream6_IRQHandler+0x10>)
 8005522:	f7fb ffb3 	bl	800148c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000bfc 	.word	0x20000bfc

08005530 <USART6_IRQHandler>:

/**
* @brief This function handles USART6 global interrupt.
*/
void USART6_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <USART6_IRQHandler+0x10>)
 8005536:	f7fe f9d3 	bl	80038e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000c9c 	.word	0x20000c9c

08005544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <SystemInit+0x60>)
 800554a:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <SystemInit+0x60>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005558:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <SystemInit+0x64>)
 800555a:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <SystemInit+0x64>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005564:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <SystemInit+0x64>)
 8005566:	2200      	movs	r2, #0
 8005568:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800556a:	4a0f      	ldr	r2, [pc, #60]	; (80055a8 <SystemInit+0x64>)
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <SystemInit+0x64>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <SystemInit+0x64>)
 800557c:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <SystemInit+0x68>)
 800557e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005580:	4a09      	ldr	r2, [pc, #36]	; (80055a8 <SystemInit+0x64>)
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <SystemInit+0x64>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <SystemInit+0x64>)
 800558e:	2200      	movs	r2, #0
 8005590:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005592:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <SystemInit+0x60>)
 8005594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005598:	609a      	str	r2, [r3, #8]
#endif
}
 800559a:	bf00      	nop
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000ed00 	.word	0xe000ed00
 80055a8:	40023800 	.word	0x40023800
 80055ac:	24003010 	.word	0x24003010

080055b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <MX_USART1_UART_Init+0x54>)
 80055b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055c8:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055d6:	220c      	movs	r2, #12
 80055d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055dc:	2200      	movs	r2, #0
 80055de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055e6:	4806      	ldr	r0, [pc, #24]	; (8005600 <MX_USART1_UART_Init+0x50>)
 80055e8:	f7fd ff27 	bl	800343a <HAL_UART_Init>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <MX_USART1_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80055f2:	2147      	movs	r1, #71	; 0x47
 80055f4:	4804      	ldr	r0, [pc, #16]	; (8005608 <MX_USART1_UART_Init+0x58>)
 80055f6:	f7ff fdcb 	bl	8005190 <_Error_Handler>
  }

}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000c5c 	.word	0x20000c5c
 8005604:	40011000 	.word	0x40011000
 8005608:	08011604 	.word	0x08011604

0800560c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005610:	4b12      	ldr	r3, [pc, #72]	; (800565c <MX_USART2_UART_Init+0x50>)
 8005612:	4a13      	ldr	r2, [pc, #76]	; (8005660 <MX_USART2_UART_Init+0x54>)
 8005614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <MX_USART2_UART_Init+0x50>)
 8005618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800561c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800561e:	4b0f      	ldr	r3, [pc, #60]	; (800565c <MX_USART2_UART_Init+0x50>)
 8005620:	2200      	movs	r2, #0
 8005622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005624:	4b0d      	ldr	r3, [pc, #52]	; (800565c <MX_USART2_UART_Init+0x50>)
 8005626:	2200      	movs	r2, #0
 8005628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <MX_USART2_UART_Init+0x50>)
 800562c:	2200      	movs	r2, #0
 800562e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <MX_USART2_UART_Init+0x50>)
 8005632:	220c      	movs	r2, #12
 8005634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <MX_USART2_UART_Init+0x50>)
 8005638:	2200      	movs	r2, #0
 800563a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <MX_USART2_UART_Init+0x50>)
 800563e:	2200      	movs	r2, #0
 8005640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005642:	4806      	ldr	r0, [pc, #24]	; (800565c <MX_USART2_UART_Init+0x50>)
 8005644:	f7fd fef9 	bl	800343a <HAL_UART_Init>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800564e:	215a      	movs	r1, #90	; 0x5a
 8005650:	4804      	ldr	r0, [pc, #16]	; (8005664 <MX_USART2_UART_Init+0x58>)
 8005652:	f7ff fd9d 	bl	8005190 <_Error_Handler>
  }

}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000cdc 	.word	0x20000cdc
 8005660:	40004400 	.word	0x40004400
 8005664:	08011604 	.word	0x08011604

08005668 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 800566e:	4a13      	ldr	r2, [pc, #76]	; (80056bc <MX_USART6_UART_Init+0x54>)
 8005670:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005672:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 8005674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005678:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800567a:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005680:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 8005682:	2200      	movs	r2, #0
 8005684:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 8005688:	2200      	movs	r2, #0
 800568a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 800568e:	220c      	movs	r2, #12
 8005690:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 8005694:	2200      	movs	r2, #0
 8005696:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005698:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 800569a:	2200      	movs	r2, #0
 800569c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800569e:	4806      	ldr	r0, [pc, #24]	; (80056b8 <MX_USART6_UART_Init+0x50>)
 80056a0:	f7fd fecb 	bl	800343a <HAL_UART_Init>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <MX_USART6_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80056aa:	216d      	movs	r1, #109	; 0x6d
 80056ac:	4804      	ldr	r0, [pc, #16]	; (80056c0 <MX_USART6_UART_Init+0x58>)
 80056ae:	f7ff fd6f 	bl	8005190 <_Error_Handler>
  }

}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000c9c 	.word	0x20000c9c
 80056bc:	40011400 	.word	0x40011400
 80056c0:	08011604 	.word	0x08011604

080056c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a6f      	ldr	r2, [pc, #444]	; (8005890 <HAL_UART_MspInit+0x1cc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d11f      	bne.n	8005716 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	4a6e      	ldr	r2, [pc, #440]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 80056dc:	4b6d      	ldr	r3, [pc, #436]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	f043 0310 	orr.w	r3, r3, #16
 80056e4:	6453      	str	r3, [r2, #68]	; 0x44
 80056e6:	4b6b      	ldr	r3, [pc, #428]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ROTATION_TX_Pin|ROTATION_RX_Pin;
 80056f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f8:	2302      	movs	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056fc:	2301      	movs	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005700:	2303      	movs	r3, #3
 8005702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005704:	2307      	movs	r3, #7
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	4619      	mov	r1, r3
 800570e:	4862      	ldr	r0, [pc, #392]	; (8005898 <HAL_UART_MspInit+0x1d4>)
 8005710:	f7fc f924 	bl	800195c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005714:	e0b8      	b.n	8005888 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a60      	ldr	r2, [pc, #384]	; (800589c <HAL_UART_MspInit+0x1d8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d126      	bne.n	800576e <HAL_UART_MspInit+0xaa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	4a5b      	ldr	r2, [pc, #364]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 8005726:	4b5b      	ldr	r3, [pc, #364]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572e:	6413      	str	r3, [r2, #64]	; 0x40
 8005730:	4b58      	ldr	r3, [pc, #352]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_DEBUG_TX_Pin|PC_DEBUG_RX_Pin;
 800573c:	230c      	movs	r3, #12
 800573e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005740:	2302      	movs	r3, #2
 8005742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005744:	2301      	movs	r3, #1
 8005746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005748:	2303      	movs	r3, #3
 800574a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800574c:	2307      	movs	r3, #7
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4619      	mov	r1, r3
 8005756:	4850      	ldr	r0, [pc, #320]	; (8005898 <HAL_UART_MspInit+0x1d4>)
 8005758:	f7fc f900 	bl	800195c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800575c:	2200      	movs	r2, #0
 800575e:	2100      	movs	r1, #0
 8005760:	2026      	movs	r0, #38	; 0x26
 8005762:	f7fb fc92 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005766:	2026      	movs	r0, #38	; 0x26
 8005768:	f7fb fcab 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 800576c:	e08c      	b.n	8005888 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART6)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a4b      	ldr	r2, [pc, #300]	; (80058a0 <HAL_UART_MspInit+0x1dc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	f040 8087 	bne.w	8005888 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	4a45      	ldr	r2, [pc, #276]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 8005780:	4b44      	ldr	r3, [pc, #272]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f043 0320 	orr.w	r3, r3, #32
 8005788:	6453      	str	r3, [r2, #68]	; 0x44
 800578a:	4b42      	ldr	r3, [pc, #264]	; (8005894 <HAL_UART_MspInit+0x1d0>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TFMini_TX_Pin|TFMini_RX_Pin;
 8005796:	23c0      	movs	r3, #192	; 0xc0
 8005798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579a:	2302      	movs	r3, #2
 800579c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800579e:	2301      	movs	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a2:	2303      	movs	r3, #3
 80057a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80057a6:	2308      	movs	r3, #8
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057aa:	f107 0314 	add.w	r3, r7, #20
 80057ae:	4619      	mov	r1, r3
 80057b0:	483c      	ldr	r0, [pc, #240]	; (80058a4 <HAL_UART_MspInit+0x1e0>)
 80057b2:	f7fc f8d3 	bl	800195c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80057b6:	4b3c      	ldr	r3, [pc, #240]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057b8:	4a3c      	ldr	r2, [pc, #240]	; (80058ac <HAL_UART_MspInit+0x1e8>)
 80057ba:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80057bc:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057be:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80057c2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057c4:	4b38      	ldr	r3, [pc, #224]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ca:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057d6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057d8:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057da:	2200      	movs	r2, #0
 80057dc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057de:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80057e4:	4b30      	ldr	r3, [pc, #192]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80057ec:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057f2:	4b2d      	ldr	r3, [pc, #180]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80057f8:	482b      	ldr	r0, [pc, #172]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 80057fa:	f7fb fca7 	bl	800114c <HAL_DMA_Init>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_UART_MspInit+0x148>
      _Error_Handler(__FILE__, __LINE__);
 8005804:	21c8      	movs	r1, #200	; 0xc8
 8005806:	482a      	ldr	r0, [pc, #168]	; (80058b0 <HAL_UART_MspInit+0x1ec>)
 8005808:	f7ff fcc2 	bl	8005190 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a26      	ldr	r2, [pc, #152]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 8005810:	635a      	str	r2, [r3, #52]	; 0x34
 8005812:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <HAL_UART_MspInit+0x1e4>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005818:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 800581a:	4a27      	ldr	r2, [pc, #156]	; (80058b8 <HAL_UART_MspInit+0x1f4>)
 800581c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800581e:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005820:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005824:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 800582e:	2200      	movs	r2, #0
 8005830:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005838:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800583a:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 800583c:	2200      	movs	r2, #0
 800583e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005840:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005842:	2200      	movs	r2, #0
 8005844:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005848:	2200      	movs	r2, #0
 800584a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800584c:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 800584e:	2200      	movs	r2, #0
 8005850:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005854:	2200      	movs	r2, #0
 8005856:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005858:	4816      	ldr	r0, [pc, #88]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 800585a:	f7fb fc77 	bl	800114c <HAL_DMA_Init>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_UART_MspInit+0x1a8>
      _Error_Handler(__FILE__, __LINE__);
 8005864:	21da      	movs	r1, #218	; 0xda
 8005866:	4812      	ldr	r0, [pc, #72]	; (80058b0 <HAL_UART_MspInit+0x1ec>)
 8005868:	f7ff fc92 	bl	8005190 <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a11      	ldr	r2, [pc, #68]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
 8005872:	4a10      	ldr	r2, [pc, #64]	; (80058b4 <HAL_UART_MspInit+0x1f0>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005878:	2200      	movs	r2, #0
 800587a:	2100      	movs	r1, #0
 800587c:	2047      	movs	r0, #71	; 0x47
 800587e:	f7fb fc04 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005882:	2047      	movs	r0, #71	; 0x47
 8005884:	f7fb fc1d 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 8005888:	bf00      	nop
 800588a:	3728      	adds	r7, #40	; 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40011000 	.word	0x40011000
 8005894:	40023800 	.word	0x40023800
 8005898:	40020000 	.word	0x40020000
 800589c:	40004400 	.word	0x40004400
 80058a0:	40011400 	.word	0x40011400
 80058a4:	40020800 	.word	0x40020800
 80058a8:	20000b9c 	.word	0x20000b9c
 80058ac:	40026428 	.word	0x40026428
 80058b0:	08011604 	.word	0x08011604
 80058b4:	20000bfc 	.word	0x20000bfc
 80058b8:	400264a0 	.word	0x400264a0

080058bc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fcfe 	bl	80072ce <VL53L0X_get_offset_calibration_data_micro_meter>
 80058d2:	4603      	mov	r3, r0
 80058d4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80058d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	b096      	sub	sp, #88	; 0x58
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80058f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80058fa:	2200      	movs	r2, #0
 80058fc:	2188      	movs	r1, #136	; 0x88
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f005 f802 	bl	800a908 <VL53L0X_WrByte>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005918:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005922:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a9e      	ldr	r2, [pc, #632]	; (8005ba4 <VL53L0X_DataInit+0x2c0>)
 800592a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a9d      	ldr	r2, [pc, #628]	; (8005ba8 <VL53L0X_DataInit+0x2c4>)
 8005932:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fac2 	bl	8005ecc <VL53L0X_GetDeviceParameters>
 8005948:	4603      	mov	r3, r0
 800594a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800594e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005952:	2b00      	cmp	r3, #0
 8005954:	d112      	bne.n	800597c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005956:	2300      	movs	r3, #0
 8005958:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800595a:	2300      	movs	r3, #0
 800595c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f103 0410 	add.w	r4, r3, #16
 8005964:	f107 0510 	add.w	r5, r7, #16
 8005968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800596a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800596c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800596e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005974:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2264      	movs	r2, #100	; 0x64
 8005980:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f44f 7261 	mov.w	r2, #900	; 0x384
 800598a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005994:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800599e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80059aa:	2201      	movs	r2, #1
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f004 ffaa 	bl	800a908 <VL53L0X_WrByte>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059bc:	4313      	orrs	r3, r2
 80059be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80059c2:	2201      	movs	r2, #1
 80059c4:	21ff      	movs	r1, #255	; 0xff
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f004 ff9e 	bl	800a908 <VL53L0X_WrByte>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80059da:	2200      	movs	r2, #0
 80059dc:	2100      	movs	r1, #0
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f004 ff92 	bl	800a908 <VL53L0X_WrByte>
 80059e4:	4603      	mov	r3, r0
 80059e6:	461a      	mov	r2, r3
 80059e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80059f2:	f107 030f 	add.w	r3, r7, #15
 80059f6:	461a      	mov	r2, r3
 80059f8:	2191      	movs	r1, #145	; 0x91
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f005 f824 	bl	800aa48 <VL53L0X_RdByte>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005a0e:	7bfa      	ldrb	r2, [r7, #15]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005a16:	2201      	movs	r2, #1
 8005a18:	2100      	movs	r1, #0
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f004 ff74 	bl	800a908 <VL53L0X_WrByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	21ff      	movs	r1, #255	; 0xff
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f004 ff68 	bl	800a908 <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2180      	movs	r1, #128	; 0x80
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f004 ff5c 	bl	800a908 <VL53L0X_WrByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005a5e:	2300      	movs	r3, #0
 8005a60:	653b      	str	r3, [r7, #80]	; 0x50
 8005a62:	e014      	b.n	8005a8e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005a64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d114      	bne.n	8005a96 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2201      	movs	r2, #1
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fd83 	bl	8006580 <VL53L0X_SetLimitCheckEnable>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a90:	2b05      	cmp	r3, #5
 8005a92:	dde7      	ble.n	8005a64 <VL53L0X_DataInit+0x180>
 8005a94:	e000      	b.n	8005a98 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005a96:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005a98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d107      	bne.n	8005ab0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fd6b 	bl	8006580 <VL53L0X_SetLimitCheckEnable>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005ab0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2103      	movs	r1, #3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fd5f 	bl	8006580 <VL53L0X_SetLimitCheckEnable>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005ac8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fd53 	bl	8006580 <VL53L0X_SetLimitCheckEnable>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005ae0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d107      	bne.n	8005af8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2105      	movs	r1, #5
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fd47 	bl	8006580 <VL53L0X_SetLimitCheckEnable>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005af8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005b00:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005b04:	2100      	movs	r1, #0
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fdea 	bl	80066e0 <VL53L0X_SetLimitCheckValue>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005b12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d108      	bne.n	8005b2c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b1e:	2101      	movs	r1, #1
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fddd 	bl	80066e0 <VL53L0X_SetLimitCheckValue>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d108      	bne.n	8005b46 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005b34:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005b38:	2102      	movs	r1, #2
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fdd0 	bl	80066e0 <VL53L0X_SetLimitCheckValue>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b46:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2103      	movs	r1, #3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fdc4 	bl	80066e0 <VL53L0X_SetLimitCheckValue>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b6e:	22ff      	movs	r2, #255	; 0xff
 8005b70:	2101      	movs	r1, #1
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f004 fec8 	bl	800a908 <VL53L0X_WrByte>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005b86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005b96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3758      	adds	r7, #88	; 0x58
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	00016b85 	.word	0x00016b85
 8005ba8:	000970a4 	.word	0x000970a4

08005bac <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005bac:	b5b0      	push	{r4, r5, r7, lr}
 8005bae:	b09e      	sub	sp, #120	; 0x78
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005bba:	f107 031c 	add.w	r3, r7, #28
 8005bbe:	2240      	movs	r2, #64	; 0x40
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f00a fdad 	bl	8010722 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005be8:	2101      	movs	r1, #1
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f002 fac5 	bl	800817a <VL53L0X_get_info_from_device>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005bfc:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d80d      	bhi.n	8005c2c <VL53L0X_StaticInit+0x80>
 8005c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d102      	bne.n	8005c1e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d806      	bhi.n	8005c2c <VL53L0X_StaticInit+0x80>
 8005c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10e      	bne.n	8005c44 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c28:	2b0c      	cmp	r3, #12
 8005c2a:	d90b      	bls.n	8005c44 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005c2c:	f107 0218 	add.w	r2, r7, #24
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fd44 	bl	80076c4 <VL53L0X_perform_ref_spad_management>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005c42:	e009      	b.n	8005c58 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 ff45 	bl	8007adc <VL53L0X_set_reference_spads>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005c58:	4b94      	ldr	r3, [pc, #592]	; (8005eac <VL53L0X_StaticInit+0x300>)
 8005c5a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005c5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10f      	bne.n	8005c84 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005c6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005c6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c7e:	e001      	b.n	8005c84 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005c80:	4b8a      	ldr	r3, [pc, #552]	; (8005eac <VL53L0X_StaticInit+0x300>)
 8005c82:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005c84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005c8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f003 fe16 	bl	80098c0 <VL53L0X_load_tuning_settings>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005c9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	2304      	movs	r3, #4
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2100      	movs	r1, #0
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 f93f 	bl	8006f30 <VL53L0X_SetGpioConfig>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cb8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d121      	bne.n	8005d04 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	21ff      	movs	r1, #255	; 0xff
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f004 fe1f 	bl	800a908 <VL53L0X_WrByte>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005cd0:	f107 031a 	add.w	r3, r7, #26
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2184      	movs	r1, #132	; 0x84
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f004 fed6 	bl	800aa8a <VL53L0X_RdWord>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005cec:	2200      	movs	r2, #0
 8005cee:	21ff      	movs	r1, #255	; 0xff
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f004 fe09 	bl	800a908 <VL53L0X_WrByte>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005d0c:	8b7b      	ldrh	r3, [r7, #26]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	461a      	mov	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005d18:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005d20:	f107 031c 	add.w	r3, r7, #28
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f8d0 	bl	8005ecc <VL53L0X_GetDeviceParameters>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8005d32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d110      	bne.n	8005d5c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005d3a:	f107 0319 	add.w	r3, r7, #25
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9ae 	bl	80060a2 <VL53L0X_GetFractionEnable>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005d4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005d54:	7e7a      	ldrb	r2, [r7, #25]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005d5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10e      	bne.n	8005d82 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f103 0410 	add.w	r4, r3, #16
 8005d6a:	f107 051c 	add.w	r5, r7, #28
 8005d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005d82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d111      	bne.n	8005dae <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005d8a:	f107 0319 	add.w	r3, r7, #25
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2101      	movs	r1, #1
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f004 fe58 	bl	800aa48 <VL53L0X_RdByte>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005d9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005da6:	7e7a      	ldrb	r2, [r7, #25]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005dae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d107      	bne.n	8005dc6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005db6:	2200      	movs	r2, #0
 8005db8:	2100      	movs	r1, #0
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9e6 	bl	800618c <VL53L0X_SetSequenceStepEnable>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005dc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d107      	bne.n	8005dde <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f9da 	bl	800618c <VL53L0X_SetSequenceStepEnable>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8005dde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2203      	movs	r2, #3
 8005dea:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005dee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005df6:	f107 0313 	add.w	r3, r7, #19
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9ac 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e12:	7cfa      	ldrb	r2, [r7, #19]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005e22:	f107 0313 	add.w	r3, r7, #19
 8005e26:	461a      	mov	r2, r3
 8005e28:	2101      	movs	r1, #1
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f996 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e3e:	7cfa      	ldrb	r2, [r7, #19]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005e4e:	f107 030c 	add.w	r3, r7, #12
 8005e52:	461a      	mov	r2, r3
 8005e54:	2103      	movs	r1, #3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f002 ff10 	bl	8008c7c <get_sequence_step_timeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d103      	bne.n	8005e72 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005e7a:	f107 030c 	add.w	r3, r7, #12
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2104      	movs	r1, #4
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f002 fefa 	bl	8008c7c <get_sequence_step_timeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3770      	adds	r7, #112	; 0x70
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000030 	.word	0x20000030

08005eb0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005eb8:	239d      	movs	r3, #157	; 0x9d
 8005eba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f8cc 	bl	800607c <VL53L0X_GetDeviceMode>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fac6 	bl	8006488 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d107      	bne.n	8005f26 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	3310      	adds	r3, #16
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fafc 	bl	800651a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff fcc1 	bl	80058bc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d134      	bne.n	8005fb0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	e02a      	b.n	8005fa2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d12a      	bne.n	8005faa <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	b299      	uxth	r1, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	3304      	adds	r3, #4
 8005f64:	461a      	mov	r2, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fc1c 	bl	80067a4 <VL53L0X_GetLimitCheckValue>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d117      	bne.n	8005fae <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	b299      	uxth	r1, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	3318      	adds	r3, #24
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fb83 	bl	8006698 <VL53L0X_GetLimitCheckEnable>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b05      	cmp	r3, #5
 8005fa6:	ddd1      	ble.n	8005f4c <VL53L0X_GetDeviceParameters+0x80>
 8005fa8:	e002      	b.n	8005fb0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005fae:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d107      	bne.n	8005fc8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	333c      	adds	r3, #60	; 0x3c
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fc7e 	bl	80068c0 <VL53L0X_GetWrapAroundCheckEnable>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f895 	bl	8006106 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	2b15      	cmp	r3, #21
 8006000:	d832      	bhi.n	8006068 <VL53L0X_SetDeviceMode+0x7c>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <VL53L0X_SetDeviceMode+0x1c>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006061 	.word	0x08006061
 800600c:	08006061 	.word	0x08006061
 8006010:	08006069 	.word	0x08006069
 8006014:	08006061 	.word	0x08006061
 8006018:	08006069 	.word	0x08006069
 800601c:	08006069 	.word	0x08006069
 8006020:	08006069 	.word	0x08006069
 8006024:	08006069 	.word	0x08006069
 8006028:	08006069 	.word	0x08006069
 800602c:	08006069 	.word	0x08006069
 8006030:	08006069 	.word	0x08006069
 8006034:	08006069 	.word	0x08006069
 8006038:	08006069 	.word	0x08006069
 800603c:	08006069 	.word	0x08006069
 8006040:	08006069 	.word	0x08006069
 8006044:	08006069 	.word	0x08006069
 8006048:	08006069 	.word	0x08006069
 800604c:	08006069 	.word	0x08006069
 8006050:	08006069 	.word	0x08006069
 8006054:	08006069 	.word	0x08006069
 8006058:	08006061 	.word	0x08006061
 800605c:	08006061 	.word	0x08006061
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	741a      	strb	r2, [r3, #16]
		break;
 8006066:	e001      	b.n	800606c <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006068:	23f8      	movs	r3, #248	; 0xf8
 800606a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800606c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7c1a      	ldrb	r2, [r3, #16]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	2109      	movs	r1, #9
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f004 fcc7 	bl	800aa48 <VL53L0X_RdByte>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80060d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f003 fa54 	bl	800959e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80060fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006110:	2300      	movs	r3, #0
 8006112:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f003 fb21 	bl	800975e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
 8006138:	4613      	mov	r3, r2
 800613a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006140:	78ba      	ldrb	r2, [r7, #2]
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f002 ff6b 	bl	8009022 <VL53L0X_set_vcsel_pulse_period>
 800614c:	4603      	mov	r3, r0
 800614e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	460b      	mov	r3, r1
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800616e:	7afb      	ldrb	r3, [r7, #11]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4619      	mov	r1, r3
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f003 f9db 	bl	8009530 <VL53L0X_get_vcsel_pulse_period>
 800617a:	4603      	mov	r3, r0
 800617c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800617e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
 8006198:	4613      	mov	r3, r2
 800619a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80061a8:	f107 030f 	add.w	r3, r7, #15
 80061ac:	461a      	mov	r2, r3
 80061ae:	2101      	movs	r1, #1
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f004 fc49 	bl	800aa48 <VL53L0X_RdByte>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80061be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d159      	bne.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80061c6:	78bb      	ldrb	r3, [r7, #2]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d12b      	bne.n	8006224 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d825      	bhi.n	800621e <VL53L0X_SetSequenceStepEnable+0x92>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061ed 	.word	0x080061ed
 80061dc:	080061f7 	.word	0x080061f7
 80061e0:	08006201 	.word	0x08006201
 80061e4:	0800620b 	.word	0x0800620b
 80061e8:	08006215 	.word	0x08006215
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80061ec:	7dbb      	ldrb	r3, [r7, #22]
 80061ee:	f043 0310 	orr.w	r3, r3, #16
 80061f2:	75bb      	strb	r3, [r7, #22]
				break;
 80061f4:	e041      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80061f6:	7dbb      	ldrb	r3, [r7, #22]
 80061f8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80061fc:	75bb      	strb	r3, [r7, #22]
				break;
 80061fe:	e03c      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006200:	7dbb      	ldrb	r3, [r7, #22]
 8006202:	f043 0304 	orr.w	r3, r3, #4
 8006206:	75bb      	strb	r3, [r7, #22]
				break;
 8006208:	e037      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800620a:	7dbb      	ldrb	r3, [r7, #22]
 800620c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006210:	75bb      	strb	r3, [r7, #22]
				break;
 8006212:	e032      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006214:	7dbb      	ldrb	r3, [r7, #22]
 8006216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800621a:	75bb      	strb	r3, [r7, #22]
				break;
 800621c:	e02d      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800621e:	23fc      	movs	r3, #252	; 0xfc
 8006220:	75fb      	strb	r3, [r7, #23]
 8006222:	e02a      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	2b04      	cmp	r3, #4
 8006228:	d825      	bhi.n	8006276 <VL53L0X_SetSequenceStepEnable+0xea>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006245 	.word	0x08006245
 8006234:	0800624f 	.word	0x0800624f
 8006238:	08006259 	.word	0x08006259
 800623c:	08006263 	.word	0x08006263
 8006240:	0800626d 	.word	0x0800626d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006244:	7dbb      	ldrb	r3, [r7, #22]
 8006246:	f023 0310 	bic.w	r3, r3, #16
 800624a:	75bb      	strb	r3, [r7, #22]
				break;
 800624c:	e015      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800624e:	7dbb      	ldrb	r3, [r7, #22]
 8006250:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006254:	75bb      	strb	r3, [r7, #22]
				break;
 8006256:	e010      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006258:	7dbb      	ldrb	r3, [r7, #22]
 800625a:	f023 0304 	bic.w	r3, r3, #4
 800625e:	75bb      	strb	r3, [r7, #22]
				break;
 8006260:	e00b      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006262:	7dbb      	ldrb	r3, [r7, #22]
 8006264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006268:	75bb      	strb	r3, [r7, #22]
				break;
 800626a:	e006      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800626c:	7dbb      	ldrb	r3, [r7, #22]
 800626e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006272:	75bb      	strb	r3, [r7, #22]
				break;
 8006274:	e001      	b.n	800627a <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006276:	23fc      	movs	r3, #252	; 0xfc
 8006278:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	7dba      	ldrb	r2, [r7, #22]
 800627e:	429a      	cmp	r2, r3
 8006280:	d01e      	beq.n	80062c0 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d107      	bne.n	800629a <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800628a:	7dbb      	ldrb	r3, [r7, #22]
 800628c:	461a      	mov	r2, r3
 800628e:	2101      	movs	r1, #1
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f004 fb39 	bl	800a908 <VL53L0X_WrByte>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800629a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	7dba      	ldrb	r2, [r7, #22]
 80062a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80062aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80062b8:	6939      	ldr	r1, [r7, #16]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff ff10 	bl	80060e0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80062c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	72fb      	strb	r3, [r7, #11]
 80062da:	4613      	mov	r3, r2
 80062dc:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d836      	bhi.n	800635c <sequence_step_enabled+0x90>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <sequence_step_enabled+0x28>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006309 	.word	0x08006309
 80062f8:	0800631b 	.word	0x0800631b
 80062fc:	0800632d 	.word	0x0800632d
 8006300:	0800633f 	.word	0x0800633f
 8006304:	08006351 	.word	0x08006351
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006308:	7abb      	ldrb	r3, [r7, #10]
 800630a:	111b      	asrs	r3, r3, #4
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	b2da      	uxtb	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	701a      	strb	r2, [r3, #0]
		break;
 8006318:	e022      	b.n	8006360 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800631a:	7abb      	ldrb	r3, [r7, #10]
 800631c:	10db      	asrs	r3, r3, #3
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	701a      	strb	r2, [r3, #0]
		break;
 800632a:	e019      	b.n	8006360 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800632c:	7abb      	ldrb	r3, [r7, #10]
 800632e:	109b      	asrs	r3, r3, #2
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	701a      	strb	r2, [r3, #0]
		break;
 800633c:	e010      	b.n	8006360 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800633e:	7abb      	ldrb	r3, [r7, #10]
 8006340:	119b      	asrs	r3, r3, #6
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	701a      	strb	r2, [r3, #0]
		break;
 800634e:	e007      	b.n	8006360 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006350:	7abb      	ldrb	r3, [r7, #10]
 8006352:	09db      	lsrs	r3, r3, #7
 8006354:	b2da      	uxtb	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	701a      	strb	r2, [r3, #0]
		break;
 800635a:	e001      	b.n	8006360 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800635c:	23fc      	movs	r3, #252	; 0xfc
 800635e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006364:	4618      	mov	r0, r3
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006382:	f107 030e 	add.w	r3, r7, #14
 8006386:	461a      	mov	r2, r3
 8006388:	2101      	movs	r1, #1
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f004 fb5c 	bl	800aa48 <VL53L0X_RdByte>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800639c:	7bba      	ldrb	r2, [r7, #14]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2100      	movs	r1, #0
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff ff92 	bl	80062cc <sequence_step_enabled>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80063ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d108      	bne.n	80063c6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80063b4:	7bba      	ldrb	r2, [r7, #14]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	3302      	adds	r3, #2
 80063ba:	2101      	movs	r1, #1
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff85 	bl	80062cc <sequence_step_enabled>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80063c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d108      	bne.n	80063e0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80063ce:	7bba      	ldrb	r2, [r7, #14]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	2102      	movs	r1, #2
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff ff78 	bl	80062cc <sequence_step_enabled>
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80063e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d108      	bne.n	80063fa <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80063e8:	7bba      	ldrb	r2, [r7, #14]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	3303      	adds	r3, #3
 80063ee:	2103      	movs	r1, #3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ff6b 	bl	80062cc <sequence_step_enabled>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80063fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d108      	bne.n	8006414 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006402:	7bba      	ldrb	r2, [r7, #14]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	2104      	movs	r1, #4
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff ff5e 	bl	80062cc <sequence_step_enabled>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006414:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800642e:	f107 030e 	add.w	r3, r7, #14
 8006432:	461a      	mov	r2, r3
 8006434:	21f8      	movs	r1, #248	; 0xf8
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f004 fb27 	bl	800aa8a <VL53L0X_RdWord>
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d112      	bne.n	800646e <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8006448:	89fb      	ldrh	r3, [r7, #14]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d006      	beq.n	800645c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 800644e:	89fb      	ldrh	r3, [r7, #14]
 8006450:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	fb03 f302 	mul.w	r3, r3, r2
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	e001      	b.n	8006460 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	2104      	movs	r1, #4
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f004 fa93 	bl	800a990 <VL53L0X_WrDWord>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800646e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800647c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	461a      	mov	r2, r3
 800649c:	21f8      	movs	r1, #248	; 0xf8
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f004 faf3 	bl	800aa8a <VL53L0X_RdWord>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80064a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d108      	bne.n	80064c2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80064b0:	f107 0308 	add.w	r3, r7, #8
 80064b4:	461a      	mov	r2, r3
 80064b6:	2104      	movs	r1, #4
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f004 fb07 	bl	800aacc <VL53L0X_RdDWord>
 80064be:	4603      	mov	r3, r0
 80064c0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80064ca:	89bb      	ldrh	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	89ba      	ldrh	r2, [r7, #12]
 80064d4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7f1b      	ldrb	r3, [r3, #28]
 8006502:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	7bba      	ldrb	r2, [r7, #14]
 8006508:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800650a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006528:	f107 030e 	add.w	r3, r7, #14
 800652c:	461a      	mov	r2, r3
 800652e:	2120      	movs	r1, #32
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f004 faaa 	bl	800aa8a <VL53L0X_RdWord>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800653a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d118      	bne.n	8006574 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006542:	89fb      	ldrh	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	771a      	strb	r2, [r3, #28]
 800655a:	e00b      	b.n	8006574 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800655c:	89fb      	ldrh	r3, [r7, #14]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006574:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	807b      	strh	r3, [r7, #2]
 800658c:	4613      	mov	r3, r2
 800658e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006590:	2300      	movs	r3, #0
 8006592:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80065a0:	887b      	ldrh	r3, [r7, #2]
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	d902      	bls.n	80065ac <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065a6:	23fc      	movs	r3, #252	; 0xfc
 80065a8:	75fb      	strb	r3, [r7, #23]
 80065aa:	e05b      	b.n	8006664 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80065ac:	787b      	ldrb	r3, [r7, #1]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80065ba:	2301      	movs	r3, #1
 80065bc:	73bb      	strb	r3, [r7, #14]
 80065be:	e00a      	b.n	80065d6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80065c0:	887b      	ldrh	r3, [r7, #2]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	330c      	adds	r3, #12
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80065d6:	887b      	ldrh	r3, [r7, #2]
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d841      	bhi.n	8006660 <VL53L0X_SetLimitCheckEnable+0xe0>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006607 	.word	0x08006607
 80065ec:	0800661d 	.word	0x0800661d
 80065f0:	08006627 	.word	0x08006627
 80065f4:	08006631 	.word	0x08006631
 80065f8:	08006649 	.word	0x08006649

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006604:	e02e      	b.n	8006664 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	2144      	movs	r1, #68	; 0x44
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f004 f99b 	bl	800a94c <VL53L0X_WrWord>
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]

			break;
 800661a:	e023      	b.n	8006664 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7bfa      	ldrb	r2, [r7, #15]
 8006620:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006624:	e01e      	b.n	8006664 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	7bfa      	ldrb	r2, [r7, #15]
 800662a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800662e:	e019      	b.n	8006664 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006636:	7b7b      	ldrb	r3, [r7, #13]
 8006638:	22fe      	movs	r2, #254	; 0xfe
 800663a:	2160      	movs	r1, #96	; 0x60
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f004 f9c1 	bl	800a9c4 <VL53L0X_UpdateByte>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006646:	e00d      	b.n	8006664 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800664e:	7b7b      	ldrb	r3, [r7, #13]
 8006650:	22ef      	movs	r2, #239	; 0xef
 8006652:	2160      	movs	r1, #96	; 0x60
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f004 f9b5 	bl	800a9c4 <VL53L0X_UpdateByte>
 800665a:	4603      	mov	r3, r0
 800665c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800665e:	e001      	b.n	8006664 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006660:	23fc      	movs	r3, #252	; 0xfc
 8006662:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006664:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10f      	bne.n	800668c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800666c:	787b      	ldrb	r3, [r7, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006672:	887b      	ldrh	r3, [r7, #2]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800667e:	e005      	b.n	800668c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006680:	887b      	ldrh	r3, [r7, #2]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4413      	add	r3, r2
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800668c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	460b      	mov	r3, r1
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80066aa:	897b      	ldrh	r3, [r7, #10]
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	d905      	bls.n	80066bc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066b0:	23fc      	movs	r3, #252	; 0xfc
 80066b2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	e008      	b.n	80066ce <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80066bc:	897b      	ldrh	r3, [r7, #10]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	7dba      	ldrb	r2, [r7, #22]
 80066cc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	460b      	mov	r3, r1
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80066f2:	897b      	ldrh	r3, [r7, #10]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80066fe:	7dbb      	ldrb	r3, [r7, #22]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d107      	bne.n	8006714 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006704:	897b      	ldrh	r3, [r7, #10]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	330c      	adds	r3, #12
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	605a      	str	r2, [r3, #4]
 8006712:	e040      	b.n	8006796 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006714:	897b      	ldrh	r3, [r7, #10]
 8006716:	2b05      	cmp	r3, #5
 8006718:	d830      	bhi.n	800677c <VL53L0X_SetLimitCheckValue+0x9c>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <VL53L0X_SetLimitCheckValue+0x40>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006739 	.word	0x08006739
 8006724:	08006741 	.word	0x08006741
 8006728:	08006757 	.word	0x08006757
 800672c:	0800675f 	.word	0x0800675f
 8006730:	08006767 	.word	0x08006767
 8006734:	08006767 	.word	0x08006767

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800673e:	e01f      	b.n	8006780 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006744:	b29b      	uxth	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	2144      	movs	r1, #68	; 0x44
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f004 f8fe 	bl	800a94c <VL53L0X_WrWord>
 8006750:	4603      	mov	r3, r0
 8006752:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006754:	e014      	b.n	8006780 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800675c:	e010      	b.n	8006780 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006764:	e00c      	b.n	8006780 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	2164      	movs	r1, #100	; 0x64
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f004 f8eb 	bl	800a94c <VL53L0X_WrWord>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800677a:	e001      	b.n	8006780 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800677c:	23fc      	movs	r3, #252	; 0xfc
 800677e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006788:	897b      	ldrh	r3, [r7, #10]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	330c      	adds	r3, #12
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop

080067a4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	460b      	mov	r3, r1
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80067ba:	897b      	ldrh	r3, [r7, #10]
 80067bc:	2b05      	cmp	r3, #5
 80067be:	d847      	bhi.n	8006850 <VL53L0X_GetLimitCheckValue+0xac>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <VL53L0X_GetLimitCheckValue+0x24>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067ed 	.word	0x080067ed
 80067d0:	08006813 	.word	0x08006813
 80067d4:	0800681f 	.word	0x0800681f
 80067d8:	0800682b 	.word	0x0800682b
 80067dc:	0800682b 	.word	0x0800682b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	77bb      	strb	r3, [r7, #30]
		break;
 80067ea:	e033      	b.n	8006854 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80067ec:	f107 0316 	add.w	r3, r7, #22
 80067f0:	461a      	mov	r2, r3
 80067f2:	2144      	movs	r1, #68	; 0x44
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f004 f948 	bl	800aa8a <VL53L0X_RdWord>
 80067fa:	4603      	mov	r3, r0
 80067fc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80067fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006806:	8afb      	ldrh	r3, [r7, #22]
 8006808:	025b      	lsls	r3, r3, #9
 800680a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800680c:	2301      	movs	r3, #1
 800680e:	77bb      	strb	r3, [r7, #30]
		break;
 8006810:	e020      	b.n	8006854 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	77bb      	strb	r3, [r7, #30]
		break;
 800681c:	e01a      	b.n	8006854 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	77bb      	strb	r3, [r7, #30]
		break;
 8006828:	e014      	b.n	8006854 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800682a:	f107 0316 	add.w	r3, r7, #22
 800682e:	461a      	mov	r2, r3
 8006830:	2164      	movs	r1, #100	; 0x64
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f004 f929 	bl	800aa8a <VL53L0X_RdWord>
 8006838:	4603      	mov	r3, r0
 800683a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800683c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006844:	8afb      	ldrh	r3, [r7, #22]
 8006846:	025b      	lsls	r3, r3, #9
 8006848:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	77bb      	strb	r3, [r7, #30]
		break;
 800684e:	e001      	b.n	8006854 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006850:	23fc      	movs	r3, #252	; 0xfc
 8006852:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006854:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d12a      	bne.n	80068b2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800685c:	7fbb      	ldrb	r3, [r7, #30]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d124      	bne.n	80068ac <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d110      	bne.n	800688a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006868:	897b      	ldrh	r3, [r7, #10]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	330c      	adds	r3, #12
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800687c:	897b      	ldrh	r3, [r7, #10]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006888:	e013      	b.n	80068b2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006890:	897b      	ldrh	r3, [r7, #10]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	330c      	adds	r3, #12
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800689e:	897b      	ldrh	r3, [r7, #10]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80068aa:	e002      	b.n	80068b2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068b2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop

080068c0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80068ce:	f107 030e 	add.w	r3, r7, #14
 80068d2:	461a      	mov	r2, r3
 80068d4:	2101      	movs	r1, #1
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f004 f8b6 	bl	800aa48 <VL53L0X_RdByte>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80068e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10e      	bne.n	8006906 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80068e8:	7bba      	ldrb	r2, [r7, #14]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	b25b      	sxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da03      	bge.n	8006900 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e002      	b.n	8006906 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006930:	f107 030e 	add.w	r3, r7, #14
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fba0 	bl	800607c <VL53L0X_GetDeviceMode>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d107      	bne.n	8006958 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f898 	bl	8006a84 <VL53L0X_StartMeasurement>
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 fb3d 	bl	8007fe0 <VL53L0X_measurement_poll_for_completion>
 8006966:	4603      	mov	r3, r0
 8006968:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800696a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2203      	movs	r2, #3
 800697c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006980:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006998:	2300      	movs	r3, #0
 800699a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800699c:	2301      	movs	r3, #1
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 fadf 	bl	8007f66 <VL53L0X_perform_ref_calibration>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80069ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069c4:	2300      	movs	r3, #0
 80069c6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80069ce:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80069d0:	7dbb      	ldrb	r3, [r7, #22]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d005      	beq.n	80069e2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80069d6:	7dbb      	ldrb	r3, [r7, #22]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d002      	beq.n	80069e2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80069dc:	7dbb      	ldrb	r3, [r7, #22]
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d147      	bne.n	8006a72 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	f107 0210 	add.w	r2, r7, #16
 80069ea:	2101      	movs	r1, #1
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fbc1 	bl	8007174 <VL53L0X_GetInterruptThresholds>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80069fc:	d803      	bhi.n	8006a06 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80069fe:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006a00:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006a04:	d935      	bls.n	8006a72 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d131      	bne.n	8006a72 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006a14:	491a      	ldr	r1, [pc, #104]	; (8006a80 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 ff52 	bl	80098c0 <VL53L0X_load_tuning_settings>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
 8006a20:	e027      	b.n	8006a72 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006a22:	2204      	movs	r2, #4
 8006a24:	21ff      	movs	r1, #255	; 0xff
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f003 ff6e 	bl	800a908 <VL53L0X_WrByte>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	461a      	mov	r2, r3
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006a36:	2200      	movs	r2, #0
 8006a38:	2170      	movs	r1, #112	; 0x70
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f003 ff64 	bl	800a908 <VL53L0X_WrByte>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	21ff      	movs	r1, #255	; 0xff
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f003 ff5a 	bl	800a908 <VL53L0X_WrByte>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2180      	movs	r1, #128	; 0x80
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f003 ff50 	bl	800a908 <VL53L0X_WrByte>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006a72:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000124 	.word	0x20000124

08006a84 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006a94:	f107 030e 	add.w	r3, r7, #14
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff faee 	bl	800607c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2180      	movs	r1, #128	; 0x80
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f003 ff2f 	bl	800a908 <VL53L0X_WrByte>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006aae:	2201      	movs	r2, #1
 8006ab0:	21ff      	movs	r1, #255	; 0xff
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f003 ff28 	bl	800a908 <VL53L0X_WrByte>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006abc:	2200      	movs	r2, #0
 8006abe:	2100      	movs	r1, #0
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f003 ff21 	bl	800a908 <VL53L0X_WrByte>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	2191      	movs	r1, #145	; 0x91
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f003 ff17 	bl	800a908 <VL53L0X_WrByte>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006ade:	2201      	movs	r2, #1
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f003 ff10 	bl	800a908 <VL53L0X_WrByte>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006aec:	2200      	movs	r2, #0
 8006aee:	21ff      	movs	r1, #255	; 0xff
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f003 ff09 	bl	800a908 <VL53L0X_WrByte>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006afa:	2200      	movs	r2, #0
 8006afc:	2180      	movs	r1, #128	; 0x80
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f003 ff02 	bl	800a908 <VL53L0X_WrByte>
 8006b04:	4603      	mov	r3, r0
 8006b06:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d037      	beq.n	8006b7e <VL53L0X_StartMeasurement+0xfa>
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d04f      	beq.n	8006bb2 <VL53L0X_StartMeasurement+0x12e>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d167      	bne.n	8006be6 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006b16:	2201      	movs	r2, #1
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f003 fef4 	bl	800a908 <VL53L0X_WrByte>
 8006b20:	4603      	mov	r3, r0
 8006b22:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d15d      	bne.n	8006bec <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8006b3a:	f107 030d 	add.w	r3, r7, #13
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2100      	movs	r1, #0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f003 ff80 	bl	800aa48 <VL53L0X_RdByte>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006b52:	7b7a      	ldrb	r2, [r7, #13]
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	4013      	ands	r3, r2
 8006b58:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006b5a:	7bfa      	ldrb	r2, [r7, #15]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d107      	bne.n	8006b70 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8006b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b6e:	d3e1      	bcc.n	8006b34 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b76:	d339      	bcc.n	8006bec <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006b78:	23f9      	movs	r3, #249	; 0xf9
 8006b7a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006b7c:	e036      	b.n	8006bec <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d105      	bne.n	8006b92 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006b86:	2101      	movs	r1, #1
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff ff15 	bl	80069b8 <VL53L0X_CheckAndLoadInterruptSettings>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006b92:	2202      	movs	r2, #2
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f003 feb6 	bl	800a908 <VL53L0X_WrByte>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d123      	bne.n	8006bf0 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2204      	movs	r2, #4
 8006bac:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006bb0:	e01e      	b.n	8006bf0 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d105      	bne.n	8006bc6 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006bba:	2101      	movs	r1, #1
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff fefb 	bl	80069b8 <VL53L0X_CheckAndLoadInterruptSettings>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f003 fe9c 	bl	800a908 <VL53L0X_WrByte>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2204      	movs	r2, #4
 8006be0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006be4:	e006      	b.n	8006bf4 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006be6:	23f8      	movs	r3, #248	; 0xf8
 8006be8:	75fb      	strb	r3, [r7, #23]
 8006bea:	e004      	b.n	8006bf6 <VL53L0X_StartMeasurement+0x172>
		break;
 8006bec:	bf00      	nop
 8006bee:	e002      	b.n	8006bf6 <VL53L0X_StartMeasurement+0x172>
		break;
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <VL53L0X_StartMeasurement+0x172>
		break;
 8006bf4:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006c16:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d112      	bne.n	8006c44 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fb1b 	bl	8007260 <VL53L0X_GetInterruptMaskStatus>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d103      	bne.n	8006c3c <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e01c      	b.n	8006c76 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e018      	b.n	8006c76 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006c44:	f107 030d 	add.w	r3, r7, #13
 8006c48:	461a      	mov	r2, r3
 8006c4a:	2114      	movs	r1, #20
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f003 fefb 	bl	800aa48 <VL53L0X_RdByte>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006c5e:	7b7b      	ldrb	r3, [r7, #13]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	e002      	b.n	8006c76 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006c84:	b5b0      	push	{r4, r5, r7, lr}
 8006c86:	b096      	sub	sp, #88	; 0x58
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006c94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c98:	230c      	movs	r3, #12
 8006c9a:	2114      	movs	r1, #20
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f003 fe0a 	bl	800a8b6 <VL53L0X_ReadMulti>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006ca8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 80d2 	bne.w	8006e56 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006cbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4413      	add	r3, r2
 8006cd0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006cda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4413      	add	r3, r2
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	025b      	lsls	r3, r3, #9
 8006cf0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cf6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006cf8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006d0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d12:	025b      	lsls	r3, r3, #9
 8006d14:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006d1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006d36:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006d38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006d46:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006d4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006d52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d58:	d047      	beq.n	8006dea <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006d5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d5c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d68:	4a58      	ldr	r2, [pc, #352]	; (8006ecc <VL53L0X_GetRangingMeasurementData+0x248>)
 8006d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8006d6e:	1192      	asrs	r2, r2, #6
 8006d70:	17db      	asrs	r3, r3, #31
 8006d72:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006d74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7f1b      	ldrb	r3, [r3, #28]
 8006d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006d86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d02d      	beq.n	8006dea <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006d8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d90:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006d94:	fb02 f303 	mul.w	r3, r2, r3
 8006d98:	121b      	asrs	r3, r3, #8
 8006d9a:	461a      	mov	r2, r3
				if ((SignalRate
 8006d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d10d      	bne.n	8006dbe <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8006da2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d004      	beq.n	8006db4 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8006daa:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006dae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006db2:	e016      	b.n	8006de2 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8006db4:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006db8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006dbc:	e011      	b.n	8006de2 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006dbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc4:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006dc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dca:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006dd2:	121b      	asrs	r3, r3, #8
 8006dd4:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd8:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006dde:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006de2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006de6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006dea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00d      	beq.n	8006e0e <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006df2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006df6:	089b      	lsrs	r3, r3, #2
 8006df8:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006dfe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	019b      	lsls	r3, r3, #6
 8006e06:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	75da      	strb	r2, [r3, #23]
 8006e0c:	e006      	b.n	8006e1c <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006e14:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006e1c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006e20:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006e24:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f003 f9ec 	bl	800a210 <VL53L0X_get_pal_range_status>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006e46:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006e4e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e56:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d12f      	bne.n	8006ebe <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f107 040c 	add.w	r4, r7, #12
 8006e64:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006e78:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006e86:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006e8c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006e92:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006e98:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006e9e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006ea4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006eae:	f107 050c 	add.w	r5, r7, #12
 8006eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006eba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ebe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3750      	adds	r7, #80	; 0x50
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	10624dd3 	.word	0x10624dd3

08006ed0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff f883 	bl	8005fec <VL53L0X_SetDeviceMode>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff fd16 	bl	8006924 <VL53L0X_PerformSingleMeasurement>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d105      	bne.n	8006f10 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff febc 	bl	8006c84 <VL53L0X_GetRangingMeasurementData>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006f18:	2100      	movs	r1, #0
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f960 	bl	80071e0 <VL53L0X_ClearInterruptMask>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	70fb      	strb	r3, [r7, #3]
 8006f42:	460b      	mov	r3, r1
 8006f44:	70bb      	strb	r3, [r7, #2]
 8006f46:	4613      	mov	r3, r2
 8006f48:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006f54:	23f6      	movs	r3, #246	; 0xf6
 8006f56:	73fb      	strb	r3, [r7, #15]
 8006f58:	e105      	b.n	8007166 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006f5a:	78bb      	ldrb	r3, [r7, #2]
 8006f5c:	2b14      	cmp	r3, #20
 8006f5e:	d110      	bne.n	8006f82 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006f60:	7e3b      	ldrb	r3, [r7, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006f66:	2310      	movs	r3, #16
 8006f68:	73bb      	strb	r3, [r7, #14]
 8006f6a:	e001      	b.n	8006f70 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	461a      	mov	r2, r3
 8006f74:	2184      	movs	r1, #132	; 0x84
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f003 fcc6 	bl	800a908 <VL53L0X_WrByte>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	e0f1      	b.n	8007166 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006f82:	78bb      	ldrb	r3, [r7, #2]
 8006f84:	2b15      	cmp	r3, #21
 8006f86:	f040 8097 	bne.w	80070b8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	21ff      	movs	r1, #255	; 0xff
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f003 fcba 	bl	800a908 <VL53L0X_WrByte>
 8006f94:	4603      	mov	r3, r0
 8006f96:	461a      	mov	r2, r3
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f003 fcb0 	bl	800a908 <VL53L0X_WrByte>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	21ff      	movs	r1, #255	; 0xff
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f003 fca6 	bl	800a908 <VL53L0X_WrByte>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	2180      	movs	r1, #128	; 0x80
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f003 fc9c 	bl	800a908 <VL53L0X_WrByte>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006fda:	2202      	movs	r2, #2
 8006fdc:	2185      	movs	r1, #133	; 0x85
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f003 fc92 	bl	800a908 <VL53L0X_WrByte>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006fee:	2204      	movs	r2, #4
 8006ff0:	21ff      	movs	r1, #255	; 0xff
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f003 fc88 	bl	800a908 <VL53L0X_WrByte>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007002:	2200      	movs	r2, #0
 8007004:	21cd      	movs	r1, #205	; 0xcd
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f003 fc7e 	bl	800a908 <VL53L0X_WrByte>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	4313      	orrs	r3, r2
 8007014:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007016:	2211      	movs	r2, #17
 8007018:	21cc      	movs	r1, #204	; 0xcc
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f003 fc74 	bl	800a908 <VL53L0X_WrByte>
 8007020:	4603      	mov	r3, r0
 8007022:	461a      	mov	r2, r3
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	4313      	orrs	r3, r2
 8007028:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800702a:	2207      	movs	r2, #7
 800702c:	21ff      	movs	r1, #255	; 0xff
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f003 fc6a 	bl	800a908 <VL53L0X_WrByte>
 8007034:	4603      	mov	r3, r0
 8007036:	461a      	mov	r2, r3
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	4313      	orrs	r3, r2
 800703c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800703e:	2200      	movs	r2, #0
 8007040:	21be      	movs	r1, #190	; 0xbe
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f003 fc60 	bl	800a908 <VL53L0X_WrByte>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	4313      	orrs	r3, r2
 8007050:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007052:	2206      	movs	r2, #6
 8007054:	21ff      	movs	r1, #255	; 0xff
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f003 fc56 	bl	800a908 <VL53L0X_WrByte>
 800705c:	4603      	mov	r3, r0
 800705e:	461a      	mov	r2, r3
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	4313      	orrs	r3, r2
 8007064:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007066:	2209      	movs	r2, #9
 8007068:	21cc      	movs	r1, #204	; 0xcc
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f003 fc4c 	bl	800a908 <VL53L0X_WrByte>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	4313      	orrs	r3, r2
 8007078:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800707a:	2200      	movs	r2, #0
 800707c:	21ff      	movs	r1, #255	; 0xff
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f003 fc42 	bl	800a908 <VL53L0X_WrByte>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	4313      	orrs	r3, r2
 800708c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800708e:	2201      	movs	r2, #1
 8007090:	21ff      	movs	r1, #255	; 0xff
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f003 fc38 	bl	800a908 <VL53L0X_WrByte>
 8007098:	4603      	mov	r3, r0
 800709a:	461a      	mov	r2, r3
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	4313      	orrs	r3, r2
 80070a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80070a2:	2200      	movs	r2, #0
 80070a4:	2100      	movs	r1, #0
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f003 fc2e 	bl	800a908 <VL53L0X_WrByte>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	73fb      	strb	r3, [r7, #15]
 80070b6:	e056      	b.n	8007166 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80070b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d120      	bne.n	8007102 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80070c0:	787b      	ldrb	r3, [r7, #1]
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d81b      	bhi.n	80070fe <VL53L0X_SetGpioConfig+0x1ce>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <VL53L0X_SetGpioConfig+0x19c>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080070e1 	.word	0x080070e1
 80070d0:	080070e7 	.word	0x080070e7
 80070d4:	080070ed 	.word	0x080070ed
 80070d8:	080070f3 	.word	0x080070f3
 80070dc:	080070f9 	.word	0x080070f9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73bb      	strb	r3, [r7, #14]
				break;
 80070e4:	e00d      	b.n	8007102 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73bb      	strb	r3, [r7, #14]
				break;
 80070ea:	e00a      	b.n	8007102 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80070ec:	2302      	movs	r3, #2
 80070ee:	73bb      	strb	r3, [r7, #14]
				break;
 80070f0:	e007      	b.n	8007102 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80070f2:	2303      	movs	r3, #3
 80070f4:	73bb      	strb	r3, [r7, #14]
				break;
 80070f6:	e004      	b.n	8007102 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80070f8:	2304      	movs	r3, #4
 80070fa:	73bb      	strb	r3, [r7, #14]
				break;
 80070fc:	e001      	b.n	8007102 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 80070fe:	23f5      	movs	r3, #245	; 0xf5
 8007100:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	461a      	mov	r2, r3
 800710e:	210a      	movs	r1, #10
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f003 fbf9 	bl	800a908 <VL53L0X_WrByte>
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800711a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10f      	bne.n	8007142 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007122:	7e3b      	ldrb	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	73bb      	strb	r3, [r7, #14]
 800712c:	e001      	b.n	8007132 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800712e:	2310      	movs	r3, #16
 8007130:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	22ef      	movs	r2, #239	; 0xef
 8007136:	2184      	movs	r1, #132	; 0x84
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f003 fc43 	bl	800a9c4 <VL53L0X_UpdateByte>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	787a      	ldrb	r2, [r7, #1]
 800714e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f83f 	bl	80071e0 <VL53L0X_ClearInterruptMask>
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop

08007174 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	460b      	mov	r3, r1
 8007182:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007184:	2300      	movs	r3, #0
 8007186:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007188:	f107 0314 	add.w	r3, r7, #20
 800718c:	461a      	mov	r2, r3
 800718e:	210e      	movs	r1, #14
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f003 fc7a 	bl	800aa8a <VL53L0X_RdWord>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800719a:	8abb      	ldrh	r3, [r7, #20]
 800719c:	045b      	lsls	r3, r3, #17
 800719e:	461a      	mov	r2, r3
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <VL53L0X_GetInterruptThresholds+0x68>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80071a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10f      	bne.n	80071d0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	461a      	mov	r2, r3
 80071b6:	210c      	movs	r1, #12
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f003 fc66 	bl	800aa8a <VL53L0X_RdWord>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80071c2:	8abb      	ldrh	r3, [r7, #20]
 80071c4:	045b      	lsls	r3, r3, #17
 80071c6:	461a      	mov	r2, r3
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <VL53L0X_GetInterruptThresholds+0x68>)
 80071ca:	4013      	ands	r3, r2
		*pThresholdHigh =
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	1ffe0000 	.word	0x1ffe0000

080071e0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80071f2:	2201      	movs	r2, #1
 80071f4:	210b      	movs	r1, #11
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f003 fb86 	bl	800a908 <VL53L0X_WrByte>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007200:	2200      	movs	r2, #0
 8007202:	210b      	movs	r1, #11
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f003 fb7f 	bl	800a908 <VL53L0X_WrByte>
 800720a:	4603      	mov	r3, r0
 800720c:	461a      	mov	r2, r3
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	4313      	orrs	r3, r2
 8007212:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007214:	f107 030d 	add.w	r3, r7, #13
 8007218:	461a      	mov	r2, r3
 800721a:	2113      	movs	r1, #19
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f003 fc13 	bl	800aa48 <VL53L0X_RdByte>
 8007222:	4603      	mov	r3, r0
 8007224:	461a      	mov	r2, r3
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	4313      	orrs	r3, r2
 800722a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	3301      	adds	r3, #1
 8007230:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007232:	7b7b      	ldrb	r3, [r7, #13]
 8007234:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d803      	bhi.n	800724a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0d3      	beq.n	80071f2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007250:	23f4      	movs	r3, #244	; 0xf4
 8007252:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007254:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800726e:	f107 030e 	add.w	r3, r7, #14
 8007272:	461a      	mov	r2, r3
 8007274:	2113      	movs	r1, #19
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f003 fbe6 	bl	800aa48 <VL53L0X_RdByte>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	f003 0207 	and.w	r2, r3, #7
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	f003 0318 	and.w	r3, r3, #24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007294:	23fa      	movs	r3, #250	; 0xfa
 8007296:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 fa03 	bl	80076c4 <VL53L0X_perform_ref_spad_management>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80072c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80072dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80072e0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80072e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072e6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80072e8:	f107 0308 	add.w	r3, r7, #8
 80072ec:	461a      	mov	r2, r3
 80072ee:	2128      	movs	r1, #40	; 0x28
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f003 fbca 	bl	800aa8a <VL53L0X_RdWord>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80072fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d11e      	bne.n	8007340 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007302:	893b      	ldrh	r3, [r7, #8]
 8007304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007308:	b29b      	uxth	r3, r3
 800730a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800730c:	893b      	ldrh	r3, [r7, #8]
 800730e:	461a      	mov	r2, r3
 8007310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007314:	429a      	cmp	r2, r3
 8007316:	dd0b      	ble.n	8007330 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007318:	893a      	ldrh	r2, [r7, #8]
 800731a:	897b      	ldrh	r3, [r7, #10]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	b29b      	uxth	r3, r3
 8007320:	b21b      	sxth	r3, r3
 8007322:	461a      	mov	r2, r3
					* 250;
 8007324:	23fa      	movs	r3, #250	; 0xfa
 8007326:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	e007      	b.n	8007340 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007330:	893b      	ldrh	r3, [r7, #8]
 8007332:	b21b      	sxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	23fa      	movs	r3, #250	; 0xfa
 8007338:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007340:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800734c:	b480      	push	{r7}
 800734e:	b08b      	sub	sp, #44	; 0x2c
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800735a:	2308      	movs	r3, #8
 800735c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	f04f 32ff 	mov.w	r2, #4294967295
 8007368:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007372:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	fbb3 f2f2 	udiv	r2, r3, r2
 800737c:	69b9      	ldr	r1, [r7, #24]
 800737e:	fb01 f202 	mul.w	r2, r1, r2
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
 800738a:	e030      	b.n	80073ee <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800739a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d11e      	bne.n	80073e0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80073a2:	7ffa      	ldrb	r2, [r7, #31]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	fa42 f303 	asr.w	r3, r2, r3
 80073aa:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80073b0:	e016      	b.n	80073e0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00b      	beq.n	80073d4 <get_next_good_spad+0x88>
				success = 1;
 80073bc:	2301      	movs	r3, #1
 80073be:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	fb02 f203 	mul.w	r2, r2, r3
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	4413      	add	r3, r2
 80073cc:	461a      	mov	r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	601a      	str	r2, [r3, #0]
				break;
 80073d2:	e009      	b.n	80073e8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80073d4:	7ffb      	ldrb	r3, [r7, #31]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	3301      	adds	r3, #1
 80073de:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80073e0:	6a3a      	ldr	r2, [r7, #32]
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3e4      	bcc.n	80073b2 <get_next_good_spad+0x66>
				coarseIndex++) {
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	3301      	adds	r3, #1
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d202      	bcs.n	80073fc <get_next_good_spad+0xb0>
 80073f6:	7fbb      	ldrb	r3, [r7, #30]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0c7      	beq.n	800738c <get_next_good_spad+0x40>
		}
	}
}
 80073fc:	bf00      	nop
 80073fe:	372c      	adds	r7, #44	; 0x2c
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	099b      	lsrs	r3, r3, #6
 8007418:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800741a:	4a07      	ldr	r2, [pc, #28]	; (8007438 <is_aperture+0x30>)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <is_aperture+0x22>
		isAperture = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	200002dc 	.word	0x200002dc

0800743c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800743c:	b480      	push	{r7}
 800743e:	b089      	sub	sp, #36	; 0x24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007448:	2300      	movs	r3, #0
 800744a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800744c:	2308      	movs	r3, #8
 800744e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007462:	69b9      	ldr	r1, [r7, #24]
 8007464:	fb01 f202 	mul.w	r2, r1, r2
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	d302      	bcc.n	800747a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007474:	23ce      	movs	r3, #206	; 0xce
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e010      	b.n	800749c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	4413      	add	r3, r2
 8007480:	68f9      	ldr	r1, [r7, #12]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	440a      	add	r2, r1
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	b251      	sxtb	r1, r2
 800748a:	2001      	movs	r0, #1
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	fa00 f202 	lsl.w	r2, r0, r2
 8007492:	b252      	sxtb	r2, r2
 8007494:	430a      	orrs	r2, r1
 8007496:	b252      	sxtb	r2, r2
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]

	return status;
 800749c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3724      	adds	r7, #36	; 0x24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80074b6:	2306      	movs	r3, #6
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	21b0      	movs	r1, #176	; 0xb0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f003 f9cf 	bl	800a860 <VL53L0X_WriteMulti>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80074c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80074dc:	2306      	movs	r3, #6
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	21b0      	movs	r1, #176	; 0xb0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f003 f9e7 	bl	800a8b6 <VL53L0X_ReadMulti>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80074ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08c      	sub	sp, #48	; 0x30
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	460b      	mov	r3, r1
 8007506:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007508:	2300      	movs	r3, #0
 800750a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800750e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007510:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007514:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007516:	2300      	movs	r3, #0
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
 800751a:	e02b      	b.n	8007574 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800751c:	f107 031c 	add.w	r3, r7, #28
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ff11 	bl	800734c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d103      	bne.n	800753a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007532:	23ce      	movs	r3, #206	; 0xce
 8007534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007538:	e020      	b.n	800757c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	461a      	mov	r2, r3
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	4413      	add	r3, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff ff60 	bl	8007408 <is_aperture>
 8007548:	4603      	mov	r3, r0
 800754a:	461a      	mov	r2, r3
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007552:	23ce      	movs	r3, #206	; 0xce
 8007554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007558:	e010      	b.n	800757c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007562:	6838      	ldr	r0, [r7, #0]
 8007564:	f7ff ff6a 	bl	800743c <enable_spad_bit>
		currentSpad++;
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	3301      	adds	r3, #1
 800756c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	3301      	adds	r3, #1
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
 8007574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007578:	429a      	cmp	r2, r3
 800757a:	d3cf      	bcc.n	800751c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800757c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757e:	6a3a      	ldr	r2, [r7, #32]
 8007580:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007582:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff ff8d 	bl	80074ac <set_ref_spad_map>
 8007592:	4603      	mov	r3, r0
 8007594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007598:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800759c:	2b00      	cmp	r3, #0
 800759e:	d121      	bne.n	80075e4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80075a0:	f107 0314 	add.w	r3, r7, #20
 80075a4:	4619      	mov	r1, r3
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff ff93 	bl	80074d2 <get_ref_spad_map>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80075b6:	e011      	b.n	80075dc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	4413      	add	r3, r2
 80075be:	781a      	ldrb	r2, [r3, #0]
 80075c0:	f107 0114 	add.w	r1, r7, #20
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	440b      	add	r3, r1
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d003      	beq.n	80075d6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80075ce:	23ce      	movs	r3, #206	; 0xce
 80075d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80075d4:	e006      	b.n	80075e4 <enable_ref_spads+0xec>
			}
			i++;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	3301      	adds	r3, #1
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80075dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3e9      	bcc.n	80075b8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80075e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3730      	adds	r7, #48	; 0x30
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800760c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007614:	2b00      	cmp	r3, #0
 8007616:	d107      	bne.n	8007628 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007618:	22c0      	movs	r2, #192	; 0xc0
 800761a:	2101      	movs	r1, #1
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f003 f973 	bl	800a908 <VL53L0X_WrByte>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007628:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800762c:	2b00      	cmp	r3, #0
 800762e:	d108      	bne.n	8007642 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fc4a 	bl	8006ed0 <VL53L0X_PerformSingleRangingMeasurement>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007646:	2b00      	cmp	r3, #0
 8007648:	d107      	bne.n	800765a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800764a:	2201      	movs	r2, #1
 800764c:	21ff      	movs	r1, #255	; 0xff
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f003 f95a 	bl	800a908 <VL53L0X_WrByte>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800765a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800765e:	2b00      	cmp	r3, #0
 8007660:	d107      	bne.n	8007672 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	21b6      	movs	r1, #182	; 0xb6
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f003 fa0f 	bl	800aa8a <VL53L0X_RdWord>
 800766c:	4603      	mov	r3, r0
 800766e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007672:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007676:	2b00      	cmp	r3, #0
 8007678:	d107      	bne.n	800768a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800767a:	2200      	movs	r2, #0
 800767c:	21ff      	movs	r1, #255	; 0xff
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f003 f942 	bl	800a908 <VL53L0X_WrByte>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800768a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800768e:	2b00      	cmp	r3, #0
 8007690:	d112      	bne.n	80076b8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007692:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007696:	461a      	mov	r2, r3
 8007698:	2101      	movs	r1, #1
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f003 f934 	bl	800a908 <VL53L0X_WrByte>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80076a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076b4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80076b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3728      	adds	r7, #40	; 0x28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b09d      	sub	sp, #116	; 0x74
 80076c8:	af06      	add	r7, sp, #24
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80076d6:	23b4      	movs	r3, #180	; 0xb4
 80076d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80076dc:	2303      	movs	r3, #3
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80076e0:	232c      	movs	r3, #44	; 0x2c
 80076e2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80076f0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80076f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80076fe:	2306      	movs	r3, #6
 8007700:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007728:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800772a:	2300      	movs	r3, #0
 800772c:	64bb      	str	r3, [r7, #72]	; 0x48
 800772e:	e009      	b.n	8007744 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	4413      	add	r3, r2
 8007736:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800773e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007740:	3301      	adds	r3, #1
 8007742:	64bb      	str	r3, [r7, #72]	; 0x48
 8007744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	429a      	cmp	r2, r3
 800774a:	d3f1      	bcc.n	8007730 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800774c:	2201      	movs	r2, #1
 800774e:	21ff      	movs	r1, #255	; 0xff
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f003 f8d9 	bl	800a908 <VL53L0X_WrByte>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800775c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007760:	2b00      	cmp	r3, #0
 8007762:	d107      	bne.n	8007774 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007764:	2200      	movs	r2, #0
 8007766:	214f      	movs	r1, #79	; 0x4f
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f003 f8cd 	bl	800a908 <VL53L0X_WrByte>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007774:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007778:	2b00      	cmp	r3, #0
 800777a:	d107      	bne.n	800778c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800777c:	222c      	movs	r2, #44	; 0x2c
 800777e:	214e      	movs	r1, #78	; 0x4e
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f003 f8c1 	bl	800a908 <VL53L0X_WrByte>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800778c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007790:	2b00      	cmp	r3, #0
 8007792:	d107      	bne.n	80077a4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007794:	2200      	movs	r2, #0
 8007796:	21ff      	movs	r1, #255	; 0xff
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f003 f8b5 	bl	800a908 <VL53L0X_WrByte>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80077a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80077ac:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80077b0:	461a      	mov	r2, r3
 80077b2:	21b6      	movs	r1, #182	; 0xb6
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f003 f8a7 	bl	800a908 <VL53L0X_WrByte>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80077c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d107      	bne.n	80077d8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80077c8:	2200      	movs	r2, #0
 80077ca:	2180      	movs	r1, #128	; 0x80
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f003 f89b 	bl	800a908 <VL53L0X_WrByte>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80077d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80077e0:	f107 0210 	add.w	r2, r7, #16
 80077e4:	f107 0111 	add.w	r1, r7, #17
 80077e8:	2300      	movs	r3, #0
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fbbb 	bl	8007f66 <VL53L0X_perform_ref_calibration>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80077f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d121      	bne.n	8007842 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007804:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800780a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800781a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800781e:	f107 0218 	add.w	r2, r7, #24
 8007822:	9204      	str	r2, [sp, #16]
 8007824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007826:	9203      	str	r2, [sp, #12]
 8007828:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800782a:	9202      	str	r2, [sp, #8]
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	4623      	mov	r3, r4
 8007834:	4602      	mov	r2, r0
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fe5e 	bl	80074f8 <enable_ref_spads>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007842:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007846:	2b00      	cmp	r3, #0
 8007848:	d174      	bne.n	8007934 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800784e:	f107 0312 	add.w	r3, r7, #18
 8007852:	4619      	mov	r1, r3
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff fecb 	bl	80075f0 <perform_ref_signal_measurement>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007860:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007864:	2b00      	cmp	r3, #0
 8007866:	d161      	bne.n	800792c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007868:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800786a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800786c:	429a      	cmp	r2, r3
 800786e:	d25d      	bcs.n	800792c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007870:	2300      	movs	r3, #0
 8007872:	64bb      	str	r3, [r7, #72]	; 0x48
 8007874:	e009      	b.n	800788a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800787a:	4413      	add	r3, r2
 800787c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007886:	3301      	adds	r3, #1
 8007888:	64bb      	str	r3, [r7, #72]	; 0x48
 800788a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	429a      	cmp	r2, r3
 8007890:	d3f1      	bcc.n	8007876 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007892:	e002      	b.n	800789a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007896:	3301      	adds	r3, #1
 8007898:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800789a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800789e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a0:	4413      	add	r3, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fdb0 	bl	8007408 <is_aperture>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80078ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d3ee      	bcc.n	8007894 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80078b6:	2301      	movs	r3, #1
 80078b8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80078ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078bc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80078ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80078ce:	f107 0218 	add.w	r2, r7, #24
 80078d2:	9204      	str	r2, [sp, #16]
 80078d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d6:	9203      	str	r2, [sp, #12]
 80078d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078da:	9202      	str	r2, [sp, #8]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4623      	mov	r3, r4
 80078e4:	4602      	mov	r2, r0
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fe06 	bl	80074f8 <enable_ref_spads>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80078f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d11b      	bne.n	8007932 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80078fe:	f107 0312 	add.w	r3, r7, #18
 8007902:	4619      	mov	r1, r3
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7ff fe73 	bl	80075f0 <perform_ref_signal_measurement>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007910:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10c      	bne.n	8007932 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007918:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800791a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800791c:	429a      	cmp	r2, r3
 800791e:	d208      	bcs.n	8007932 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007920:	2301      	movs	r3, #1
 8007922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800792a:	e002      	b.n	8007932 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007930:	e000      	b.n	8007934 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007932:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007934:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 80af 	bne.w	8007a9c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800793e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007940:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007942:	429a      	cmp	r2, r3
 8007944:	f240 80aa 	bls.w	8007a9c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800794a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007958:	f107 031c 	add.w	r3, r7, #28
 800795c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800795e:	4618      	mov	r0, r3
 8007960:	f008 fed4 	bl	801070c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007964:	8a7b      	ldrh	r3, [r7, #18]
 8007966:	461a      	mov	r2, r3
 8007968:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	bfb8      	it	lt
 8007970:	425b      	neglt	r3, r3
 8007972:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800797a:	e086      	b.n	8007a8a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007982:	f107 0314 	add.w	r3, r7, #20
 8007986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800798a:	f7ff fcdf 	bl	800734c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d103      	bne.n	800799e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007996:	23ce      	movs	r3, #206	; 0xce
 8007998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800799c:	e07e      	b.n	8007a9c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800799e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4413      	add	r3, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fd2e 	bl	8007408 <is_aperture>
 80079ac:	4603      	mov	r3, r0
 80079ae:	461a      	mov	r2, r3
 80079b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d003      	beq.n	80079be <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80079bc:	e06e      	b.n	8007a9c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	3301      	adds	r3, #1
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80079ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fd32 	bl	800743c <enable_spad_bit>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80079de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10c      	bne.n	8007a00 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80079e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e8:	3301      	adds	r3, #1
 80079ea:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff fd59 	bl	80074ac <set_ref_spad_map>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007a00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d146      	bne.n	8007a96 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007a08:	f107 0312 	add.w	r3, r7, #18
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f7ff fdee 	bl	80075f0 <perform_ref_signal_measurement>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007a1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d13b      	bne.n	8007a9a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007a22:	8a7b      	ldrh	r3, [r7, #18]
 8007a24:	461a      	mov	r2, r3
 8007a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfb8      	it	lt
 8007a2e:	425b      	neglt	r3, r3
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007a32:	8a7b      	ldrh	r3, [r7, #18]
 8007a34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d21c      	bcs.n	8007a74 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d914      	bls.n	8007a6c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007a42:	f107 031c 	add.w	r3, r7, #28
 8007a46:	4619      	mov	r1, r3
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff fd2f 	bl	80074ac <set_ref_spad_map>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007a5a:	f107 011c 	add.w	r1, r7, #28
 8007a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a60:	4618      	mov	r0, r3
 8007a62:	f008 fe53 	bl	801070c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e00a      	b.n	8007a8a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007a7e:	f107 031c 	add.w	r3, r7, #28
 8007a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a84:	4618      	mov	r0, r3
 8007a86:	f008 fe41 	bl	801070c <memcpy>
		while (!complete) {
 8007a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f43f af74 	beq.w	800797c <VL53L0X_perform_ref_spad_management+0x2b8>
 8007a94:	e002      	b.n	8007a9c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007a9a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d115      	bne.n	8007ad0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007aa8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007ab0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	781a      	ldrb	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007ad0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	375c      	adds	r7, #92	; 0x5c
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd90      	pop	{r4, r7, pc}

08007adc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b093      	sub	sp, #76	; 0x4c
 8007ae0:	af06      	add	r7, sp, #24
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007af4:	23b4      	movs	r3, #180	; 0xb4
 8007af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007afa:	2306      	movs	r3, #6
 8007afc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007afe:	232c      	movs	r3, #44	; 0x2c
 8007b00:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b02:	2201      	movs	r2, #1
 8007b04:	21ff      	movs	r1, #255	; 0xff
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f002 fefe 	bl	800a908 <VL53L0X_WrByte>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007b12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d107      	bne.n	8007b2a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	214f      	movs	r1, #79	; 0x4f
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f002 fef2 	bl	800a908 <VL53L0X_WrByte>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d107      	bne.n	8007b42 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007b32:	222c      	movs	r2, #44	; 0x2c
 8007b34:	214e      	movs	r1, #78	; 0x4e
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f002 fee6 	bl	800a908 <VL53L0X_WrByte>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007b42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d107      	bne.n	8007b5a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	21ff      	movs	r1, #255	; 0xff
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f002 feda 	bl	800a908 <VL53L0X_WrByte>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007b5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007b62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b66:	461a      	mov	r2, r3
 8007b68:	21b6      	movs	r1, #182	; 0xb6
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f002 fecc 	bl	800a908 <VL53L0X_WrByte>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7a:	e009      	b.n	8007b90 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d3f1      	bcc.n	8007b7c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d011      	beq.n	8007bc2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007b9e:	e002      	b.n	8007ba6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	4413      	add	r3, r2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff fc2a 	bl	8007408 <is_aperture>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d103      	bne.n	8007bc2 <VL53L0X_set_reference_spads+0xe6>
 8007bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d3ee      	bcc.n	8007ba0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bd2:	79f9      	ldrb	r1, [r7, #7]
 8007bd4:	f107 0214 	add.w	r2, r7, #20
 8007bd8:	9204      	str	r2, [sp, #16]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	9203      	str	r2, [sp, #12]
 8007bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be0:	9202      	str	r2, [sp, #8]
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4623      	mov	r3, r4
 8007bea:	4602      	mov	r2, r0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7ff fc83 	bl	80074f8 <enable_ref_spads>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007bf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10c      	bne.n	8007c1a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	79fa      	ldrb	r2, [r7, #7]
 8007c16:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007c1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3734      	adds	r7, #52	; 0x34
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd90      	pop	{r4, r7, pc}

08007c26 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	f043 0301 	orr.w	r3, r3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	2100      	movs	r1, #0
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f002 fe5c 	bl	800a908 <VL53L0X_WrByte>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f9bf 	bl	8007fe0 <VL53L0X_measurement_poll_for_completion>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d105      	bne.n	8007c7a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fab5 	bl	80071e0 <VL53L0X_ClearInterruptMask>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007c82:	2200      	movs	r2, #0
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f002 fe3e 	bl	800a908 <VL53L0X_WrByte>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	70fb      	strb	r3, [r7, #3]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70bb      	strb	r3, [r7, #2]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	21ff      	movs	r1, #255	; 0xff
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f002 fe20 	bl	800a908 <VL53L0X_WrByte>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f002 fe16 	bl	800a908 <VL53L0X_WrByte>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	21ff      	movs	r1, #255	; 0xff
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f002 fe0c 	bl	800a908 <VL53L0X_WrByte>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01e      	beq.n	8007d3e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007d00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	21cb      	movs	r1, #203	; 0xcb
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f002 fe9b 	bl	800aa48 <VL53L0X_RdByte>
 8007d12:	4603      	mov	r3, r0
 8007d14:	461a      	mov	r2, r3
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007d1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d02a      	beq.n	8007d7a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007d24:	f107 030e 	add.w	r3, r7, #14
 8007d28:	461a      	mov	r2, r3
 8007d2a:	21ee      	movs	r1, #238	; 0xee
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f002 fe8b 	bl	800aa48 <VL53L0X_RdByte>
 8007d32:	4603      	mov	r3, r0
 8007d34:	461a      	mov	r2, r3
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	e01d      	b.n	8007d7a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007d46:	78bb      	ldrb	r3, [r7, #2]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	21cb      	movs	r1, #203	; 0xcb
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f002 fddb 	bl	800a908 <VL53L0X_WrByte>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461a      	mov	r2, r3
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007d64:	787b      	ldrb	r3, [r7, #1]
 8007d66:	2280      	movs	r2, #128	; 0x80
 8007d68:	21ee      	movs	r1, #238	; 0xee
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f002 fe2a 	bl	800a9c4 <VL53L0X_UpdateByte>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	21ff      	movs	r1, #255	; 0xff
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f002 fdc2 	bl	800a908 <VL53L0X_WrByte>
 8007d84:	4603      	mov	r3, r0
 8007d86:	461a      	mov	r2, r3
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007d8e:	2201      	movs	r2, #1
 8007d90:	2100      	movs	r1, #0
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f002 fdb8 	bl	800a908 <VL53L0X_WrByte>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007da2:	2200      	movs	r2, #0
 8007da4:	21ff      	movs	r1, #255	; 0xff
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f002 fdae 	bl	800a908 <VL53L0X_WrByte>
 8007dac:	4603      	mov	r3, r0
 8007dae:	461a      	mov	r2, r3
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	f023 0310 	bic.w	r3, r3, #16
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	701a      	strb	r2, [r3, #0]

	return Status;
 8007dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b08a      	sub	sp, #40	; 0x28
 8007dd2:	af04      	add	r7, sp, #16
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	4611      	mov	r1, r2
 8007dda:	461a      	mov	r2, r3
 8007ddc:	460b      	mov	r3, r1
 8007dde:	71fb      	strb	r3, [r7, #7]
 8007de0:	4613      	mov	r3, r2
 8007de2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007df8:	79bb      	ldrb	r3, [r7, #6]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007e04:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007e06:	2201      	movs	r2, #1
 8007e08:	2101      	movs	r1, #1
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f002 fd7c 	bl	800a908 <VL53L0X_WrByte>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d105      	bne.n	8007e28 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007e1c:	2140      	movs	r1, #64	; 0x40
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff ff01 	bl	8007c26 <VL53L0X_perform_single_ref_calibration>
 8007e24:	4603      	mov	r3, r0
 8007e26:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d115      	bne.n	8007e5c <VL53L0X_perform_vhv_calibration+0x8e>
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d112      	bne.n	8007e5c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007e36:	7d39      	ldrb	r1, [r7, #20]
 8007e38:	7d7a      	ldrb	r2, [r7, #21]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	2301      	movs	r3, #1
 8007e40:	9302      	str	r3, [sp, #8]
 8007e42:	f107 0313 	add.w	r3, r7, #19
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	2101      	movs	r1, #1
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ff23 	bl	8007c9c <VL53L0X_ref_calibration_io>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
 8007e5a:	e002      	b.n	8007e62 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d112      	bne.n	8007e90 <VL53L0X_perform_vhv_calibration+0xc2>
 8007e6a:	79bb      	ldrb	r3, [r7, #6]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00f      	beq.n	8007e90 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007e70:	7dbb      	ldrb	r3, [r7, #22]
 8007e72:	461a      	mov	r2, r3
 8007e74:	2101      	movs	r1, #1
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f002 fd46 	bl	800a908 <VL53L0X_WrByte>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	7dba      	ldrb	r2, [r7, #22]
 8007e8c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af04      	add	r7, sp, #16
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	460b      	mov	r3, r1
 8007eac:	71fb      	strb	r3, [r7, #7]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007ec2:	79bb      	ldrb	r3, [r7, #6]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007ece:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f002 fd17 	bl	800a908 <VL53L0X_WrByte>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d105      	bne.n	8007ef2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff fe9c 	bl	8007c26 <VL53L0X_perform_single_ref_calibration>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d115      	bne.n	8007f26 <VL53L0X_perform_phase_calibration+0x8a>
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d112      	bne.n	8007f26 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007f00:	7d39      	ldrb	r1, [r7, #20]
 8007f02:	7d7a      	ldrb	r2, [r7, #21]
 8007f04:	2301      	movs	r3, #1
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	f107 0313 	add.w	r3, r7, #19
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	460b      	mov	r3, r1
 8007f18:	2101      	movs	r1, #1
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7ff febe 	bl	8007c9c <VL53L0X_ref_calibration_io>
 8007f20:	4603      	mov	r3, r0
 8007f22:	75fb      	strb	r3, [r7, #23]
 8007f24:	e002      	b.n	8007f2c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d112      	bne.n	8007f5a <VL53L0X_perform_phase_calibration+0xbe>
 8007f34:	79bb      	ldrb	r3, [r7, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00f      	beq.n	8007f5a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007f3a:	7dbb      	ldrb	r3, [r7, #22]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	2101      	movs	r1, #1
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f002 fce1 	bl	800a908 <VL53L0X_WrByte>
 8007f46:	4603      	mov	r3, r0
 8007f48:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	7dba      	ldrb	r2, [r7, #22]
 8007f56:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b086      	sub	sp, #24
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
 8007f72:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007f82:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	2300      	movs	r3, #0
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff ff1f 	bl	8007dce <VL53L0X_perform_vhv_calibration>
 8007f90:	4603      	mov	r3, r0
 8007f92:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d107      	bne.n	8007fac <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff ff7a 	bl	8007e9c <VL53L0X_perform_phase_calibration>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10f      	bne.n	8007fd4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007fb4:	7dbb      	ldrb	r3, [r7, #22]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	2101      	movs	r1, #1
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f002 fca4 	bl	800a908 <VL53L0X_WrByte>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	7dba      	ldrb	r2, [r7, #22]
 8007fd0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007ff4:	f107 030f 	add.w	r3, r7, #15
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fe fe01 	bl	8006c02 <VL53L0X_GetMeasurementDataReady>
 8008000:	4603      	mov	r3, r0
 8008002:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d110      	bne.n	800802e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d00f      	beq.n	8008032 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	3301      	adds	r3, #1
 8008016:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800801e:	d302      	bcc.n	8008026 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008020:	23f9      	movs	r3, #249	; 0xf9
 8008022:	75fb      	strb	r3, [r7, #23]
			break;
 8008024:	e006      	b.n	8008034 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f002 fd72 	bl	800ab10 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800802c:	e7e2      	b.n	8007ff4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008032:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008034:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	3301      	adds	r3, #1
 8008052:	b2db      	uxtb	r3, r3
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008066:	b480      	push	{r7}
 8008068:	b085      	sub	sp, #20
 800806a:	af00      	add	r7, sp, #0
 800806c:	4603      	mov	r3, r0
 800806e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	b2db      	uxtb	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800809c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800809e:	e002      	b.n	80080a6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	089b      	lsrs	r3, r3, #2
 80080a4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d8f8      	bhi.n	80080a0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80080ae:	e017      	b.n	80080e0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	441a      	add	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d80b      	bhi.n	80080d4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4413      	add	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	085a      	lsrs	r2, r3, #1
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4413      	add	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e002      	b.n	80080da <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	085b      	lsrs	r3, r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	089b      	lsrs	r3, r3, #2
 80080de:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e4      	bne.n	80080b0 <VL53L0X_isqrt+0x24>
	}

	return res;
 80080e6:	68fb      	ldr	r3, [r7, #12]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008100:	2200      	movs	r2, #0
 8008102:	2183      	movs	r1, #131	; 0x83
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f002 fbff 	bl	800a908 <VL53L0X_WrByte>
 800810a:	4603      	mov	r3, r0
 800810c:	461a      	mov	r2, r3
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	4313      	orrs	r3, r2
 8008112:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d11e      	bne.n	800815a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008120:	f107 030f 	add.w	r3, r7, #15
 8008124:	461a      	mov	r2, r3
 8008126:	2183      	movs	r1, #131	; 0x83
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f002 fc8d 	bl	800aa48 <VL53L0X_RdByte>
 800812e:	4603      	mov	r3, r0
 8008130:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <VL53L0X_device_read_strobe+0x5a>
 8008138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	3301      	adds	r3, #1
 8008144:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800814c:	d3e8      	bcc.n	8008120 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008154:	d301      	bcc.n	800815a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008156:	23f9      	movs	r3, #249	; 0xf9
 8008158:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800815a:	2201      	movs	r2, #1
 800815c:	2183      	movs	r1, #131	; 0x83
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f002 fbd2 	bl	800a908 <VL53L0X_WrByte>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	4313      	orrs	r3, r2
 800816c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800816e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b098      	sub	sp, #96	; 0x60
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008186:	2300      	movs	r3, #0
 8008188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80081aa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80081ae:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80081c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80081c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081ca:	2b07      	cmp	r3, #7
 80081cc:	f000 8408 	beq.w	80089e0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80081d0:	2201      	movs	r2, #1
 80081d2:	2180      	movs	r1, #128	; 0x80
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f002 fb97 	bl	800a908 <VL53L0X_WrByte>
 80081da:	4603      	mov	r3, r0
 80081dc:	461a      	mov	r2, r3
 80081de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081e2:	4313      	orrs	r3, r2
 80081e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80081e8:	2201      	movs	r2, #1
 80081ea:	21ff      	movs	r1, #255	; 0xff
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f002 fb8b 	bl	800a908 <VL53L0X_WrByte>
 80081f2:	4603      	mov	r3, r0
 80081f4:	461a      	mov	r2, r3
 80081f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081fa:	4313      	orrs	r3, r2
 80081fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008200:	2200      	movs	r2, #0
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f002 fb7f 	bl	800a908 <VL53L0X_WrByte>
 800820a:	4603      	mov	r3, r0
 800820c:	461a      	mov	r2, r3
 800820e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008212:	4313      	orrs	r3, r2
 8008214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008218:	2206      	movs	r2, #6
 800821a:	21ff      	movs	r1, #255	; 0xff
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f002 fb73 	bl	800a908 <VL53L0X_WrByte>
 8008222:	4603      	mov	r3, r0
 8008224:	461a      	mov	r2, r3
 8008226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800822a:	4313      	orrs	r3, r2
 800822c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008230:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008234:	461a      	mov	r2, r3
 8008236:	2183      	movs	r1, #131	; 0x83
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f002 fc05 	bl	800aa48 <VL53L0X_RdByte>
 800823e:	4603      	mov	r3, r0
 8008240:	461a      	mov	r2, r3
 8008242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008246:	4313      	orrs	r3, r2
 8008248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800824c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008250:	f043 0304 	orr.w	r3, r3, #4
 8008254:	b2db      	uxtb	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	2183      	movs	r1, #131	; 0x83
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f002 fb54 	bl	800a908 <VL53L0X_WrByte>
 8008260:	4603      	mov	r3, r0
 8008262:	461a      	mov	r2, r3
 8008264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008268:	4313      	orrs	r3, r2
 800826a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800826e:	2207      	movs	r2, #7
 8008270:	21ff      	movs	r1, #255	; 0xff
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f002 fb48 	bl	800a908 <VL53L0X_WrByte>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008280:	4313      	orrs	r3, r2
 8008282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008286:	2201      	movs	r2, #1
 8008288:	2181      	movs	r1, #129	; 0x81
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f002 fb3c 	bl	800a908 <VL53L0X_WrByte>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008298:	4313      	orrs	r3, r2
 800829a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f002 fc36 	bl	800ab10 <VL53L0X_PollingDelay>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80082b2:	2201      	movs	r2, #1
 80082b4:	2180      	movs	r1, #128	; 0x80
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f002 fb26 	bl	800a908 <VL53L0X_WrByte>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 8098 	beq.w	8008406 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80082d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082da:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f040 8091 	bne.w	8008406 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80082e4:	226b      	movs	r2, #107	; 0x6b
 80082e6:	2194      	movs	r1, #148	; 0x94
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f002 fb0d 	bl	800a908 <VL53L0X_WrByte>
 80082ee:	4603      	mov	r3, r0
 80082f0:	461a      	mov	r2, r3
 80082f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff fef9 	bl	80080f4 <VL53L0X_device_read_strobe>
 8008302:	4603      	mov	r3, r0
 8008304:	461a      	mov	r2, r3
 8008306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800830a:	4313      	orrs	r3, r2
 800830c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008314:	461a      	mov	r2, r3
 8008316:	2190      	movs	r1, #144	; 0x90
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f002 fbd7 	bl	800aacc <VL53L0X_RdDWord>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008326:	4313      	orrs	r3, r2
 8008328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	0a1b      	lsrs	r3, r3, #8
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008336:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	0bdb      	lsrs	r3, r3, #15
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008348:	2224      	movs	r2, #36	; 0x24
 800834a:	2194      	movs	r1, #148	; 0x94
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f002 fadb 	bl	800a908 <VL53L0X_WrByte>
 8008352:	4603      	mov	r3, r0
 8008354:	461a      	mov	r2, r3
 8008356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800835a:	4313      	orrs	r3, r2
 800835c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff fec7 	bl	80080f4 <VL53L0X_device_read_strobe>
 8008366:	4603      	mov	r3, r0
 8008368:	461a      	mov	r2, r3
 800836a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800836e:	4313      	orrs	r3, r2
 8008370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008378:	461a      	mov	r2, r3
 800837a:	2190      	movs	r1, #144	; 0x90
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f002 fba5 	bl	800aacc <VL53L0X_RdDWord>
 8008382:	4603      	mov	r3, r0
 8008384:	461a      	mov	r2, r3
 8008386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800838a:	4313      	orrs	r3, r2
 800838c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	0e1b      	lsrs	r3, r3, #24
 8008394:	b2db      	uxtb	r3, r3
 8008396:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	b2db      	uxtb	r3, r3
 800839e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80083ae:	2225      	movs	r2, #37	; 0x25
 80083b0:	2194      	movs	r1, #148	; 0x94
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f002 faa8 	bl	800a908 <VL53L0X_WrByte>
 80083b8:	4603      	mov	r3, r0
 80083ba:	461a      	mov	r2, r3
 80083bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff fe94 	bl	80080f4 <VL53L0X_device_read_strobe>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80083da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083de:	461a      	mov	r2, r3
 80083e0:	2190      	movs	r1, #144	; 0x90
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f002 fb72 	bl	800aacc <VL53L0X_RdDWord>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083f0:	4313      	orrs	r3, r2
 80083f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	0e1b      	lsrs	r3, r3, #24
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	0c1b      	lsrs	r3, r3, #16
 8008402:	b2db      	uxtb	r3, r3
 8008404:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8189 	beq.w	8008724 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008412:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008416:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800841a:	2b00      	cmp	r3, #0
 800841c:	f040 8182 	bne.w	8008724 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008420:	2202      	movs	r2, #2
 8008422:	2194      	movs	r1, #148	; 0x94
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f002 fa6f 	bl	800a908 <VL53L0X_WrByte>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008432:	4313      	orrs	r3, r2
 8008434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff fe5b 	bl	80080f4 <VL53L0X_device_read_strobe>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008446:	4313      	orrs	r3, r2
 8008448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800844c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008450:	461a      	mov	r2, r3
 8008452:	2190      	movs	r1, #144	; 0x90
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f002 faf7 	bl	800aa48 <VL53L0X_RdByte>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008462:	4313      	orrs	r3, r2
 8008464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008468:	227b      	movs	r2, #123	; 0x7b
 800846a:	2194      	movs	r1, #148	; 0x94
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f002 fa4b 	bl	800a908 <VL53L0X_WrByte>
 8008472:	4603      	mov	r3, r0
 8008474:	461a      	mov	r2, r3
 8008476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800847a:	4313      	orrs	r3, r2
 800847c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff fe37 	bl	80080f4 <VL53L0X_device_read_strobe>
 8008486:	4603      	mov	r3, r0
 8008488:	461a      	mov	r2, r3
 800848a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800848e:	4313      	orrs	r3, r2
 8008490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008494:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008498:	461a      	mov	r2, r3
 800849a:	2190      	movs	r1, #144	; 0x90
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f002 fad3 	bl	800aa48 <VL53L0X_RdByte>
 80084a2:	4603      	mov	r3, r0
 80084a4:	461a      	mov	r2, r3
 80084a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80084b0:	2277      	movs	r2, #119	; 0x77
 80084b2:	2194      	movs	r1, #148	; 0x94
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f002 fa27 	bl	800a908 <VL53L0X_WrByte>
 80084ba:	4603      	mov	r3, r0
 80084bc:	461a      	mov	r2, r3
 80084be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fe13 	bl	80080f4 <VL53L0X_device_read_strobe>
 80084ce:	4603      	mov	r3, r0
 80084d0:	461a      	mov	r2, r3
 80084d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80084dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084e0:	461a      	mov	r2, r3
 80084e2:	2190      	movs	r1, #144	; 0x90
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f002 faf1 	bl	800aacc <VL53L0X_RdDWord>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	0e5b      	lsrs	r3, r3, #25
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008502:	b2db      	uxtb	r3, r3
 8008504:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	0c9b      	lsrs	r3, r3, #18
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008510:	b2db      	uxtb	r3, r3
 8008512:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	0adb      	lsrs	r3, r3, #11
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851e:	b2db      	uxtb	r3, r3
 8008520:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852c:	b2db      	uxtb	r3, r3
 800852e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	b2db      	uxtb	r3, r3
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008542:	2278      	movs	r2, #120	; 0x78
 8008544:	2194      	movs	r1, #148	; 0x94
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f002 f9de 	bl	800a908 <VL53L0X_WrByte>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008554:	4313      	orrs	r3, r2
 8008556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fdca 	bl	80080f4 <VL53L0X_device_read_strobe>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008568:	4313      	orrs	r3, r2
 800856a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800856e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008572:	461a      	mov	r2, r3
 8008574:	2190      	movs	r1, #144	; 0x90
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f002 faa8 	bl	800aacc <VL53L0X_RdDWord>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008584:	4313      	orrs	r3, r2
 8008586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	0f5b      	lsrs	r3, r3, #29
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008594:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800859a:	4413      	add	r3, r2
 800859c:	b2db      	uxtb	r3, r3
 800859e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	0d9b      	lsrs	r3, r3, #22
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	0bdb      	lsrs	r3, r3, #15
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	019b      	lsls	r3, r3, #6
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80085ea:	2279      	movs	r2, #121	; 0x79
 80085ec:	2194      	movs	r1, #148	; 0x94
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f002 f98a 	bl	800a908 <VL53L0X_WrByte>
 80085f4:	4603      	mov	r3, r0
 80085f6:	461a      	mov	r2, r3
 80085f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff fd76 	bl	80080f4 <VL53L0X_device_read_strobe>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008610:	4313      	orrs	r3, r2
 8008612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800861a:	461a      	mov	r2, r3
 800861c:	2190      	movs	r1, #144	; 0x90
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f002 fa54 	bl	800aacc <VL53L0X_RdDWord>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800862c:	4313      	orrs	r3, r2
 800862e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	0e9b      	lsrs	r3, r3, #26
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800863e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008642:	4413      	add	r3, r2
 8008644:	b2db      	uxtb	r3, r3
 8008646:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	0cdb      	lsrs	r3, r3, #19
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008652:	b2db      	uxtb	r3, r3
 8008654:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	0b1b      	lsrs	r3, r3, #12
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008660:	b2db      	uxtb	r3, r3
 8008662:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866e:	b2db      	uxtb	r3, r3
 8008670:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	b2db      	uxtb	r3, r3
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008684:	227a      	movs	r2, #122	; 0x7a
 8008686:	2194      	movs	r1, #148	; 0x94
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f002 f93d 	bl	800a908 <VL53L0X_WrByte>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008696:	4313      	orrs	r3, r2
 8008698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff fd29 	bl	80080f4 <VL53L0X_device_read_strobe>
 80086a2:	4603      	mov	r3, r0
 80086a4:	461a      	mov	r2, r3
 80086a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086b4:	461a      	mov	r2, r3
 80086b6:	2190      	movs	r1, #144	; 0x90
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f002 fa07 	bl	800aacc <VL53L0X_RdDWord>
 80086be:	4603      	mov	r3, r0
 80086c0:	461a      	mov	r2, r3
 80086c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	0f9b      	lsrs	r3, r3, #30
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80086d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086dc:	4413      	add	r3, r2
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	0ddb      	lsrs	r3, r3, #23
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	0c1b      	lsrs	r3, r3, #16
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	0a5b      	lsrs	r3, r3, #9
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	089b      	lsrs	r3, r3, #2
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008718:	b2db      	uxtb	r3, r3
 800871a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800871e:	2300      	movs	r3, #0
 8008720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80f1 	beq.w	8008912 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008730:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008734:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008738:	2b00      	cmp	r3, #0
 800873a:	f040 80ea 	bne.w	8008912 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800873e:	227b      	movs	r2, #123	; 0x7b
 8008740:	2194      	movs	r1, #148	; 0x94
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 f8e0 	bl	800a908 <VL53L0X_WrByte>
 8008748:	4603      	mov	r3, r0
 800874a:	461a      	mov	r2, r3
 800874c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008750:	4313      	orrs	r3, r2
 8008752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff fccc 	bl	80080f4 <VL53L0X_device_read_strobe>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008764:	4313      	orrs	r3, r2
 8008766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800876a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800876e:	461a      	mov	r2, r3
 8008770:	2190      	movs	r1, #144	; 0x90
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f002 f9aa 	bl	800aacc <VL53L0X_RdDWord>
 8008778:	4603      	mov	r3, r0
 800877a:	461a      	mov	r2, r3
 800877c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008780:	4313      	orrs	r3, r2
 8008782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008786:	227c      	movs	r2, #124	; 0x7c
 8008788:	2194      	movs	r1, #148	; 0x94
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f002 f8bc 	bl	800a908 <VL53L0X_WrByte>
 8008790:	4603      	mov	r3, r0
 8008792:	461a      	mov	r2, r3
 8008794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008798:	4313      	orrs	r3, r2
 800879a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff fca8 	bl	80080f4 <VL53L0X_device_read_strobe>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ac:	4313      	orrs	r3, r2
 80087ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80087b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087b6:	461a      	mov	r2, r3
 80087b8:	2190      	movs	r1, #144	; 0x90
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f002 f986 	bl	800aacc <VL53L0X_RdDWord>
 80087c0:	4603      	mov	r3, r0
 80087c2:	461a      	mov	r2, r3
 80087c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087c8:	4313      	orrs	r3, r2
 80087ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80087ce:	2273      	movs	r2, #115	; 0x73
 80087d0:	2194      	movs	r1, #148	; 0x94
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f002 f898 	bl	800a908 <VL53L0X_WrByte>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e0:	4313      	orrs	r3, r2
 80087e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff fc84 	bl	80080f4 <VL53L0X_device_read_strobe>
 80087ec:	4603      	mov	r3, r0
 80087ee:	461a      	mov	r2, r3
 80087f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087f4:	4313      	orrs	r3, r2
 80087f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087fe:	461a      	mov	r2, r3
 8008800:	2190      	movs	r1, #144	; 0x90
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 f962 	bl	800aacc <VL53L0X_RdDWord>
 8008808:	4603      	mov	r3, r0
 800880a:	461a      	mov	r2, r3
 800880c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008810:	4313      	orrs	r3, r2
 8008812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800881a:	b29b      	uxth	r3, r3
 800881c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800881e:	2274      	movs	r2, #116	; 0x74
 8008820:	2194      	movs	r1, #148	; 0x94
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f002 f870 	bl	800a908 <VL53L0X_WrByte>
 8008828:	4603      	mov	r3, r0
 800882a:	461a      	mov	r2, r3
 800882c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008830:	4313      	orrs	r3, r2
 8008832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff fc5c 	bl	80080f4 <VL53L0X_device_read_strobe>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008844:	4313      	orrs	r3, r2
 8008846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800884a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800884e:	461a      	mov	r2, r3
 8008850:	2190      	movs	r1, #144	; 0x90
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f002 f93a 	bl	800aacc <VL53L0X_RdDWord>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008860:	4313      	orrs	r3, r2
 8008862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800886a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800886c:	4313      	orrs	r3, r2
 800886e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008870:	2275      	movs	r2, #117	; 0x75
 8008872:	2194      	movs	r1, #148	; 0x94
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f002 f847 	bl	800a908 <VL53L0X_WrByte>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008882:	4313      	orrs	r3, r2
 8008884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fc33 	bl	80080f4 <VL53L0X_device_read_strobe>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008896:	4313      	orrs	r3, r2
 8008898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800889c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088a0:	461a      	mov	r2, r3
 80088a2:	2190      	movs	r1, #144	; 0x90
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f002 f911 	bl	800aacc <VL53L0X_RdDWord>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80088bc:	b29b      	uxth	r3, r3
 80088be:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80088c0:	2276      	movs	r2, #118	; 0x76
 80088c2:	2194      	movs	r1, #148	; 0x94
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f002 f81f 	bl	800a908 <VL53L0X_WrByte>
 80088ca:	4603      	mov	r3, r0
 80088cc:	461a      	mov	r2, r3
 80088ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d2:	4313      	orrs	r3, r2
 80088d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fc0b 	bl	80080f4 <VL53L0X_device_read_strobe>
 80088de:	4603      	mov	r3, r0
 80088e0:	461a      	mov	r2, r3
 80088e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e6:	4313      	orrs	r3, r2
 80088e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80088ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088f0:	461a      	mov	r2, r3
 80088f2:	2190      	movs	r1, #144	; 0x90
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f002 f8e9 	bl	800aacc <VL53L0X_RdDWord>
 80088fa:	4603      	mov	r3, r0
 80088fc:	461a      	mov	r2, r3
 80088fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008902:	4313      	orrs	r3, r2
 8008904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800890c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800890e:	4313      	orrs	r3, r2
 8008910:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008912:	2200      	movs	r2, #0
 8008914:	2181      	movs	r1, #129	; 0x81
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fff6 	bl	800a908 <VL53L0X_WrByte>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008924:	4313      	orrs	r3, r2
 8008926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800892a:	2206      	movs	r2, #6
 800892c:	21ff      	movs	r1, #255	; 0xff
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 ffea 	bl	800a908 <VL53L0X_WrByte>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800893c:	4313      	orrs	r3, r2
 800893e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008942:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008946:	461a      	mov	r2, r3
 8008948:	2183      	movs	r1, #131	; 0x83
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f002 f87c 	bl	800aa48 <VL53L0X_RdByte>
 8008950:	4603      	mov	r3, r0
 8008952:	461a      	mov	r2, r3
 8008954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008958:	4313      	orrs	r3, r2
 800895a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800895e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008962:	f023 0304 	bic.w	r3, r3, #4
 8008966:	b2db      	uxtb	r3, r3
 8008968:	461a      	mov	r2, r3
 800896a:	2183      	movs	r1, #131	; 0x83
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 ffcb 	bl	800a908 <VL53L0X_WrByte>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800897a:	4313      	orrs	r3, r2
 800897c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008980:	2201      	movs	r2, #1
 8008982:	21ff      	movs	r1, #255	; 0xff
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 ffbf 	bl	800a908 <VL53L0X_WrByte>
 800898a:	4603      	mov	r3, r0
 800898c:	461a      	mov	r2, r3
 800898e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008992:	4313      	orrs	r3, r2
 8008994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008998:	2201      	movs	r2, #1
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 ffb3 	bl	800a908 <VL53L0X_WrByte>
 80089a2:	4603      	mov	r3, r0
 80089a4:	461a      	mov	r2, r3
 80089a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80089b0:	2200      	movs	r2, #0
 80089b2:	21ff      	movs	r1, #255	; 0xff
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 ffa7 	bl	800a908 <VL53L0X_WrByte>
 80089ba:	4603      	mov	r3, r0
 80089bc:	461a      	mov	r2, r3
 80089be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c2:	4313      	orrs	r3, r2
 80089c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80089c8:	2200      	movs	r2, #0
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 ff9b 	bl	800a908 <VL53L0X_WrByte>
 80089d2:	4603      	mov	r3, r0
 80089d4:	461a      	mov	r2, r3
 80089d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089da:	4313      	orrs	r3, r2
 80089dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80089e0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f040 808f 	bne.w	8008b08 <VL53L0X_get_info_from_device+0x98e>
 80089ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089ee:	2b07      	cmp	r3, #7
 80089f0:	f000 808a 	beq.w	8008b08 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d024      	beq.n	8008a48 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80089fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a02:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d11e      	bne.n	8008a48 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008a10:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008a1a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008a1e:	2300      	movs	r3, #0
 8008a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a22:	e00e      	b.n	8008a42 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008a24:	f107 0208 	add.w	r2, r7, #8
 8008a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2a:	4413      	add	r3, r2
 8008a2c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008a38:	460a      	mov	r2, r1
 8008a3a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a3e:	3301      	adds	r3, #1
 8008a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	dded      	ble.n	8008a24 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d018      	beq.n	8008a84 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008a52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a56:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d112      	bne.n	8008a84 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a68:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	33f3      	adds	r3, #243	; 0xf3
 8008a76:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008a78:	f107 0310 	add.w	r3, r7, #16
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a80:	f008 f975 	bl	8010d6e <strcpy>

		}

		if (((option & 4) == 4) &&
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d030      	beq.n	8008af0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008a8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a92:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d12a      	bne.n	8008af0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aac:	025b      	lsls	r3, r3, #9
 8008aae:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ab4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d011      	beq.n	8008ae8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ad2:	fb02 f303 	mul.w	r3, r2, r3
 8008ad6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008ad8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008adc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008ae0:	425b      	negs	r3, r3
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008ae8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008af0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008afe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b08:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3760      	adds	r7, #96	; 0x60
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008b14:	b490      	push	{r4, r7}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008b20:	f240 6377 	movw	r3, #1655	; 0x677
 8008b24:	f04f 0400 	mov.w	r4, #0
 8008b28:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8008b2c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008b30:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	fb02 f303 	mul.w	r3, r2, r3
 8008b40:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008b42:	68bb      	ldr	r3, [r7, #8]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc90      	pop	{r4, r7}
 8008b4c:	4770      	bx	lr

08008b4e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b087      	sub	sp, #28
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d017      	beq.n	8008b98 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008b6e:	e005      	b.n	8008b7c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	085b      	lsrs	r3, r3, #1
 8008b74:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008b76:	89fb      	ldrh	r3, [r7, #14]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f4      	bne.n	8008b70 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008b86:	89fb      	ldrh	r3, [r7, #14]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008b94:	4413      	add	r3, r2
 8008b96:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008b98:	8afb      	ldrh	r3, [r7, #22]

}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	4603      	mov	r3, r0
 8008bae:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	0a12      	lsrs	r2, r2, #8
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	4619      	mov	r1, r3
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff ff92 	bl	8008b14 <VL53L0X_calc_macro_period_ps>
 8008bf0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008bf8:	4a0a      	ldr	r2, [pc, #40]	; (8008c24 <VL53L0X_calc_timeout_mclks+0x50>)
 8008bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfe:	099b      	lsrs	r3, r3, #6
 8008c00:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c08:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	085b      	lsrs	r3, r3, #1
 8008c10:	441a      	add	r2, r3
	timeout_period_mclks =
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c18:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	10624dd3 	.word	0x10624dd3

08008c28 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	807b      	strh	r3, [r7, #2]
 8008c34:	4613      	mov	r3, r2
 8008c36:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008c3c:	787b      	ldrb	r3, [r7, #1]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff ff67 	bl	8008b14 <VL53L0X_calc_macro_period_ps>
 8008c46:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008c4e:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <VL53L0X_calc_timeout_us+0x50>)
 8008c50:	fba2 2303 	umull	r2, r3, r2, r3
 8008c54:	099b      	lsrs	r3, r3, #6
 8008c56:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	fb02 f303 	mul.w	r3, r2, r3
 8008c60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008c64:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <VL53L0X_calc_timeout_us+0x50>)
 8008c66:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6a:	099b      	lsrs	r3, r3, #6
 8008c6c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008c6e:	697b      	ldr	r3, [r7, #20]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	10624dd3 	.word	0x10624dd3

08008c7c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08c      	sub	sp, #48	; 0x30
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	460b      	mov	r3, r1
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <get_sequence_step_timeout+0x38>
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d002      	beq.n	8008cb4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d128      	bne.n	8008d06 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008cb4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008cb8:	461a      	mov	r2, r3
 8008cba:	2100      	movs	r1, #0
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7fd fa4d 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008cc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d109      	bne.n	8008ce4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008cd0:	f107 0320 	add.w	r3, r7, #32
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2146      	movs	r1, #70	; 0x46
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f001 feb5 	bl	800aa48 <VL53L0X_RdByte>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff ff5b 	bl	8008ba6 <VL53L0X_decode_timeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008cf4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff ff93 	bl	8008c28 <VL53L0X_calc_timeout_us>
 8008d02:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d04:	e092      	b.n	8008e2c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008d06:	7afb      	ldrb	r3, [r7, #11]
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d135      	bne.n	8008d78 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d0c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d10:	461a      	mov	r2, r3
 8008d12:	2100      	movs	r1, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7fd fa21 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008d20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f040 8081 	bne.w	8008e2c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d2a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2100      	movs	r1, #0
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7fd fa12 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008d3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008d46:	f107 031e 	add.w	r3, r7, #30
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2151      	movs	r1, #81	; 0x51
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f001 fe9b 	bl	800aa8a <VL53L0X_RdWord>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008d5a:	8bfb      	ldrh	r3, [r7, #30]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff ff22 	bl	8008ba6 <VL53L0X_decode_timeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008d66:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008d6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff ff5a 	bl	8008c28 <VL53L0X_calc_timeout_us>
 8008d74:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d76:	e059      	b.n	8008e2c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d156      	bne.n	8008e2c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008d7e:	f107 0314 	add.w	r3, r7, #20
 8008d82:	4619      	mov	r1, r3
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7fd faf3 	bl	8006370 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01d      	beq.n	8008dd0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d94:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f7fd f9dd 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008da8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10f      	bne.n	8008dd0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008db0:	f107 031e 	add.w	r3, r7, #30
 8008db4:	461a      	mov	r2, r3
 8008db6:	2151      	movs	r1, #81	; 0x51
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f001 fe66 	bl	800aa8a <VL53L0X_RdWord>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008dc4:	8bfb      	ldrh	r3, [r7, #30]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff feed 	bl	8008ba6 <VL53L0X_decode_timeout>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008dd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008dd8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008ddc:	461a      	mov	r2, r3
 8008dde:	2101      	movs	r1, #1
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7fd f9bb 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008dec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10f      	bne.n	8008e14 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008df4:	f107 031c 	add.w	r3, r7, #28
 8008df8:	461a      	mov	r2, r3
 8008dfa:	2171      	movs	r1, #113	; 0x71
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f001 fe44 	bl	800aa8a <VL53L0X_RdWord>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008e08:	8bbb      	ldrh	r3, [r7, #28]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fecb 	bl	8008ba6 <VL53L0X_decode_timeout>
 8008e10:	4603      	mov	r3, r0
 8008e12:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008e14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008e1c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e22:	4619      	mov	r1, r3
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7ff feff 	bl	8008c28 <VL53L0X_calc_timeout_us>
 8008e2a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e30:	601a      	str	r2, [r3, #0]

	return Status;
 8008e32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3730      	adds	r7, #48	; 0x30
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b08a      	sub	sp, #40	; 0x28
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	460b      	mov	r3, r1
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008e52:	7afb      	ldrb	r3, [r7, #11]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <set_sequence_step_timeout+0x26>
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d002      	beq.n	8008e64 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d138      	bne.n	8008ed6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008e64:	f107 031b 	add.w	r3, r7, #27
 8008e68:	461a      	mov	r2, r3
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7fd f975 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008e72:	4603      	mov	r3, r0
 8008e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d11a      	bne.n	8008eb6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008e80:	7efb      	ldrb	r3, [r7, #27]
 8008e82:	461a      	mov	r2, r3
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f7ff fea4 	bl	8008bd4 <VL53L0X_calc_timeout_mclks>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008e90:	8bbb      	ldrh	r3, [r7, #28]
 8008e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e96:	d903      	bls.n	8008ea0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008e98:	23ff      	movs	r3, #255	; 0xff
 8008e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e9e:	e004      	b.n	8008eaa <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008ea0:	8bbb      	ldrh	r3, [r7, #28]
 8008ea2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008eaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008eb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f040 80ab 	bne.w	8009016 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	2146      	movs	r1, #70	; 0x46
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f001 fd1d 	bl	800a908 <VL53L0X_WrByte>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008ed4:	e09f      	b.n	8009016 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d135      	bne.n	8008f48 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008edc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d11b      	bne.n	8008f1c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ee4:	f107 031b 	add.w	r3, r7, #27
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2100      	movs	r1, #0
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7fd f935 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008ef8:	7efb      	ldrb	r3, [r7, #27]
 8008efa:	461a      	mov	r2, r3
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fe68 	bl	8008bd4 <VL53L0X_calc_timeout_mclks>
 8008f04:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008f06:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fe1f 	bl	8008b4e <VL53L0X_encode_timeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f14:	8b3a      	ldrh	r2, [r7, #24]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d108      	bne.n	8008f36 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008f24:	8b3b      	ldrh	r3, [r7, #24]
 8008f26:	461a      	mov	r2, r3
 8008f28:	2151      	movs	r1, #81	; 0x51
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f001 fd0e 	bl	800a94c <VL53L0X_WrWord>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008f36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d16b      	bne.n	8009016 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008f46:	e066      	b.n	8009016 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d160      	bne.n	8009010 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008f4e:	f107 0310 	add.w	r3, r7, #16
 8008f52:	4619      	mov	r1, r3
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7fd fa0b 	bl	8006370 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008f5e:	7cfb      	ldrb	r3, [r7, #19]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01d      	beq.n	8008fa0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f64:	f107 031b 	add.w	r3, r7, #27
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7fd f8f5 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008f78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10f      	bne.n	8008fa0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008f80:	f107 0318 	add.w	r3, r7, #24
 8008f84:	461a      	mov	r2, r3
 8008f86:	2151      	movs	r1, #81	; 0x51
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f001 fd7e 	bl	800aa8a <VL53L0X_RdWord>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008f94:	8b3b      	ldrh	r3, [r7, #24]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fe05 	bl	8008ba6 <VL53L0X_decode_timeout>
 8008f9c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008fa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d109      	bne.n	8008fbc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008fa8:	f107 031b 	add.w	r3, r7, #27
 8008fac:	461a      	mov	r2, r3
 8008fae:	2101      	movs	r1, #1
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7fd f8d3 	bl	800615c <VL53L0X_GetVcselPulsePeriod>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d128      	bne.n	8009016 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008fc4:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7ff fe02 	bl	8008bd4 <VL53L0X_calc_timeout_mclks>
 8008fd0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fd4:	6a3a      	ldr	r2, [r7, #32]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8008fda:	6a38      	ldr	r0, [r7, #32]
 8008fdc:	f7ff fdb7 	bl	8008b4e <VL53L0X_encode_timeout>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8008fe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d108      	bne.n	8008ffe <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008fec:	8bfb      	ldrh	r3, [r7, #30]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	2171      	movs	r1, #113	; 0x71
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f001 fcaa 	bl	800a94c <VL53L0X_WrWord>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008ffe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009002:	2b00      	cmp	r3, #0
 8009004:	d107      	bne.n	8009016 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800900e:	e002      	b.n	8009016 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009010:	23fc      	movs	r3, #252	; 0xfc
 8009012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009016:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800901a:	4618      	mov	r0, r3
 800901c:	3728      	adds	r7, #40	; 0x28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b08a      	sub	sp, #40	; 0x28
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
 800902e:	4613      	mov	r3, r2
 8009030:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009032:	2300      	movs	r3, #0
 8009034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009038:	230c      	movs	r3, #12
 800903a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800903e:	2312      	movs	r3, #18
 8009040:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009044:	2308      	movs	r3, #8
 8009046:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800904a:	230e      	movs	r3, #14
 800904c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009054:	78bb      	ldrb	r3, [r7, #2]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009060:	23fc      	movs	r3, #252	; 0xfc
 8009062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009066:	e020      	b.n	80090aa <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10d      	bne.n	800908a <VL53L0X_set_vcsel_pulse_period+0x68>
 800906e:	78ba      	ldrb	r2, [r7, #2]
 8009070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009074:	429a      	cmp	r2, r3
 8009076:	d304      	bcc.n	8009082 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009078:	78ba      	ldrb	r2, [r7, #2]
 800907a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800907e:	429a      	cmp	r2, r3
 8009080:	d903      	bls.n	800908a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009082:	23fc      	movs	r3, #252	; 0xfc
 8009084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009088:	e00f      	b.n	80090aa <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d10c      	bne.n	80090aa <VL53L0X_set_vcsel_pulse_period+0x88>
 8009090:	78ba      	ldrb	r2, [r7, #2]
 8009092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009096:	429a      	cmp	r2, r3
 8009098:	d304      	bcc.n	80090a4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800909a:	78ba      	ldrb	r2, [r7, #2]
 800909c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d902      	bls.n	80090aa <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80090a4:	23fc      	movs	r3, #252	; 0xfc
 80090a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80090aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80090b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090b6:	e237      	b.n	8009528 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d150      	bne.n	8009160 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80090be:	78bb      	ldrb	r3, [r7, #2]
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	d110      	bne.n	80090e6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80090c4:	2218      	movs	r2, #24
 80090c6:	2157      	movs	r1, #87	; 0x57
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fc1d 	bl	800a908 <VL53L0X_WrByte>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80090d4:	2208      	movs	r2, #8
 80090d6:	2156      	movs	r1, #86	; 0x56
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fc15 	bl	800a908 <VL53L0X_WrByte>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090e4:	e17f      	b.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80090e6:	78bb      	ldrb	r3, [r7, #2]
 80090e8:	2b0e      	cmp	r3, #14
 80090ea:	d110      	bne.n	800910e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80090ec:	2230      	movs	r2, #48	; 0x30
 80090ee:	2157      	movs	r1, #87	; 0x57
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 fc09 	bl	800a908 <VL53L0X_WrByte>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80090fc:	2208      	movs	r2, #8
 80090fe:	2156      	movs	r1, #86	; 0x56
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fc01 	bl	800a908 <VL53L0X_WrByte>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800910c:	e16b      	b.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800910e:	78bb      	ldrb	r3, [r7, #2]
 8009110:	2b10      	cmp	r3, #16
 8009112:	d110      	bne.n	8009136 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009114:	2240      	movs	r2, #64	; 0x40
 8009116:	2157      	movs	r1, #87	; 0x57
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 fbf5 	bl	800a908 <VL53L0X_WrByte>
 800911e:	4603      	mov	r3, r0
 8009120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009124:	2208      	movs	r2, #8
 8009126:	2156      	movs	r1, #86	; 0x56
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 fbed 	bl	800a908 <VL53L0X_WrByte>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009134:	e157      	b.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009136:	78bb      	ldrb	r3, [r7, #2]
 8009138:	2b12      	cmp	r3, #18
 800913a:	f040 8154 	bne.w	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800913e:	2250      	movs	r2, #80	; 0x50
 8009140:	2157      	movs	r1, #87	; 0x57
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 fbe0 	bl	800a908 <VL53L0X_WrByte>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800914e:	2208      	movs	r2, #8
 8009150:	2156      	movs	r1, #86	; 0x56
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fbd8 	bl	800a908 <VL53L0X_WrByte>
 8009158:	4603      	mov	r3, r0
 800915a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800915e:	e142      	b.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	2b01      	cmp	r3, #1
 8009164:	f040 813f 	bne.w	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009168:	78bb      	ldrb	r3, [r7, #2]
 800916a:	2b08      	cmp	r3, #8
 800916c:	d14c      	bne.n	8009208 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800916e:	2210      	movs	r2, #16
 8009170:	2148      	movs	r1, #72	; 0x48
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 fbc8 	bl	800a908 <VL53L0X_WrByte>
 8009178:	4603      	mov	r3, r0
 800917a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800917e:	2208      	movs	r2, #8
 8009180:	2147      	movs	r1, #71	; 0x47
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fbc0 	bl	800a908 <VL53L0X_WrByte>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800918e:	2202      	movs	r2, #2
 8009190:	2132      	movs	r1, #50	; 0x32
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 fbb8 	bl	800a908 <VL53L0X_WrByte>
 8009198:	4603      	mov	r3, r0
 800919a:	461a      	mov	r2, r3
 800919c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80091a6:	220c      	movs	r2, #12
 80091a8:	2130      	movs	r1, #48	; 0x30
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 fbac 	bl	800a908 <VL53L0X_WrByte>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091b8:	4313      	orrs	r3, r2
 80091ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80091be:	2201      	movs	r2, #1
 80091c0:	21ff      	movs	r1, #255	; 0xff
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fba0 	bl	800a908 <VL53L0X_WrByte>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80091d6:	2230      	movs	r2, #48	; 0x30
 80091d8:	2130      	movs	r1, #48	; 0x30
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 fb94 	bl	800a908 <VL53L0X_WrByte>
 80091e0:	4603      	mov	r3, r0
 80091e2:	461a      	mov	r2, r3
 80091e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091e8:	4313      	orrs	r3, r2
 80091ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80091ee:	2200      	movs	r2, #0
 80091f0:	21ff      	movs	r1, #255	; 0xff
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 fb88 	bl	800a908 <VL53L0X_WrByte>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461a      	mov	r2, r3
 80091fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009200:	4313      	orrs	r3, r2
 8009202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009206:	e0ee      	b.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009208:	78bb      	ldrb	r3, [r7, #2]
 800920a:	2b0a      	cmp	r3, #10
 800920c:	d14c      	bne.n	80092a8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800920e:	2228      	movs	r2, #40	; 0x28
 8009210:	2148      	movs	r1, #72	; 0x48
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 fb78 	bl	800a908 <VL53L0X_WrByte>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800921e:	2208      	movs	r2, #8
 8009220:	2147      	movs	r1, #71	; 0x47
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 fb70 	bl	800a908 <VL53L0X_WrByte>
 8009228:	4603      	mov	r3, r0
 800922a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800922e:	2203      	movs	r2, #3
 8009230:	2132      	movs	r1, #50	; 0x32
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fb68 	bl	800a908 <VL53L0X_WrByte>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009240:	4313      	orrs	r3, r2
 8009242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009246:	2209      	movs	r2, #9
 8009248:	2130      	movs	r1, #48	; 0x30
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 fb5c 	bl	800a908 <VL53L0X_WrByte>
 8009250:	4603      	mov	r3, r0
 8009252:	461a      	mov	r2, r3
 8009254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009258:	4313      	orrs	r3, r2
 800925a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800925e:	2201      	movs	r2, #1
 8009260:	21ff      	movs	r1, #255	; 0xff
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 fb50 	bl	800a908 <VL53L0X_WrByte>
 8009268:	4603      	mov	r3, r0
 800926a:	461a      	mov	r2, r3
 800926c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009270:	4313      	orrs	r3, r2
 8009272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009276:	2220      	movs	r2, #32
 8009278:	2130      	movs	r1, #48	; 0x30
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 fb44 	bl	800a908 <VL53L0X_WrByte>
 8009280:	4603      	mov	r3, r0
 8009282:	461a      	mov	r2, r3
 8009284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009288:	4313      	orrs	r3, r2
 800928a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800928e:	2200      	movs	r2, #0
 8009290:	21ff      	movs	r1, #255	; 0xff
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f001 fb38 	bl	800a908 <VL53L0X_WrByte>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092a0:	4313      	orrs	r3, r2
 80092a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092a6:	e09e      	b.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80092a8:	78bb      	ldrb	r3, [r7, #2]
 80092aa:	2b0c      	cmp	r3, #12
 80092ac:	d14c      	bne.n	8009348 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80092ae:	2238      	movs	r2, #56	; 0x38
 80092b0:	2148      	movs	r1, #72	; 0x48
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 fb28 	bl	800a908 <VL53L0X_WrByte>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80092be:	2208      	movs	r2, #8
 80092c0:	2147      	movs	r1, #71	; 0x47
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 fb20 	bl	800a908 <VL53L0X_WrByte>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80092ce:	2203      	movs	r2, #3
 80092d0:	2132      	movs	r1, #50	; 0x32
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 fb18 	bl	800a908 <VL53L0X_WrByte>
 80092d8:	4603      	mov	r3, r0
 80092da:	461a      	mov	r2, r3
 80092dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80092e6:	2208      	movs	r2, #8
 80092e8:	2130      	movs	r1, #48	; 0x30
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 fb0c 	bl	800a908 <VL53L0X_WrByte>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f8:	4313      	orrs	r3, r2
 80092fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80092fe:	2201      	movs	r2, #1
 8009300:	21ff      	movs	r1, #255	; 0xff
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 fb00 	bl	800a908 <VL53L0X_WrByte>
 8009308:	4603      	mov	r3, r0
 800930a:	461a      	mov	r2, r3
 800930c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009310:	4313      	orrs	r3, r2
 8009312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009316:	2220      	movs	r2, #32
 8009318:	2130      	movs	r1, #48	; 0x30
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 faf4 	bl	800a908 <VL53L0X_WrByte>
 8009320:	4603      	mov	r3, r0
 8009322:	461a      	mov	r2, r3
 8009324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009328:	4313      	orrs	r3, r2
 800932a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800932e:	2200      	movs	r2, #0
 8009330:	21ff      	movs	r1, #255	; 0xff
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fae8 	bl	800a908 <VL53L0X_WrByte>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009340:	4313      	orrs	r3, r2
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009346:	e04e      	b.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009348:	78bb      	ldrb	r3, [r7, #2]
 800934a:	2b0e      	cmp	r3, #14
 800934c:	d14b      	bne.n	80093e6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800934e:	2248      	movs	r2, #72	; 0x48
 8009350:	2148      	movs	r1, #72	; 0x48
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fad8 	bl	800a908 <VL53L0X_WrByte>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800935e:	2208      	movs	r2, #8
 8009360:	2147      	movs	r1, #71	; 0x47
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fad0 	bl	800a908 <VL53L0X_WrByte>
 8009368:	4603      	mov	r3, r0
 800936a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800936e:	2203      	movs	r2, #3
 8009370:	2132      	movs	r1, #50	; 0x32
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 fac8 	bl	800a908 <VL53L0X_WrByte>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009380:	4313      	orrs	r3, r2
 8009382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009386:	2207      	movs	r2, #7
 8009388:	2130      	movs	r1, #48	; 0x30
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 fabc 	bl	800a908 <VL53L0X_WrByte>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009398:	4313      	orrs	r3, r2
 800939a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800939e:	2201      	movs	r2, #1
 80093a0:	21ff      	movs	r1, #255	; 0xff
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fab0 	bl	800a908 <VL53L0X_WrByte>
 80093a8:	4603      	mov	r3, r0
 80093aa:	461a      	mov	r2, r3
 80093ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093b0:	4313      	orrs	r3, r2
 80093b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80093b6:	2220      	movs	r2, #32
 80093b8:	2130      	movs	r1, #48	; 0x30
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 faa4 	bl	800a908 <VL53L0X_WrByte>
 80093c0:	4603      	mov	r3, r0
 80093c2:	461a      	mov	r2, r3
 80093c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093c8:	4313      	orrs	r3, r2
 80093ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80093ce:	2200      	movs	r2, #0
 80093d0:	21ff      	movs	r1, #255	; 0xff
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 fa98 	bl	800a908 <VL53L0X_WrByte>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
 80093dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093e0:	4313      	orrs	r3, r2
 80093e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80093e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d17e      	bne.n	80094ec <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80093ee:	78bb      	ldrb	r3, [r7, #2]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe fe38 	bl	8008066 <VL53L0X_encode_vcsel_period>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009402:	2b01      	cmp	r3, #1
 8009404:	d045      	beq.n	8009492 <VL53L0X_set_vcsel_pulse_period+0x470>
 8009406:	e06e      	b.n	80094e6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009408:	f107 0314 	add.w	r3, r7, #20
 800940c:	461a      	mov	r2, r3
 800940e:	2103      	movs	r1, #3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff fc33 	bl	8008c7c <get_sequence_step_timeout>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800941c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009424:	f107 0310 	add.w	r3, r7, #16
 8009428:	461a      	mov	r2, r3
 800942a:	2102      	movs	r1, #2
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff fc25 	bl	8008c7c <get_sequence_step_timeout>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800943c:	2b00      	cmp	r3, #0
 800943e:	d109      	bne.n	8009454 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009440:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009444:	461a      	mov	r2, r3
 8009446:	2150      	movs	r1, #80	; 0x50
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 fa5d 	bl	800a908 <VL53L0X_WrByte>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009454:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009458:	2b00      	cmp	r3, #0
 800945a:	d108      	bne.n	800946e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	461a      	mov	r2, r3
 8009460:	2103      	movs	r1, #3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fceb 	bl	8008e3e <set_sequence_step_timeout>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800946e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009472:	2b00      	cmp	r3, #0
 8009474:	d108      	bne.n	8009488 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	461a      	mov	r2, r3
 800947a:	2102      	movs	r1, #2
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff fcde 	bl	8008e3e <set_sequence_step_timeout>
 8009482:	4603      	mov	r3, r0
 8009484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	78ba      	ldrb	r2, [r7, #2]
 800948c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009490:	e02c      	b.n	80094ec <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009492:	f107 0318 	add.w	r3, r7, #24
 8009496:	461a      	mov	r2, r3
 8009498:	2104      	movs	r1, #4
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fbee 	bl	8008c7c <get_sequence_step_timeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80094a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80094ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80094b2:	461a      	mov	r2, r3
 80094b4:	2170      	movs	r1, #112	; 0x70
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 fa26 	bl	800a908 <VL53L0X_WrByte>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80094c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d108      	bne.n	80094dc <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	461a      	mov	r2, r3
 80094ce:	2104      	movs	r1, #4
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7ff fcb4 	bl	8008e3e <set_sequence_step_timeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	78ba      	ldrb	r2, [r7, #2]
 80094e0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80094e4:	e002      	b.n	80094ec <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094e6:	23fc      	movs	r3, #252	; 0xfc
 80094e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80094ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d109      	bne.n	8009508 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80094fa:	69f9      	ldr	r1, [r7, #28]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fc fdef 	bl	80060e0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800950c:	2b00      	cmp	r3, #0
 800950e:	d109      	bne.n	8009524 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8009510:	f107 010f 	add.w	r1, r7, #15
 8009514:	2301      	movs	r3, #1
 8009516:	2200      	movs	r2, #0
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fe fcbf 	bl	8007e9c <VL53L0X_perform_phase_calibration>
 800951e:	4603      	mov	r3, r0
 8009520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009528:	4618      	mov	r0, r3
 800952a:	3728      	adds	r7, #40	; 0x28
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	460b      	mov	r3, r1
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009548:	2b01      	cmp	r3, #1
 800954a:	d00a      	beq.n	8009562 <VL53L0X_get_vcsel_pulse_period+0x32>
 800954c:	e013      	b.n	8009576 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800954e:	f107 0316 	add.w	r3, r7, #22
 8009552:	461a      	mov	r2, r3
 8009554:	2150      	movs	r1, #80	; 0x50
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f001 fa76 	bl	800aa48 <VL53L0X_RdByte>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009560:	e00b      	b.n	800957a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009562:	f107 0316 	add.w	r3, r7, #22
 8009566:	461a      	mov	r2, r3
 8009568:	2170      	movs	r1, #112	; 0x70
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f001 fa6c 	bl	800aa48 <VL53L0X_RdByte>
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009574:	e001      	b.n	800957a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009576:	23fc      	movs	r3, #252	; 0xfc
 8009578:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800957a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d107      	bne.n	8009592 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009582:	7dbb      	ldrb	r3, [r7, #22]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe fd5b 	bl	8008040 <VL53L0X_decode_vcsel_period>
 800958a:	4603      	mov	r3, r0
 800958c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	701a      	strb	r2, [r3, #0]

	return Status;
 8009592:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b092      	sub	sp, #72	; 0x48
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80095ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80095b2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80095b4:	f240 7376 	movw	r3, #1910	; 0x776
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80095ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80095be:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80095c0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80095c6:	f240 234e 	movw	r3, #590	; 0x24e
 80095ca:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80095cc:	f240 23b2 	movw	r3, #690	; 0x2b2
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80095d2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80095d8:	f240 2326 	movw	r3, #550	; 0x226
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80095e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80095e6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d205      	bcs.n	8009600 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095f4:	23fc      	movs	r3, #252	; 0xfc
 80095f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80095fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80095fe:	e0aa      	b.n	8009756 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800960c:	f107 0314 	add.w	r3, r7, #20
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fc feac 	bl	8006370 <VL53L0X_GetSequenceStepEnables>
 8009618:	4603      	mov	r3, r0
 800961a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800961e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009622:	2b00      	cmp	r3, #0
 8009624:	d15b      	bne.n	80096de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009626:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009628:	2b00      	cmp	r3, #0
 800962a:	d105      	bne.n	8009638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800962c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009632:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009634:	2b00      	cmp	r3, #0
 8009636:	d052      	beq.n	80096de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009638:	f107 0310 	add.w	r3, r7, #16
 800963c:	461a      	mov	r2, r3
 800963e:	2102      	movs	r1, #2
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff fb1b 	bl	8008c7c <get_sequence_step_timeout>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800964c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009654:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009658:	e07d      	b.n	8009756 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800965a:	7d3b      	ldrb	r3, [r7, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00f      	beq.n	8009680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009660:	693a      	ldr	r2, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	4413      	add	r3, r2
 8009666:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009668:	69fa      	ldr	r2, [r7, #28]
 800966a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800966c:	429a      	cmp	r2, r3
 800966e:	d204      	bcs.n	800967a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	643b      	str	r3, [r7, #64]	; 0x40
 8009678:	e002      	b.n	8009680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800967a:	23fc      	movs	r3, #252	; 0xfc
 800967c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009680:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009688:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800968c:	e063      	b.n	8009756 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800968e:	7dbb      	ldrb	r3, [r7, #22]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d011      	beq.n	80096b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	4413      	add	r3, r2
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d204      	bcs.n	80096b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80096a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	643b      	str	r3, [r7, #64]	; 0x40
 80096ae:	e016      	b.n	80096de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096b0:	23fc      	movs	r3, #252	; 0xfc
 80096b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80096b6:	e012      	b.n	80096de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80096b8:	7d7b      	ldrb	r3, [r7, #21]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00f      	beq.n	80096de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	4413      	add	r3, r2
 80096c4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d204      	bcs.n	80096d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80096ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	643b      	str	r3, [r7, #64]	; 0x40
 80096d6:	e002      	b.n	80096de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096d8:	23fc      	movs	r3, #252	; 0xfc
 80096da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80096de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80096e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80096ea:	e034      	b.n	8009756 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d019      	beq.n	8009726 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80096f2:	f107 030c 	add.w	r3, r7, #12
 80096f6:	461a      	mov	r2, r3
 80096f8:	2103      	movs	r1, #3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fabe 	bl	8008c7c <get_sequence_step_timeout>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	4413      	add	r3, r2
 800970c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009712:	429a      	cmp	r2, r3
 8009714:	d204      	bcs.n	8009720 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	643b      	str	r3, [r7, #64]	; 0x40
 800971e:	e002      	b.n	8009726 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009720:	23fc      	movs	r3, #252	; 0xfc
 8009722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009726:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800972a:	2b00      	cmp	r3, #0
 800972c:	d111      	bne.n	8009752 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800972e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00e      	beq.n	8009752 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800973c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800973e:	2104      	movs	r1, #4
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff fb7c 	bl	8008e3e <set_sequence_step_timeout>
 8009746:	4603      	mov	r3, r0
 8009748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009752:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009756:	4618      	mov	r0, r3
 8009758:	3748      	adds	r7, #72	; 0x48
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b090      	sub	sp, #64	; 0x40
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009768:	2300      	movs	r3, #0
 800976a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800976e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009772:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009774:	f240 7376 	movw	r3, #1910	; 0x776
 8009778:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800977a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800977e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009780:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009784:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009786:	f240 234e 	movw	r3, #590	; 0x24e
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800978c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009792:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009798:	f240 2326 	movw	r3, #550	; 0x226
 800979c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80097a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a6:	441a      	add	r2, r3
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80097ac:	f107 0318 	add.w	r3, r7, #24
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fc fddc 	bl	8006370 <VL53L0X_GetSequenceStepEnables>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80097be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80097c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097ca:	e075      	b.n	80098b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80097cc:	7e3b      	ldrb	r3, [r7, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d105      	bne.n	80097de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80097d2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80097d8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d030      	beq.n	8009840 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80097de:	f107 0310 	add.w	r3, r7, #16
 80097e2:	461a      	mov	r2, r3
 80097e4:	2102      	movs	r1, #2
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fa48 	bl	8008c7c <get_sequence_step_timeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80097f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d122      	bne.n	8009840 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80097fa:	7e3b      	ldrb	r3, [r7, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009804:	6939      	ldr	r1, [r7, #16]
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800980a:	441a      	add	r2, r3
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009810:	7ebb      	ldrb	r3, [r7, #26]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d009      	beq.n	800982a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800981a:	6939      	ldr	r1, [r7, #16]
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	440b      	add	r3, r1
 8009820:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009822:	441a      	add	r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e00a      	b.n	8009840 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800982a:	7e7b      	ldrb	r3, [r7, #25]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d007      	beq.n	8009840 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009834:	6939      	ldr	r1, [r7, #16]
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800983a:	441a      	add	r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009840:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009844:	2b00      	cmp	r3, #0
 8009846:	d114      	bne.n	8009872 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009848:	7efb      	ldrb	r3, [r7, #27]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d011      	beq.n	8009872 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800984e:	f107 030c 	add.w	r3, r7, #12
 8009852:	461a      	mov	r2, r3
 8009854:	2103      	movs	r1, #3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fa10 	bl	8008c7c <get_sequence_step_timeout>
 800985c:	4603      	mov	r3, r0
 800985e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800986c:	441a      	add	r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009872:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009876:	2b00      	cmp	r3, #0
 8009878:	d114      	bne.n	80098a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800987a:	7f3b      	ldrb	r3, [r7, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d011      	beq.n	80098a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009880:	f107 0314 	add.w	r3, r7, #20
 8009884:	461a      	mov	r2, r3
 8009886:	2104      	movs	r1, #4
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff f9f7 	bl	8008c7c <get_sequence_step_timeout>
 800988e:	4603      	mov	r3, r0
 8009890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009898:	6979      	ldr	r1, [r7, #20]
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800989e:	441a      	add	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80098a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3740      	adds	r7, #64	; 0x40
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098ca:	2300      	movs	r3, #0
 80098cc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80098d2:	e0c6      	b.n	8009a62 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	4413      	add	r3, r2
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	74fb      	strb	r3, [r7, #19]
		Index++;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	3301      	adds	r3, #1
 80098e2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80098e4:	7cfb      	ldrb	r3, [r7, #19]
 80098e6:	2bff      	cmp	r3, #255	; 0xff
 80098e8:	f040 808d 	bne.w	8009a06 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	4413      	add	r3, r2
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	74bb      	strb	r3, [r7, #18]
			Index++;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	3301      	adds	r3, #1
 80098fa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80098fc:	7cbb      	ldrb	r3, [r7, #18]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d87e      	bhi.n	8009a00 <VL53L0X_load_tuning_settings+0x140>
 8009902:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <VL53L0X_load_tuning_settings+0x48>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009919 	.word	0x08009919
 800990c:	08009953 	.word	0x08009953
 8009910:	0800998d 	.word	0x0800998d
 8009914:	080099c7 	.word	0x080099c7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	4413      	add	r3, r2
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	747b      	strb	r3, [r7, #17]
				Index++;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	3301      	adds	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	4413      	add	r3, r2
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	743b      	strb	r3, [r7, #16]
				Index++;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	3301      	adds	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009938:	7c7b      	ldrb	r3, [r7, #17]
 800993a:	b29b      	uxth	r3, r3
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	b29a      	uxth	r2, r3
 8009940:	7c3b      	ldrb	r3, [r7, #16]
 8009942:	b29b      	uxth	r3, r3
 8009944:	4413      	add	r3, r2
 8009946:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	89fa      	ldrh	r2, [r7, #14]
 800994c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009950:	e087      	b.n	8009a62 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	4413      	add	r3, r2
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	747b      	strb	r3, [r7, #17]
				Index++;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	3301      	adds	r3, #1
 8009960:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	4413      	add	r3, r2
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	743b      	strb	r3, [r7, #16]
				Index++;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	3301      	adds	r3, #1
 8009970:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009972:	7c7b      	ldrb	r3, [r7, #17]
 8009974:	b29b      	uxth	r3, r3
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	b29a      	uxth	r2, r3
 800997a:	7c3b      	ldrb	r3, [r7, #16]
 800997c:	b29b      	uxth	r3, r3
 800997e:	4413      	add	r3, r2
 8009980:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	89fa      	ldrh	r2, [r7, #14]
 8009986:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800998a:	e06a      	b.n	8009a62 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	4413      	add	r3, r2
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	747b      	strb	r3, [r7, #17]
				Index++;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	3301      	adds	r3, #1
 800999a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	743b      	strb	r3, [r7, #16]
				Index++;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	3301      	adds	r3, #1
 80099aa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80099ac:	7c7b      	ldrb	r3, [r7, #17]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	021b      	lsls	r3, r3, #8
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	7c3b      	ldrb	r3, [r7, #16]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4413      	add	r3, r2
 80099ba:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	89fa      	ldrh	r2, [r7, #14]
 80099c0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80099c4:	e04d      	b.n	8009a62 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	4413      	add	r3, r2
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	747b      	strb	r3, [r7, #17]
				Index++;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	3301      	adds	r3, #1
 80099d4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	4413      	add	r3, r2
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	743b      	strb	r3, [r7, #16]
				Index++;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	3301      	adds	r3, #1
 80099e4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80099e6:	7c7b      	ldrb	r3, [r7, #17]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	021b      	lsls	r3, r3, #8
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	7c3b      	ldrb	r3, [r7, #16]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	4413      	add	r3, r2
 80099f4:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	89fa      	ldrh	r2, [r7, #14]
 80099fa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80099fe:	e030      	b.n	8009a62 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a00:	23fc      	movs	r3, #252	; 0xfc
 8009a02:	77fb      	strb	r3, [r7, #31]
 8009a04:	e02d      	b.n	8009a62 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009a06:	7cfb      	ldrb	r3, [r7, #19]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d828      	bhi.n	8009a5e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4413      	add	r3, r2
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	737b      	strb	r3, [r7, #13]
			Index++;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61bb      	str	r3, [r7, #24]
 8009a20:	e00f      	b.n	8009a42 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	4413      	add	r3, r2
 8009a28:	7819      	ldrb	r1, [r3, #0]
 8009a2a:	f107 0208 	add.w	r2, r7, #8
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	4413      	add	r3, r2
 8009a32:	460a      	mov	r2, r1
 8009a34:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	61bb      	str	r3, [r7, #24]
 8009a42:	7cfa      	ldrb	r2, [r7, #19]
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	dceb      	bgt.n	8009a22 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009a4a:	7cfb      	ldrb	r3, [r7, #19]
 8009a4c:	f107 0208 	add.w	r2, r7, #8
 8009a50:	7b79      	ldrb	r1, [r7, #13]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 ff04 	bl	800a860 <VL53L0X_WriteMulti>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	77fb      	strb	r3, [r7, #31]
 8009a5c:	e001      	b.n	8009a62 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a5e:	23fc      	movs	r3, #252	; 0xfc
 8009a60:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	4413      	add	r3, r2
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <VL53L0X_load_tuning_settings+0x1b8>
 8009a6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f43f af2e 	beq.w	80098d4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a90:	2300      	movs	r3, #0
 8009a92:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009a9a:	f107 0313 	add.w	r3, r7, #19
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f7fc fd25 	bl	80064f0 <VL53L0X_GetXTalkCompensationEnable>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d111      	bne.n	8009ad6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009ab2:	7cfb      	ldrb	r3, [r7, #19]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00e      	beq.n	8009ad6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	8a9b      	ldrh	r3, [r3, #20]
 8009ac2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	fb03 f302 	mul.w	r3, r3, r2
 8009aca:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	3380      	adds	r3, #128	; 0x80
 8009ad0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3720      	adds	r7, #32
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b086      	sub	sp, #24
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009afa:	f107 0310 	add.w	r3, r7, #16
 8009afe:	461a      	mov	r2, r3
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7ff ffbe 	bl	8009a84 <VL53L0X_get_total_xtalk_rate>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	441a      	add	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]

	return Status;
 8009b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b09a      	sub	sp, #104	; 0x68
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009b3a:	2312      	movs	r3, #18
 8009b3c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b42:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009b44:	2342      	movs	r3, #66	; 0x42
 8009b46:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009b48:	2306      	movs	r3, #6
 8009b4a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009b4c:	2307      	movs	r3, #7
 8009b4e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009b5c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009b64:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b6a:	fb02 f303 	mul.w	r3, r2, r3
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b72:	3380      	adds	r3, #128	; 0x80
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
 8009b80:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d01b      	beq.n	8009bc4 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	029b      	lsls	r3, r3, #10
 8009b90:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	085a      	lsrs	r2, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	4413      	add	r3, r2
 8009b9a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009b9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009ba6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ba8:	4613      	mov	r3, r2
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	4413      	add	r3, r2
 8009bae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bb4:	fb02 f303 	mul.w	r3, r2, r3
 8009bb8:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009bc0:	0c1b      	lsrs	r3, r3, #16
 8009bc2:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009bc8:	fb02 f303 	mul.w	r3, r2, r3
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009bd4:	0c1b      	lsrs	r3, r3, #16
 8009bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bdc:	fb02 f303 	mul.w	r3, r2, r3
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009be4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009be8:	0c1b      	lsrs	r3, r3, #16
 8009bea:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bee:	085a      	lsrs	r2, r3, #1
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	441a      	add	r2, r3
 8009bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfa:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c00:	fb02 f303 	mul.w	r3, r2, r3
 8009c04:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0c:	d302      	bcc.n	8009c14 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8009c0e:	4b55      	ldr	r3, [pc, #340]	; (8009d64 <VL53L0X_calc_dmax+0x238>)
 8009c10:	663b      	str	r3, [r7, #96]	; 0x60
 8009c12:	e016      	b.n	8009c42 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c16:	085a      	lsrs	r2, r3, #1
 8009c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c1a:	441a      	add	r2, r3
 8009c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c22:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c28:	fb02 f303 	mul.w	r3, r2, r3
 8009c2c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c3c:	fb02 f303 	mul.w	r3, r2, r3
 8009c40:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c44:	039b      	lsls	r3, r3, #14
 8009c46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c4a:	4a47      	ldr	r2, [pc, #284]	; (8009d68 <VL53L0X_calc_dmax+0x23c>)
 8009c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c50:	099b      	lsrs	r3, r3, #6
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c58:	fb02 f303 	mul.w	r3, r2, r3
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c62:	fb02 f303 	mul.w	r3, r2, r3
 8009c66:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	091b      	lsrs	r3, r3, #4
 8009c6e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8009c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	4413      	add	r3, r2
 8009c80:	011b      	lsls	r3, r3, #4
 8009c82:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009c8a:	0b9b      	lsrs	r3, r3, #14
 8009c8c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8009c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c92:	4413      	add	r3, r2
 8009c94:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca8:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	039b      	lsls	r3, r3, #14
 8009cae:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	085b      	lsrs	r3, r3, #1
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc2:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
 8009ccc:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009cd4:	4a24      	ldr	r2, [pc, #144]	; (8009d68 <VL53L0X_calc_dmax+0x23c>)
 8009cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cda:	099b      	lsrs	r3, r3, #6
 8009cdc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	011b      	lsls	r3, r3, #4
 8009ce2:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009cea:	4a1f      	ldr	r2, [pc, #124]	; (8009d68 <VL53L0X_calc_dmax+0x23c>)
 8009cec:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf0:	099b      	lsrs	r3, r3, #6
 8009cf2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cf6:	3380      	adds	r3, #128	; 0x80
 8009cf8:	0a1b      	lsrs	r3, r3, #8
 8009cfa:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d008      	beq.n	8009d14 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	085a      	lsrs	r2, r3, #1
 8009d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d08:	441a      	add	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d10:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d12:	e001      	b.n	8009d18 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009d18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009d1a:	f7fe f9b7 	bl	800808c <VL53L0X_isqrt>
 8009d1e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d008      	beq.n	8009d38 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	085a      	lsrs	r2, r3, #1
 8009d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2c:	441a      	add	r2, r3
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d36:	e001      	b.n	8009d3c <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009d3c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009d3e:	f7fe f9a5 	bl	800808c <VL53L0X_isqrt>
 8009d42:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d902      	bls.n	8009d58 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8009d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d56:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009d58:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3768      	adds	r7, #104	; 0x68
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	fff00000 	.word	0xfff00000
 8009d68:	10624dd3 	.word	0x10624dd3

08009d6c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b0b4      	sub	sp, #208	; 0xd0
 8009d70:	af04      	add	r7, sp, #16
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009d7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009d82:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8009d8a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009d92:	f241 235c 	movw	r3, #4700	; 0x125c
 8009d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009d9a:	4b9e      	ldr	r3, [pc, #632]	; (800a014 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009da0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009da4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009da6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8009daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009db4:	4b98      	ldr	r3, [pc, #608]	; (800a018 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8009db6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dbc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009dbe:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009dc4:	f240 6377 	movw	r3, #1655	; 0x677
 8009dc8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
 8009dd4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009de2:	0c1b      	lsrs	r3, r3, #16
 8009de4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009dec:	f107 0310 	add.w	r3, r7, #16
 8009df0:	461a      	mov	r2, r3
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7ff fe74 	bl	8009ae2 <VL53L0X_get_total_signal_rate>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009e00:	f107 0314 	add.w	r3, r7, #20
 8009e04:	461a      	mov	r2, r3
 8009e06:	68b9      	ldr	r1, [r7, #8]
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff fe3b 	bl	8009a84 <VL53L0X_get_total_xtalk_rate>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e1a:	fb02 f303 	mul.w	r3, r2, r3
 8009e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e30:	fb02 f303 	mul.w	r3, r2, r3
 8009e34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009e38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d902      	bls.n	8009e48 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009e48:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d168      	bne.n	8009f22 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009e60:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009e64:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7fe feb0 	bl	8008bd4 <VL53L0X_calc_timeout_mclks>
 8009e74:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009e86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009e8a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7fe fe9d 	bl	8008bd4 <VL53L0X_calc_timeout_mclks>
 8009e9a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009ea2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d102      	bne.n	8009eb0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8009eb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009eba:	fb02 f303 	mul.w	r3, r2, r3
 8009ebe:	02db      	lsls	r3, r3, #11
 8009ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ec8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ecc:	4a53      	ldr	r2, [pc, #332]	; (800a01c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009ece:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed2:	099b      	lsrs	r3, r3, #6
 8009ed4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8009ed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009edc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ede:	fb02 f303 	mul.w	r3, r2, r3
 8009ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009eea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009eee:	4a4b      	ldr	r2, [pc, #300]	; (800a01c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef4:	099b      	lsrs	r3, r3, #6
 8009ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3380      	adds	r3, #128	; 0x80
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f08:	fb02 f303 	mul.w	r3, r2, r3
 8009f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f14:	3380      	adds	r3, #128	; 0x80
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	021b      	lsls	r3, r3, #8
 8009f20:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009f22:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009f2a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009f2e:	e165      	b.n	800a1fc <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8009f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10c      	bne.n	8009f50 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f3c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f44:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e153      	b.n	800a1f8 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009f50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f62:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f66:	041a      	lsls	r2, r3, #16
 8009f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009f72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d902      	bls.n	8009f82 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009f82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f86:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009f8a:	fb02 f303 	mul.w	r3, r2, r3
 8009f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009f92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f96:	4613      	mov	r3, r2
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe f874 	bl	800808c <VL53L0X_isqrt>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	891b      	ldrh	r3, [r3, #8]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fb2:	fb03 f302 	mul.w	r3, r3, r2
 8009fb6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fba:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009fbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fc0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fc2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009fc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fc8:	4a14      	ldr	r2, [pc, #80]	; (800a01c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009fca:	fba2 2303 	umull	r2, r3, r2, r3
 8009fce:	099b      	lsrs	r3, r3, #6
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fd4:	041b      	lsls	r3, r3, #16
 8009fd6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009fda:	4a10      	ldr	r2, [pc, #64]	; (800a01c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe0:	099b      	lsrs	r3, r3, #6
 8009fe2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bfb8      	it	lt
 8009ff6:	425b      	neglt	r3, r3
 8009ff8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffc:	021b      	lsls	r3, r3, #8
 8009ffe:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	7e1b      	ldrb	r3, [r3, #24]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a00c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a010:	e035      	b.n	800a07e <VL53L0X_calc_sigma_estimate+0x312>
 800a012:	bf00      	nop
 800a014:	028f87ae 	.word	0x028f87ae
 800a018:	0006999a 	.word	0x0006999a
 800a01c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a026:	fbb2 f3f3 	udiv	r3, r2, r3
 800a02a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a030:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a038:	fb02 f303 	mul.w	r3, r2, r3
 800a03c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a046:	4413      	add	r3, r2
 800a048:	0c1b      	lsrs	r3, r3, #16
 800a04a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a04e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a052:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a05a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a068:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a06c:	fb02 f303 	mul.w	r3, r2, r3
 800a070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a078:	0b9b      	lsrs	r3, r3, #14
 800a07a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a084:	fb02 f303 	mul.w	r3, r2, r3
 800a088:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a090:	0c1b      	lsrs	r3, r3, #16
 800a092:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a098:	fb02 f303 	mul.w	r3, r2, r3
 800a09c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a09e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0aa:	0c1b      	lsrs	r3, r3, #16
 800a0ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0b2:	fb02 f303 	mul.w	r3, r2, r3
 800a0b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a0b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	4413      	add	r3, r2
 800a0be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c2:	f7fd ffe3 	bl	800808c <VL53L0X_isqrt>
 800a0c6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	041b      	lsls	r3, r3, #16
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	3332      	adds	r3, #50	; 0x32
 800a0d2:	4a4c      	ldr	r2, [pc, #304]	; (800a204 <VL53L0X_calc_sigma_estimate+0x498>)
 800a0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d8:	095a      	lsrs	r2, r3, #5
 800a0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a0e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0e8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a0ec:	fb02 f303 	mul.w	r3, r2, r3
 800a0f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a0f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0f8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a106:	4a40      	ldr	r2, [pc, #256]	; (800a208 <VL53L0X_calc_sigma_estimate+0x49c>)
 800a108:	fba2 2303 	umull	r2, r3, r2, r3
 800a10c:	0b5b      	lsrs	r3, r3, #13
 800a10e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a118:	429a      	cmp	r2, r3
 800a11a:	d902      	bls.n	800a122 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a11c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a11e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a122:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a130:	4a36      	ldr	r2, [pc, #216]	; (800a20c <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	099b      	lsrs	r3, r3, #6
 800a138:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a13e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a142:	441a      	add	r2, r3
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd ff9e 	bl	800808c <VL53L0X_isqrt>
 800a150:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a15e:	4a2b      	ldr	r2, [pc, #172]	; (800a20c <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a160:	fba2 2303 	umull	r2, r3, r2, r3
 800a164:	099b      	lsrs	r3, r3, #6
 800a166:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a16c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a170:	fb02 f303 	mul.w	r3, r2, r3
 800a174:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	69fa      	ldr	r2, [r7, #28]
 800a17a:	fb02 f303 	mul.w	r3, r2, r3
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	4413      	add	r3, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f7fd ff80 	bl	800808c <VL53L0X_isqrt>
 800a18c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a194:	fb02 f303 	mul.w	r3, r2, r3
 800a198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a19c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d009      	beq.n	800a1b6 <VL53L0X_calc_sigma_estimate+0x44a>
 800a1a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <VL53L0X_calc_sigma_estimate+0x44a>
 800a1aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a1ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d903      	bls.n	800a1be <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a1b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a1c4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a1d0:	6939      	ldr	r1, [r7, #16]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1da:	9302      	str	r3, [sp, #8]
 800a1dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff fc9d 	bl	8009b2c <VL53L0X_calc_dmax>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1f8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	37c0      	adds	r7, #192	; 0xc0
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	51eb851f 	.word	0x51eb851f
 800a208:	d1b71759 	.word	0xd1b71759
 800a20c:	10624dd3 	.word	0x10624dd3

0800a210 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b090      	sub	sp, #64	; 0x40
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	607a      	str	r2, [r7, #4]
 800a21a:	461a      	mov	r2, r3
 800a21c:	460b      	mov	r3, r1
 800a21e:	72fb      	strb	r3, [r7, #11]
 800a220:	4613      	mov	r3, r2
 800a222:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a224:	2300      	movs	r3, #0
 800a226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a262:	7afb      	ldrb	r3, [r7, #11]
 800a264:	10db      	asrs	r3, r3, #3
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a270:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a274:	2b00      	cmp	r3, #0
 800a276:	d017      	beq.n	800a2a8 <VL53L0X_get_pal_range_status+0x98>
 800a278:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a27c:	2b05      	cmp	r3, #5
 800a27e:	d013      	beq.n	800a2a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a280:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a284:	2b07      	cmp	r3, #7
 800a286:	d00f      	beq.n	800a2a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a288:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a28c:	2b0c      	cmp	r3, #12
 800a28e:	d00b      	beq.n	800a2a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a290:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a294:	2b0d      	cmp	r3, #13
 800a296:	d007      	beq.n	800a2a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a298:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a29c:	2b0e      	cmp	r3, #14
 800a29e:	d003      	beq.n	800a2a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a2a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d103      	bne.n	800a2b0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a2ae:	e002      	b.n	800a2b6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a2b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d109      	bne.n	800a2d2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a2be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7fc f9e6 	bl	8006698 <VL53L0X_GetLimitCheckEnable>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a2d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d02e      	beq.n	800a338 <VL53L0X_get_pal_range_status+0x128>
 800a2da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d12a      	bne.n	800a338 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a2e2:	f107 0310 	add.w	r3, r7, #16
 800a2e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a2ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff fd3d 	bl	8009d6c <VL53L0X_calc_sigma_estimate>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a2f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d103      	bne.n	800a308 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	b29a      	uxth	r2, r3
 800a304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a306:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a308:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d113      	bne.n	800a338 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a310:	f107 0320 	add.w	r3, r7, #32
 800a314:	461a      	mov	r2, r3
 800a316:	2100      	movs	r1, #0
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f7fc fa43 	bl	80067a4 <VL53L0X_GetLimitCheckValue>
 800a31e:	4603      	mov	r3, r0
 800a320:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d006      	beq.n	800a338 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a32e:	429a      	cmp	r2, r3
 800a330:	d902      	bls.n	800a338 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a332:	2301      	movs	r3, #1
 800a334:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a338:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a340:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a344:	461a      	mov	r2, r3
 800a346:	2102      	movs	r1, #2
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fc f9a5 	bl	8006698 <VL53L0X_GetLimitCheckEnable>
 800a34e:	4603      	mov	r3, r0
 800a350:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a354:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d044      	beq.n	800a3e6 <VL53L0X_get_pal_range_status+0x1d6>
 800a35c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a360:	2b00      	cmp	r3, #0
 800a362:	d140      	bne.n	800a3e6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a364:	f107 031c 	add.w	r3, r7, #28
 800a368:	461a      	mov	r2, r3
 800a36a:	2102      	movs	r1, #2
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7fc fa19 	bl	80067a4 <VL53L0X_GetLimitCheckValue>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a378:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d107      	bne.n	800a390 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a380:	2201      	movs	r2, #1
 800a382:	21ff      	movs	r1, #255	; 0xff
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 fabf 	bl	800a908 <VL53L0X_WrByte>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a390:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a394:	2b00      	cmp	r3, #0
 800a396:	d109      	bne.n	800a3ac <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a398:	f107 0316 	add.w	r3, r7, #22
 800a39c:	461a      	mov	r2, r3
 800a39e:	21b6      	movs	r1, #182	; 0xb6
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 fb72 	bl	800aa8a <VL53L0X_RdWord>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a3ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d107      	bne.n	800a3c4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	21ff      	movs	r1, #255	; 0xff
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 faa5 	bl	800a908 <VL53L0X_WrByte>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a3c4:	8afb      	ldrh	r3, [r7, #22]
 800a3c6:	025b      	lsls	r3, r3, #9
 800a3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d006      	beq.n	800a3e6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a3d8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a3da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d902      	bls.n	800a3e6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a3e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a3ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	2103      	movs	r1, #3
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7fc f94e 	bl	8006698 <VL53L0X_GetLimitCheckEnable>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a402:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a406:	2b00      	cmp	r3, #0
 800a408:	d023      	beq.n	800a452 <VL53L0X_get_pal_range_status+0x242>
 800a40a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11f      	bne.n	800a452 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a412:	893b      	ldrh	r3, [r7, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	637b      	str	r3, [r7, #52]	; 0x34
 800a41c:	e005      	b.n	800a42a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	021a      	lsls	r2, r3, #8
 800a422:	893b      	ldrh	r3, [r7, #8]
 800a424:	fbb2 f3f3 	udiv	r3, r2, r3
 800a428:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a42a:	f107 0318 	add.w	r3, r7, #24
 800a42e:	461a      	mov	r2, r3
 800a430:	2103      	movs	r1, #3
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f7fc f9b6 	bl	80067a4 <VL53L0X_GetLimitCheckValue>
 800a438:	4603      	mov	r3, r0
 800a43a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d006      	beq.n	800a452 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a444:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a448:	429a      	cmp	r2, r3
 800a44a:	d202      	bcs.n	800a452 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a452:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a456:	2b00      	cmp	r3, #0
 800a458:	d14a      	bne.n	800a4f0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a45a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d103      	bne.n	800a46a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a464:	22ff      	movs	r2, #255	; 0xff
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	e042      	b.n	800a4f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a46a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d007      	beq.n	800a482 <VL53L0X_get_pal_range_status+0x272>
 800a472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a476:	2b02      	cmp	r3, #2
 800a478:	d003      	beq.n	800a482 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a47a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a47e:	2b03      	cmp	r3, #3
 800a480:	d103      	bne.n	800a48a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a484:	2205      	movs	r2, #5
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	e032      	b.n	800a4f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a48a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a48e:	2b06      	cmp	r3, #6
 800a490:	d003      	beq.n	800a49a <VL53L0X_get_pal_range_status+0x28a>
 800a492:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a496:	2b09      	cmp	r3, #9
 800a498:	d103      	bne.n	800a4a2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a49c:	2204      	movs	r2, #4
 800a49e:	701a      	strb	r2, [r3, #0]
 800a4a0:	e026      	b.n	800a4f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a4a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4a6:	2b08      	cmp	r3, #8
 800a4a8:	d007      	beq.n	800a4ba <VL53L0X_get_pal_range_status+0x2aa>
 800a4aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4ae:	2b0a      	cmp	r3, #10
 800a4b0:	d003      	beq.n	800a4ba <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a4b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d103      	bne.n	800a4c2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4bc:	2203      	movs	r2, #3
 800a4be:	701a      	strb	r2, [r3, #0]
 800a4c0:	e016      	b.n	800a4f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a4c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4c6:	2b04      	cmp	r3, #4
 800a4c8:	d003      	beq.n	800a4d2 <VL53L0X_get_pal_range_status+0x2c2>
 800a4ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d103      	bne.n	800a4da <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	701a      	strb	r2, [r3, #0]
 800a4d8:	e00a      	b.n	800a4f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a4da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d103      	bne.n	800a4ea <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
 800a4e8:	e002      	b.n	800a4f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a4f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d102      	bne.n	800a4fe <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a4f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a4fe:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a502:	461a      	mov	r2, r3
 800a504:	2101      	movs	r1, #1
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7fc f8c6 	bl	8006698 <VL53L0X_GetLimitCheckEnable>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a512:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a516:	2b00      	cmp	r3, #0
 800a518:	d14f      	bne.n	800a5ba <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a51a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <VL53L0X_get_pal_range_status+0x31a>
 800a522:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a526:	2b01      	cmp	r3, #1
 800a528:	d103      	bne.n	800a532 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a52a:	2301      	movs	r3, #1
 800a52c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a530:	e002      	b.n	800a538 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a53e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a542:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a546:	2b04      	cmp	r3, #4
 800a548:	d003      	beq.n	800a552 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a54a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d103      	bne.n	800a55a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a552:	2301      	movs	r3, #1
 800a554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a558:	e002      	b.n	800a560 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a566:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a56a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <VL53L0X_get_pal_range_status+0x36a>
 800a572:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a576:	2b01      	cmp	r3, #1
 800a578:	d103      	bne.n	800a582 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a57a:	2301      	movs	r3, #1
 800a57c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a580:	e002      	b.n	800a588 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a58e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a592:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <VL53L0X_get_pal_range_status+0x392>
 800a59a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d103      	bne.n	800a5aa <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a8:	e002      	b.n	800a5b0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a5b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3740      	adds	r7, #64	; 0x40
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <VL53L0X_write_byte>:

#include "vl53l0x/vl53l0x_i2c_platform.h"

uint8_t _i2c_buffer[64];

int32_t VL53L0X_write_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t   data){
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	70fb      	strb	r3, [r7, #3]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	70bb      	strb	r3, [r7, #2]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	707b      	strb	r3, [r7, #1]

	_i2c_buffer[0]=index;
 800a5e2:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <VL53L0X_write_byte+0x44>)
 800a5e4:	78bb      	ldrb	r3, [r7, #2]
 800a5e6:	7013      	strb	r3, [r2, #0]
	_i2c_buffer[1]=data;
 800a5e8:	4a08      	ldr	r2, [pc, #32]	; (800a60c <VL53L0X_write_byte+0x44>)
 800a5ea:	787b      	ldrb	r3, [r7, #1]
 800a5ec:	7053      	strb	r3, [r2, #1]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,2,10);
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	b299      	uxth	r1, r3
 800a5f2:	230a      	movs	r3, #10
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	4a04      	ldr	r2, [pc, #16]	; (800a60c <VL53L0X_write_byte+0x44>)
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7f7 fc54 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800a600:	4603      	mov	r3, r0

}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000d1c 	.word	0x20000d1c

0800a610 <VL53L0X_read_byte>:

int32_t VL53L0X_read_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata){
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af02      	add	r7, sp, #8
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	607b      	str	r3, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	72fb      	strb	r3, [r7, #11]
 800a61e:	4613      	mov	r3, r2
 800a620:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(i2c_handle,address,&index,1,10)){
 800a622:	7afb      	ldrb	r3, [r7, #11]
 800a624:	b299      	uxth	r1, r3
 800a626:	f107 020a 	add.w	r2, r7, #10
 800a62a:	230a      	movs	r3, #10
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	2301      	movs	r3, #1
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7f7 fc39 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <VL53L0X_read_byte+0x30>
		return 1;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e00c      	b.n	800a65a <VL53L0X_read_byte+0x4a>
	}

	return HAL_I2C_Master_Receive(i2c_handle,address|1,pdata,1,10);
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	f043 0301 	orr.w	r3, r3, #1
 800a646:	b2db      	uxtb	r3, r3
 800a648:	b299      	uxth	r1, r3
 800a64a:	230a      	movs	r3, #10
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	2301      	movs	r3, #1
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7f7 fd36 	bl	80020c4 <HAL_I2C_Master_Receive>
 800a658:	4603      	mov	r3, r0



}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint32_t *pdata) {
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af02      	add	r7, sp, #8
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	607b      	str	r3, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	72fb      	strb	r3, [r7, #11]
 800a672:	4613      	mov	r3, r2
 800a674:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	b299      	uxth	r1, r3
 800a67a:	f107 020a 	add.w	r2, r7, #10
 800a67e:	230a      	movs	r3, #10
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	2301      	movs	r3, #1
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7f7 fc0f 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <VL53L0X_read_dword+0x30>
		return 1;
 800a690:	2301      	movs	r3, #1
 800a692:	e021      	b.n	800a6d8 <VL53L0X_read_dword+0x74>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 4, 10)) {
 800a694:	7afb      	ldrb	r3, [r7, #11]
 800a696:	f043 0301 	orr.w	r3, r3, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	b299      	uxth	r1, r3
 800a69e:	230a      	movs	r3, #10
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	2304      	movs	r3, #4
 800a6a4:	4a0e      	ldr	r2, [pc, #56]	; (800a6e0 <VL53L0X_read_dword+0x7c>)
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7f7 fd0c 	bl	80020c4 <HAL_I2C_Master_Receive>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <VL53L0X_read_dword+0x52>
		return 1;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e010      	b.n	800a6d8 <VL53L0X_read_dword+0x74>
	}

	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 800a6b6:	4b0a      	ldr	r3, [pc, #40]	; (800a6e0 <VL53L0X_read_dword+0x7c>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) _i2c_buffer[1] << 16)
 800a6bc:	4b08      	ldr	r3, [pc, #32]	; (800a6e0 <VL53L0X_read_dword+0x7c>)
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	041b      	lsls	r3, r3, #16
 800a6c2:	441a      	add	r2, r3
			+ ((uint32_t) _i2c_buffer[2] << 8) + (uint32_t) _i2c_buffer[3];
 800a6c4:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <VL53L0X_read_dword+0x7c>)
 800a6c6:	789b      	ldrb	r3, [r3, #2]
 800a6c8:	021b      	lsls	r3, r3, #8
 800a6ca:	4413      	add	r3, r2
 800a6cc:	4a04      	ldr	r2, [pc, #16]	; (800a6e0 <VL53L0X_read_dword+0x7c>)
 800a6ce:	78d2      	ldrb	r2, [r2, #3]
 800a6d0:	441a      	add	r2, r3
	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	601a      	str	r2, [r3, #0]
	return 0;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20000d1c 	.word	0x20000d1c

0800a6e4 <VL53L0X_write_word>:


int32_t VL53L0X_write_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t  data){
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	70fb      	strb	r3, [r7, #3]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70bb      	strb	r3, [r7, #2]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	803b      	strh	r3, [r7, #0]


    _i2c_buffer[0] = index;
 800a6fe:	4a0d      	ldr	r2, [pc, #52]	; (800a734 <VL53L0X_write_word+0x50>)
 800a700:	78bb      	ldrb	r3, [r7, #2]
 800a702:	7013      	strb	r3, [r2, #0]
    _i2c_buffer[1] = data >> 8;
 800a704:	883b      	ldrh	r3, [r7, #0]
 800a706:	0a1b      	lsrs	r3, r3, #8
 800a708:	b29b      	uxth	r3, r3
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	4b09      	ldr	r3, [pc, #36]	; (800a734 <VL53L0X_write_word+0x50>)
 800a70e:	705a      	strb	r2, [r3, #1]
    _i2c_buffer[2] = data & 0x00FF;
 800a710:	883b      	ldrh	r3, [r7, #0]
 800a712:	b2da      	uxtb	r2, r3
 800a714:	4b07      	ldr	r3, [pc, #28]	; (800a734 <VL53L0X_write_word+0x50>)
 800a716:	709a      	strb	r2, [r3, #2]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,3,10);
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	b299      	uxth	r1, r3
 800a71c:	230a      	movs	r3, #10
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	2303      	movs	r3, #3
 800a722:	4a04      	ldr	r2, [pc, #16]	; (800a734 <VL53L0X_write_word+0x50>)
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7f7 fbbf 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800a72a:	4603      	mov	r3, r0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20000d1c 	.word	0x20000d1c

0800a738 <VL53L0X_read_word>:


int32_t VL53L0X_read_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t *pdata){
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	607b      	str	r3, [r7, #4]
 800a742:	460b      	mov	r3, r1
 800a744:	72fb      	strb	r3, [r7, #11]
 800a746:	4613      	mov	r3, r2
 800a748:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	b299      	uxth	r1, r3
 800a74e:	f107 020a 	add.w	r2, r7, #10
 800a752:	230a      	movs	r3, #10
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	2301      	movs	r3, #1
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7f7 fba5 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <VL53L0X_read_word+0x30>
		return 1;
 800a764:	2301      	movs	r3, #1
 800a766:	e01d      	b.n	800a7a4 <VL53L0X_read_word+0x6c>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 2, 10)) {
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	b299      	uxth	r1, r3
 800a772:	230a      	movs	r3, #10
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	2302      	movs	r3, #2
 800a778:	4a0c      	ldr	r2, [pc, #48]	; (800a7ac <VL53L0X_read_word+0x74>)
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7f7 fca2 	bl	80020c4 <HAL_I2C_Master_Receive>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <VL53L0X_read_word+0x52>
		return 1;
 800a786:	2301      	movs	r3, #1
 800a788:	e00c      	b.n	800a7a4 <VL53L0X_read_word+0x6c>
	}

	 *pdata = ((uint16_t)_i2c_buffer[0]<<8) + (uint16_t)_i2c_buffer[1];
 800a78a:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <VL53L0X_read_word+0x74>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	021b      	lsls	r3, r3, #8
 800a792:	b29a      	uxth	r2, r3
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <VL53L0X_read_word+0x74>)
 800a796:	785b      	ldrb	r3, [r3, #1]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	801a      	strh	r2, [r3, #0]
	return 0;
 800a7a2:	2300      	movs	r3, #0

}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000d1c 	.word	0x20000d1c

0800a7b0 <VL53L0X_read_multi>:


int32_t VL53L0X_read_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata, int32_t count){
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af02      	add	r7, sp, #8
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	72fb      	strb	r3, [r7, #11]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 800a7c2:	7afb      	ldrb	r3, [r7, #11]
 800a7c4:	b299      	uxth	r1, r3
 800a7c6:	f107 020a 	add.w	r2, r7, #10
 800a7ca:	230a      	movs	r3, #10
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7f7 fb69 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <VL53L0X_read_multi+0x30>
		return 1;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e013      	b.n	800a808 <VL53L0X_read_multi+0x58>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, pdata, count, 10)) {
 800a7e0:	7afb      	ldrb	r3, [r7, #11]
 800a7e2:	f043 0301 	orr.w	r3, r3, #1
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	b299      	uxth	r1, r3
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7f7 fc64 	bl	80020c4 <HAL_I2C_Master_Receive>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <VL53L0X_read_multi+0x56>
		return 1;
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <VL53L0X_read_multi+0x58>
	}

	return 0;
 800a806:	2300      	movs	r3, #0


}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <VL53L0X_write_multi>:


int32_t VL53L0X_write_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint8_t  *pdata, int32_t count){
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	607b      	str	r3, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	72fb      	strb	r3, [r7, #11]
 800a81e:	4613      	mov	r3, r2
 800a820:	72bb      	strb	r3, [r7, #10]
    _i2c_buffer[0] = index;
 800a822:	4a0d      	ldr	r2, [pc, #52]	; (800a858 <VL53L0X_write_multi+0x48>)
 800a824:	7abb      	ldrb	r3, [r7, #10]
 800a826:	7013      	strb	r3, [r2, #0]
    memcpy(&_i2c_buffer[1], pdata, count);
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	461a      	mov	r2, r3
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	480b      	ldr	r0, [pc, #44]	; (800a85c <VL53L0X_write_multi+0x4c>)
 800a830:	f005 ff6c 	bl	801070c <memcpy>

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,count+1,10);
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	b299      	uxth	r1, r3
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3301      	adds	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	230a      	movs	r3, #10
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	4613      	mov	r3, r2
 800a846:	4a04      	ldr	r2, [pc, #16]	; (800a858 <VL53L0X_write_multi+0x48>)
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7f7 fb2d 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800a84e:	4603      	mov	r3, r0

}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000d1c 	.word	0x20000d1c
 800a85c:	20000d1d 	.word	0x20000d1d

0800a860 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	; 0x28
 800a864:	af02      	add	r7, sp, #8
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	607a      	str	r2, [r7, #4]
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	460b      	mov	r3, r1
 800a86e:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a870:	2300      	movs	r3, #0
 800a872:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b3f      	cmp	r3, #63	; 0x3f
 800a87c:	d901      	bls.n	800a882 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a87e:	23fc      	movs	r3, #252	; 0xfc
 800a880:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a888:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	7afa      	ldrb	r2, [r7, #11]
 800a894:	7df9      	ldrb	r1, [r7, #23]
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f7ff ffb9 	bl	800a810 <VL53L0X_write_multi>
 800a89e:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a8a6:	23ec      	movs	r3, #236	; 0xec
 800a8a8:	77fb      	strb	r3, [r7, #31]

    return Status;
 800a8aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3720      	adds	r7, #32
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b088      	sub	sp, #32
 800a8ba:	af02      	add	r7, sp, #8
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b3f      	cmp	r3, #63	; 0x3f
 800a8ce:	d901      	bls.n	800a8d4 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8d0:	23fc      	movs	r3, #252	; 0xfc
 800a8d2:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a8da:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	7afa      	ldrb	r2, [r7, #11]
 800a8e6:	7db9      	ldrb	r1, [r7, #22]
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f7ff ff60 	bl	800a7b0 <VL53L0X_read_multi>
 800a8f0:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <VL53L0X_ReadMulti+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a8f8:	23ec      	movs	r3, #236	; 0xec
 800a8fa:	75fb      	strb	r3, [r7, #23]

    return Status;
 800a8fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
 800a914:	4613      	mov	r3, r2
 800a916:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a922:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800a92a:	78bb      	ldrb	r3, [r7, #2]
 800a92c:	78fa      	ldrb	r2, [r7, #3]
 800a92e:	7bb9      	ldrb	r1, [r7, #14]
 800a930:	f7ff fe4a 	bl	800a5c8 <VL53L0X_write_byte>
 800a934:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <VL53L0X_WrByte+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a93c:	23ec      	movs	r3, #236	; 0xec
 800a93e:	73fb      	strb	r3, [r7, #15]

    return Status;
 800a940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
 800a958:	4613      	mov	r3, r2
 800a95a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a966:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(Dev->i2c_handle,deviceAddress, index, data);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800a96e:	883b      	ldrh	r3, [r7, #0]
 800a970:	78fa      	ldrb	r2, [r7, #3]
 800a972:	7bb9      	ldrb	r1, [r7, #14]
 800a974:	f7ff feb6 	bl	800a6e4 <VL53L0X_write_word>
 800a978:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <VL53L0X_WrWord+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a980:	23ec      	movs	r3, #236	; 0xec
 800a982:	73fb      	strb	r3, [r7, #15]

    return Status;
 800a984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data){
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	460b      	mov	r3, r1
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a9a8:	75bb      	strb	r3, [r7, #22]

	//status_int = VL53L0X_write_dword(Dev->i2c_handle,deviceAddress, index, data);

	if (status_int != 0)
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <VL53L0X_WrDWord+0x24>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a9b0:	23ec      	movs	r3, #236	; 0xec
 800a9b2:	75fb      	strb	r3, [r7, #23]

    return Status;
 800a9b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	70fb      	strb	r3, [r7, #3]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	70bb      	strb	r3, [r7, #2]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a9e8:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, &data);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800a9f0:	f107 030f 	add.w	r3, r7, #15
 800a9f4:	78fa      	ldrb	r2, [r7, #3]
 800a9f6:	7db9      	ldrb	r1, [r7, #22]
 800a9f8:	f7ff fe0a 	bl	800a610 <VL53L0X_read_byte>
 800a9fc:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <VL53L0X_UpdateByte+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa04:	23ec      	movs	r3, #236	; 0xec
 800aa06:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 800aa08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d115      	bne.n	800aa3c <VL53L0X_UpdateByte+0x78>
        data = (data & AndData) | OrData;
 800aa10:	7bfa      	ldrb	r2, [r7, #15]
 800aa12:	78bb      	ldrb	r3, [r7, #2]
 800aa14:	4013      	ands	r3, r2
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	787b      	ldrb	r3, [r7, #1]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	7db9      	ldrb	r1, [r7, #22]
 800aa2c:	f7ff fdcc 	bl	800a5c8 <VL53L0X_write_byte>
 800aa30:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <VL53L0X_UpdateByte+0x78>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa38:	23ec      	movs	r3, #236	; 0xec
 800aa3a:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800aa3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	460b      	mov	r3, r1
 800aa52:	607a      	str	r2, [r7, #4]
 800aa54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800aa60:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, data);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800aa68:	7afa      	ldrb	r2, [r7, #11]
 800aa6a:	7db9      	ldrb	r1, [r7, #22]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f7ff fdcf 	bl	800a610 <VL53L0X_read_byte>
 800aa72:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <VL53L0X_RdByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa7a:	23ec      	movs	r3, #236	; 0xec
 800aa7c:	75fb      	strb	r3, [r7, #23]

    return Status;
 800aa7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b086      	sub	sp, #24
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	460b      	mov	r3, r1
 800aa94:	607a      	str	r2, [r7, #4]
 800aa96:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800aaa2:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(Dev->i2c_handle,deviceAddress, index, data);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800aaaa:	7afa      	ldrb	r2, [r7, #11]
 800aaac:	7db9      	ldrb	r1, [r7, #22]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f7ff fe42 	bl	800a738 <VL53L0X_read_word>
 800aab4:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <VL53L0X_RdWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aabc:	23ec      	movs	r3, #236	; 0xec
 800aabe:	75fb      	strb	r3, [r7, #23]

    return Status;
 800aac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	460b      	mov	r3, r1
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800aae4:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(Dev->i2c_handle,deviceAddress, index, data);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
 800aaec:	7afa      	ldrb	r2, [r7, #11]
 800aaee:	7db9      	ldrb	r1, [r7, #22]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f7ff fdb7 	bl	800a664 <VL53L0X_read_dword>
 800aaf6:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <VL53L0X_RdDWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aafe:	23ec      	movs	r3, #236	; 0xec
 800ab00:	75fb      	strb	r3, [r7, #23]

    return Status;
 800ab02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	72fb      	strb	r3, [r7, #11]
    LOG_FUNCTION_START("");

    //czekaj 2 ms nie rob nic
    //HAL_Delay(2);

	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e002      	b.n	800ab28 <VL53L0X_PollingDelay+0x18>
		time++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3301      	adds	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
	for(uint32_t time = 0;time<1000*VL53L0X_POLLINGDELAY_LOOPNB;){
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4a05      	ldr	r2, [pc, #20]	; (800ab40 <VL53L0X_PollingDelay+0x30>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d9f8      	bls.n	800ab22 <VL53L0X_PollingDelay+0x12>
	}

    LOG_FUNCTION_END(status);
    return status;
 800ab30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	0003d08f 	.word	0x0003d08f

0800ab44 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800ab50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d105      	bne.n	800ab64 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800ab58:	2101      	movs	r1, #1
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 f84a 	bl	800bbf4 <VL53L1_data_init>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 800ab64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d107      	bne.n	800ab7c <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2208      	movs	r2, #8
 800ab78:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73bb      	strb	r3, [r7, #14]
 800ab80:	e012      	b.n	800aba8 <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 800ab82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d112      	bne.n	800abb0 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fbf1 	bl	800b37a <VL53L1_SetLimitCheckEnable>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	3301      	adds	r3, #1
 800aba6:	73bb      	strb	r3, [r7, #14]
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d9e9      	bls.n	800ab82 <VL53L1_DataInit+0x3e>
 800abae:	e000      	b.n	800abb2 <VL53L1_DataInit+0x6e>
		else
			break;
 800abb0:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 800abb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d107      	bne.n	800abca <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800abba:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800abbe:	2100      	movs	r1, #0
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fc3b 	bl	800b43c <VL53L1_SetLimitCheckValue>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 800abca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d107      	bne.n	800abe2 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800abd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800abd6:	2101      	movs	r1, #1
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fc2f 	bl	800b43c <VL53L1_SetLimitCheckValue>
 800abde:	4603      	mov	r3, r0
 800abe0:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b084      	sub	sp, #16
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2203      	movs	r2, #3
 800abfe:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800ac02:	2320      	movs	r3, #32
 800ac04:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7bba      	ldrb	r2, [r7, #14]
 800ac0a:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2203      	movs	r2, #3
 800ac10:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2203      	movs	r2, #3
 800ac18:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2203      	movs	r2, #3
 800ac20:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800ac24:	2108      	movs	r1, #8
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f8ed 	bl	800ae06 <VL53L1_SetPresetMode>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 800ac30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800ac48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f005 facd 	bl	80101ec <VL53L1_poll_for_boot_completion>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800ac56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
	...

0800ac64 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	603a      	str	r2, [r7, #0]
 800ac6e:	71fb      	strb	r3, [r7, #7]
 800ac70:	460b      	mov	r3, r1
 800ac72:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800ac78:	4a2c      	ldr	r2, [pc, #176]	; (800ad2c <ComputeDevicePresetMode+0xc8>)
 800ac7a:	f107 0310 	add.w	r3, r7, #16
 800ac7e:	6812      	ldr	r2, [r2, #0]
 800ac80:	4611      	mov	r1, r2
 800ac82:	8019      	strh	r1, [r3, #0]
 800ac84:	3302      	adds	r3, #2
 800ac86:	0c12      	lsrs	r2, r2, #16
 800ac88:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800ac8a:	4a29      	ldr	r2, [pc, #164]	; (800ad30 <ComputeDevicePresetMode+0xcc>)
 800ac8c:	f107 030c 	add.w	r3, r7, #12
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	4611      	mov	r1, r2
 800ac94:	8019      	strh	r1, [r3, #0]
 800ac96:	3302      	adds	r3, #2
 800ac98:	0c12      	lsrs	r2, r2, #16
 800ac9a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800ac9c:	4a25      	ldr	r2, [pc, #148]	; (800ad34 <ComputeDevicePresetMode+0xd0>)
 800ac9e:	f107 0308 	add.w	r3, r7, #8
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	4611      	mov	r1, r2
 800aca6:	8019      	strh	r1, [r3, #0]
 800aca8:	3302      	adds	r3, #2
 800acaa:	0c12      	lsrs	r2, r2, #16
 800acac:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2201      	movs	r2, #1
 800acb2:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800acb4:	79bb      	ldrb	r3, [r7, #6]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d002      	beq.n	800acc0 <ComputeDevicePresetMode+0x5c>
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d003      	beq.n	800acc6 <ComputeDevicePresetMode+0x62>
 800acbe:	e005      	b.n	800accc <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	75bb      	strb	r3, [r7, #22]
		break;
 800acc4:	e004      	b.n	800acd0 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800acc6:	2301      	movs	r3, #1
 800acc8:	75bb      	strb	r3, [r7, #22]
		break;
 800acca:	e001      	b.n	800acd0 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800accc:	2302      	movs	r3, #2
 800acce:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	d004      	beq.n	800ace0 <ComputeDevicePresetMode+0x7c>
 800acd6:	2b08      	cmp	r3, #8
 800acd8:	d014      	beq.n	800ad04 <ComputeDevicePresetMode+0xa0>
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d009      	beq.n	800acf2 <ComputeDevicePresetMode+0x8e>
 800acde:	e01a      	b.n	800ad16 <ComputeDevicePresetMode+0xb2>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800ace0:	7dbb      	ldrb	r3, [r7, #22]
 800ace2:	f107 0218 	add.w	r2, r7, #24
 800ace6:	4413      	add	r3, r2
 800ace8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	701a      	strb	r2, [r3, #0]
		break;
 800acf0:	e013      	b.n	800ad1a <ComputeDevicePresetMode+0xb6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800acf2:	7dbb      	ldrb	r3, [r7, #22]
 800acf4:	f107 0218 	add.w	r2, r7, #24
 800acf8:	4413      	add	r3, r2
 800acfa:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	701a      	strb	r2, [r3, #0]
		break;
 800ad02:	e00a      	b.n	800ad1a <ComputeDevicePresetMode+0xb6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800ad04:	7dbb      	ldrb	r3, [r7, #22]
 800ad06:	f107 0218 	add.w	r2, r7, #24
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	701a      	strb	r2, [r3, #0]
		break;
 800ad14:	e001      	b.n	800ad1a <ComputeDevicePresetMode+0xb6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800ad16:	23f8      	movs	r3, #248	; 0xf8
 800ad18:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800ad1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	371c      	adds	r7, #28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	08011640 	.word	0x08011640
 800ad30:	08011644 	.word	0x08011644
 800ad34:	08011648 	.word	0x08011648

0800ad38 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800ad38:	b5b0      	push	{r4, r5, r7, lr}
 800ad3a:	b08e      	sub	sp, #56	; 0x38
 800ad3c:	af04      	add	r7, sp, #16
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	607b      	str	r3, [r7, #4]
 800ad42:	460b      	mov	r3, r1
 800ad44:	72fb      	strb	r3, [r7, #11]
 800ad46:	4613      	mov	r3, r2
 800ad48:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d002      	beq.n	800ad5c <SetPresetMode+0x24>
 800ad56:	7afb      	ldrb	r3, [r7, #11]
 800ad58:	2b08      	cmp	r3, #8
 800ad5a:	d103      	bne.n	800ad64 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800ad5c:	2340      	movs	r3, #64	; 0x40
 800ad5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ad62:	e002      	b.n	800ad6a <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800ad64:	2320      	movs	r3, #32
 800ad66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800ad6a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800ad6e:	7ab9      	ldrb	r1, [r7, #10]
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff ff76 	bl	800ac64 <ComputeDevicePresetMode>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800ad7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d112      	bne.n	800adac <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800ad86:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800ad8a:	f107 001c 	add.w	r0, r7, #28
 800ad8e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800ad92:	f107 0314 	add.w	r3, r7, #20
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	f107 0318 	add.w	r3, r7, #24
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	4603      	mov	r3, r0
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f001 f9e7 	bl	800c174 <VL53L1_get_preset_mode_timing_cfg>
 800ada6:	4603      	mov	r3, r0
 800ada8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800adac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d112      	bne.n	800adda <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 800adb4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800adb8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800adba:	69fd      	ldr	r5, [r7, #28]
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	9102      	str	r1, [sp, #8]
 800adc4:	9201      	str	r2, [sp, #4]
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	462b      	mov	r3, r5
 800adca:	4622      	mov	r2, r4
 800adcc:	4601      	mov	r1, r0
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f001 fa7a 	bl	800c2c8 <VL53L1_set_preset_mode>
 800add4:	4603      	mov	r3, r0
 800add6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800adda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d103      	bne.n	800adea <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ade8:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 800adea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d103      	bne.n	800adfa <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	7afa      	ldrb	r2, [r7, #11]
 800adf6:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800adfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3728      	adds	r7, #40	; 0x28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bdb0      	pop	{r4, r5, r7, pc}

0800ae06 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	460b      	mov	r3, r1
 800ae10:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800ae16:	2303      	movs	r3, #3
 800ae18:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 800ae1a:	7bba      	ldrb	r2, [r7, #14]
 800ae1c:	78f9      	ldrb	r1, [r7, #3]
 800ae1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff ff88 	bl	800ad38 <SetPresetMode>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800ae2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d11f      	bne.n	800ae74 <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	7bba      	ldrb	r2, [r7, #14]
 800ae38:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7bba      	ldrb	r2, [r7, #14]
 800ae40:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d005      	beq.n	800ae56 <VL53L1_SetPresetMode+0x50>
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d002      	beq.n	800ae56 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800ae50:	78fb      	ldrb	r3, [r7, #3]
 800ae52:	2b08      	cmp	r3, #8
 800ae54:	d107      	bne.n	800ae66 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ae56:	f24a 0128 	movw	r1, #41000	; 0xa028
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f8a2 	bl	800afa4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73fb      	strb	r3, [r7, #15]
 800ae64:	e006      	b.n	800ae74 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800ae66:	f248 2135 	movw	r1, #33333	; 0x8235
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f89a 	bl	800afa4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800ae74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800ae7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fa0d 	bl	800b2a0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b088      	sub	sp, #32
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800aeac:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d008      	beq.n	800aec6 <VL53L1_SetDistanceMode+0x30>
 800aeb4:	78fb      	ldrb	r3, [r7, #3]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d005      	beq.n	800aec6 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d002      	beq.n	800aec6 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800aec0:	f06f 0303 	mvn.w	r3, #3
 800aec4:	e069      	b.n	800af9a <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 800aec6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10a      	bne.n	800aee4 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 800aece:	78fb      	ldrb	r3, [r7, #3]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d002      	beq.n	800aeda <VL53L1_SetDistanceMode+0x44>
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d102      	bne.n	800aee0 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	77bb      	strb	r3, [r7, #30]
 800aede:	e001      	b.n	800aee4 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800aee0:	2303      	movs	r3, #3
 800aee2:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 800aee4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d107      	bne.n	800aefc <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800aeec:	f107 0308 	add.w	r3, r7, #8
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 f8e7 	bl	800c0c6 <VL53L1_get_user_zone>
 800aef8:	4603      	mov	r3, r0
 800aefa:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800af02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10a      	bne.n	800af20 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800af0a:	f107 0314 	add.w	r3, r7, #20
 800af0e:	f107 0210 	add.w	r2, r7, #16
 800af12:	f107 010c 	add.w	r1, r7, #12
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 f810 	bl	800bf3c <VL53L1_get_timeouts_us>
 800af1c:	4603      	mov	r3, r0
 800af1e:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800af20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d107      	bne.n	800af38 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 800af28:	7fba      	ldrb	r2, [r7, #30]
 800af2a:	7f79      	ldrb	r1, [r7, #29]
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff ff02 	bl	800ad38 <SetPresetMode>
 800af34:	4603      	mov	r3, r0
 800af36:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800af38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10b      	bne.n	800af58 <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7fba      	ldrb	r2, [r7, #30]
 800af44:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7fba      	ldrb	r2, [r7, #30]
 800af4c:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	78fa      	ldrb	r2, [r7, #3]
 800af54:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800af58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10e      	bne.n	800af7e <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800af60:	68f9      	ldr	r1, [r7, #12]
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 ffb0 	bl	800becc <VL53L1_set_timeouts_us>
 800af6c:	4603      	mov	r3, r0
 800af6e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800af70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800af7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d107      	bne.n	800af96 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800af86:	f107 0308 	add.w	r3, r7, #8
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 f877 	bl	800c080 <VL53L1_set_user_zone>
 800af92:	4603      	mov	r3, r0
 800af94:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800af96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08c      	sub	sp, #48	; 0x30
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800afae:	2300      	movs	r3, #0
 800afb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800afb4:	4b63      	ldr	r3, [pc, #396]	; (800b144 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a0>)
 800afb6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	4a63      	ldr	r2, [pc, #396]	; (800b148 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d902      	bls.n	800afc6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800afc0:	23fc      	movs	r3, #252	; 0xfc
 800afc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800afc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d109      	bne.n	800afe2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800afce:	f107 031a 	add.w	r3, r7, #26
 800afd2:	461a      	mov	r2, r3
 800afd4:	2105      	movs	r1, #5
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fac0 	bl	800b55c <VL53L1_GetSequenceStepEnable>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800afe2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d109      	bne.n	800affe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800afea:	f107 0319 	add.w	r3, r7, #25
 800afee:	461a      	mov	r2, r3
 800aff0:	2106      	movs	r1, #6
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fab2 	bl	800b55c <VL53L1_GetSequenceStepEnable>
 800aff8:	4603      	mov	r3, r0
 800affa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800affe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10b      	bne.n	800b01e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 800b006:	f107 0314 	add.w	r3, r7, #20
 800b00a:	f107 0210 	add.w	r2, r7, #16
 800b00e:	f107 010c 	add.w	r1, r7, #12
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 ff92 	bl	800bf3c <VL53L1_get_timeouts_us>
 800b018:	4603      	mov	r3, r0
 800b01a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800b01e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b022:	2b00      	cmp	r3, #0
 800b024:	d17f      	bne.n	800b126 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800b02c:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800b032:	2301      	movs	r3, #1
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800b036:	7efb      	ldrb	r3, [r7, #27]
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d004      	beq.n	800b046 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xa2>
 800b03c:	2b08      	cmp	r3, #8
 800b03e:	d023      	beq.n	800b088 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe4>
 800b040:	2b03      	cmp	r3, #3
 800b042:	d00e      	beq.n	800b062 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
 800b044:	e03f      	b.n	800b0c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x122>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b046:	7ebb      	ldrb	r3, [r7, #26]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d002      	beq.n	800b052 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xae>
 800b04c:	7e7b      	ldrb	r3, [r7, #25]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d103      	bne.n	800b05a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
				TimingGuard = 5000;
 800b052:	f241 3388 	movw	r3, #5000	; 0x1388
 800b056:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800b058:	e038      	b.n	800b0cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>
				TimingGuard = 1000;
 800b05a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b060:	e034      	b.n	800b0cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b068:	7ebb      	ldrb	r3, [r7, #26]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d002      	beq.n	800b074 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd0>
 800b06e:	7e7b      	ldrb	r3, [r7, #25]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d103      	bne.n	800b07c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
				TimingGuard = 26600;
 800b074:	f246 73e8 	movw	r3, #26600	; 0x67e8
 800b078:	62bb      	str	r3, [r7, #40]	; 0x28
 800b07a:	e002      	b.n	800b082 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
			else
				TimingGuard = 21600;
 800b07c:	f245 4360 	movw	r3, #21600	; 0x5460
 800b080:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800b082:	2302      	movs	r3, #2
 800b084:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800b086:	e021      	b.n	800b0cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800b08e:	23f5      	movs	r3, #245	; 0xf5
 800b090:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800b092:	f107 0308 	add.w	r3, r7, #8
 800b096:	461a      	mov	r2, r3
 800b098:	f248 0136 	movw	r1, #32822	; 0x8036
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f001 ffd3 	bl	800d048 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dd07      	ble.n	800b0b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
				vhv += vhv_loops *
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	22f5      	movs	r2, #245	; 0xf5
 800b0ac:	fb02 f303 	mul.w	r3, r2, r3
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 800b0c4:	e002      	b.n	800b0cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b0c6:	23f8      	movs	r3, #248	; 0xf8
 800b0c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d803      	bhi.n	800b0dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b0d4:	23fc      	movs	r3, #252	; 0xfc
 800b0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b0da:	e003      	b.n	800b0e4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800b0e2:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800b0e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d11c      	bne.n	800b126 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d903      	bls.n	800b0fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800b0f4:	23fc      	movs	r3, #252	; 0xfc
 800b0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b0fa:	e00d      	b.n	800b118 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x174>
			else {
				TimingBudget /= divisor;
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	fbb2 f3f3 	udiv	r3, r2, r3
 800b104:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800b106:	68f9      	ldr	r1, [r7, #12]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fedd 	bl	800becc <VL53L1_set_timeouts_us>
 800b112:	4603      	mov	r3, r0
 800b114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800b118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d102      	bne.n	800b126 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
				VL53L1DevDataSet(Dev,
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800b126:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d103      	bne.n	800b136 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x192>
		VL53L1DevDataSet(Dev,
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b136:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3730      	adds	r7, #48	; 0x30
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	00086470 	.word	0x00086470
 800b148:	00989680 	.word	0x00989680

0800b14c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08c      	sub	sp, #48	; 0x30
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b156:	2300      	movs	r3, #0
 800b158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800b17a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d109      	bne.n	800b196 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800b182:	f107 031b 	add.w	r3, r7, #27
 800b186:	461a      	mov	r2, r3
 800b188:	2105      	movs	r1, #5
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f9e6 	bl	800b55c <VL53L1_GetSequenceStepEnable>
 800b190:	4603      	mov	r3, r0
 800b192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800b196:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800b19e:	f107 031a 	add.w	r3, r7, #26
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2106      	movs	r1, #6
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f9d8 	bl	800b55c <VL53L1_GetSequenceStepEnable>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800b1b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10b      	bne.n	800b1d2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800b1ba:	f107 0310 	add.w	r3, r7, #16
 800b1be:	f107 0214 	add.w	r2, r7, #20
 800b1c2:	f107 010c 	add.w	r1, r7, #12
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 feb8 	bl	800bf3c <VL53L1_get_timeouts_us>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800b1d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d154      	bne.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800b1e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		switch (PresetMode) {
 800b1e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	d004      	beq.n	800b1f6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xaa>
 800b1ec:	2b08      	cmp	r3, #8
 800b1ee:	d027      	beq.n	800b240 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf4>
 800b1f0:	2b03      	cmp	r3, #3
 800b1f2:	d011      	beq.n	800b218 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 800b1f4:	e043      	b.n	800b27e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x132>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b1f6:	7efb      	ldrb	r3, [r7, #27]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d002      	beq.n	800b202 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb6>
 800b1fc:	7ebb      	ldrb	r3, [r7, #26]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d105      	bne.n	800b20e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc2>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b208:	3308      	adds	r3, #8
 800b20a:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800b20c:	e03a      	b.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b214:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b216:	e035      	b.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800b218:	7efb      	ldrb	r3, [r7, #27]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d002      	beq.n	800b224 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 800b21e:	7ebb      	ldrb	r3, [r7, #26]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d106      	bne.n	800b232 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe6>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800b22a:	3334      	adds	r3, #52	; 0x34
 800b22c:	005b      	lsls	r3, r3, #1
 800b22e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800b230:	e028      	b.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800b238:	3330      	adds	r3, #48	; 0x30
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b23e:	e021      	b.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800b240:	23f5      	movs	r3, #245	; 0xf5
 800b242:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 800b244:	f107 0308 	add.w	r3, r7, #8
 800b248:	461a      	mov	r2, r3
 800b24a:	f248 0136 	movw	r1, #32822	; 0x8036
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fefa 	bl	800d048 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	dd07      	ble.n	800b26a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x11e>
				vhv += vhv_loops *
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	22f5      	movs	r2, #245	; 0xf5
 800b25e:	fb02 f303 	mul.w	r3, r2, r3
 800b262:	461a      	mov	r2, r3
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	4413      	add	r3, r2
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800b270:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	005a      	lsls	r2, r3, #1
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800b27c:	e002      	b.n	800b284 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800b27e:	23f8      	movs	r3, #248	; 0xf8
 800b280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 800b284:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x146>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b290:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b292:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b296:	4618      	mov	r0, r3
 800b298:	3730      	adds	r7, #48	; 0x30
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	019b      	lsls	r3, r3, #6
 800b2b6:	4a09      	ldr	r2, [pc, #36]	; (800b2dc <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800b2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2bc:	099b      	lsrs	r3, r3, #6
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fdb1 	bl	800be2e <VL53L1_set_inter_measurement_period_ms>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800b2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	10624dd3 	.word	0x10624dd3

0800b2e0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800b2ee:	f107 0308 	add.w	r3, r7, #8
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fdc3 	bl	800be80 <VL53L1_get_inter_measurement_period_ms>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	019b      	lsls	r3, r3, #6
 800b304:	4907      	ldr	r1, [pc, #28]	; (800b324 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800b306:	fba1 1303 	umull	r1, r3, r1, r3
 800b30a:	099b      	lsrs	r3, r3, #6
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800b316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	10624dd3 	.word	0x10624dd3

0800b328 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	460b      	mov	r3, r1
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b336:	2300      	movs	r3, #0
 800b338:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b33a:	897b      	ldrh	r3, [r7, #10]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <SetLimitValue+0x1e>
 800b340:	2b01      	cmp	r3, #1
 800b342:	d009      	beq.n	800b358 <SetLimitValue+0x30>
 800b344:	e011      	b.n	800b36a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	0b9b      	lsrs	r3, r3, #14
 800b34a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800b34c:	8abb      	ldrh	r3, [r7, #20]
 800b34e:	4619      	mov	r1, r3
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f001 f945 	bl	800c5e0 <VL53L1_set_lite_sigma_threshold>
		break;
 800b356:	e00a      	b.n	800b36e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	0a5b      	lsrs	r3, r3, #9
 800b35c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800b35e:	8abb      	ldrh	r3, [r7, #20]
 800b360:	4619      	mov	r1, r3
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f001 f968 	bl	800c638 <VL53L1_set_lite_min_count_rate>
		break;
 800b368:	e001      	b.n	800b36e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b36a:	23fc      	movs	r3, #252	; 0xfc
 800b36c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	460b      	mov	r3, r1
 800b384:	807b      	strh	r3, [r7, #2]
 800b386:	4613      	mov	r3, r2
 800b388:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b392:	887b      	ldrh	r3, [r7, #2]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d902      	bls.n	800b39e <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b398:	23fc      	movs	r3, #252	; 0xfc
 800b39a:	73fb      	strb	r3, [r7, #15]
 800b39c:	e014      	b.n	800b3c8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800b39e:	787b      	ldrb	r3, [r7, #1]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60bb      	str	r3, [r7, #8]
 800b3a8:	e006      	b.n	800b3b8 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b3aa:	887b      	ldrh	r3, [r7, #2]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	33e0      	adds	r3, #224	; 0xe0
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800b3b8:	887b      	ldrh	r3, [r7, #2]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff ffb2 	bl	800b328 <SetLimitValue>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10c      	bne.n	800b3ea <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b3d0:	887b      	ldrh	r3, [r7, #2]
 800b3d2:	787a      	ldrb	r2, [r7, #1]
 800b3d4:	2a00      	cmp	r2, #0
 800b3d6:	bf14      	ite	ne
 800b3d8:	2201      	movne	r2, #1
 800b3da:	2200      	moveq	r2, #0
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	4611      	mov	r1, r2
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	460a      	mov	r2, r1
 800b3e6:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800b3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b087      	sub	sp, #28
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	460b      	mov	r3, r1
 800b400:	607a      	str	r2, [r7, #4]
 800b402:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b404:	2300      	movs	r3, #0
 800b406:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b408:	897b      	ldrh	r3, [r7, #10]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d905      	bls.n	800b41a <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b40e:	23fc      	movs	r3, #252	; 0xfc
 800b410:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	701a      	strb	r2, [r3, #0]
 800b418:	e008      	b.n	800b42c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b41a:	897b      	ldrh	r3, [r7, #10]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4413      	add	r3, r2
 800b420:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800b424:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	7dba      	ldrb	r2, [r7, #22]
 800b42a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b42c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b430:	4618      	mov	r0, r3
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	460b      	mov	r3, r1
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b44a:	2300      	movs	r3, #0
 800b44c:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b44e:	897b      	ldrh	r3, [r7, #10]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d902      	bls.n	800b45a <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b454:	23fc      	movs	r3, #252	; 0xfc
 800b456:	75fb      	strb	r3, [r7, #23]
 800b458:	e023      	b.n	800b4a2 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b45a:	897b      	ldrh	r3, [r7, #10]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800b464:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 800b466:	7dbb      	ldrb	r3, [r7, #22]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d107      	bne.n	800b47c <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b46c:	897b      	ldrh	r3, [r7, #10]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	33e0      	adds	r3, #224	; 0xe0
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	609a      	str	r2, [r3, #8]
 800b47a:	e012      	b.n	800b4a2 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800b47c:	897b      	ldrh	r3, [r7, #10]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	4619      	mov	r1, r3
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7ff ff50 	bl	800b328 <SetLimitValue>
 800b488:	4603      	mov	r3, r0
 800b48a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800b48c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d106      	bne.n	800b4a2 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b494:	897b      	ldrh	r3, [r7, #10]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	33e0      	adds	r3, #224	; 0xe0
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b4a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	607a      	str	r2, [r7, #4]
 800b4ba:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800b4c0:	897b      	ldrh	r3, [r7, #10]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <VL53L1_GetLimitCheckValue+0x1e>
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d00c      	beq.n	800b4e4 <VL53L1_GetLimitCheckValue+0x36>
 800b4ca:	e017      	b.n	800b4fc <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800b4cc:	f107 0314 	add.w	r3, r7, #20
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f001 f86e 	bl	800c5b4 <VL53L1_get_lite_sigma_threshold>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800b4dc:	8abb      	ldrh	r3, [r7, #20]
 800b4de:	039b      	lsls	r3, r3, #14
 800b4e0:	61bb      	str	r3, [r7, #24]
		break;
 800b4e2:	e00d      	b.n	800b500 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800b4e4:	f107 0316 	add.w	r3, r7, #22
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f001 f88e 	bl	800c60c <VL53L1_get_lite_min_count_rate>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800b4f4:	8afb      	ldrh	r3, [r7, #22]
 800b4f6:	025b      	lsls	r3, r3, #9
 800b4f8:	61bb      	str	r3, [r7, #24]
		break;
 800b4fa:	e001      	b.n	800b500 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800b4fc:	23fc      	movs	r3, #252	; 0xfc
 800b4fe:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800b500:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d123      	bne.n	800b550 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d110      	bne.n	800b530 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800b50e:	897b      	ldrh	r3, [r7, #10]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	33e0      	adds	r3, #224	; 0xe0
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b522:	897b      	ldrh	r3, [r7, #10]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4413      	add	r3, r2
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800b52e:	e00f      	b.n	800b550 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	69ba      	ldr	r2, [r7, #24]
 800b534:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b536:	897b      	ldrh	r3, [r7, #10]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	33e0      	adds	r3, #224	; 0xe0
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800b544:	897b      	ldrh	r3, [r7, #10]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	4413      	add	r3, r2
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800b550:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	460b      	mov	r3, r1
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b56a:	2300      	movs	r3, #0
 800b56c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800b56e:	7afb      	ldrb	r3, [r7, #11]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	4619      	mov	r1, r3
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 fd4c 	bl	800c012 <VL53L1_get_sequence_config_bit>
 800b57a:	4603      	mov	r3, r0
 800b57c:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800b57e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b594:	2300      	movs	r3, #0
 800b596:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800b59e:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 800b5a0:	7dbb      	ldrb	r3, [r7, #22]
 800b5a2:	2b05      	cmp	r3, #5
 800b5a4:	dc06      	bgt.n	800b5b4 <VL53L1_StartMeasurement+0x28>
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	da0b      	bge.n	800b5c2 <VL53L1_StartMeasurement+0x36>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	db0c      	blt.n	800b5c8 <VL53L1_StartMeasurement+0x3c>
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	dd07      	ble.n	800b5c2 <VL53L1_StartMeasurement+0x36>
 800b5b2:	e003      	b.n	800b5bc <VL53L1_StartMeasurement+0x30>
 800b5b4:	3b62      	subs	r3, #98	; 0x62
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d806      	bhi.n	800b5c8 <VL53L1_StartMeasurement+0x3c>
 800b5ba:	e002      	b.n	800b5c2 <VL53L1_StartMeasurement+0x36>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	75fb      	strb	r3, [r7, #23]
		break;
 800b5c0:	e004      	b.n	800b5cc <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800b5c2:	23f2      	movs	r3, #242	; 0xf2
 800b5c4:	75fb      	strb	r3, [r7, #23]
		break;
 800b5c6:	e001      	b.n	800b5cc <VL53L1_StartMeasurement+0x40>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800b5c8:	23fd      	movs	r3, #253	; 0xfd
 800b5ca:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	789b      	ldrb	r3, [r3, #2]
 800b5d0:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800b5d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d11f      	bne.n	800b61a <VL53L1_StartMeasurement+0x8e>
 800b5da:	7d7b      	ldrb	r3, [r7, #21]
 800b5dc:	2b40      	cmp	r3, #64	; 0x40
 800b5de:	d11c      	bne.n	800b61a <VL53L1_StartMeasurement+0x8e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b5e0:	f107 0310 	add.w	r3, r7, #16
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7ff fdb0 	bl	800b14c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	4a17      	ldr	r2, [pc, #92]	; (800b650 <VL53L1_StartMeasurement+0xc4>)
 800b5f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f8:	099b      	lsrs	r3, r3, #6
 800b5fa:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b5fc:	f107 030c 	add.w	r3, r7, #12
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff fe6c 	bl	800b2e0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800b608:	4603      	mov	r3, r0
 800b60a:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	1d1a      	adds	r2, r3, #4
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	429a      	cmp	r2, r3
 800b614:	d901      	bls.n	800b61a <VL53L1_StartMeasurement+0x8e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800b616:	23fc      	movs	r3, #252	; 0xfc
 800b618:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800b61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d107      	bne.n	800b632 <VL53L1_StartMeasurement+0xa6>
		Status = VL53L1_init_and_start_range(
 800b622:	7d7b      	ldrb	r3, [r7, #21]
 800b624:	2206      	movs	r2, #6
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f001 f83b 	bl	800c6a4 <VL53L1_init_and_start_range>
 800b62e:	4603      	mov	r3, r0
 800b630:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800b632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d103      	bne.n	800b642 <VL53L1_StartMeasurement+0xb6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2204      	movs	r2, #4
 800b63e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800b642:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	10624dd3 	.word	0x10624dd3

0800b654 <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08a      	sub	sp, #40	; 0x28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 800b662:	f107 0318 	add.w	r3, r7, #24
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fd2c 	bl	800c0c6 <VL53L1_get_user_zone>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800b67a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800b684:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 800b688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10b      	bne.n	800b6a8 <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800b690:	f107 0314 	add.w	r3, r7, #20
 800b694:	f107 0210 	add.w	r2, r7, #16
 800b698:	f107 010c 	add.w	r1, r7, #12
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fc4d 	bl	800bf3c <VL53L1_get_timeouts_us>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800b6a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d105      	bne.n	800b6bc <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f001 fa21 	bl	800caf8 <VL53L1_stop_range>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE)
 800b6bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d107      	bne.n	800b6d4 <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 800b6c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f003 fbe1 	bl	800ee90 <VL53L1_WaitUs>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800b6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10d      	bne.n	800b6f8 <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	695b      	ldr	r3, [r3, #20]
 800b6e0:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 800b6e2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b6e6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff fb23 	bl	800ad38 <SetPresetMode>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800b6f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10f      	bne.n	800b720 <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800b700:	68f9      	ldr	r1, [r7, #12]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fbe0 	bl	800becc <VL53L1_set_timeouts_us>
 800b70c:	4603      	mov	r3, r0
 800b70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800b712:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b716:	2b00      	cmp	r3, #0
 800b718:	d102      	bne.n	800b720 <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800b720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b724:	2b00      	cmp	r3, #0
 800b726:	d108      	bne.n	800b73a <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800b728:	f107 0318 	add.w	r3, r7, #24
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fca6 	bl	800c080 <VL53L1_set_user_zone>
 800b734:	4603      	mov	r3, r0
 800b736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800b73a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10b      	bne.n	800b75a <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	789b      	ldrb	r3, [r3, #2]
 800b746:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 800b748:	7ffb      	ldrb	r3, [r7, #31]
 800b74a:	2206      	movs	r2, #6
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 ffa8 	bl	800c6a4 <VL53L1_init_and_start_range>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 800b75a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d104      	bne.n	800b76c <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b768:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b76c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b770:	4618      	mov	r0, r3
 800b772:	3728      	adds	r7, #40	; 0x28
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b780:	2300      	movs	r3, #0
 800b782:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	789b      	ldrb	r3, [r3, #2]
 800b788:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800b790:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800b798:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 800b79a:	7b3a      	ldrb	r2, [r7, #12]
 800b79c:	7b7b      	ldrb	r3, [r7, #13]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d005      	beq.n	800b7ae <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff ff56 	bl	800b654 <ChangePresetMode>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]
 800b7ac:	e006      	b.n	800b7bc <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 800b7ae:	7bbb      	ldrb	r3, [r7, #14]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f001 faff 	bl	800cdb6 <VL53L1_clear_interrupt_and_enable_next_range>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800b7bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800b7d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f004 fd33 	bl	8010244 <VL53L1_poll_for_range_completion>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800b7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b08d      	sub	sp, #52	; 0x34
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	603a      	str	r2, [r7, #0]
 800b7fa:	71fb      	strb	r3, [r7, #7]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800b800:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b804:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800b806:	231e      	movs	r3, #30
 800b808:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800b80a:	4b34      	ldr	r3, [pc, #208]	; (800b8dc <ComputeRQL+0xec>)
 800b80c:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800b80e:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <ComputeRQL+0xf0>)
 800b810:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800b812:	f641 139a 	movw	r3, #6554	; 0x199a
 800b816:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d103      	bne.n	800b826 <ComputeRQL+0x36>
		returnvalue = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b824:	e052      	b.n	800b8cc <ComputeRQL+0xdc>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800b826:	79bb      	ldrb	r3, [r7, #6]
 800b828:	2b07      	cmp	r3, #7
 800b82a:	d103      	bne.n	800b834 <ComputeRQL+0x44>
		returnvalue = 50;
 800b82c:	2332      	movs	r3, #50	; 0x32
 800b82e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b832:	e04b      	b.n	800b8cc <ComputeRQL+0xdc>
	else {
		if (presults_data->median_range_mm < SRL)
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b83a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b83e:	429a      	cmp	r2, r3
 800b840:	dd03      	ble.n	800b84a <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800b842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b844:	041b      	lsls	r3, r3, #16
 800b846:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b848:	e007      	b.n	800b85a <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b850:	461a      	mov	r2, r3
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	fb03 f302 	mul.w	r3, r3, r2
 800b858:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800b85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d020      	beq.n	800b8a2 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b864:	461a      	mov	r2, r3
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	fb03 f302 	mul.w	r3, r3, r2
 800b86c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	085b      	lsrs	r3, r3, #1
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4413      	add	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b880:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	041b      	lsls	r3, r3, #16
 800b886:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d804      	bhi.n	800b89a <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800b890:	69fa      	ldr	r2, [r7, #28]
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	62bb      	str	r3, [r7, #40]	; 0x28
 800b898:	e006      	b.n	800b8a8 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800b89a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b89e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8a0:	e002      	b.n	800b8a8 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800b8a2:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800b8a6:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	0c1b      	lsrs	r3, r3, #16
 800b8ac:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
 800b8b0:	2b64      	cmp	r3, #100	; 0x64
 800b8b2:	d802      	bhi.n	800b8ba <ComputeRQL+0xca>
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	2b32      	cmp	r3, #50	; 0x32
 800b8b8:	dd05      	ble.n	800b8c6 <ComputeRQL+0xd6>
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	2b64      	cmp	r3, #100	; 0x64
 800b8be:	bf28      	it	cs
 800b8c0:	2364      	movcs	r3, #100	; 0x64
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	e000      	b.n	800b8c8 <ComputeRQL+0xd8>
 800b8c6:	2332      	movs	r3, #50	; 0x32
 800b8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800b8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3734      	adds	r7, #52	; 0x34
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	0075b333 	.word	0x0075b333
 800b8e0:	0030cccd 	.word	0x0030cccd

0800b8e4 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	3b04      	subs	r3, #4
 800b8f2:	2b0f      	cmp	r3, #15
 800b8f4:	d83d      	bhi.n	800b972 <ConvertStatusLite+0x8e>
 800b8f6:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <ConvertStatusLite+0x18>)
 800b8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fc:	0800b94f 	.word	0x0800b94f
 800b900:	0800b949 	.word	0x0800b949
 800b904:	0800b955 	.word	0x0800b955
 800b908:	0800b95b 	.word	0x0800b95b
 800b90c:	0800b967 	.word	0x0800b967
 800b910:	0800b96d 	.word	0x0800b96d
 800b914:	0800b973 	.word	0x0800b973
 800b918:	0800b973 	.word	0x0800b973
 800b91c:	0800b961 	.word	0x0800b961
 800b920:	0800b973 	.word	0x0800b973
 800b924:	0800b973 	.word	0x0800b973
 800b928:	0800b973 	.word	0x0800b973
 800b92c:	0800b973 	.word	0x0800b973
 800b930:	0800b973 	.word	0x0800b973
 800b934:	0800b93d 	.word	0x0800b93d
 800b938:	0800b943 	.word	0x0800b943
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800b93c:	230a      	movs	r3, #10
 800b93e:	73fb      	strb	r3, [r7, #15]
		break;
 800b940:	e019      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800b942:	2306      	movs	r3, #6
 800b944:	73fb      	strb	r3, [r7, #15]
		break;
 800b946:	e016      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800b948:	2304      	movs	r3, #4
 800b94a:	73fb      	strb	r3, [r7, #15]
		break;
 800b94c:	e013      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800b94e:	2302      	movs	r3, #2
 800b950:	73fb      	strb	r3, [r7, #15]
		break;
 800b952:	e010      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800b954:	2301      	movs	r3, #1
 800b956:	73fb      	strb	r3, [r7, #15]
		break;
 800b958:	e00d      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800b95a:	2307      	movs	r3, #7
 800b95c:	73fb      	strb	r3, [r7, #15]
		break;
 800b95e:	e00a      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800b960:	2309      	movs	r3, #9
 800b962:	73fb      	strb	r3, [r7, #15]
		break;
 800b964:	e007      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800b966:	2303      	movs	r3, #3
 800b968:	73fb      	strb	r3, [r7, #15]
		break;
 800b96a:	e004      	b.n	800b976 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]
		break;
 800b970:	e001      	b.n	800b976 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800b972:	23ff      	movs	r3, #255	; 0xff
 800b974:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b08c      	sub	sp, #48	; 0x30
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	72fb      	strb	r3, [r7, #11]
 800b992:	4613      	mov	r3, r2
 800b994:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b996:	2300      	movs	r3, #0
 800b998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9aa:	f003 031f 	and.w	r3, r3, #31
 800b9ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800b9b2:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800b9b6:	7afb      	ldrb	r3, [r7, #11]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ff18 	bl	800b7f0 <ComputeRQL>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9cc:	025b      	lsls	r3, r3, #9
 800b9ce:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9d4:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b9da:	025b      	lsls	r3, r3, #9
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e2:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b9f0:	025b      	lsls	r3, r3, #9
 800b9f2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	6a3a      	ldr	r2, [r7, #32]
 800b9f8:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba02:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	2200      	movs	r2, #0
 800ba08:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800ba0a:	7abb      	ldrb	r3, [r7, #10]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	2b10      	cmp	r3, #16
 800ba10:	d82c      	bhi.n	800ba6c <SetSimpleData+0xe8>
 800ba12:	a201      	add	r2, pc, #4	; (adr r2, 800ba18 <SetSimpleData+0x94>)
 800ba14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba18:	0800ba5d 	.word	0x0800ba5d
 800ba1c:	0800ba5d 	.word	0x0800ba5d
 800ba20:	0800ba5d 	.word	0x0800ba5d
 800ba24:	0800ba6d 	.word	0x0800ba6d
 800ba28:	0800ba6d 	.word	0x0800ba6d
 800ba2c:	0800ba6d 	.word	0x0800ba6d
 800ba30:	0800ba6d 	.word	0x0800ba6d
 800ba34:	0800ba6d 	.word	0x0800ba6d
 800ba38:	0800ba6d 	.word	0x0800ba6d
 800ba3c:	0800ba6d 	.word	0x0800ba6d
 800ba40:	0800ba6d 	.word	0x0800ba6d
 800ba44:	0800ba6d 	.word	0x0800ba6d
 800ba48:	0800ba65 	.word	0x0800ba65
 800ba4c:	0800ba6d 	.word	0x0800ba6d
 800ba50:	0800ba6d 	.word	0x0800ba6d
 800ba54:	0800ba6d 	.word	0x0800ba6d
 800ba58:	0800ba5d 	.word	0x0800ba5d
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5e:	2205      	movs	r2, #5
 800ba60:	76da      	strb	r2, [r3, #27]
		break;
 800ba62:	e006      	b.n	800ba72 <SetSimpleData+0xee>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	220d      	movs	r2, #13
 800ba68:	76da      	strb	r2, [r3, #27]
		break;
 800ba6a:	e002      	b.n	800ba72 <SetSimpleData+0xee>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6e:	2200      	movs	r2, #0
 800ba70:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800ba72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba74:	7edb      	ldrb	r3, [r3, #27]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d108      	bne.n	800ba8c <SetSimpleData+0x108>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800ba7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff ff30 	bl	800b8e4 <ConvertStatusLite>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ba90:	025b      	lsls	r3, r3, #9
 800ba92:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a3a      	ldr	r2, [r7, #32]
 800ba98:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800baa0:	025b      	lsls	r3, r3, #9
 800baa2:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6a3a      	ldr	r2, [r7, #32]
 800baa8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800baac:	f107 0314 	add.w	r3, r7, #20
 800bab0:	461a      	mov	r2, r3
 800bab2:	2100      	movs	r1, #0
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fcfa 	bl	800b4ae <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800baba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800babe:	2b06      	cmp	r3, #6
 800bac0:	bf0c      	ite	eq
 800bac2:	2301      	moveq	r3, #1
 800bac4:	2300      	movne	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800bac8:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800baca:	f107 0319 	add.w	r3, r7, #25
 800bace:	461a      	mov	r2, r3
 800bad0:	2100      	movs	r1, #0
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fc8f 	bl	800b3f6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800bad8:	7e7b      	ldrb	r3, [r7, #25]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d104      	bne.n	800bae8 <SetSimpleData+0x164>
 800bade:	7ffb      	ldrb	r3, [r7, #31]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d101      	bne.n	800bae8 <SetSimpleData+0x164>
 800bae4:	2301      	movs	r3, #1
 800bae6:	e000      	b.n	800baea <SetSimpleData+0x166>
 800bae8:	2300      	movs	r3, #0
 800baea:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	7fba      	ldrb	r2, [r7, #30]
 800baf0:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800baf4:	f107 0314 	add.w	r3, r7, #20
 800baf8:	461a      	mov	r2, r3
 800bafa:	2101      	movs	r1, #1
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff fcd6 	bl	800b4ae <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800bb02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	bf0c      	ite	eq
 800bb0a:	2301      	moveq	r3, #1
 800bb0c:	2300      	movne	r3, #0
 800bb0e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800bb10:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800bb12:	f107 0319 	add.w	r3, r7, #25
 800bb16:	461a      	mov	r2, r3
 800bb18:	2101      	movs	r1, #1
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7ff fc6b 	bl	800b3f6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800bb20:	7e7b      	ldrb	r3, [r7, #25]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d104      	bne.n	800bb30 <SetSimpleData+0x1ac>
 800bb26:	7f7b      	ldrb	r3, [r7, #29]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d101      	bne.n	800bb30 <SetSimpleData+0x1ac>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e000      	b.n	800bb32 <SetSimpleData+0x1ae>
 800bb30:	2300      	movs	r3, #0
 800bb32:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	7fba      	ldrb	r2, [r7, #30]
 800bb38:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3e:	8b1b      	ldrh	r3, [r3, #24]
 800bb40:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	7edb      	ldrb	r3, [r3, #27]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d110      	bne.n	800bb6c <SetSimpleData+0x1e8>
 800bb4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	da0c      	bge.n	800bb6c <SetSimpleData+0x1e8>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800bb52:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800bb56:	4b08      	ldr	r3, [pc, #32]	; (800bb78 <SetSimpleData+0x1f4>)
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	da03      	bge.n	800bb66 <SetSimpleData+0x1e2>
			pRangeData->RangeStatus =
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	220e      	movs	r2, #14
 800bb62:	76da      	strb	r2, [r3, #27]
 800bb64:	e002      	b.n	800bb6c <SetSimpleData+0x1e8>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb68:	2200      	movs	r2, #0
 800bb6a:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800bb6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3730      	adds	r7, #48	; 0x30
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	200002ec 	.word	0x200002ec

0800bb7c <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b0a8      	sub	sp, #160	; 0xa0
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800bb86:	2300      	movs	r3, #0
 800bb88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 800bb8c:	f107 0308 	add.w	r3, r7, #8
 800bb90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800bb94:	221c      	movs	r2, #28
 800bb96:	21ff      	movs	r1, #255	; 0xff
 800bb98:	6838      	ldr	r0, [r7, #0]
 800bb9a:	f004 fdc2 	bl	8010722 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800bb9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bba2:	2102      	movs	r1, #2
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f001 f888 	bl	800ccba <VL53L1_get_device_results>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800bbb0:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d117      	bne.n	800bbe8 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800bbb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbbc:	789a      	ldrb	r2, [r3, #2]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800bbc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800bbcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbd0:	78da      	ldrb	r2, [r3, #3]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbda:	2101      	movs	r1, #1
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff fed1 	bl	800b984 <SetSimpleData>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbe8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3798      	adds	r7, #152	; 0x98
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800bbf4:	b5b0      	push	{r4, r5, r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af04      	add	r7, sp, #16
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800bc08:	2162      	movs	r1, #98	; 0x62
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f002 f91a 	bl	800de44 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2201      	movs	r2, #1
 800bc26:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc34:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bc3c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800bc44:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2264      	movs	r2, #100	; 0x64
 800bc4a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800bc52:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f240 72db 	movw	r2, #2011	; 0x7db
 800bc62:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f002 f8d0 	bl	800de0c <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d008      	beq.n	800bc84 <VL53L1_data_init+0x90>
 800bc72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d104      	bne.n	800bc84 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f857 	bl	800bd2e <VL53L1_read_p2p_data>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f503 7388 	add.w	r3, r3, #272	; 0x110
	status =
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f001 fc00 	bl	800d490 <VL53L1_init_refspadchar_config_struct>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f503 7390 	add.w	r3, r3, #288	; 0x120
	status =
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 fc1c 	bl	800d4d8 <VL53L1_init_ssc_config_struct>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	status =
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f001 fc31 	bl	800d51a <VL53L1_init_xtalk_config_struct>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
	status =
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f001 fc8b 	bl	800d5de <VL53L1_init_offset_cal_config_struct>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	33a4      	adds	r3, #164	; 0xa4
	status =
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f001 fcab 	bl	800d62c <VL53L1_init_tuning_parm_storage_struct>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800bcda:	2120      	movs	r1, #32
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fcc1 	bl	800c664 <VL53L1_set_vhv_loopbound>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800bce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d116      	bne.n	800bd1c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	7858      	ldrb	r0, [r3, #1]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	8b1c      	ldrh	r4, [r3, #24]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	689d      	ldr	r5, [r3, #8]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	6912      	ldr	r2, [r2, #16]
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	6949      	ldr	r1, [r1, #20]
 800bd06:	9102      	str	r1, [sp, #8]
 800bd08:	9201      	str	r2, [sp, #4]
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	4622      	mov	r2, r4
 800bd10:	4601      	mov	r1, r0
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fad8 	bl	800c2c8 <VL53L1_set_preset_mode>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f002 fdda 	bl	800e8d6 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800bd22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bdb0      	pop	{r4, r5, r7, pc}

0800bd2e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800bd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d108      	bne.n	800bd58 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f003 f9fd 	bl	800f14e <VL53L1_get_static_nvm_managed>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800bd58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d107      	bne.n	800bd70 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	3342      	adds	r3, #66	; 0x42
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f003 fb2f 	bl	800f3ca <VL53L1_get_customer_nvm_managed>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800bd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d115      	bne.n	800bda4 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f004 fa08 	bl	8010196 <VL53L1_get_nvm_copy_data>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800bd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d108      	bne.n	800bda4 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	33f0      	adds	r3, #240	; 0xf0
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f002 f9b3 	bl	800e10a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800bda4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d109      	bne.n	800bdc0 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
		status =
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	21de      	movs	r1, #222	; 0xde
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f003 f80a 	bl	800edd0 <VL53L1_RdWord>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bdc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdca:	d204      	bcs.n	800bdd6 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800bdd2:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800bdd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d107      	bne.n	800bdee <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	339e      	adds	r3, #158	; 0x9e
		status =
 800bde2:	4619      	mov	r1, r3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f990 	bl	800c10a <VL53L1_get_mode_mitigation_roi>
 800bdea:	4603      	mov	r3, r0
 800bdec:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d114      	bne.n	800be22 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10f      	bne.n	800be22 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800be08:	011b      	lsls	r3, r3, #4
 800be0a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800be18:	011b      	lsls	r3, r3, #4
 800be1a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800be22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800be2e:	b480      	push	{r7}
 800be30:	b085      	sub	sp, #20
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800be4a:	23f1      	movs	r3, #241	; 0xf1
 800be4c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800be4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10c      	bne.n	800be70 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800be62:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800be70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800be9c:	23f1      	movs	r3, #241	; 0xf1
 800be9e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800bea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d109      	bne.n	800bebc <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800beb4:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800bebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800beda:	2300      	movs	r3, #0
 800bedc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800beec:	23f1      	movs	r3, #241	; 0xf1
 800beee:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800bef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d11b      	bne.n	800bf30 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
		status =
 800bf1c:	9201      	str	r2, [sp, #4]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	460b      	mov	r3, r1
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	68b8      	ldr	r0, [r7, #8]
 800bf28:	f002 fc07 	bl	800e73a <VL53L1_calc_timeout_register_values>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800bf30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bf64:	23f1      	movs	r3, #241	; 0xf1
 800bf66:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800bf68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d14a      	bne.n	800c006 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
		macro_period_us =
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f002 fa86 	bl	800e490 <VL53L1_calc_macro_period_us>
 800bf84:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800bf8c:	6979      	ldr	r1, [r7, #20]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f002 fb3f 	bl	800e612 <VL53L1_calc_timeout_us>
 800bf94:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800bfa0:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bfa2:	8a7b      	ldrh	r3, [r7, #18]
 800bfa4:	021b      	lsls	r3, r3, #8
 800bfa6:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800bfae:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bfb0:	4413      	add	r3, r2
 800bfb2:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bfb4:	8a7b      	ldrh	r3, [r7, #18]
 800bfb6:	6979      	ldr	r1, [r7, #20]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f002 fb63 	bl	800e684 <VL53L1_calc_decoded_timeout_us>
 800bfbe:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800bfca:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800bfcc:	8a7b      	ldrh	r3, [r7, #18]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800bfd8:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800bfda:	4413      	add	r3, r2
 800bfdc:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800bfde:	8a7b      	ldrh	r3, [r7, #18]
 800bfe0:	6979      	ldr	r1, [r7, #20]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f002 fb4e 	bl	800e684 <VL53L1_calc_decoded_timeout_us>
 800bfe8:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c006:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3720      	adds	r7, #32
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800c012:	b480      	push	{r7}
 800c014:	b087      	sub	sp, #28
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	460b      	mov	r3, r1
 800c01c:	607a      	str	r2, [r7, #4]
 800c01e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c020:	2300      	movs	r3, #0
 800c022:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800c028:	2301      	movs	r3, #1
 800c02a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	2b07      	cmp	r3, #7
 800c030:	d81c      	bhi.n	800c06c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800c032:	7afb      	ldrb	r3, [r7, #11]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d004      	beq.n	800c042 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800c038:	7afb      	ldrb	r3, [r7, #11]
 800c03a:	2201      	movs	r2, #1
 800c03c:	fa02 f303 	lsl.w	r3, r2, r3
 800c040:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800c048:	7dbb      	ldrb	r3, [r7, #22]
 800c04a:	4013      	ands	r3, r2
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800c052:	7afb      	ldrb	r3, [r7, #11]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	461a      	mov	r2, r3
 800c05e:	7afb      	ldrb	r3, [r7, #11]
 800c060:	fa42 f303 	asr.w	r3, r2, r3
 800c064:	b2da      	uxtb	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	701a      	strb	r2, [r3, #0]
 800c06a:	e001      	b.n	800c070 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c06c:	23fc      	movs	r3, #252	; 0xfc
 800c06e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800c070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c074:	4618      	mov	r0, r3
 800c076:	371c      	adds	r7, #28
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c08a:	2300      	movs	r3, #0
 800c08c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	7858      	ldrb	r0, [r3, #1]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	7819      	ldrb	r1, [r3, #0]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	f002 fbc3 	bl	800e82c <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	7898      	ldrb	r0, [r3, #2]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	78d9      	ldrb	r1, [r3, #3]
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f002 fbf8 	bl	800e8aa <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800c0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	f002 fd67 	bl	800ebb8 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	1c99      	adds	r1, r3, #2
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	3303      	adds	r3, #3
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	f002 fbbe 	bl	800e87a <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800c0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b086      	sub	sp, #24
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c114:	2300      	movs	r3, #0
 800c116:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800c11c:	2300      	movs	r3, #0
 800c11e:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800c12e:	f107 020e 	add.w	r2, r7, #14
 800c132:	f107 010d 	add.w	r1, r7, #13
 800c136:	4618      	mov	r0, r3
 800c138:	f002 fd3e 	bl	800ebb8 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800c13c:	7bba      	ldrb	r2, [r7, #14]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800c142:	7b7a      	ldrb	r2, [r7, #13]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800c14e:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	091b      	lsrs	r3, r3, #4
 800c154:	b2da      	uxtb	r2, r3
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
 800c15c:	f003 030f 	and.w	r3, r3, #15
 800c160:	b2da      	uxtb	r2, r3
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800c166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800c174:	b480      	push	{r7}
 800c176:	b087      	sub	sp, #28
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	607a      	str	r2, [r7, #4]
 800c17e:	603b      	str	r3, [r7, #0]
 800c180:	460b      	mov	r3, r1
 800c182:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c184:	2300      	movs	r3, #0
 800c186:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800c18c:	7afb      	ldrb	r3, [r7, #11]
 800c18e:	3b01      	subs	r3, #1
 800c190:	2b25      	cmp	r3, #37	; 0x25
 800c192:	f200 808e 	bhi.w	800c2b2 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800c196:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c235 	.word	0x0800c235
 800c1a0:	0800c235 	.word	0x0800c235
 800c1a4:	0800c235 	.word	0x0800c235
 800c1a8:	0800c235 	.word	0x0800c235
 800c1ac:	0800c235 	.word	0x0800c235
 800c1b0:	0800c25f 	.word	0x0800c25f
 800c1b4:	0800c25f 	.word	0x0800c25f
 800c1b8:	0800c25f 	.word	0x0800c25f
 800c1bc:	0800c2b3 	.word	0x0800c2b3
 800c1c0:	0800c2b3 	.word	0x0800c2b3
 800c1c4:	0800c2b3 	.word	0x0800c2b3
 800c1c8:	0800c2b3 	.word	0x0800c2b3
 800c1cc:	0800c2b3 	.word	0x0800c2b3
 800c1d0:	0800c2b3 	.word	0x0800c2b3
 800c1d4:	0800c2b3 	.word	0x0800c2b3
 800c1d8:	0800c2b3 	.word	0x0800c2b3
 800c1dc:	0800c235 	.word	0x0800c235
 800c1e0:	0800c25f 	.word	0x0800c25f
 800c1e4:	0800c2b3 	.word	0x0800c2b3
 800c1e8:	0800c2b3 	.word	0x0800c2b3
 800c1ec:	0800c2b3 	.word	0x0800c2b3
 800c1f0:	0800c2b3 	.word	0x0800c2b3
 800c1f4:	0800c2b3 	.word	0x0800c2b3
 800c1f8:	0800c2b3 	.word	0x0800c2b3
 800c1fc:	0800c2b3 	.word	0x0800c2b3
 800c200:	0800c2b3 	.word	0x0800c2b3
 800c204:	0800c2b3 	.word	0x0800c2b3
 800c208:	0800c2b3 	.word	0x0800c2b3
 800c20c:	0800c2b3 	.word	0x0800c2b3
 800c210:	0800c2b3 	.word	0x0800c2b3
 800c214:	0800c2b3 	.word	0x0800c2b3
 800c218:	0800c2b3 	.word	0x0800c2b3
 800c21c:	0800c2b3 	.word	0x0800c2b3
 800c220:	0800c2b3 	.word	0x0800c2b3
 800c224:	0800c2b3 	.word	0x0800c2b3
 800c228:	0800c289 	.word	0x0800c289
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c289 	.word	0x0800c289
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	601a      	str	r2, [r3, #0]
	break;
 800c25c:	e02c      	b.n	800c2b8 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c284:	601a      	str	r2, [r3, #0]
	break;
 800c286:	e017      	b.n	800c2b8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
 800c2a4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	601a      	str	r2, [r3, #0]
	break;
 800c2b0:	e002      	b.n	800c2b8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c2b2:	23fc      	movs	r3, #252	; 0xfc
 800c2b4:	75fb      	strb	r3, [r7, #23]
		break;
 800c2b6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800c2b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	371c      	adds	r7, #28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b092      	sub	sp, #72	; 0x48
 800c2cc:	af04      	add	r7, sp, #16
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	607b      	str	r3, [r7, #4]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	72fb      	strb	r3, [r7, #11]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c2f2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c302:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c306:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c30a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	33a4      	adds	r3, #164	; 0xa4
 800c310:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800c318:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	7afa      	ldrb	r2, [r7, #11]
 800c31e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c324:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c32a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c330:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800c332:	2103      	movs	r1, #3
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f001 fd85 	bl	800de44 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800c33a:	7afb      	ldrb	r3, [r7, #11]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	2b25      	cmp	r3, #37	; 0x25
 800c340:	f200 810c 	bhi.w	800c55c <VL53L1_set_preset_mode+0x294>
 800c344:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <VL53L1_set_preset_mode+0x84>)
 800c346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34a:	bf00      	nop
 800c34c:	0800c3e5 	.word	0x0800c3e5
 800c350:	0800c401 	.word	0x0800c401
 800c354:	0800c41d 	.word	0x0800c41d
 800c358:	0800c439 	.word	0x0800c439
 800c35c:	0800c455 	.word	0x0800c455
 800c360:	0800c471 	.word	0x0800c471
 800c364:	0800c48d 	.word	0x0800c48d
 800c368:	0800c4a9 	.word	0x0800c4a9
 800c36c:	0800c55d 	.word	0x0800c55d
 800c370:	0800c55d 	.word	0x0800c55d
 800c374:	0800c55d 	.word	0x0800c55d
 800c378:	0800c55d 	.word	0x0800c55d
 800c37c:	0800c55d 	.word	0x0800c55d
 800c380:	0800c55d 	.word	0x0800c55d
 800c384:	0800c55d 	.word	0x0800c55d
 800c388:	0800c55d 	.word	0x0800c55d
 800c38c:	0800c4c5 	.word	0x0800c4c5
 800c390:	0800c4e1 	.word	0x0800c4e1
 800c394:	0800c55d 	.word	0x0800c55d
 800c398:	0800c55d 	.word	0x0800c55d
 800c39c:	0800c55d 	.word	0x0800c55d
 800c3a0:	0800c55d 	.word	0x0800c55d
 800c3a4:	0800c55d 	.word	0x0800c55d
 800c3a8:	0800c55d 	.word	0x0800c55d
 800c3ac:	0800c55d 	.word	0x0800c55d
 800c3b0:	0800c55d 	.word	0x0800c55d
 800c3b4:	0800c55d 	.word	0x0800c55d
 800c3b8:	0800c55d 	.word	0x0800c55d
 800c3bc:	0800c55d 	.word	0x0800c55d
 800c3c0:	0800c55d 	.word	0x0800c55d
 800c3c4:	0800c55d 	.word	0x0800c55d
 800c3c8:	0800c55d 	.word	0x0800c55d
 800c3cc:	0800c55d 	.word	0x0800c55d
 800c3d0:	0800c55d 	.word	0x0800c55d
 800c3d4:	0800c55d 	.word	0x0800c55d
 800c3d8:	0800c4fd 	.word	0x0800c4fd
 800c3dc:	0800c51d 	.word	0x0800c51d
 800c3e0:	0800c53d 	.word	0x0800c53d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3f4:	f001 f9a8 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c3fe:	e0b1      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c40c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c40e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c410:	f001 fab8 	bl	800d984 <VL53L1_preset_mode_standard_ranging_short_range>
 800c414:	4603      	mov	r3, r0
 800c416:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c41a:	e0a3      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c42c:	f001 faeb 	bl	800da06 <VL53L1_preset_mode_standard_ranging_long_range>
 800c430:	4603      	mov	r3, r0
 800c432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c436:	e095      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	9301      	str	r3, [sp, #4]
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c448:	f001 fb1e 	bl	800da88 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c452:	e087      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c464:	f001 fb35 	bl	800dad2 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800c468:	4603      	mov	r3, r0
 800c46a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c46e:	e079      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c480:	f001 fb4c 	bl	800db1c <VL53L1_preset_mode_timed_ranging>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c48a:	e06b      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c49a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c49c:	f001 fb78 	bl	800db90 <VL53L1_preset_mode_timed_ranging_short_range>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4a6:	e05d      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b8:	f001 fba4 	bl	800dc04 <VL53L1_preset_mode_timed_ranging_long_range>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4c2:	e04f      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d4:	f001 fc78 	bl	800ddc8 <VL53L1_preset_mode_olt>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4de:	e041      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	6a3b      	ldr	r3, [r7, #32]
 800c4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f0:	f001 fc34 	bl	800dd5c <VL53L1_preset_mode_singleshot_ranging>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800c4fa:	e033      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	9302      	str	r3, [sp, #8]
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c50c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c50e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c510:	f001 fbd8 	bl	800dcc4 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800c514:	4603      	mov	r3, r0
 800c516:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c51a:	e023      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	9302      	str	r3, [sp, #8]
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c530:	f001 fba2 	bl	800dc78 <VL53L1_preset_mode_low_power_auto_ranging>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c53a:	e013      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	9302      	str	r3, [sp, #8]
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	6a3b      	ldr	r3, [r7, #32]
 800c54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c54c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c54e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c550:	f001 fbde 	bl	800dd10 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800c554:	4603      	mov	r3, r0
 800c556:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800c55a:	e003      	b.n	800c564 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800c55c:	23fc      	movs	r3, #252	; 0xfc
 800c55e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800c562:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800c564:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d105      	bne.n	800c578 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	893a      	ldrh	r2, [r7, #8]
 800c570:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	893a      	ldrh	r2, [r7, #8]
 800c576:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800c578:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d108      	bne.n	800c592 <VL53L1_set_preset_mode+0x2ca>
		status =
 800c580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fca0 	bl	800becc <VL53L1_set_timeouts_us>
 800c58c:	4603      	mov	r3, r0
 800c58e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800c592:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c596:	2b00      	cmp	r3, #0
 800c598:	d106      	bne.n	800c5a8 <VL53L1_set_preset_mode+0x2e0>
		status =
 800c59a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fc46 	bl	800be2e <VL53L1_set_inter_measurement_period_ms>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800c5a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3738      	adds	r7, #56	; 0x38
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	887a      	ldrh	r2, [r7, #2]
 800c5f8:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800c5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800c628:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	887a      	ldrh	r2, [r7, #2]
 800c650:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800c654:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c670:	2300      	movs	r3, #0
 800c672:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c67e:	f003 0303 	and.w	r3, r3, #3
 800c682:	b2da      	uxtb	r2, r3
			(vhv_loopbound * 4);
 800c684:	78fb      	ldrb	r3, [r7, #3]
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	b2db      	uxtb	r3, r3
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c68a:	4413      	add	r3, r2
 800c68c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	LOG_FUNCTION_END(status);

	return status;
 800c694:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c698:	4618      	mov	r0, r3
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b0d0      	sub	sp, #320	; 0x140
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	1d3b      	adds	r3, r7, #4
 800c6ac:	6018      	str	r0, [r3, #0]
 800c6ae:	4608      	mov	r0, r1
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	1cfb      	adds	r3, r7, #3
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	1cbb      	adds	r3, r7, #2
 800c6ba:	460a      	mov	r2, r1
 800c6bc:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c6c4:	1d3b      	adds	r3, r7, #4
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800c6cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6d0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c6d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800c6d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6dc:	3342      	adds	r3, #66	; 0x42
 800c6de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800c6e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c6ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800c6ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800c6f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800c6fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c6fe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800c702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800c706:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c70a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800c70e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800c712:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c716:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c71a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800c71e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c722:	332c      	adds	r3, #44	; 0x2c
 800c724:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800c728:	f107 030c 	add.w	r3, r7, #12
 800c72c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800c748:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c74c:	1cfa      	adds	r2, r7, #3
 800c74e:	7812      	ldrb	r2, [r2, #0]
 800c750:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800c752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c756:	791b      	ldrb	r3, [r3, #4]
 800c758:	b25b      	sxtb	r3, r3
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800c760:	1cfb      	adds	r3, r7, #3
 800c762:	f993 3000 	ldrsb.w	r3, [r3]
 800c766:	4313      	orrs	r3, r2
 800c768:	b25b      	sxtb	r3, r3
 800c76a:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800c76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c770:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800c772:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c776:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800c77a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c77e:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800c782:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c786:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800c78a:	2bff      	cmp	r3, #255	; 0xff
 800c78c:	d104      	bne.n	800c798 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800c78e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c792:	2200      	movs	r2, #0
 800c794:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c798:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c79c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d133      	bne.n	800c80c <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800c7a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d12d      	bne.n	800c80c <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800c7b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7b4:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800c7b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7bc:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800c7c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800c7ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7ce:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800c7d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10c      	bne.n	800c7f4 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800c7da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7de:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800c7ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800c7f2:	e004      	b.n	800c7fe <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800c7f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800c7fe:	1cbb      	adds	r3, r7, #2
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b04      	cmp	r3, #4
 800c804:	d802      	bhi.n	800c80c <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800c806:	1cbb      	adds	r3, r7, #2
 800c808:	2205      	movs	r2, #5
 800c80a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c80c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c810:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800c814:	2b01      	cmp	r3, #1
 800c816:	d110      	bne.n	800c83a <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800c818:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c81c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800c820:	2b01      	cmp	r3, #1
 800c822:	d10a      	bne.n	800c83a <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800c824:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c828:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800c82c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c830:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800c834:	1cbb      	adds	r3, r7, #2
 800c836:	2206      	movs	r2, #6
 800c838:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800c83a:	1cbb      	adds	r3, r7, #2
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	3b01      	subs	r3, #1
 800c840:	2b05      	cmp	r3, #5
 800c842:	d827      	bhi.n	800c894 <VL53L1_init_and_start_range+0x1f0>
 800c844:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <VL53L1_init_and_start_range+0x1a8>)
 800c846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84a:	bf00      	nop
 800c84c:	0800c88d 	.word	0x0800c88d
 800c850:	0800c885 	.word	0x0800c885
 800c854:	0800c87d 	.word	0x0800c87d
 800c858:	0800c875 	.word	0x0800c875
 800c85c:	0800c86d 	.word	0x0800c86d
 800c860:	0800c865 	.word	0x0800c865
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800c864:	2301      	movs	r3, #1
 800c866:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c86a:	e017      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800c86c:	230d      	movs	r3, #13
 800c86e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c872:	e013      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800c874:	2324      	movs	r3, #36	; 0x24
 800c876:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c87a:	e00f      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800c87c:	2344      	movs	r3, #68	; 0x44
 800c87e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c882:	e00b      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800c884:	235a      	movs	r3, #90	; 0x5a
 800c886:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c88a:	e007      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800c88c:	2371      	movs	r3, #113	; 0x71
 800c88e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c892:	e003      	b.n	800c89c <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800c894:	2383      	movs	r3, #131	; 0x83
 800c896:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800c89a:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800c89c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c8a0:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800c8a4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800c8a8:	f107 030c 	add.w	r3, r7, #12
 800c8ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c8b6:	e00b      	b.n	800c8d0 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 800c8b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800c8c6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800c8d0:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800c8d4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d3ed      	bcc.n	800c8b8 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800c8dc:	1cbb      	adds	r3, r7, #2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b05      	cmp	r3, #5
 800c8e2:	d917      	bls.n	800c914 <VL53L1_init_and_start_range+0x270>
 800c8e4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d113      	bne.n	800c914 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c8ec:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c8f0:	f1c3 0301 	rsb	r3, r3, #1
 800c8f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c8f8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800c8fc:	f107 020c 	add.w	r2, r7, #12
 800c900:	4413      	add	r3, r2
		status =
 800c902:	461a      	mov	r2, r3
 800c904:	210b      	movs	r1, #11
 800c906:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c90a:	f002 fb6b 	bl	800efe4 <VL53L1_i2c_encode_static_nvm_managed>
 800c90e:	4603      	mov	r3, r0
 800c910:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800c914:	1cbb      	adds	r3, r7, #2
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b04      	cmp	r3, #4
 800c91a:	d917      	bls.n	800c94c <VL53L1_init_and_start_range+0x2a8>
 800c91c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c920:	2b00      	cmp	r3, #0
 800c922:	d113      	bne.n	800c94c <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c924:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c928:	f1c3 030d 	rsb	r3, r3, #13
 800c92c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c930:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800c934:	f107 020c 	add.w	r2, r7, #12
 800c938:	4413      	add	r3, r2
		status =
 800c93a:	461a      	mov	r2, r3
 800c93c:	2117      	movs	r1, #23
 800c93e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c942:	f002 fc2b 	bl	800f19c <VL53L1_i2c_encode_customer_nvm_managed>
 800c946:	4603      	mov	r3, r0
 800c948:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800c94c:	1cbb      	adds	r3, r7, #2
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b03      	cmp	r3, #3
 800c952:	d917      	bls.n	800c984 <VL53L1_init_and_start_range+0x2e0>
 800c954:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d113      	bne.n	800c984 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c95c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c960:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c964:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c968:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800c96c:	f107 020c 	add.w	r2, r7, #12
 800c970:	4413      	add	r3, r2
		status =
 800c972:	461a      	mov	r2, r3
 800c974:	2120      	movs	r1, #32
 800c976:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c97a:	f002 fd4d 	bl	800f418 <VL53L1_i2c_encode_static_config>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800c984:	1cbb      	adds	r3, r7, #2
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d917      	bls.n	800c9bc <VL53L1_init_and_start_range+0x318>
 800c98c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c990:	2b00      	cmp	r3, #0
 800c992:	d113      	bne.n	800c9bc <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800c994:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c998:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800c99c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c9a0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800c9a4:	f107 020c 	add.w	r2, r7, #12
 800c9a8:	4413      	add	r3, r2
		status =
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	2116      	movs	r1, #22
 800c9ae:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c9b2:	f002 fe14 	bl	800f5de <VL53L1_i2c_encode_general_config>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800c9bc:	1cbb      	adds	r3, r7, #2
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d917      	bls.n	800c9f4 <VL53L1_init_and_start_range+0x350>
 800c9c4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d113      	bne.n	800c9f4 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800c9cc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800c9d0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800c9d4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800c9d8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800c9dc:	f107 020c 	add.w	r2, r7, #12
 800c9e0:	4413      	add	r3, r2
		status =
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	2117      	movs	r1, #23
 800c9e6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c9ea:	f002 fe7c 	bl	800f6e6 <VL53L1_i2c_encode_timing_config>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800c9f4:	1cbb      	adds	r3, r7, #2
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d036      	beq.n	800ca6a <VL53L1_init_and_start_range+0x3c6>
 800c9fc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d132      	bne.n	800ca6a <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ca04:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ca08:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800ca0c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800ca10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca14:	791b      	ldrb	r3, [r3, #4]
 800ca16:	f003 0320 	and.w	r3, r3, #32
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d017      	beq.n	800ca4e <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800ca1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca22:	789b      	ldrb	r3, [r3, #2]
 800ca24:	f043 0301 	orr.w	r3, r3, #1
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ca2e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800ca30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca34:	789b      	ldrb	r3, [r3, #2]
 800ca36:	f043 0301 	orr.w	r3, r3, #1
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ca40:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800ca42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca46:	789a      	ldrb	r2, [r3, #2]
 800ca48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ca4c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ca4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800ca52:	f107 020c 	add.w	r2, r7, #12
 800ca56:	4413      	add	r3, r2
		status =
 800ca58:	461a      	mov	r2, r3
 800ca5a:	2112      	movs	r1, #18
 800ca5c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800ca60:	f002 fec3 	bl	800f7ea <VL53L1_i2c_encode_dynamic_config>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800ca6a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d113      	bne.n	800ca9a <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 800ca72:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ca76:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800ca7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ca7e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800ca82:	f107 020c 	add.w	r2, r7, #12
 800ca86:	4413      	add	r3, r2
		status =
 800ca88:	461a      	mov	r2, r3
 800ca8a:	2105      	movs	r1, #5
 800ca8c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800ca90:	f002 ff30 	bl	800f8f4 <VL53L1_i2c_encode_system_control>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800ca9a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10c      	bne.n	800cabc <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800caa2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
		status =
 800caa6:	f107 020c 	add.w	r2, r7, #12
 800caaa:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800caae:	1d38      	adds	r0, r7, #4
 800cab0:	6800      	ldr	r0, [r0, #0]
 800cab2:	f002 f8f1 	bl	800ec98 <VL53L1_WriteMulti>
 800cab6:	4603      	mov	r3, r0
 800cab8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800cabc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d106      	bne.n	800cad2 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800cac4:	1d3b      	adds	r3, r7, #4
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	f001 f9e6 	bl	800de98 <VL53L1_update_ll_driver_rd_state>
 800cacc:	4603      	mov	r3, r0
 800cace:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800cad2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800cada:	1d3b      	adds	r3, r7, #4
 800cadc:	6818      	ldr	r0, [r3, #0]
 800cade:	f001 faae 	bl	800e03e <VL53L1_update_ll_driver_cfg_state>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800cae8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800caec:	4618      	mov	r0, r3
 800caee:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop

0800caf8 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb00:	2300      	movs	r3, #0
 800cb02:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800cb0e:	b25b      	sxtb	r3, r3
 800cb10:	f003 030f 	and.w	r3, r3, #15
 800cb14:	b25b      	sxtb	r3, r3
 800cb16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb1a:	b25b      	sxtb	r3, r3
 800cb1c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f002 ff1c 	bl	800f96a <VL53L1_set_system_control>
 800cb32:	4603      	mov	r3, r0
 800cb34:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800cb3c:	f003 030f 	and.w	r3, r3, #15
 800cb40:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800cb48:	2103      	movs	r1, #3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f001 f97a 	bl	800de44 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d102      	bne.n	800cb60 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f001 feef 	bl	800e93e <VL53L1_low_power_auto_data_stop_range>

	return status;
 800cb60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b0c8      	sub	sp, #288	; 0x120
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	1d3b      	adds	r3, r7, #4
 800cb74:	6018      	str	r0, [r3, #0]
 800cb76:	460a      	mov	r2, r1
 800cb78:	1cfb      	adds	r3, r7, #3
 800cb7a:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cb82:	1d3b      	adds	r3, r7, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800cb8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cb8e:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800cb92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800cb96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cb9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cb9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800cba2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cba6:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800cbaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800cbae:	2388      	movs	r3, #136	; 0x88
 800cbb0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800cbc0:	1cfb      	adds	r3, r7, #3
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d008      	beq.n	800cbda <VL53L1_get_measurement_results+0x6e>
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d10d      	bne.n	800cbe8 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800cbcc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cbd0:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800cbd4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800cbd8:	e00a      	b.n	800cbf0 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800cbda:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cbde:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800cbe2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800cbe6:	e003      	b.n	800cbf0 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 800cbe8:	232c      	movs	r3, #44	; 0x2c
 800cbea:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800cbee:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cbf0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10c      	bne.n	800cc12 <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 800cbf8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
		status =
 800cbfc:	f107 0208 	add.w	r2, r7, #8
 800cc00:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800cc04:	1d38      	adds	r0, r7, #4
 800cc06:	6800      	ldr	r0, [r0, #0]
 800cc08:	f002 f87c 	bl	800ed04 <VL53L1_ReadMulti>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800cc12:	1cfb      	adds	r3, r7, #3
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d917      	bls.n	800cc4a <VL53L1_get_measurement_results+0xde>
 800cc1a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d113      	bne.n	800cc4a <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800cc22:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cc26:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800cc2a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800cc2e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800cc32:	f107 0208 	add.w	r2, r7, #8
 800cc36:	4413      	add	r3, r2
		status =
 800cc38:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	2038      	movs	r0, #56	; 0x38
 800cc40:	f003 f811 	bl	800fc66 <VL53L1_i2c_decode_debug_results>
 800cc44:	4603      	mov	r3, r0
 800cc46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800cc4a:	1cfb      	adds	r3, r7, #3
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d017      	beq.n	800cc82 <VL53L1_get_measurement_results+0x116>
 800cc52:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d113      	bne.n	800cc82 <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800cc5a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800cc5e:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800cc62:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800cc66:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800cc6a:	f107 0208 	add.w	r2, r7, #8
 800cc6e:	4413      	add	r3, r2
		status =
 800cc70:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800cc74:	4619      	mov	r1, r3
 800cc76:	2021      	movs	r0, #33	; 0x21
 800cc78:	f002 ff94 	bl	800fba4 <VL53L1_i2c_decode_core_results>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800cc82:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d110      	bne.n	800ccac <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800cc90:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800cc94:	f107 0208 	add.w	r2, r7, #8
 800cc98:	4413      	add	r3, r2
		status =
 800cc9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800cc9e:	4619      	mov	r1, r3
 800cca0:	202c      	movs	r0, #44	; 0x2c
 800cca2:	f002 fe89 	bl	800f9b8 <VL53L1_i2c_decode_system_results>
 800cca6:	4603      	mov	r3, r0
 800cca8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ccac:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b088      	sub	sp, #32
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	607a      	str	r2, [r7, #4]
 800ccc6:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800ccd6:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ccdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800cce4:	7afb      	ldrb	r3, [r7, #11]
 800cce6:	4619      	mov	r1, r3
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f7ff ff3f 	bl	800cb6c <VL53L1_get_measurement_results>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800ccf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10c      	bne.n	800cd14 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800cd00:	4618      	mov	r0, r3
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	f000 f86c 	bl	800cdec <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d12d      	bne.n	800cd7a <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800cd1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d10e      	bne.n	800cd44 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d109      	bne.n	800cd44 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f001 fe5e 	bl	800e9f2 <VL53L1_low_power_auto_setup_manual_calibration>
 800cd36:	4603      	mov	r3, r0
 800cd38:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800cd42:	e00c      	b.n	800cd5e <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800cd44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d108      	bne.n	800cd5e <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d103      	bne.n	800cd5e <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	2202      	movs	r2, #2
 800cd5a:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800cd64:	2bff      	cmp	r3, #255	; 0xff
 800cd66:	d008      	beq.n	800cd7a <VL53L1_get_device_results+0xc0>
 800cd68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d104      	bne.n	800cd7a <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f001 fe83 	bl	800ea7c <VL53L1_low_power_auto_update_DSS>
 800cd76:	4603      	mov	r3, r0
 800cd78:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800cd8e:	2284      	movs	r2, #132	; 0x84
 800cd90:	6939      	ldr	r1, [r7, #16]
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f003 fcba 	bl	801070c <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800cd98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d104      	bne.n	800cdaa <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f001 f901 	bl	800dfa8 <VL53L1_check_ll_driver_rd_state>
 800cda6:	4603      	mov	r3, r0
 800cda8:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800cdaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3720      	adds	r7, #32
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cdc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d107      	bne.n	800cdde <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800cdce:	78fb      	ldrb	r3, [r7, #3]
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff fc65 	bl	800c6a4 <VL53L1_init_and_start_range>
 800cdda:	4603      	mov	r3, r0
 800cddc:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800cdde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
	...

0800cdec <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b089      	sub	sp, #36	; 0x24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	78da      	ldrb	r2, [r3, #3]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	3304      	adds	r3, #4
 800ce12:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800ce14:	2300      	movs	r3, #0
 800ce16:	77fb      	strb	r3, [r7, #31]
 800ce18:	e0d0      	b.n	800cfbc <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	7ffa      	ldrb	r2, [r7, #31]
 800ce1e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	2200      	movs	r2, #0
 800ce24:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	78db      	ldrb	r3, [r3, #3]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10a      	bne.n	800ce44 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	785b      	ldrb	r3, [r3, #1]
 800ce32:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800ce36:	2b09      	cmp	r3, #9
 800ce38:	d104      	bne.n	800ce44 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	2213      	movs	r2, #19
 800ce3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce42:	e007      	b.n	800ce54 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	785b      	ldrb	r3, [r3, #1]
 800ce48:	f003 031f 	and.w	r3, r3, #31
 800ce4c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800ce54:	7ffb      	ldrb	r3, [r7, #31]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d05d      	beq.n	800cf1a <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800ce5e:	e0a7      	b.n	800cfb0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	789b      	ldrb	r3, [r3, #2]
 800ce64:	2b07      	cmp	r3, #7
 800ce66:	d104      	bne.n	800ce72 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	821a      	strh	r2, [r3, #16]
 800ce70:	e00c      	b.n	800ce8c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	789b      	ldrb	r3, [r3, #2]
 800ce76:	2b08      	cmp	r3, #8
 800ce78:	d104      	bne.n	800ce84 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	821a      	strh	r2, [r3, #16]
 800ce82:	e003      	b.n	800ce8c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	895b      	ldrh	r3, [r3, #10]
 800cea8:	015b      	lsls	r3, r3, #5
 800ceaa:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceb2:	d302      	bcc.n	800ceba <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800ceb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ceb8:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800cece:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	fb02 f303 	mul.w	r3, r2, r3
 800ced8:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cee0:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	da01      	bge.n	800ceec <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800cee8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ceec:	12db      	asrs	r3, r3, #11
 800ceee:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	b21a      	sxth	r2, r3
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	621a      	str	r2, [r3, #32]

			break;
 800cf18:	e04a      	b.n	800cfb0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf30:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	8bdb      	ldrh	r3, [r3, #30]
 800cf3e:	015b      	lsls	r3, r3, #5
 800cf40:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf48:	d302      	bcc.n	800cf50 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800cf4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf4e:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800cf64:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	fb02 f303 	mul.w	r3, r2, r3
 800cf6e:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf76:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	da01      	bge.n	800cf82 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800cf7e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800cf82:	12db      	asrs	r3, r3, #11
 800cf84:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	b21a      	sxth	r2, r3
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	621a      	str	r2, [r3, #32]

			break;
 800cfae:	bf00      	nop
		}

		pdata++;
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	3340      	adds	r3, #64	; 0x40
 800cfb4:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800cfb6:	7ffb      	ldrb	r3, [r7, #31]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	77fb      	strb	r3, [r7, #31]
 800cfbc:	7ffb      	ldrb	r3, [r7, #31]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	f67f af2b 	bls.w	800ce1a <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	f003 031f 	and.w	r3, r3, #31
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	2b10      	cmp	r3, #16
 800cfd6:	d831      	bhi.n	800d03c <VL53L1_copy_sys_and_core_results_to_range_results+0x250>
 800cfd8:	a201      	add	r2, pc, #4	; (adr r2, 800cfe0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1f4>)
 800cfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfde:	bf00      	nop
 800cfe0:	0800d025 	.word	0x0800d025
 800cfe4:	0800d025 	.word	0x0800d025
 800cfe8:	0800d025 	.word	0x0800d025
 800cfec:	0800d03d 	.word	0x0800d03d
 800cff0:	0800d03d 	.word	0x0800d03d
 800cff4:	0800d03d 	.word	0x0800d03d
 800cff8:	0800d03d 	.word	0x0800d03d
 800cffc:	0800d03d 	.word	0x0800d03d
 800d000:	0800d03d 	.word	0x0800d03d
 800d004:	0800d03d 	.word	0x0800d03d
 800d008:	0800d03d 	.word	0x0800d03d
 800d00c:	0800d03d 	.word	0x0800d03d
 800d010:	0800d025 	.word	0x0800d025
 800d014:	0800d03d 	.word	0x0800d03d
 800d018:	0800d03d 	.word	0x0800d03d
 800d01c:	0800d03d 	.word	0x0800d03d
 800d020:	0800d025 	.word	0x0800d025
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	785b      	ldrb	r3, [r3, #1]
 800d028:	f003 031f 	and.w	r3, r3, #31
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800d03a:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800d03c:	bf00      	nop
 800d03e:	3724      	adds	r7, #36	; 0x24
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800d048:	b480      	push	{r7}
 800d04a:	b087      	sub	sp, #28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	460b      	mov	r3, r1
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d056:	2300      	movs	r3, #0
 800d058:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800d05e:	897b      	ldrh	r3, [r7, #10]
 800d060:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d064:	2b38      	cmp	r3, #56	; 0x38
 800d066:	f200 8204 	bhi.w	800d472 <VL53L1_get_tuning_parm+0x42a>
 800d06a:	a201      	add	r2, pc, #4	; (adr r2, 800d070 <VL53L1_get_tuning_parm+0x28>)
 800d06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d070:	0800d155 	.word	0x0800d155
 800d074:	0800d163 	.word	0x0800d163
 800d078:	0800d171 	.word	0x0800d171
 800d07c:	0800d17f 	.word	0x0800d17f
 800d080:	0800d18d 	.word	0x0800d18d
 800d084:	0800d19b 	.word	0x0800d19b
 800d088:	0800d1a9 	.word	0x0800d1a9
 800d08c:	0800d1b7 	.word	0x0800d1b7
 800d090:	0800d1c5 	.word	0x0800d1c5
 800d094:	0800d1d3 	.word	0x0800d1d3
 800d098:	0800d1e1 	.word	0x0800d1e1
 800d09c:	0800d1ef 	.word	0x0800d1ef
 800d0a0:	0800d1fd 	.word	0x0800d1fd
 800d0a4:	0800d20b 	.word	0x0800d20b
 800d0a8:	0800d219 	.word	0x0800d219
 800d0ac:	0800d227 	.word	0x0800d227
 800d0b0:	0800d235 	.word	0x0800d235
 800d0b4:	0800d243 	.word	0x0800d243
 800d0b8:	0800d251 	.word	0x0800d251
 800d0bc:	0800d25f 	.word	0x0800d25f
 800d0c0:	0800d26d 	.word	0x0800d26d
 800d0c4:	0800d27b 	.word	0x0800d27b
 800d0c8:	0800d289 	.word	0x0800d289
 800d0cc:	0800d297 	.word	0x0800d297
 800d0d0:	0800d2a5 	.word	0x0800d2a5
 800d0d4:	0800d2b3 	.word	0x0800d2b3
 800d0d8:	0800d2c1 	.word	0x0800d2c1
 800d0dc:	0800d2cf 	.word	0x0800d2cf
 800d0e0:	0800d2dd 	.word	0x0800d2dd
 800d0e4:	0800d2eb 	.word	0x0800d2eb
 800d0e8:	0800d2f9 	.word	0x0800d2f9
 800d0ec:	0800d307 	.word	0x0800d307
 800d0f0:	0800d315 	.word	0x0800d315
 800d0f4:	0800d323 	.word	0x0800d323
 800d0f8:	0800d331 	.word	0x0800d331
 800d0fc:	0800d33f 	.word	0x0800d33f
 800d100:	0800d34d 	.word	0x0800d34d
 800d104:	0800d35b 	.word	0x0800d35b
 800d108:	0800d369 	.word	0x0800d369
 800d10c:	0800d377 	.word	0x0800d377
 800d110:	0800d385 	.word	0x0800d385
 800d114:	0800d393 	.word	0x0800d393
 800d118:	0800d3a1 	.word	0x0800d3a1
 800d11c:	0800d3af 	.word	0x0800d3af
 800d120:	0800d3bd 	.word	0x0800d3bd
 800d124:	0800d3cb 	.word	0x0800d3cb
 800d128:	0800d3d9 	.word	0x0800d3d9
 800d12c:	0800d3e7 	.word	0x0800d3e7
 800d130:	0800d3f5 	.word	0x0800d3f5
 800d134:	0800d403 	.word	0x0800d403
 800d138:	0800d411 	.word	0x0800d411
 800d13c:	0800d41f 	.word	0x0800d41f
 800d140:	0800d42d 	.word	0x0800d42d
 800d144:	0800d43b 	.word	0x0800d43b
 800d148:	0800d449 	.word	0x0800d449
 800d14c:	0800d457 	.word	0x0800d457
 800d150:	0800d465 	.word	0x0800d465

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800d15a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
	break;
 800d160:	e18e      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800d168:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
	break;
 800d16e:	e187      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	601a      	str	r2, [r3, #0]
	break;
 800d17c:	e180      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800d184:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	601a      	str	r2, [r3, #0]
	break;
 800d18a:	e179      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d192:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	601a      	str	r2, [r3, #0]
	break;
 800d198:	e172      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800d1a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	601a      	str	r2, [r3, #0]
	break;
 800d1a6:	e16b      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d1ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	601a      	str	r2, [r3, #0]
	break;
 800d1b4:	e164      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d1bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	601a      	str	r2, [r3, #0]
	break;
 800d1c2:	e15d      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800d1ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	601a      	str	r2, [r3, #0]
	break;
 800d1d0:	e156      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800d1d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
	break;
 800d1de:	e14f      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800d1e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	601a      	str	r2, [r3, #0]
	break;
 800d1ec:	e148      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800d1f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	601a      	str	r2, [r3, #0]
	break;
 800d1fa:	e141      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800d202:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	601a      	str	r2, [r3, #0]
	break;
 800d208:	e13a      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800d210:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	601a      	str	r2, [r3, #0]
	break;
 800d216:	e133      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800d21e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	601a      	str	r2, [r3, #0]
	break;
 800d224:	e12c      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d22c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	601a      	str	r2, [r3, #0]
	break;
 800d232:	e125      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800d23a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	601a      	str	r2, [r3, #0]
	break;
 800d240:	e11e      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d248:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	601a      	str	r2, [r3, #0]
	break;
 800d24e:	e117      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800d256:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	601a      	str	r2, [r3, #0]
	break;
 800d25c:	e110      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800d264:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	601a      	str	r2, [r3, #0]
	break;
 800d26a:	e109      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800d272:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	601a      	str	r2, [r3, #0]
	break;
 800d278:	e102      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800d280:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	601a      	str	r2, [r3, #0]
	break;
 800d286:	e0fb      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800d28e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	601a      	str	r2, [r3, #0]
	break;
 800d294:	e0f4      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800d29c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	601a      	str	r2, [r3, #0]
	break;
 800d2a2:	e0ed      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800d2aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	601a      	str	r2, [r3, #0]
	break;
 800d2b0:	e0e6      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800d2b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	601a      	str	r2, [r3, #0]
	break;
 800d2be:	e0df      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800d2c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	601a      	str	r2, [r3, #0]
	break;
 800d2cc:	e0d8      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800d2d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	601a      	str	r2, [r3, #0]
	break;
 800d2da:	e0d1      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800d2e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	601a      	str	r2, [r3, #0]
	break;
 800d2e8:	e0ca      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d2f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	601a      	str	r2, [r3, #0]
	break;
 800d2f6:	e0c3      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d2fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	601a      	str	r2, [r3, #0]
	break;
 800d304:	e0bc      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800d30c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	601a      	str	r2, [r3, #0]
	break;
 800d312:	e0b5      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d31a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	601a      	str	r2, [r3, #0]
	break;
 800d320:	e0ae      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800d328:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
	break;
 800d32e:	e0a7      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800d336:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	601a      	str	r2, [r3, #0]
	break;
 800d33c:	e0a0      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d344:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	601a      	str	r2, [r3, #0]
	break;
 800d34a:	e099      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800d352:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	601a      	str	r2, [r3, #0]
	break;
 800d358:	e092      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d360:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	601a      	str	r2, [r3, #0]
	break;
 800d366:	e08b      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d36e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	601a      	str	r2, [r3, #0]
	break;
 800d374:	e084      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d37c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	601a      	str	r2, [r3, #0]
	break;
 800d382:	e07d      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d38a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	601a      	str	r2, [r3, #0]
	break;
 800d390:	e076      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800d398:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	601a      	str	r2, [r3, #0]
	break;
 800d39e:	e06f      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800d3a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	601a      	str	r2, [r3, #0]
	break;
 800d3ac:	e068      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800d3b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	601a      	str	r2, [r3, #0]
	break;
 800d3ba:	e061      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800d3c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	601a      	str	r2, [r3, #0]
	break;
 800d3c8:	e05a      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800d3d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
	break;
 800d3d6:	e053      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800d3de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	601a      	str	r2, [r3, #0]
	break;
 800d3e4:	e04c      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800d3ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	601a      	str	r2, [r3, #0]
	break;
 800d3f2:	e045      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d3fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	601a      	str	r2, [r3, #0]
	break;
 800d400:	e03e      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d408:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	601a      	str	r2, [r3, #0]
	break;
 800d40e:	e037      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d416:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	601a      	str	r2, [r3, #0]
	break;
 800d41c:	e030      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d424:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	601a      	str	r2, [r3, #0]
	break;
 800d42a:	e029      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d432:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	601a      	str	r2, [r3, #0]
	break;
 800d438:	e022      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d440:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	601a      	str	r2, [r3, #0]
	break;
 800d446:	e01b      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800d44e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	601a      	str	r2, [r3, #0]
	break;
 800d454:	e014      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d45c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	601a      	str	r2, [r3, #0]
	break;
 800d462:	e00d      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800d46a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	601a      	str	r2, [r3, #0]
	break;
 800d470:	e006      	b.n	800d480 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d478:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800d47a:	23fc      	movs	r3, #252	; 0xfc
 800d47c:	75fb      	strb	r3, [r7, #23]
	break;
 800d47e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800d480:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d484:	4618      	mov	r0, r3
 800d486:	371c      	adds	r7, #28
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800d490:	b480      	push	{r7}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2208      	movs	r2, #8
 800d4a0:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	220b      	movs	r2, #11
 800d4a6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4ae:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d4b6:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800d4be:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800d4c6:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2212      	movs	r2, #18
 800d4ee:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	220f      	movs	r2, #15
 800d4f4:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2202      	movs	r2, #2
 800d4fa:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800d502:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	220c      	movs	r2, #12
 800d508:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr

0800d51a <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b084      	sub	sp, #16
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	895b      	ldrh	r3, [r3, #10]
 800d52c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	895b      	ldrh	r3, [r3, #10]
 800d54a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2200      	movs	r2, #0
 800d568:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2240      	movs	r2, #64	; 0x40
 800d56e:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10d      	bne.n	800d594 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d108      	bne.n	800d594 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d103      	bne.n	800d594 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	2200      	movs	r2, #0
 800d590:	741a      	strb	r2, [r3, #16]
 800d592:	e002      	b.n	800d59a <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	2201      	movs	r2, #1
 800d598:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800d59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d114      	bne.n	800d5cc <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d110      	bne.n	800d5cc <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	7d1b      	ldrb	r3, [r3, #20]
 800d5be:	f000 ff97 	bl	800e4f0 <VL53L1_calc_range_ignore_threshold>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	82da      	strh	r2, [r3, #22]
 800d5ca:	e002      	b.n	800d5d2 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b085      	sub	sp, #20
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d5f0:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5f8:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d600:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d608:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2208      	movs	r2, #8
 800d60e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2228      	movs	r2, #40	; 0x28
 800d614:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2209      	movs	r2, #9
 800d61a:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800d61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d634:	2300      	movs	r3, #0
 800d636:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f248 0203 	movw	r2, #32771	; 0x8003
 800d63e:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f248 0201 	movw	r2, #32769	; 0x8001
 800d646:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f248 0241 	movw	r2, #32833	; 0x8041
 800d64e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	220e      	movs	r2, #14
 800d654:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	220a      	movs	r2, #10
 800d65a:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2206      	movs	r2, #6
 800d660:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	220e      	movs	r2, #14
 800d666:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	220a      	movs	r2, #10
 800d66c:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2206      	movs	r2, #6
 800d672:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2202      	movs	r2, #2
 800d678:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2221      	movs	r2, #33	; 0x21
 800d67e:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d692:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d69a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d6a2:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	22c0      	movs	r2, #192	; 0xc0
 800d6a8:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	22c0      	movs	r2, #192	; 0xc0
 800d6ae:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	22c0      	movs	r2, #192	; 0xc0
 800d6b4:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2210      	movs	r2, #16
 800d6c0:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2202      	movs	r2, #2
 800d6de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d6f0:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d6f8:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f248 0230 	movw	r2, #32816	; 0x8030
 800d700:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d708:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d710:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d718:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d720:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800d728:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d736:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800d738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d748:	b480      	push	{r7}
 800d74a:	b087      	sub	sp, #28
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d756:	2300      	movs	r3, #0
 800d758:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d760:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2200      	movs	r2, #0
 800d778:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2200      	movs	r2, #0
 800d78a:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2200      	movs	r2, #0
 800d79c:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2211      	movs	r2, #17
 800d7a2:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2202      	movs	r2, #2
 800d7b4:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2208      	movs	r2, #8
 800d7ba:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	22ff      	movs	r2, #255	; 0xff
 800d7f8:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2200      	movs	r2, #0
 800d80e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2200      	movs	r2, #0
 800d820:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	2200      	movs	r2, #0
 800d826:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2220      	movs	r2, #32
 800d82c:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	220b      	movs	r2, #11
 800d832:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d836:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	2202      	movs	r2, #2
 800d840:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	220d      	movs	r2, #13
 800d846:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	2200      	movs	r2, #0
 800d854:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	2201      	movs	r2, #1
 800d85a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	2200      	movs	r2, #0
 800d860:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	2200      	movs	r2, #0
 800d866:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800d86e:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2200      	movs	r2, #0
 800d874:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2238      	movs	r2, #56	; 0x38
 800d87a:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	22ff      	movs	r2, #255	; 0xff
 800d880:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2201      	movs	r2, #1
 800d886:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	221a      	movs	r2, #26
 800d892:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2220      	movs	r2, #32
 800d89e:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	22cc      	movs	r2, #204	; 0xcc
 800d8aa:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	220b      	movs	r2, #11
 800d8b0:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	22f5      	movs	r2, #245	; 0xf5
 800d8bc:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2209      	movs	r2, #9
 800d8c2:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2208      	movs	r2, #8
 800d8d8:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2278      	movs	r2, #120	; 0x78
 800d8de:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	2200      	movs	r2, #0
 800d902:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	220b      	movs	r2, #11
 800d912:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2209      	movs	r2, #9
 800d918:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	2201      	movs	r2, #1
 800d92e:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	22c7      	movs	r2, #199	; 0xc7
 800d948:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	22ff      	movs	r2, #255	; 0xff
 800d94e:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	22db      	movs	r2, #219	; 0xdb
 800d954:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2202      	movs	r2, #2
 800d95a:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800d95c:	6a3b      	ldr	r3, [r7, #32]
 800d95e:	2200      	movs	r2, #0
 800d960:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	2201      	movs	r2, #1
 800d966:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800d968:	6a3b      	ldr	r3, [r7, #32]
 800d96a:	2201      	movs	r2, #1
 800d96c:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	2221      	movs	r2, #33	; 0x21
 800d972:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800d974:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	371c      	adds	r7, #28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af02      	add	r7, sp, #8
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d992:	2300      	movs	r3, #0
 800d994:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	68b9      	ldr	r1, [r7, #8]
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f7ff fecf 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800d9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d121      	bne.n	800d9fa <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2207      	movs	r2, #7
 800d9ba:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2205      	movs	r2, #5
 800d9c0:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2208      	movs	r2, #8
 800d9d6:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2238      	movs	r2, #56	; 0x38
 800d9dc:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2207      	movs	r2, #7
 800d9e2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	2205      	movs	r2, #5
 800d9e8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d9fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b088      	sub	sp, #32
 800da0a:	af02      	add	r7, sp, #8
 800da0c:	60f8      	str	r0, [r7, #12]
 800da0e:	60b9      	str	r1, [r7, #8]
 800da10:	607a      	str	r2, [r7, #4]
 800da12:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da14:	2300      	movs	r3, #0
 800da16:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	6a3b      	ldr	r3, [r7, #32]
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f7ff fe8e 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800da2c:	4603      	mov	r3, r0
 800da2e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800da30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d121      	bne.n	800da7c <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	220f      	movs	r2, #15
 800da3c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	220d      	movs	r2, #13
 800da42:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2208      	movs	r2, #8
 800da58:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	22b8      	movs	r2, #184	; 0xb8
 800da5e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	220f      	movs	r2, #15
 800da64:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	220d      	movs	r2, #13
 800da6a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800da7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
 800da94:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800da96:	2300      	movs	r3, #0
 800da98:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	6a3b      	ldr	r3, [r7, #32]
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	68b9      	ldr	r1, [r7, #8]
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f7ff fe4d 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800daae:	4603      	mov	r3, r0
 800dab0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d105      	bne.n	800dac6 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	2202      	movs	r2, #2
 800dabe:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	223b      	movs	r2, #59	; 0x3b
 800dac4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3718      	adds	r7, #24
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b088      	sub	sp, #32
 800dad6:	af02      	add	r7, sp, #8
 800dad8:	60f8      	str	r0, [r7, #12]
 800dada:	60b9      	str	r1, [r7, #8]
 800dadc:	607a      	str	r2, [r7, #4]
 800dade:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dae0:	2300      	movs	r3, #0
 800dae2:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	9301      	str	r3, [sp, #4]
 800dae8:	6a3b      	ldr	r3, [r7, #32]
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	68b9      	ldr	r1, [r7, #8]
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f7ff fe28 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800daf8:	4603      	mov	r3, r0
 800dafa:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dafc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d105      	bne.n	800db10 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2202      	movs	r2, #2
 800db08:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	225b      	movs	r2, #91	; 0x5b
 800db0e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800db10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b088      	sub	sp, #32
 800db20:	af02      	add	r7, sp, #8
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db2a:	2300      	movs	r3, #0
 800db2c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	9301      	str	r3, [sp, #4]
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	68b9      	ldr	r1, [r7, #8]
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff fe03 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800db42:	4603      	mov	r3, r0
 800db44:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800db46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d11a      	bne.n	800db84 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	2200      	movs	r2, #0
 800db52:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	22b1      	movs	r2, #177	; 0xb1
 800db5e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	22d4      	movs	r2, #212	; 0xd4
 800db6a:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800db72:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	2240      	movs	r2, #64	; 0x40
 800db82:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800db84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3718      	adds	r7, #24
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af02      	add	r7, sp, #8
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db9e:	2300      	movs	r3, #0
 800dba0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	9301      	str	r3, [sp, #4]
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	68b9      	ldr	r1, [r7, #8]
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f7ff fee7 	bl	800d984 <VL53L1_preset_mode_standard_ranging_short_range>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dbba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d11a      	bne.n	800dbf8 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2284      	movs	r2, #132	; 0x84
 800dbd2:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	22b1      	movs	r2, #177	; 0xb1
 800dbde:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800dbe6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	2240      	movs	r2, #64	; 0x40
 800dbf6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dbf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af02      	add	r7, sp, #8
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc12:	2300      	movs	r3, #0
 800dc14:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	68b9      	ldr	r1, [r7, #8]
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7ff feee 	bl	800da06 <VL53L1_preset_mode_standard_ranging_long_range>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dc2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d11a      	bne.n	800dc6c <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2297      	movs	r2, #151	; 0x97
 800dc46:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	22b1      	movs	r2, #177	; 0xb1
 800dc52:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800dc5a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	2240      	movs	r2, #64	; 0x40
 800dc6a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800dc6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3718      	adds	r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af02      	add	r7, sp, #8
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
 800dc84:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc86:	2300      	movs	r3, #0
 800dc88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	9301      	str	r3, [sp, #4]
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7ff ff3f 	bl	800db1c <VL53L1_preset_mode_timed_ranging>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800dca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d106      	bne.n	800dcb8 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800dcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	68b8      	ldr	r0, [r7, #8]
 800dcb0:	f000 fe7f 	bl	800e9b2 <VL53L1_config_low_power_auto_mode>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dcb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3718      	adds	r7, #24
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af02      	add	r7, sp, #8
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	68b9      	ldr	r1, [r7, #8]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7ff ff53 	bl	800db90 <VL53L1_preset_mode_timed_ranging_short_range>
 800dcea:	4603      	mov	r3, r0
 800dcec:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800dcee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800dcf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	68b8      	ldr	r0, [r7, #8]
 800dcfc:	f000 fe59 	bl	800e9b2 <VL53L1_config_low_power_auto_mode>
 800dd00:	4603      	mov	r3, r0
 800dd02:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dd04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b088      	sub	sp, #32
 800dd14:	af02      	add	r7, sp, #8
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
 800dd1c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd24:	9301      	str	r3, [sp, #4]
 800dd26:	6a3b      	ldr	r3, [r7, #32]
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	68b9      	ldr	r1, [r7, #8]
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f7ff ff67 	bl	800dc04 <VL53L1_preset_mode_timed_ranging_long_range>
 800dd36:	4603      	mov	r3, r0
 800dd38:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800dd3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d106      	bne.n	800dd50 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800dd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	68b8      	ldr	r0, [r7, #8]
 800dd48:	f000 fe33 	bl	800e9b2 <VL53L1_config_low_power_auto_mode>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800dd50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af02      	add	r7, sp, #8
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	9301      	str	r3, [sp, #4]
 800dd72:	6a3b      	ldr	r3, [r7, #32]
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	68b9      	ldr	r1, [r7, #8]
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fce3 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800dd82:	4603      	mov	r3, r0
 800dd84:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800dd86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d116      	bne.n	800ddbc <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2200      	movs	r2, #0
 800dd92:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	22b1      	movs	r2, #177	; 0xb1
 800dd9e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	22d4      	movs	r2, #212	; 0xd4
 800ddaa:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	2210      	movs	r2, #16
 800ddba:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ddbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3718      	adds	r7, #24
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
 800ddd4:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff fcad 	bl	800d748 <VL53L1_preset_mode_standard_ranging>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ddf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800ddfa:	6a3b      	ldr	r3, [r7, #32]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800de00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2201      	movs	r2, #1
 800de1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2202      	movs	r2, #2
 800de24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	220a      	movs	r2, #10
 800de2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800de36:	625a      	str	r2, [r3, #36]	; 0x24
}
 800de38:	bf00      	nop
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	332c      	adds	r3, #44	; 0x2c
 800de58:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	78fa      	ldrb	r2, [r7, #3]
 800de5e:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2200      	movs	r2, #0
 800de64:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2202      	movs	r2, #2
 800de6a:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	2200      	movs	r2, #0
 800de70:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	78fa      	ldrb	r2, [r7, #3]
 800de76:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	2200      	movs	r2, #0
 800de7c:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2202      	movs	r2, #2
 800de82:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	2200      	movs	r2, #0
 800de88:	71da      	strb	r2, [r3, #7]

}
 800de8a:	bf00      	nop
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
	...

0800de98 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800de98:	b480      	push	{r7}
 800de9a:	b087      	sub	sp, #28
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800dea0:	2300      	movs	r3, #0
 800dea2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	332c      	adds	r3, #44	; 0x2c
 800deac:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800deb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10c      	bne.n	800ded6 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2203      	movs	r2, #3
 800dec0:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2202      	movs	r2, #2
 800decc:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	71da      	strb	r2, [r3, #7]
 800ded4:	e060      	b.n	800df98 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	795b      	ldrb	r3, [r3, #5]
 800deda:	2bff      	cmp	r3, #255	; 0xff
 800dedc:	d103      	bne.n	800dee6 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2280      	movs	r2, #128	; 0x80
 800dee2:	715a      	strb	r2, [r3, #5]
 800dee4:	e005      	b.n	800def2 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	795b      	ldrb	r3, [r3, #5]
 800deea:	3301      	adds	r3, #1
 800deec:	b2da      	uxtb	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	799b      	ldrb	r3, [r3, #6]
 800def6:	f083 0302 	eor.w	r3, r3, #2
 800defa:	b2da      	uxtb	r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	791b      	ldrb	r3, [r3, #4]
 800df04:	3b03      	subs	r3, #3
 800df06:	2b05      	cmp	r3, #5
 800df08:	d839      	bhi.n	800df7e <VL53L1_update_ll_driver_rd_state+0xe6>
 800df0a:	a201      	add	r2, pc, #4	; (adr r2, 800df10 <VL53L1_update_ll_driver_rd_state+0x78>)
 800df0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df10:	0800df29 	.word	0x0800df29
 800df14:	0800df7f 	.word	0x0800df7f
 800df18:	0800df7f 	.word	0x0800df7f
 800df1c:	0800df53 	.word	0x0800df53
 800df20:	0800df61 	.word	0x0800df61
 800df24:	0800df69 	.word	0x0800df69

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800df2e:	f003 0302 	and.w	r3, r3, #2
 800df32:	2b00      	cmp	r3, #0
 800df34:	dd03      	ble.n	800df3e <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2206      	movs	r2, #6
 800df3a:	711a      	strb	r2, [r3, #4]
 800df3c:	e002      	b.n	800df44 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2208      	movs	r2, #8
 800df42:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2200      	movs	r2, #0
 800df48:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	71da      	strb	r2, [r3, #7]

		break;
 800df50:	e022      	b.n	800df98 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2208      	movs	r2, #8
 800df5c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800df5e:	e01b      	b.n	800df98 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2208      	movs	r2, #8
 800df64:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800df66:	e017      	b.n	800df98 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	79db      	ldrb	r3, [r3, #7]
 800df6c:	f083 0301 	eor.w	r3, r3, #1
 800df70:	b2da      	uxtb	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2208      	movs	r2, #8
 800df7a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800df7c:	e00c      	b.n	800df98 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2203      	movs	r2, #3
 800df82:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2202      	movs	r2, #2
 800df8e:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2200      	movs	r2, #0
 800df94:	71da      	strb	r2, [r3, #7]

		break;
 800df96:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800df98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	371c      	adds	r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b089      	sub	sp, #36	; 0x24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	332c      	adds	r3, #44	; 0x2c
 800dfbc:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800dfc4:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800dfd6:	f003 031f 	and.w	r3, r3, #31
 800dfda:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	78db      	ldrb	r3, [r3, #3]
 800dfe0:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800dfe6:	111b      	asrs	r3, r3, #4
 800dfe8:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800dff6:	f003 0320 	and.w	r3, r3, #32
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d017      	beq.n	800e02e <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	791b      	ldrb	r3, [r3, #4]
 800e002:	2b06      	cmp	r3, #6
 800e004:	d105      	bne.n	800e012 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	2b12      	cmp	r3, #18
 800e00a:	d010      	beq.n	800e02e <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800e00c:	23ef      	movs	r3, #239	; 0xef
 800e00e:	77fb      	strb	r3, [r7, #31]
 800e010:	e00d      	b.n	800e02e <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	795b      	ldrb	r3, [r3, #5]
 800e016:	7bba      	ldrb	r2, [r7, #14]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d001      	beq.n	800e020 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800e01c:	23ee      	movs	r3, #238	; 0xee
 800e01e:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	799b      	ldrb	r3, [r3, #6]
 800e024:	7b7a      	ldrb	r2, [r7, #13]
 800e026:	429a      	cmp	r2, r3
 800e028:	d001      	beq.n	800e02e <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800e02a:	23ed      	movs	r3, #237	; 0xed
 800e02c:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800e02e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3724      	adds	r7, #36	; 0x24
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800e03e:	b480      	push	{r7}
 800e040:	b087      	sub	sp, #28
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800e046:	2300      	movs	r3, #0
 800e048:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	332c      	adds	r3, #44	; 0x2c
 800e052:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800e05a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10c      	bne.n	800e07c <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2203      	movs	r2, #3
 800e066:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2202      	movs	r2, #2
 800e072:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2200      	movs	r2, #0
 800e078:	70da      	strb	r2, [r3, #3]
 800e07a:	e03e      	b.n	800e0fa <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	785b      	ldrb	r3, [r3, #1]
 800e080:	2bff      	cmp	r3, #255	; 0xff
 800e082:	d103      	bne.n	800e08c <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2280      	movs	r2, #128	; 0x80
 800e088:	705a      	strb	r2, [r3, #1]
 800e08a:	e005      	b.n	800e098 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	785b      	ldrb	r3, [r3, #1]
 800e090:	3301      	adds	r3, #1
 800e092:	b2da      	uxtb	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	789b      	ldrb	r3, [r3, #2]
 800e09c:	f083 0302 	eor.w	r3, r3, #2
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d002      	beq.n	800e0b4 <VL53L1_update_ll_driver_cfg_state+0x76>
 800e0ae:	2b04      	cmp	r3, #4
 800e0b0:	d00e      	beq.n	800e0d0 <VL53L1_update_ll_driver_cfg_state+0x92>
 800e0b2:	e015      	b.n	800e0e0 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	78db      	ldrb	r3, [r3, #3]
 800e0b8:	f083 0301 	eor.w	r3, r3, #1
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2204      	movs	r2, #4
 800e0cc:	701a      	strb	r2, [r3, #0]
		break;
 800e0ce:	e014      	b.n	800e0fa <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	78db      	ldrb	r3, [r3, #3]
 800e0d4:	f083 0301 	eor.w	r3, r3, #1
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	70da      	strb	r2, [r3, #3]

		break;
 800e0de:	e00c      	b.n	800e0fa <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2203      	movs	r2, #3
 800e0e4:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	70da      	strb	r2, [r3, #3]

		break;
 800e0f8:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800e0fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	371c      	adds	r7, #28
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr

0800e10a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800e10a:	b480      	push	{r7}
 800e10c:	b083      	sub	sp, #12
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	7c1a      	ldrb	r2, [r3, #16]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	3301      	adds	r3, #1
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	7c52      	ldrb	r2, [r2, #17]
 800e124:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	3302      	adds	r3, #2
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	7c92      	ldrb	r2, [r2, #18]
 800e12e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	3303      	adds	r3, #3
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	7cd2      	ldrb	r2, [r2, #19]
 800e138:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	3304      	adds	r3, #4
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	7d12      	ldrb	r2, [r2, #20]
 800e142:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	3305      	adds	r3, #5
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	7d52      	ldrb	r2, [r2, #21]
 800e14c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	3306      	adds	r3, #6
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	7d92      	ldrb	r2, [r2, #22]
 800e156:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	3307      	adds	r3, #7
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	7dd2      	ldrb	r2, [r2, #23]
 800e160:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	3308      	adds	r3, #8
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	7e12      	ldrb	r2, [r2, #24]
 800e16a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	3309      	adds	r3, #9
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	7e52      	ldrb	r2, [r2, #25]
 800e174:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	330a      	adds	r3, #10
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	7e92      	ldrb	r2, [r2, #26]
 800e17e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	330b      	adds	r3, #11
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	7ed2      	ldrb	r2, [r2, #27]
 800e188:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	330c      	adds	r3, #12
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	7f12      	ldrb	r2, [r2, #28]
 800e192:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	330d      	adds	r3, #13
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	7f52      	ldrb	r2, [r2, #29]
 800e19c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	330e      	adds	r3, #14
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	7f92      	ldrb	r2, [r2, #30]
 800e1a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	330f      	adds	r3, #15
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	7fd2      	ldrb	r2, [r2, #31]
 800e1b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	3310      	adds	r3, #16
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e1bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	3311      	adds	r3, #17
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800e1c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	3312      	adds	r3, #18
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800e1d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	3313      	adds	r3, #19
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800e1e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	3314      	adds	r3, #20
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e1ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	3315      	adds	r3, #21
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800e1f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	3316      	adds	r3, #22
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800e204:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	3317      	adds	r3, #23
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800e210:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	3318      	adds	r3, #24
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800e21c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	3319      	adds	r3, #25
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800e228:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	331a      	adds	r3, #26
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800e234:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	331b      	adds	r3, #27
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800e240:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	331c      	adds	r3, #28
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800e24c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	331d      	adds	r3, #29
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800e258:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	331e      	adds	r3, #30
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800e264:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	331f      	adds	r3, #31
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800e270:	701a      	strb	r2, [r3, #0]
}
 800e272:	bf00      	nop
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e27e:	b480      	push	{r7}
 800e280:	b085      	sub	sp, #20
 800e282:	af00      	add	r7, sp, #0
 800e284:	4603      	mov	r3, r0
 800e286:	603a      	str	r2, [r7, #0]
 800e288:	80fb      	strh	r3, [r7, #6]
 800e28a:	460b      	mov	r3, r1
 800e28c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800e296:	88fb      	ldrh	r3, [r7, #6]
 800e298:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800e29a:	2300      	movs	r3, #0
 800e29c:	81fb      	strh	r3, [r7, #14]
 800e29e:	e00e      	b.n	800e2be <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e2a0:	88ba      	ldrh	r2, [r7, #4]
 800e2a2:	89fb      	ldrh	r3, [r7, #14]
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	89ba      	ldrh	r2, [r7, #12]
 800e2ae:	b2d2      	uxtb	r2, r2
 800e2b0:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e2b2:	89bb      	ldrh	r3, [r7, #12]
 800e2b4:	0a1b      	lsrs	r3, r3, #8
 800e2b6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e2b8:	89fb      	ldrh	r3, [r7, #14]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	81fb      	strh	r3, [r7, #14]
 800e2be:	89fa      	ldrh	r2, [r7, #14]
 800e2c0:	88bb      	ldrh	r3, [r7, #4]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d3ec      	bcc.n	800e2a0 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800e2c6:	bf00      	nop
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr

0800e2d2 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e2d2:	b480      	push	{r7}
 800e2d4:	b085      	sub	sp, #20
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	4603      	mov	r3, r0
 800e2da:	6039      	str	r1, [r7, #0]
 800e2dc:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800e2e2:	e00a      	b.n	800e2fa <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800e2e4:	89fb      	ldrh	r3, [r7, #14]
 800e2e6:	021b      	lsls	r3, r3, #8
 800e2e8:	b21a      	sxth	r2, r3
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	1c59      	adds	r1, r3, #1
 800e2ee:	6039      	str	r1, [r7, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	b21b      	sxth	r3, r3
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	b21b      	sxth	r3, r3
 800e2f8:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e2fa:	88fb      	ldrh	r3, [r7, #6]
 800e2fc:	1e5a      	subs	r2, r3, #1
 800e2fe:	80fa      	strh	r2, [r7, #6]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1ef      	bne.n	800e2e4 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800e304:	89fb      	ldrh	r3, [r7, #14]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr

0800e312 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e312:	b480      	push	{r7}
 800e314:	b085      	sub	sp, #20
 800e316:	af00      	add	r7, sp, #0
 800e318:	4603      	mov	r3, r0
 800e31a:	603a      	str	r2, [r7, #0]
 800e31c:	80fb      	strh	r3, [r7, #6]
 800e31e:	460b      	mov	r3, r1
 800e320:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800e326:	2300      	movs	r3, #0
 800e328:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800e32a:	88fb      	ldrh	r3, [r7, #6]
 800e32c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800e32e:	2300      	movs	r3, #0
 800e330:	81fb      	strh	r3, [r7, #14]
 800e332:	e00f      	b.n	800e354 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e334:	88ba      	ldrh	r2, [r7, #4]
 800e336:	89fb      	ldrh	r3, [r7, #14]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	3b01      	subs	r3, #1
 800e33c:	683a      	ldr	r2, [r7, #0]
 800e33e:	4413      	add	r3, r2
 800e340:	89ba      	ldrh	r2, [r7, #12]
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e346:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e34a:	121b      	asrs	r3, r3, #8
 800e34c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800e34e:	89fb      	ldrh	r3, [r7, #14]
 800e350:	3301      	adds	r3, #1
 800e352:	81fb      	strh	r3, [r7, #14]
 800e354:	89fa      	ldrh	r2, [r7, #14]
 800e356:	88bb      	ldrh	r3, [r7, #4]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d3eb      	bcc.n	800e334 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800e35c:	bf00      	nop
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	6039      	str	r1, [r7, #0]
 800e372:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800e374:	2300      	movs	r3, #0
 800e376:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	b25b      	sxtb	r3, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	da0e      	bge.n	800e3a0 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800e382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e386:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800e388:	e00a      	b.n	800e3a0 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800e38a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e38e:	021b      	lsls	r3, r3, #8
 800e390:	b21a      	sxth	r2, r3
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	1c59      	adds	r1, r3, #1
 800e396:	6039      	str	r1, [r7, #0]
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	b21b      	sxth	r3, r3
 800e39c:	4313      	orrs	r3, r2
 800e39e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800e3a0:	88fb      	ldrh	r3, [r7, #6]
 800e3a2:	1e5a      	subs	r2, r3, #1
 800e3a4:	80fa      	strh	r2, [r7, #6]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1ef      	bne.n	800e38a <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800e3aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3714      	adds	r7, #20
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e3ba:	b480      	push	{r7}
 800e3bc:	b087      	sub	sp, #28
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	607a      	str	r2, [r7, #4]
 800e3c6:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	82fb      	strh	r3, [r7, #22]
 800e3d8:	e00e      	b.n	800e3f8 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800e3da:	897a      	ldrh	r2, [r7, #10]
 800e3dc:	8afb      	ldrh	r3, [r7, #22]
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	693a      	ldr	r2, [r7, #16]
 800e3e8:	b2d2      	uxtb	r2, r2
 800e3ea:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	0a1b      	lsrs	r3, r3, #8
 800e3f0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800e3f2:	8afb      	ldrh	r3, [r7, #22]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	82fb      	strh	r3, [r7, #22]
 800e3f8:	8afa      	ldrh	r2, [r7, #22]
 800e3fa:	897b      	ldrh	r3, [r7, #10]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d3ec      	bcc.n	800e3da <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800e400:	bf00      	nop
 800e402:	371c      	adds	r7, #28
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	6039      	str	r1, [r7, #0]
 800e416:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800e418:	2300      	movs	r3, #0
 800e41a:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800e41c:	e007      	b.n	800e42e <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	021a      	lsls	r2, r3, #8
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	1c59      	adds	r1, r3, #1
 800e426:	6039      	str	r1, [r7, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e42e:	88fb      	ldrh	r3, [r7, #6]
 800e430:	1e5a      	subs	r2, r3, #1
 800e432:	80fa      	strh	r2, [r7, #6]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1f2      	bne.n	800e41e <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800e438:	68fb      	ldr	r3, [r7, #12]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800e446:	b480      	push	{r7}
 800e448:	b085      	sub	sp, #20
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	4603      	mov	r3, r0
 800e44e:	6039      	str	r1, [r7, #0]
 800e450:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800e452:	2300      	movs	r3, #0
 800e454:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	b25b      	sxtb	r3, r3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	da0b      	bge.n	800e478 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800e460:	f04f 33ff 	mov.w	r3, #4294967295
 800e464:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800e466:	e007      	b.n	800e478 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	021a      	lsls	r2, r3, #8
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	1c59      	adds	r1, r3, #1
 800e470:	6039      	str	r1, [r7, #0]
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	4313      	orrs	r3, r2
 800e476:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800e478:	88fb      	ldrh	r3, [r7, #6]
 800e47a:	1e5a      	subs	r2, r3, #1
 800e47c:	80fa      	strh	r2, [r7, #6]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1f2      	bne.n	800e468 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800e482:	68fb      	ldr	r3, [r7, #12]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3714      	adds	r7, #20
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	4603      	mov	r3, r0
 800e498:	460a      	mov	r2, r1
 800e49a:	80fb      	strh	r3, [r7, #6]
 800e49c:	4613      	mov	r3, r2
 800e49e:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e4ac:	88fb      	ldrh	r3, [r7, #6]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 fb5b 	bl	800eb6a <VL53L1_calc_pll_period_us>
 800e4b4:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800e4b6:	797b      	ldrb	r3, [r7, #5]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 fb6a 	bl	800eb92 <VL53L1_decode_vcsel_period>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	00db      	lsls	r3, r3, #3
 800e4c8:	4413      	add	r3, r2
 800e4ca:	021b      	lsls	r3, r3, #8
 800e4cc:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	099b      	lsrs	r3, r3, #6
 800e4d2:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800e4d4:	7cfa      	ldrb	r2, [r7, #19]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	fb02 f303 	mul.w	r3, r2, r3
 800e4dc:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	099b      	lsrs	r3, r3, #6
 800e4e2:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3718      	adds	r7, #24
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b089      	sub	sp, #36	; 0x24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	4608      	mov	r0, r1
 800e4fa:	4611      	mov	r1, r2
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	4603      	mov	r3, r0
 800e500:	817b      	strh	r3, [r7, #10]
 800e502:	460b      	mov	r3, r1
 800e504:	813b      	strh	r3, [r7, #8]
 800e506:	4613      	mov	r3, r2
 800e508:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	011b      	lsls	r3, r3, #4
 800e522:	4a23      	ldr	r2, [pc, #140]	; (800e5b0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e524:	fb82 1203 	smull	r1, r2, r2, r3
 800e528:	1192      	asrs	r2, r2, #6
 800e52a:	17db      	asrs	r3, r3, #31
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800e530:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e534:	2b00      	cmp	r3, #0
 800e536:	da03      	bge.n	800e540 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800e538:	897b      	ldrh	r3, [r7, #10]
 800e53a:	425b      	negs	r3, r3
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800e540:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e544:	2b00      	cmp	r3, #0
 800e546:	da03      	bge.n	800e550 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800e548:	893b      	ldrh	r3, [r7, #8]
 800e54a:	425b      	negs	r3, r3
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800e550:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e554:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e558:	4413      	add	r3, r2
 800e55a:	015b      	lsls	r3, r3, #5
 800e55c:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	4a13      	ldr	r2, [pc, #76]	; (800e5b0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800e562:	fb82 1203 	smull	r1, r2, r2, r3
 800e566:	1192      	asrs	r2, r2, #6
 800e568:	17db      	asrs	r3, r3, #31
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	4413      	add	r3, r2
 800e574:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800e576:	79fa      	ldrb	r2, [r7, #7]
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	fb02 f303 	mul.w	r3, r2, r3
 800e57e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	3310      	adds	r3, #16
 800e584:	2b00      	cmp	r3, #0
 800e586:	da00      	bge.n	800e58a <VL53L1_calc_range_ignore_threshold+0x9a>
 800e588:	331f      	adds	r3, #31
 800e58a:	115b      	asrs	r3, r3, #5
 800e58c:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e594:	db03      	blt.n	800e59e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800e596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e59a:	83fb      	strh	r3, [r7, #30]
 800e59c:	e001      	b.n	800e5a2 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800e5a2:	8bfb      	ldrh	r3, [r7, #30]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3724      	adds	r7, #36	; 0x24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	10624dd3 	.word	0x10624dd3

0800e5b4 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	031a      	lsls	r2, r3, #12
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	085b      	lsrs	r3, r3, #1
 800e5ca:	441a      	add	r2, r3
	timeout_mclks   =
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5d2:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr

0800e5e2 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b084      	sub	sp, #16
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
 800e5ea:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff ffdc 	bl	800e5b4 <VL53L1_calc_timeout_mclks>
 800e5fc:	60f8      	str	r0, [r7, #12]
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);

	timeout_encoded =
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f000 f859 	bl	800e6b6 <VL53L1_encode_timeout>
 800e604:	4603      	mov	r3, r0
 800e606:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800e608:	897b      	ldrh	r3, [r7, #10]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800e612:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e614:	b087      	sub	sp, #28
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800e61c:	2200      	movs	r2, #0
 800e61e:	617a      	str	r2, [r7, #20]
	uint64_t tmp            = 0;
 800e620:	f04f 0100 	mov.w	r1, #0
 800e624:	f04f 0200 	mov.w	r2, #0
 800e628:	e9c7 1202 	strd	r1, r2, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	4615      	mov	r5, r2
 800e630:	f04f 0600 	mov.w	r6, #0
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	4611      	mov	r1, r2
 800e638:	f04f 0200 	mov.w	r2, #0
 800e63c:	fb01 fe06 	mul.w	lr, r1, r6
 800e640:	fb05 f002 	mul.w	r0, r5, r2
 800e644:	4470      	add	r0, lr
 800e646:	fba5 1201 	umull	r1, r2, r5, r1
 800e64a:	4410      	add	r0, r2
 800e64c:	4602      	mov	r2, r0
 800e64e:	e9c7 1202 	strd	r1, r2, [r7, #8]
 800e652:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp += 0x00800;
 800e656:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e65a:	f511 6100 	adds.w	r1, r1, #2048	; 0x800
 800e65e:	f142 0200 	adc.w	r2, r2, #0
 800e662:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp  = tmp >> 12;
 800e666:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e66a:	0b0b      	lsrs	r3, r1, #12
 800e66c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800e670:	0b14      	lsrs	r4, r2, #12
 800e672:	e9c7 3402 	strd	r3, r4, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e67a:	697b      	ldr	r3, [r7, #20]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	371c      	adds	r7, #28
 800e680:	46bd      	mov	sp, r7
 800e682:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e684 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	4603      	mov	r3, r0
 800e68c:	6039      	str	r1, [r7, #0]
 800e68e:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800e690:	2300      	movs	r3, #0
 800e692:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e694:	2300      	movs	r3, #0
 800e696:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
 800e698:	88fb      	ldrh	r3, [r7, #6]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f000 f837 	bl	800e70e <VL53L1_decode_timeout>
 800e6a0:	60f8      	str	r0, [r7, #12]
		VL53L1_decode_timeout(timeout_encoded);

	timeout_us    =
 800e6a2:	6839      	ldr	r1, [r7, #0]
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7ff ffb4 	bl	800e612 <VL53L1_calc_timeout_us>
 800e6aa:	60b8      	str	r0, [r7, #8]
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e6ac:	68bb      	ldr	r3, [r7, #8]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b087      	sub	sp, #28
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d017      	beq.n	800e700 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e6d6:	e005      	b.n	800e6e4 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	085b      	lsrs	r3, r3, #1
 800e6dc:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e6de:	89fb      	ldrh	r3, [r7, #14]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1f4      	bne.n	800e6d8 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e6ee:	89fb      	ldrh	r3, [r7, #14]
 800e6f0:	021b      	lsls	r3, r3, #8
 800e6f2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e6fc:	4413      	add	r3, r2
 800e6fe:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e700:	8afb      	ldrh	r3, [r7, #22]
}
 800e702:	4618      	mov	r0, r3
 800e704:	371c      	adds	r7, #28
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800e70e:	b480      	push	{r7}
 800e710:	b085      	sub	sp, #20
 800e712:	af00      	add	r7, sp, #0
 800e714:	4603      	mov	r3, r0
 800e716:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e71c:	88fb      	ldrh	r3, [r7, #6]
 800e71e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e720:	88fa      	ldrh	r2, [r7, #6]
 800e722:	0a12      	lsrs	r2, r2, #8
 800e724:	b292      	uxth	r2, r2
 800e726:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e728:	3301      	adds	r3, #1
 800e72a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e72c:	68fb      	ldr	r3, [r7, #12]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b088      	sub	sp, #32
 800e73e:	af00      	add	r7, sp, #0
 800e740:	60f8      	str	r0, [r7, #12]
 800e742:	60b9      	str	r1, [r7, #8]
 800e744:	607a      	str	r2, [r7, #4]
 800e746:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e748:	2300      	movs	r3, #0
 800e74a:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e750:	2300      	movs	r3, #0
 800e752:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e754:	2300      	movs	r3, #0
 800e756:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e758:	887b      	ldrh	r3, [r7, #2]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d102      	bne.n	800e764 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800e75e:	23f1      	movs	r3, #241	; 0xf1
 800e760:	77fb      	strb	r3, [r7, #31]
 800e762:	e05d      	b.n	800e820 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	799a      	ldrb	r2, [r3, #6]
		macro_period_us =
 800e768:	887b      	ldrh	r3, [r7, #2]
 800e76a:	4611      	mov	r1, r2
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7ff fe8f 	bl	800e490 <VL53L1_calc_macro_period_us>
 800e772:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 800e774:	6979      	ldr	r1, [r7, #20]
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff ff1c 	bl	800e5b4 <VL53L1_calc_timeout_mclks>
 800e77c:	61b8      	str	r0, [r7, #24]
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	2bff      	cmp	r3, #255	; 0xff
 800e782:	d901      	bls.n	800e788 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e784:	23ff      	movs	r3, #255	; 0xff
 800e786:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78e:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 800e790:	6979      	ldr	r1, [r7, #20]
 800e792:	68b8      	ldr	r0, [r7, #8]
 800e794:	f7ff ff25 	bl	800e5e2 <VL53L1_calc_encoded_timeout>
 800e798:	4603      	mov	r3, r0
 800e79a:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e79c:	8a7b      	ldrh	r3, [r7, #18]
 800e79e:	0a1b      	lsrs	r3, r3, #8
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e7a8:	8a7b      	ldrh	r3, [r7, #18]
 800e7aa:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 800e7b0:	6979      	ldr	r1, [r7, #20]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff ff15 	bl	800e5e2 <VL53L1_calc_encoded_timeout>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e7bc:	8a7b      	ldrh	r3, [r7, #18]
 800e7be:	0a1b      	lsrs	r3, r3, #8
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e7c8:	8a7b      	ldrh	r3, [r7, #18]
 800e7ca:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ce:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	7a5a      	ldrb	r2, [r3, #9]
		macro_period_us =
 800e7d4:	887b      	ldrh	r3, [r7, #2]
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fe59 	bl	800e490 <VL53L1_calc_macro_period_us>
 800e7de:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 800e7e0:	6979      	ldr	r1, [r7, #20]
 800e7e2:	68b8      	ldr	r0, [r7, #8]
 800e7e4:	f7ff fefd 	bl	800e5e2 <VL53L1_calc_encoded_timeout>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	827b      	strh	r3, [r7, #18]
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e7ec:	8a7b      	ldrh	r3, [r7, #18]
 800e7ee:	0a1b      	lsrs	r3, r3, #8
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e7f8:	8a7b      	ldrh	r3, [r7, #18]
 800e7fa:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fe:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800e800:	6979      	ldr	r1, [r7, #20]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff feed 	bl	800e5e2 <VL53L1_calc_encoded_timeout>
 800e808:	4603      	mov	r3, r0
 800e80a:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e80c:	8a7b      	ldrh	r3, [r7, #18]
 800e80e:	0a1b      	lsrs	r3, r3, #8
 800e810:	b29b      	uxth	r3, r3
 800e812:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e818:	8a7b      	ldrh	r3, [r7, #18]
 800e81a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e820:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e824:	4618      	mov	r0, r3
 800e826:	3720      	adds	r7, #32
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	4603      	mov	r3, r0
 800e834:	603a      	str	r2, [r7, #0]
 800e836:	71fb      	strb	r3, [r7, #7]
 800e838:	460b      	mov	r3, r1
 800e83a:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800e83c:	79fb      	ldrb	r3, [r7, #7]
 800e83e:	2b07      	cmp	r3, #7
 800e840:	d90a      	bls.n	800e858 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800e842:	79bb      	ldrb	r3, [r7, #6]
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	b2da      	uxtb	r2, r3
 800e848:	79fb      	ldrb	r3, [r7, #7]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	3b71      	subs	r3, #113	; 0x71
 800e850:	b2da      	uxtb	r2, r3
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800e856:	e00a      	b.n	800e86e <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800e858:	79bb      	ldrb	r3, [r7, #6]
 800e85a:	f1c3 030f 	rsb	r3, r3, #15
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	00db      	lsls	r3, r3, #3
 800e862:	b2da      	uxtb	r2, r3
 800e864:	79fb      	ldrb	r3, [r7, #7]
 800e866:	4413      	add	r3, r2
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	701a      	strb	r2, [r3, #0]
}
 800e86e:	bf00      	nop
 800e870:	370c      	adds	r7, #12
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr

0800e87a <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800e87a:	b480      	push	{r7}
 800e87c:	b085      	sub	sp, #20
 800e87e:	af00      	add	r7, sp, #0
 800e880:	4603      	mov	r3, r0
 800e882:	60b9      	str	r1, [r7, #8]
 800e884:	607a      	str	r2, [r7, #4]
 800e886:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800e888:	7bfb      	ldrb	r3, [r7, #15]
 800e88a:	091b      	lsrs	r3, r3, #4
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800e892:	7bfb      	ldrb	r3, [r7, #15]
 800e894:	f003 030f 	and.w	r3, r3, #15
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	701a      	strb	r2, [r3, #0]

}
 800e89e:	bf00      	nop
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	603a      	str	r2, [r7, #0]
 800e8b4:	71fb      	strb	r3, [r7, #7]
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800e8ba:	79bb      	ldrb	r3, [r7, #6]
 800e8bc:	011b      	lsls	r3, r3, #4
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	79fb      	ldrb	r3, [r7, #7]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	b2da      	uxtb	r2, r3
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	701a      	strb	r2, [r3, #0]

}
 800e8ca:	bf00      	nop
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b085      	sub	sp, #20
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	2203      	movs	r2, #3
 800e8ea:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2200      	movs	r2, #0
 800e922:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2200      	movs	r2, #0
 800e92a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800e92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3714      	adds	r7, #20
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr

0800e93e <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e93e:	b480      	push	{r7}
 800e940:	b085      	sub	sp, #20
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e946:	2300      	movs	r3, #0
 800e948:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	22ff      	movs	r2, #255	; 0xff
 800e952:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	2200      	movs	r2, #0
 800e95a:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	2200      	movs	r2, #0
 800e962:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	2200      	movs	r2, #0
 800e96a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800e974:	2b00      	cmp	r3, #0
 800e976:	d005      	beq.n	800e984 <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d005      	beq.n	800e99a <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 800e9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e9b2:	b480      	push	{r7}
 800e9b4:	b087      	sub	sp, #28
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	60f8      	str	r0, [r7, #12]
 800e9ba:	60b9      	str	r1, [r7, #8]
 800e9bc:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	228b      	movs	r2, #139	; 0x8b
 800e9d2:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800e9da:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2202      	movs	r2, #2
 800e9e0:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 800e9e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	371c      	adds	r7, #28
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b085      	sub	sp, #20
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800ea20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ea32:	f003 0303 	and.w	r3, r3, #3
 800ea36:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800ea42:	4413      	add	r3, r2
 800ea44:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800ea6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3714      	adds	r7, #20
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr

0800ea7c <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b087      	sub	sp, #28
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f8b3 31de 	ldrh.w	r3, [r3, #478]	; 0x1de
 800ea92:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800ea9a:	4413      	add	r3, r2
 800ea9c:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaa4:	d302      	bcc.n	800eaac <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 800eaa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eaaa:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	041b      	lsls	r3, r3, #16
 800eab0:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d102      	bne.n	800eac2 <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800eabc:	23f1      	movs	r3, #241	; 0xf1
 800eabe:	75fb      	strb	r3, [r7, #23]
 800eac0:	e035      	b.n	800eb2e <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 800eac8:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ead0:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	693a      	ldr	r2, [r7, #16]
 800ead6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800eae0:	041b      	lsls	r3, r3, #16
 800eae2:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d102      	bne.n	800eaf4 <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800eaee:	23f1      	movs	r3, #241	; 0xf1
 800eaf0:	75fb      	strb	r3, [r7, #23]
 800eaf2:	e01c      	b.n	800eb2e <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
			utemp32a = utemp32a /
 800eafa:	693a      	ldr	r2, [r7, #16]
 800eafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb00:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb08:	d302      	bcc.n	800eb10 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 800eb0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb0e:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2202      	movs	r2, #2
 800eb2a:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 800eb2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb32:	f113 0f0f 	cmn.w	r3, #15
 800eb36:	d110      	bne.n	800eb5a <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800eb3e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2202      	movs	r2, #2
 800eb52:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 800eb56:	2300      	movs	r3, #0
 800eb58:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800eb5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	371c      	adds	r7, #28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800eb6a:	b480      	push	{r7}
 800eb6c:	b085      	sub	sp, #20
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	4603      	mov	r3, r0
 800eb72:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800eb78:	88fb      	ldrh	r3, [r7, #6]
 800eb7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eb7e:	fb92 f3f3 	sdiv	r3, r2, r3
 800eb82:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800eb84:	68fb      	ldr	r3, [r7, #12]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800eb92:	b480      	push	{r7}
 800eb94:	b085      	sub	sp, #20
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	4603      	mov	r3, r0
 800eb9a:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	3301      	adds	r3, #1
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800ebaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
 800ebc4:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800ebc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	da10      	bge.n	800ebf0 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800ebce:	7bfb      	ldrb	r3, [r7, #15]
 800ebd0:	43db      	mvns	r3, r3
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	f003 0307 	and.w	r3, r3, #7
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	3308      	adds	r3, #8
 800ebdc:	b2da      	uxtb	r2, r3
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
 800ebe4:	3b80      	subs	r3, #128	; 0x80
 800ebe6:	10db      	asrs	r3, r3, #3
 800ebe8:	b2da      	uxtb	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ebee:	e00c      	b.n	800ec0a <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
 800ebf2:	f003 0307 	and.w	r3, r3, #7
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ebfc:	7bfb      	ldrb	r3, [r7, #15]
 800ebfe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ec02:	10db      	asrs	r3, r3, #3
 800ec04:	b2da      	uxtb	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	701a      	strb	r2, [r3, #0]
}
 800ec0a:	bf00      	nop
 800ec0c:	3714      	adds	r7, #20
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b088      	sub	sp, #32
 800ec1a:	af02      	add	r7, sp, #8
 800ec1c:	60f8      	str	r0, [r7, #12]
 800ec1e:	60b9      	str	r1, [r7, #8]
 800ec20:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	330a      	adds	r3, #10
 800ec26:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800ec34:	b299      	uxth	r1, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	f7f3 f931 	bl	8001ea8 <HAL_I2C_Master_Transmit>
 800ec46:	4603      	mov	r3, r0
 800ec48:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec4a:	693b      	ldr	r3, [r7, #16]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3718      	adds	r7, #24
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af02      	add	r7, sp, #8
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	330a      	adds	r3, #10
 800ec64:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800ec72:	f043 0301 	orr.w	r3, r3, #1
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	b299      	uxth	r1, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	4613      	mov	r3, r2
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	f7f3 fa1d 	bl	80020c4 <HAL_I2C_Master_Receive>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec8e:	693b      	ldr	r3, [r7, #16]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3718      	adds	r7, #24
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b086      	sub	sp, #24
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	607a      	str	r2, [r7, #4]
 800eca2:	603b      	str	r3, [r7, #0]
 800eca4:	460b      	mov	r3, r1
 800eca6:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2bff      	cmp	r3, #255	; 0xff
 800ecb0:	d902      	bls.n	800ecb8 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800ecb2:	f06f 0303 	mvn.w	r3, #3
 800ecb6:	e01d      	b.n	800ecf4 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800ecb8:	897b      	ldrh	r3, [r7, #10]
 800ecba:	0a1b      	lsrs	r3, r3, #8
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	b2da      	uxtb	r2, r3
 800ecc0:	4b0e      	ldr	r3, [pc, #56]	; (800ecfc <VL53L1_WriteMulti+0x64>)
 800ecc2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800ecc4:	897b      	ldrh	r3, [r7, #10]
 800ecc6:	b2da      	uxtb	r2, r3
 800ecc8:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <VL53L1_WriteMulti+0x64>)
 800ecca:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	6879      	ldr	r1, [r7, #4]
 800ecd0:	480b      	ldr	r0, [pc, #44]	; (800ed00 <VL53L1_WriteMulti+0x68>)
 800ecd2:	f001 fd1b 	bl	801070c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	3302      	adds	r3, #2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4907      	ldr	r1, [pc, #28]	; (800ecfc <VL53L1_WriteMulti+0x64>)
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f7ff ff99 	bl	800ec16 <_I2CWrite>
 800ece4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d001      	beq.n	800ecf0 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ecec:	23f3      	movs	r3, #243	; 0xf3
 800ecee:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800ecf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	20000d5c 	.word	0x20000d5c
 800ed00:	20000d5e 	.word	0x20000d5e

0800ed04 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b086      	sub	sp, #24
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	607a      	str	r2, [r7, #4]
 800ed0e:	603b      	str	r3, [r7, #0]
 800ed10:	460b      	mov	r3, r1
 800ed12:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ed14:	2300      	movs	r3, #0
 800ed16:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800ed18:	897b      	ldrh	r3, [r7, #10]
 800ed1a:	0a1b      	lsrs	r3, r3, #8
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	4b11      	ldr	r3, [pc, #68]	; (800ed68 <VL53L1_ReadMulti+0x64>)
 800ed22:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800ed24:	897b      	ldrh	r3, [r7, #10]
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <VL53L1_ReadMulti+0x64>)
 800ed2a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	490e      	ldr	r1, [pc, #56]	; (800ed68 <VL53L1_ReadMulti+0x64>)
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f7ff ff70 	bl	800ec16 <_I2CWrite>
 800ed36:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d002      	beq.n	800ed44 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ed3e:	23f3      	movs	r3, #243	; 0xf3
 800ed40:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ed42:	e00a      	b.n	800ed5a <VL53L1_ReadMulti+0x56>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f7ff ff83 	bl	800ec54 <_I2CRead>
 800ed4e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <VL53L1_ReadMulti+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ed56:	23f3      	movs	r3, #243	; 0xf3
 800ed58:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800ed5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3718      	adds	r7, #24
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20000d5c 	.word	0x20000d5c

0800ed6c <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	460b      	mov	r3, r1
 800ed76:	607a      	str	r2, [r7, #4]
 800ed78:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800ed7e:	897b      	ldrh	r3, [r7, #10]
 800ed80:	0a1b      	lsrs	r3, r3, #8
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	4b11      	ldr	r3, [pc, #68]	; (800edcc <VL53L1_RdByte+0x60>)
 800ed88:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800ed8a:	897b      	ldrh	r3, [r7, #10]
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	4b0f      	ldr	r3, [pc, #60]	; (800edcc <VL53L1_RdByte+0x60>)
 800ed90:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ed92:	2202      	movs	r2, #2
 800ed94:	490d      	ldr	r1, [pc, #52]	; (800edcc <VL53L1_RdByte+0x60>)
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7ff ff3d 	bl	800ec16 <_I2CWrite>
 800ed9c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800eda4:	23f3      	movs	r3, #243	; 0xf3
 800eda6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eda8:	e00a      	b.n	800edc0 <VL53L1_RdByte+0x54>
    }
    status_int = _I2CRead(Dev, data, 1);
 800edaa:	2201      	movs	r2, #1
 800edac:	6879      	ldr	r1, [r7, #4]
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f7ff ff50 	bl	800ec54 <_I2CRead>
 800edb4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d001      	beq.n	800edc0 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800edbc:	23f3      	movs	r3, #243	; 0xf3
 800edbe:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 800edc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3718      	adds	r7, #24
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	20000d5c 	.word	0x20000d5c

0800edd0 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	460b      	mov	r3, r1
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800edde:	2300      	movs	r3, #0
 800ede0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800ede2:	897b      	ldrh	r3, [r7, #10]
 800ede4:	0a1b      	lsrs	r3, r3, #8
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	4b18      	ldr	r3, [pc, #96]	; (800ee4c <VL53L1_RdWord+0x7c>)
 800edec:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800edee:	897b      	ldrh	r3, [r7, #10]
 800edf0:	b2da      	uxtb	r2, r3
 800edf2:	4b16      	ldr	r3, [pc, #88]	; (800ee4c <VL53L1_RdWord+0x7c>)
 800edf4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800edf6:	2202      	movs	r2, #2
 800edf8:	4914      	ldr	r1, [pc, #80]	; (800ee4c <VL53L1_RdWord+0x7c>)
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f7ff ff0b 	bl	800ec16 <_I2CWrite>
 800ee00:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ee08:	23f3      	movs	r3, #243	; 0xf3
 800ee0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee0c:	e017      	b.n	800ee3e <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ee0e:	2202      	movs	r2, #2
 800ee10:	490e      	ldr	r1, [pc, #56]	; (800ee4c <VL53L1_RdWord+0x7c>)
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7ff ff1e 	bl	800ec54 <_I2CRead>
 800ee18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d002      	beq.n	800ee26 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ee20:	23f3      	movs	r3, #243	; 0xf3
 800ee22:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee24:	e00b      	b.n	800ee3e <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ee26:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <VL53L1_RdWord+0x7c>)
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	021b      	lsls	r3, r3, #8
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	4b06      	ldr	r3, [pc, #24]	; (800ee4c <VL53L1_RdWord+0x7c>)
 800ee32:	785b      	ldrb	r3, [r3, #1]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	4413      	add	r3, r2
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800ee3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20000d5c 	.word	0x20000d5c

0800ee50 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b085      	sub	sp, #20
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800ee62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr

0800ee72 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b082      	sub	sp, #8
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
 800ee7a:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7f1 fbf8 	bl	8000674 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
	...

0800ee90 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	4a06      	ldr	r2, [pc, #24]	; (800eeb8 <VL53L1_WaitUs+0x28>)
 800ee9e:	fb82 1203 	smull	r1, r2, r2, r3
 800eea2:	1192      	asrs	r2, r2, #6
 800eea4:	17db      	asrs	r3, r3, #31
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7f1 fbe3 	bl	8000674 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	10624dd3 	.word	0x10624dd3

0800eebc <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800eebc:	b590      	push	{r4, r7, lr}
 800eebe:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	f107 040c 	add.w	r4, r7, #12
 800eec8:	6020      	str	r0, [r4, #0]
 800eeca:	f107 0008 	add.w	r0, r7, #8
 800eece:	6001      	str	r1, [r0, #0]
 800eed0:	4619      	mov	r1, r3
 800eed2:	1dbb      	adds	r3, r7, #6
 800eed4:	801a      	strh	r2, [r3, #0]
 800eed6:	1d7b      	adds	r3, r7, #5
 800eed8:	460a      	mov	r2, r1
 800eeda:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800eedc:	2300      	movs	r3, #0
 800eede:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800eee8:	2300      	movs	r3, #0
 800eeea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800ef00:	f107 0310 	add.w	r3, r7, #16
 800ef04:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef08:	4935      	ldr	r1, [pc, #212]	; (800efe0 <VL53L1_WaitValueMaskEx+0x124>)
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f001 ff37 	bl	8010d7e <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800ef10:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7ff ff9b 	bl	800ee50 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800ef1a:	e03f      	b.n	800ef9c <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800ef1c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d10b      	bne.n	800ef3c <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 800ef24:	f207 2213 	addw	r2, r7, #531	; 0x213
 800ef28:	1dbb      	adds	r3, r7, #6
 800ef2a:	8819      	ldrh	r1, [r3, #0]
 800ef2c:	f107 030c 	add.w	r3, r7, #12
 800ef30:	6818      	ldr	r0, [r3, #0]
 800ef32:	f7ff ff1b 	bl	800ed6c <VL53L1_RdByte>
 800ef36:	4603      	mov	r3, r0
 800ef38:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800ef3c:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800ef40:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800ef44:	4013      	ands	r3, r2
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	1d7a      	adds	r2, r7, #5
 800ef4a:	7812      	ldrb	r2, [r2, #0]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d102      	bne.n	800ef56 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 800ef50:	2301      	movs	r3, #1
 800ef52:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800ef56:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d112      	bne.n	800ef84 <VL53L1_WaitValueMaskEx+0xc8>
 800ef5e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d10e      	bne.n	800ef84 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 800ef66:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d00a      	beq.n	800ef84 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800ef6e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800ef72:	f107 030c 	add.w	r3, r7, #12
 800ef76:	4611      	mov	r1, r2
 800ef78:	6818      	ldr	r0, [r3, #0]
 800ef7a:	f7ff ff7a 	bl	800ee72 <VL53L1_WaitMs>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800ef84:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff ff61 	bl	800ee50 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800ef8e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800ef92:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800ef96:	1ad3      	subs	r3, r2, r3
 800ef98:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800ef9c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10a      	bne.n	800efba <VL53L1_WaitValueMaskEx+0xfe>
 800efa4:	f107 0308 	add.w	r3, r7, #8
 800efa8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d203      	bcs.n	800efba <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800efb2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d0b0      	beq.n	800ef1c <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800efba:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d106      	bne.n	800efd0 <VL53L1_WaitValueMaskEx+0x114>
 800efc2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d102      	bne.n	800efd0 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 800efca:	23f9      	movs	r3, #249	; 0xf9
 800efcc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800efd0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd90      	pop	{r4, r7, pc}
 800efde:	bf00      	nop
 800efe0:	08011650 	.word	0x08011650

0800efe4 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b086      	sub	sp, #24
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	460b      	mov	r3, r1
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800eff2:	2300      	movs	r3, #0
 800eff4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800eff6:	897b      	ldrh	r3, [r7, #10]
 800eff8:	2b0a      	cmp	r3, #10
 800effa:	d802      	bhi.n	800f002 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800effc:	f06f 0309 	mvn.w	r3, #9
 800f000:	e047      	b.n	800f092 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f00a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	7852      	ldrb	r2, [r2, #1]
 800f018:	f002 020f 	and.w	r2, r2, #15
 800f01c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f01e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	7892      	ldrb	r2, [r2, #2]
 800f028:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f02c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f02e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	78d2      	ldrb	r2, [r2, #3]
 800f038:	f002 0203 	and.w	r2, r2, #3
 800f03c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f03e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	7912      	ldrb	r2, [r2, #4]
 800f048:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f04c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f04e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	88d8      	ldrh	r0, [r3, #6]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	3305      	adds	r3, #5
 800f058:	461a      	mov	r2, r3
 800f05a:	2102      	movs	r1, #2
 800f05c:	f7ff f90f 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f068:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f072:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	7a92      	ldrb	r2, [r2, #10]
 800f07c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f080:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f082:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f08c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f092:	4618      	mov	r0, r3
 800f094:	3718      	adds	r7, #24
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b086      	sub	sp, #24
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	60b9      	str	r1, [r7, #8]
 800f0a4:	607a      	str	r2, [r7, #4]
 800f0a6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800f0ac:	89fb      	ldrh	r3, [r7, #14]
 800f0ae:	2b0a      	cmp	r3, #10
 800f0b0:	d802      	bhi.n	800f0b8 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f0b2:	f06f 0309 	mvn.w	r3, #9
 800f0b6:	e046      	b.n	800f146 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0c0:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	f003 030f 	and.w	r3, r3, #15
 800f0d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	3302      	adds	r3, #2
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	3303      	adds	r3, #3
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f003 0303 	and.w	r3, r3, #3
 800f0f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f100:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	3305      	adds	r3, #5
 800f10a:	4619      	mov	r1, r3
 800f10c:	2002      	movs	r0, #2
 800f10e:	f7ff f8e0 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800f112:	4603      	mov	r3, r0
 800f114:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	79da      	ldrb	r2, [r3, #7]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	7a1a      	ldrb	r2, [r3, #8]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	3309      	adds	r3, #9
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f134:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	7a9a      	ldrb	r2, [r3, #10]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f142:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b086      	sub	sp, #24
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f158:	2300      	movs	r3, #0
 800f15a:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d108      	bne.n	800f176 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800f164:	f107 020c 	add.w	r2, r7, #12
 800f168:	230b      	movs	r3, #11
 800f16a:	2101      	movs	r1, #1
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f7ff fdc9 	bl	800ed04 <VL53L1_ReadMulti>
 800f172:	4603      	mov	r3, r0
 800f174:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f176:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d108      	bne.n	800f190 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800f17e:	f107 030c 	add.w	r3, r7, #12
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	4619      	mov	r1, r3
 800f186:	200b      	movs	r0, #11
 800f188:	f7ff ff87 	bl	800f09a <VL53L1_i2c_decode_static_nvm_managed>
 800f18c:	4603      	mov	r3, r0
 800f18e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f190:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3718      	adds	r7, #24
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b086      	sub	sp, #24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	607a      	str	r2, [r7, #4]
 800f1a8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800f1ae:	897b      	ldrh	r3, [r7, #10]
 800f1b0:	2b16      	cmp	r3, #22
 800f1b2:	d802      	bhi.n	800f1ba <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f1b4:	f06f 0309 	mvn.w	r3, #9
 800f1b8:	e076      	b.n	800f2a8 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f1ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f1d0:	68fa      	ldr	r2, [r7, #12]
 800f1d2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f1d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f1de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f1e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	7952      	ldrb	r2, [r2, #5]
 800f1f2:	f002 020f 	and.w	r2, r2, #15
 800f1f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f1f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f202:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	79d2      	ldrb	r2, [r2, #7]
 800f20c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f210:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f212:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	7a12      	ldrb	r2, [r2, #8]
 800f21c:	f002 0203 	and.w	r2, r2, #3
 800f220:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f222:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	8958      	ldrh	r0, [r3, #10]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	3309      	adds	r3, #9
 800f22c:	461a      	mov	r2, r3
 800f22e:	2102      	movs	r1, #2
 800f230:	f7ff f825 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	330b      	adds	r3, #11
 800f23e:	461a      	mov	r2, r3
 800f240:	2102      	movs	r1, #2
 800f242:	f7ff f866 	bl	800e312 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	330d      	adds	r3, #13
 800f250:	461a      	mov	r2, r3
 800f252:	2102      	movs	r1, #2
 800f254:	f7ff f85d 	bl	800e312 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	8a18      	ldrh	r0, [r3, #16]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	330f      	adds	r3, #15
 800f260:	461a      	mov	r2, r3
 800f262:	2102      	movs	r1, #2
 800f264:	f7ff f80b 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800f26e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f272:	b218      	sxth	r0, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	3311      	adds	r3, #17
 800f278:	461a      	mov	r2, r3
 800f27a:	2102      	movs	r1, #2
 800f27c:	f7ff f849 	bl	800e312 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	3313      	adds	r3, #19
 800f28a:	461a      	mov	r2, r3
 800f28c:	2102      	movs	r1, #2
 800f28e:	f7ff f840 	bl	800e312 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	3315      	adds	r3, #21
 800f29c:	461a      	mov	r2, r3
 800f29e:	2102      	movs	r1, #2
 800f2a0:	f7ff f837 	bl	800e312 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3718      	adds	r7, #24
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b086      	sub	sp, #24
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	607a      	str	r2, [r7, #4]
 800f2bc:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800f2c2:	89fb      	ldrh	r3, [r7, #14]
 800f2c4:	2b16      	cmp	r3, #22
 800f2c6:	d802      	bhi.n	800f2ce <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f2c8:	f06f 0309 	mvn.w	r3, #9
 800f2cc:	e079      	b.n	800f3c2 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	785a      	ldrb	r2, [r3, #1]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	789a      	ldrb	r2, [r3, #2]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	78da      	ldrb	r2, [r3, #3]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	791a      	ldrb	r2, [r3, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	3305      	adds	r3, #5
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	f003 030f 	and.w	r3, r3, #15
 800f300:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	799a      	ldrb	r2, [r3, #6]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	3307      	adds	r3, #7
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f318:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	3308      	adds	r3, #8
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	f003 0303 	and.w	r3, r3, #3
 800f328:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	3309      	adds	r3, #9
 800f332:	4619      	mov	r1, r3
 800f334:	2002      	movs	r0, #2
 800f336:	f7fe ffcc 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800f33a:	4603      	mov	r3, r0
 800f33c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	330b      	adds	r3, #11
 800f346:	4619      	mov	r1, r3
 800f348:	2002      	movs	r0, #2
 800f34a:	f7ff f80d 	bl	800e368 <VL53L1_i2c_decode_int16_t>
 800f34e:	4603      	mov	r3, r0
 800f350:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	330d      	adds	r3, #13
 800f35a:	4619      	mov	r1, r3
 800f35c:	2002      	movs	r0, #2
 800f35e:	f7ff f803 	bl	800e368 <VL53L1_i2c_decode_int16_t>
 800f362:	4603      	mov	r3, r0
 800f364:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	330f      	adds	r3, #15
 800f36e:	4619      	mov	r1, r3
 800f370:	2002      	movs	r0, #2
 800f372:	f7fe ffae 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800f376:	4603      	mov	r3, r0
 800f378:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	3311      	adds	r3, #17
 800f382:	4619      	mov	r1, r3
 800f384:	2002      	movs	r0, #2
 800f386:	f7fe ffef 	bl	800e368 <VL53L1_i2c_decode_int16_t>
 800f38a:	4603      	mov	r3, r0
 800f38c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f390:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	3313      	adds	r3, #19
 800f39a:	4619      	mov	r1, r3
 800f39c:	2002      	movs	r0, #2
 800f39e:	f7fe ffe3 	bl	800e368 <VL53L1_i2c_decode_int16_t>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	3315      	adds	r3, #21
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	2002      	movs	r0, #2
 800f3b2:	f7fe ffd9 	bl	800e368 <VL53L1_i2c_decode_int16_t>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3718      	adds	r7, #24
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b088      	sub	sp, #32
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
 800f3d2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f3d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d108      	bne.n	800f3f2 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800f3e0:	f107 0208 	add.w	r2, r7, #8
 800f3e4:	2317      	movs	r3, #23
 800f3e6:	210d      	movs	r1, #13
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff fc8b 	bl	800ed04 <VL53L1_ReadMulti>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800f3f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d108      	bne.n	800f40c <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800f3fa:	f107 0308 	add.w	r3, r7, #8
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	4619      	mov	r1, r3
 800f402:	2017      	movs	r0, #23
 800f404:	f7ff ff54 	bl	800f2b0 <VL53L1_i2c_decode_customer_nvm_managed>
 800f408:	4603      	mov	r3, r0
 800f40a:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f40c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3720      	adds	r7, #32
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	460b      	mov	r3, r1
 800f422:	607a      	str	r2, [r7, #4]
 800f424:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f426:	2300      	movs	r3, #0
 800f428:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f42a:	897b      	ldrh	r3, [r7, #10]
 800f42c:	2b1f      	cmp	r3, #31
 800f42e:	d802      	bhi.n	800f436 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f430:	f06f 0309 	mvn.w	r3, #9
 800f434:	e0cf      	b.n	800f5d6 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	2102      	movs	r1, #2
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fe ff1d 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	7892      	ldrb	r2, [r2, #2]
 800f44c:	f002 0201 	and.w	r2, r2, #1
 800f450:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f452:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	78d2      	ldrb	r2, [r2, #3]
 800f45c:	f002 020f 	and.w	r2, r2, #15
 800f460:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f462:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	7912      	ldrb	r2, [r2, #4]
 800f46c:	f002 020f 	and.w	r2, r2, #15
 800f470:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f472:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	7952      	ldrb	r2, [r2, #5]
 800f47c:	f002 021f 	and.w	r2, r2, #31
 800f480:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f482:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	7992      	ldrb	r2, [r2, #6]
 800f48c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f490:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f492:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	79d2      	ldrb	r2, [r2, #7]
 800f49c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f4a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f4a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	7a12      	ldrb	r2, [r2, #8]
 800f4ac:	f002 0201 	and.w	r2, r2, #1
 800f4b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f4b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f4bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	7a92      	ldrb	r2, [r2, #10]
 800f4c6:	f002 0201 	and.w	r2, r2, #1
 800f4ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f4cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	7ad2      	ldrb	r2, [r2, #11]
 800f4d6:	f002 0203 	and.w	r2, r2, #3
 800f4da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f4dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	7b12      	ldrb	r2, [r2, #12]
 800f4e6:	f002 021f 	and.w	r2, r2, #31
 800f4ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f4ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	7b52      	ldrb	r2, [r2, #13]
 800f4f6:	f002 0203 	and.w	r2, r2, #3
 800f4fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f4fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	7b92      	ldrb	r2, [r2, #14]
 800f506:	f002 0203 	and.w	r2, r2, #3
 800f50a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f50c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	7bd2      	ldrb	r2, [r2, #15]
 800f516:	f002 0207 	and.w	r2, r2, #7
 800f51a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f51c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	7c12      	ldrb	r2, [r2, #16]
 800f526:	f002 021f 	and.w	r2, r2, #31
 800f52a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f52c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	7c52      	ldrb	r2, [r2, #17]
 800f536:	f002 0201 	and.w	r2, r2, #1
 800f53a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f53c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f546:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f550:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f556:	68fa      	ldr	r2, [r7, #12]
 800f558:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f55a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f564:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f56e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f578:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	8b18      	ldrh	r0, [r3, #24]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	3318      	adds	r3, #24
 800f582:	461a      	mov	r2, r3
 800f584:	2102      	movs	r1, #2
 800f586:	f7fe fe7a 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f592:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f59c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	7f12      	ldrb	r2, [r2, #28]
 800f5a6:	f002 020f 	and.w	r2, r2, #15
 800f5aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f5ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f5b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	7f92      	ldrb	r2, [r2, #30]
 800f5c0:	f002 020f 	and.w	r2, r2, #15
 800f5c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f5c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f5d0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f5d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3718      	adds	r7, #24
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b086      	sub	sp, #24
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	607a      	str	r2, [r7, #4]
 800f5ea:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f5f0:	897b      	ldrh	r3, [r7, #10]
 800f5f2:	2b15      	cmp	r3, #21
 800f5f4:	d802      	bhi.n	800f5fc <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f5f6:	f06f 0309 	mvn.w	r3, #9
 800f5fa:	e070      	b.n	800f6de <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f60c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f616:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	78d2      	ldrb	r2, [r2, #3]
 800f620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f624:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f626:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800f62c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f630:	b298      	uxth	r0, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	3304      	adds	r3, #4
 800f636:	461a      	mov	r2, r3
 800f638:	2102      	movs	r1, #2
 800f63a:	f7fe fe20 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	7992      	ldrb	r2, [r2, #6]
 800f646:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f64a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f64c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f656:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f660:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	7a52      	ldrb	r2, [r2, #9]
 800f66a:	f002 0201 	and.w	r2, r2, #1
 800f66e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f670:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	7a92      	ldrb	r2, [r2, #10]
 800f67a:	f002 0207 	and.w	r2, r2, #7
 800f67e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f680:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	8998      	ldrh	r0, [r3, #12]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	330c      	adds	r3, #12
 800f68a:	461a      	mov	r2, r3
 800f68c:	2102      	movs	r1, #2
 800f68e:	f7fe fdf6 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	89d8      	ldrh	r0, [r3, #14]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	330e      	adds	r3, #14
 800f69a:	461a      	mov	r2, r3
 800f69c:	2102      	movs	r1, #2
 800f69e:	f7fe fdee 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	8a18      	ldrh	r0, [r3, #16]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	3310      	adds	r3, #16
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	2102      	movs	r1, #2
 800f6ae:	f7fe fde6 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f6ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f6c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f6ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f6d8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b086      	sub	sp, #24
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	607a      	str	r2, [r7, #4]
 800f6f2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f6f8:	897b      	ldrh	r3, [r7, #10]
 800f6fa:	2b16      	cmp	r3, #22
 800f6fc:	d802      	bhi.n	800f704 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f6fe:	f06f 0309 	mvn.w	r3, #9
 800f702:	e06e      	b.n	800f7e2 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	f003 030f 	and.w	r3, r3, #15
 800f70c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f71a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	7892      	ldrb	r2, [r2, #2]
 800f724:	f002 020f 	and.w	r2, r2, #15
 800f728:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f72a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f734:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	7912      	ldrb	r2, [r2, #4]
 800f73e:	f002 020f 	and.w	r2, r2, #15
 800f742:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f744:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f74e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	7992      	ldrb	r2, [r2, #6]
 800f758:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f75c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f75e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	79d2      	ldrb	r2, [r2, #7]
 800f768:	f002 020f 	and.w	r2, r2, #15
 800f76c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f76e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f778:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	7a52      	ldrb	r2, [r2, #9]
 800f782:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f786:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f788:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	8958      	ldrh	r0, [r3, #10]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	330a      	adds	r3, #10
 800f792:	461a      	mov	r2, r3
 800f794:	2102      	movs	r1, #2
 800f796:	f7fe fd72 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	8998      	ldrh	r0, [r3, #12]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	330c      	adds	r3, #12
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	2102      	movs	r1, #2
 800f7a6:	f7fe fd6a 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f7b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f7bc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6918      	ldr	r0, [r3, #16]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	3312      	adds	r3, #18
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	2104      	movs	r1, #4
 800f7ca:	f7fe fdf6 	bl	800e3ba <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f7d2:	68fa      	ldr	r2, [r7, #12]
 800f7d4:	7d12      	ldrb	r2, [r2, #20]
 800f7d6:	f002 0201 	and.w	r2, r2, #1
 800f7da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f7dc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f7de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3718      	adds	r7, #24
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b086      	sub	sp, #24
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	607a      	str	r2, [r7, #4]
 800f7f6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800f7fc:	897b      	ldrh	r3, [r7, #10]
 800f7fe:	2b11      	cmp	r3, #17
 800f800:	d802      	bhi.n	800f808 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f802:	f06f 0309 	mvn.w	r3, #9
 800f806:	e071      	b.n	800f8ec <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	f003 0303 	and.w	r3, r3, #3
 800f810:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	8858      	ldrh	r0, [r3, #2]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	3301      	adds	r3, #1
 800f81e:	461a      	mov	r2, r3
 800f820:	2102      	movs	r1, #2
 800f822:	f7fe fd2c 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	8898      	ldrh	r0, [r3, #4]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	3303      	adds	r3, #3
 800f82e:	461a      	mov	r2, r3
 800f830:	2102      	movs	r1, #2
 800f832:	f7fe fd24 	bl	800e27e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	7992      	ldrb	r2, [r2, #6]
 800f83e:	f002 0201 	and.w	r2, r2, #1
 800f842:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f844:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	79d2      	ldrb	r2, [r2, #7]
 800f84e:	f002 0207 	and.w	r2, r2, #7
 800f852:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f854:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f85e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f868:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	7a92      	ldrb	r2, [r2, #10]
 800f872:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f876:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f878:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	7ad2      	ldrb	r2, [r2, #11]
 800f882:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f886:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f888:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	7b12      	ldrb	r2, [r2, #12]
 800f892:	f002 0203 	and.w	r2, r2, #3
 800f896:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f898:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f89e:	68fa      	ldr	r2, [r7, #12]
 800f8a0:	7b52      	ldrb	r2, [r2, #13]
 800f8a2:	f002 0203 	and.w	r2, r2, #3
 800f8a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f8a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	7b92      	ldrb	r2, [r2, #14]
 800f8b2:	f002 020f 	and.w	r2, r2, #15
 800f8b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f8b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f8c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f8cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f8d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	7c92      	ldrb	r2, [r2, #18]
 800f8e0:	f002 0203 	and.w	r2, r2, #3
 800f8e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f8e6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f8e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b087      	sub	sp, #28
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	607a      	str	r2, [r7, #4]
 800f900:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f902:	2300      	movs	r3, #0
 800f904:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800f906:	897b      	ldrh	r3, [r7, #10]
 800f908:	2b04      	cmp	r3, #4
 800f90a:	d802      	bhi.n	800f912 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f90c:	f06f 0309 	mvn.w	r3, #9
 800f910:	e025      	b.n	800f95e <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	f003 0301 	and.w	r3, r3, #1
 800f91a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	7852      	ldrb	r2, [r2, #1]
 800f928:	f002 0201 	and.w	r2, r2, #1
 800f92c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f92e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	7892      	ldrb	r2, [r2, #2]
 800f938:	f002 0201 	and.w	r2, r2, #1
 800f93c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f93e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f944:	68fa      	ldr	r2, [r7, #12]
 800f946:	78d2      	ldrb	r2, [r2, #3]
 800f948:	f002 0203 	and.w	r2, r2, #3
 800f94c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f94e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f958:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	371c      	adds	r7, #28
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b084      	sub	sp, #16
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
 800f972:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f974:	2300      	movs	r3, #0
 800f976:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d108      	bne.n	800f992 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 800f980:	f107 0308 	add.w	r3, r7, #8
 800f984:	461a      	mov	r2, r3
 800f986:	2105      	movs	r1, #5
 800f988:	6838      	ldr	r0, [r7, #0]
 800f98a:	f7ff ffb3 	bl	800f8f4 <VL53L1_i2c_encode_system_control>
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800f992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d108      	bne.n	800f9ac <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 800f99a:	f107 0208 	add.w	r2, r7, #8
 800f99e:	2305      	movs	r3, #5
 800f9a0:	2183      	movs	r1, #131	; 0x83
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff f978 	bl	800ec98 <VL53L1_WriteMulti>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800f9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3710      	adds	r7, #16
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	4603      	mov	r3, r0
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
 800f9c4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800f9ca:	89fb      	ldrh	r3, [r7, #14]
 800f9cc:	2b2b      	cmp	r3, #43	; 0x2b
 800f9ce:	d802      	bhi.n	800f9d6 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f9d0:	f06f 0309 	mvn.w	r3, #9
 800f9d4:	e0e2      	b.n	800fb9c <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9de:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	785a      	ldrb	r2, [r3, #1]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	3302      	adds	r3, #2
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	f003 030f 	and.w	r3, r3, #15
 800f9f6:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	78da      	ldrb	r2, [r3, #3]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	3304      	adds	r3, #4
 800fa08:	4619      	mov	r1, r3
 800fa0a:	2002      	movs	r0, #2
 800fa0c:	f7fe fc61 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa10:	4603      	mov	r3, r0
 800fa12:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	3306      	adds	r3, #6
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	2002      	movs	r0, #2
 800fa20:	f7fe fc57 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa24:	4603      	mov	r3, r0
 800fa26:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	3308      	adds	r3, #8
 800fa30:	4619      	mov	r1, r3
 800fa32:	2002      	movs	r0, #2
 800fa34:	f7fe fc4d 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	330a      	adds	r3, #10
 800fa44:	4619      	mov	r1, r3
 800fa46:	2002      	movs	r0, #2
 800fa48:	f7fe fc43 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	330c      	adds	r3, #12
 800fa58:	4619      	mov	r1, r3
 800fa5a:	2002      	movs	r0, #2
 800fa5c:	f7fe fc39 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	330e      	adds	r3, #14
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	2002      	movs	r0, #2
 800fa70:	f7fe fc2f 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	3310      	adds	r3, #16
 800fa80:	4619      	mov	r1, r3
 800fa82:	2002      	movs	r0, #2
 800fa84:	f7fe fc25 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	3312      	adds	r3, #18
 800fa94:	4619      	mov	r1, r3
 800fa96:	2002      	movs	r0, #2
 800fa98:	f7fe fc1b 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	3314      	adds	r3, #20
 800faa8:	4619      	mov	r1, r3
 800faaa:	2002      	movs	r0, #2
 800faac:	f7fe fc11 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fab0:	4603      	mov	r3, r0
 800fab2:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	3316      	adds	r3, #22
 800fabc:	4619      	mov	r1, r3
 800fabe:	2002      	movs	r0, #2
 800fac0:	f7fe fc07 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fac4:	4603      	mov	r3, r0
 800fac6:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	3318      	adds	r3, #24
 800fad0:	4619      	mov	r1, r3
 800fad2:	2002      	movs	r0, #2
 800fad4:	f7fe fbfd 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fad8:	4603      	mov	r3, r0
 800fada:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	331a      	adds	r3, #26
 800fae4:	4619      	mov	r1, r3
 800fae6:	2002      	movs	r0, #2
 800fae8:	f7fe fbf3 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800faec:	4603      	mov	r3, r0
 800faee:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	331c      	adds	r3, #28
 800faf8:	4619      	mov	r1, r3
 800fafa:	2002      	movs	r0, #2
 800fafc:	f7fe fbe9 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	331e      	adds	r3, #30
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	2002      	movs	r0, #2
 800fb10:	f7fe fbdf 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fb14:	4603      	mov	r3, r0
 800fb16:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	3320      	adds	r3, #32
 800fb20:	4619      	mov	r1, r3
 800fb22:	2002      	movs	r0, #2
 800fb24:	f7fe fbd5 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	3322      	adds	r3, #34	; 0x22
 800fb34:	4619      	mov	r1, r3
 800fb36:	2002      	movs	r0, #2
 800fb38:	f7fe fbcb 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	3324      	adds	r3, #36	; 0x24
 800fb48:	4619      	mov	r1, r3
 800fb4a:	2002      	movs	r0, #2
 800fb4c:	f7fe fbc1 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fb50:	4603      	mov	r3, r0
 800fb52:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	3326      	adds	r3, #38	; 0x26
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	2002      	movs	r0, #2
 800fb60:	f7fe fbb7 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fb64:	4603      	mov	r3, r0
 800fb66:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	3328      	adds	r3, #40	; 0x28
 800fb70:	4619      	mov	r1, r3
 800fb72:	2002      	movs	r0, #2
 800fb74:	f7fe fbad 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800fb98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
 800fbb0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800fbb6:	89fb      	ldrh	r3, [r7, #14]
 800fbb8:	2b20      	cmp	r3, #32
 800fbba:	d802      	bhi.n	800fbc2 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fbbc:	f06f 0309 	mvn.w	r3, #9
 800fbc0:	e04d      	b.n	800fc5e <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800fbc2:	68b9      	ldr	r1, [r7, #8]
 800fbc4:	2004      	movs	r0, #4
 800fbc6:	f7fe fc21 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800fbca:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	2004      	movs	r0, #4
 800fbd8:	f7fe fc18 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800fbdc:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	3308      	adds	r3, #8
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	2004      	movs	r0, #4
 800fbea:	f7fe fc2c 	bl	800e446 <VL53L1_i2c_decode_int32_t>
 800fbee:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	330c      	adds	r3, #12
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	2004      	movs	r0, #4
 800fbfc:	f7fe fc06 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800fc00:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	3310      	adds	r3, #16
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	2004      	movs	r0, #4
 800fc0e:	f7fe fbfd 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800fc12:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	3314      	adds	r3, #20
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	2004      	movs	r0, #4
 800fc20:	f7fe fbf4 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800fc24:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	3318      	adds	r3, #24
 800fc2e:	4619      	mov	r1, r3
 800fc30:	2004      	movs	r0, #4
 800fc32:	f7fe fc08 	bl	800e446 <VL53L1_i2c_decode_int32_t>
 800fc36:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	331c      	adds	r3, #28
 800fc40:	4619      	mov	r1, r3
 800fc42:	2004      	movs	r0, #4
 800fc44:	f7fe fbe2 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800fc48:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800fc5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3718      	adds	r7, #24
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b086      	sub	sp, #24
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	60b9      	str	r1, [r7, #8]
 800fc70:	607a      	str	r2, [r7, #4]
 800fc72:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fc74:	2300      	movs	r3, #0
 800fc76:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800fc78:	89fb      	ldrh	r3, [r7, #14]
 800fc7a:	2b37      	cmp	r3, #55	; 0x37
 800fc7c:	d802      	bhi.n	800fc84 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc7e:	f06f 0309 	mvn.w	r3, #9
 800fc82:	e15e      	b.n	800ff42 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800fc84:	68b9      	ldr	r1, [r7, #8]
 800fc86:	2002      	movs	r0, #2
 800fc88:	f7fe fb23 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	3302      	adds	r3, #2
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc9e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	3303      	adds	r3, #3
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcae:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	f003 0303 	and.w	r3, r3, #3
 800fcbe:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	3305      	adds	r3, #5
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	f003 0301 	and.w	r3, r3, #1
 800fcce:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	3306      	adds	r3, #6
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcde:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	3307      	adds	r3, #7
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcee:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	3308      	adds	r3, #8
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	2002      	movs	r0, #2
 800fcfc:	f7fe fae9 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fd00:	4603      	mov	r3, r0
 800fd02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd06:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	330a      	adds	r3, #10
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f003 0303 	and.w	r3, r3, #3
 800fd16:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	330b      	adds	r3, #11
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	f003 0303 	and.w	r3, r3, #3
 800fd26:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	330c      	adds	r3, #12
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	f003 030f 	and.w	r3, r3, #15
 800fd36:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	330d      	adds	r3, #13
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	f003 0307 	and.w	r3, r3, #7
 800fd46:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	330e      	adds	r3, #14
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	f003 0301 	and.w	r3, r3, #1
 800fd56:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	330f      	adds	r3, #15
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	f003 0303 	and.w	r3, r3, #3
 800fd66:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	7c1a      	ldrb	r2, [r3, #16]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	7c5a      	ldrb	r2, [r3, #17]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	3312      	adds	r3, #18
 800fd80:	4619      	mov	r1, r3
 800fd82:	2002      	movs	r0, #2
 800fd84:	f7fe faa5 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd8e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	3316      	adds	r3, #22
 800fd98:	4619      	mov	r1, r3
 800fd9a:	2002      	movs	r0, #2
 800fd9c:	f7fe fa99 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fda0:	4603      	mov	r3, r0
 800fda2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	3318      	adds	r3, #24
 800fdac:	4619      	mov	r1, r3
 800fdae:	2002      	movs	r0, #2
 800fdb0:	f7fe fa8f 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	331a      	adds	r3, #26
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	f003 0301 	and.w	r3, r3, #1
 800fdc6:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	331b      	adds	r3, #27
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	f003 0307 	and.w	r3, r3, #7
 800fdd6:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	7f1a      	ldrb	r2, [r3, #28]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	7f5a      	ldrb	r2, [r3, #29]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	331e      	adds	r3, #30
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdf6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	331f      	adds	r3, #31
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe06:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	3320      	adds	r3, #32
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	f003 0303 	and.w	r3, r3, #3
 800fe16:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	3321      	adds	r3, #33	; 0x21
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	f003 030f 	and.w	r3, r3, #15
 800fe26:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	3325      	adds	r3, #37	; 0x25
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	3326      	adds	r3, #38	; 0x26
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	f003 0303 	and.w	r3, r3, #3
 800fe6c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	3327      	adds	r3, #39	; 0x27
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	f003 031f 	and.w	r3, r3, #31
 800fe7e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	3328      	adds	r3, #40	; 0x28
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f003 031f 	and.w	r3, r3, #31
 800fe90:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	3329      	adds	r3, #41	; 0x29
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	f003 031f 	and.w	r3, r3, #31
 800fea2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	332a      	adds	r3, #42	; 0x2a
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 0301 	and.w	r3, r3, #1
 800feb4:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	332b      	adds	r3, #43	; 0x2b
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	f003 0301 	and.w	r3, r3, #1
 800fec6:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	332c      	adds	r3, #44	; 0x2c
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0303 	and.w	r3, r3, #3
 800fed8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	332d      	adds	r3, #45	; 0x2d
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800feea:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	332e      	adds	r3, #46	; 0x2e
 800fef6:	4619      	mov	r1, r3
 800fef8:	2004      	movs	r0, #4
 800fefa:	f7fe fa87 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800fefe:	4603      	mov	r3, r0
 800ff00:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	3332      	adds	r3, #50	; 0x32
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	2004      	movs	r0, #4
 800ff10:	f7fe fa7c 	bl	800e40c <VL53L1_i2c_decode_uint32_t>
 800ff14:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	3336      	adds	r3, #54	; 0x36
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	f003 0301 	and.w	r3, r3, #1
 800ff24:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	3337      	adds	r3, #55	; 0x37
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800ff3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3718      	adds	r7, #24
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b086      	sub	sp, #24
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	4603      	mov	r3, r0
 800ff52:	60b9      	str	r1, [r7, #8]
 800ff54:	607a      	str	r2, [r7, #4]
 800ff56:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800ff5c:	89fb      	ldrh	r3, [r7, #14]
 800ff5e:	2b30      	cmp	r3, #48	; 0x30
 800ff60:	d802      	bhi.n	800ff68 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ff62:	f06f 0309 	mvn.w	r3, #9
 800ff66:	e112      	b.n	801018e <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	785a      	ldrb	r2, [r3, #1]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	789a      	ldrb	r2, [r3, #2]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	3303      	adds	r3, #3
 800ff84:	4619      	mov	r1, r3
 800ff86:	2002      	movs	r0, #2
 800ff88:	f7fe f9a3 	bl	800e2d2 <VL53L1_i2c_decode_uint16_t>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	3305      	adds	r3, #5
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff9e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	3306      	adds	r3, #6
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	f003 0307 	and.w	r3, r3, #7
 800ffae:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	3307      	adds	r3, #7
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	f003 0307 	and.w	r3, r3, #7
 800ffbe:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	3308      	adds	r3, #8
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ffce:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	3309      	adds	r3, #9
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ffde:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	330a      	adds	r3, #10
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	330b      	adds	r3, #11
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fffe:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	330c      	adds	r3, #12
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	f003 0301 	and.w	r3, r3, #1
 801000e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	330d      	adds	r3, #13
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801001e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	330e      	adds	r3, #14
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801002e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	7bda      	ldrb	r2, [r3, #15]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	7c1a      	ldrb	r2, [r3, #16]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	7c5a      	ldrb	r2, [r3, #17]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	7c9a      	ldrb	r2, [r3, #18]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	7cda      	ldrb	r2, [r3, #19]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	7d1a      	ldrb	r2, [r3, #20]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	7d5a      	ldrb	r2, [r3, #21]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	7d9a      	ldrb	r2, [r3, #22]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	7dda      	ldrb	r2, [r3, #23]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	7e1a      	ldrb	r2, [r3, #24]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	7e5a      	ldrb	r2, [r3, #25]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	7e9a      	ldrb	r2, [r3, #26]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	7eda      	ldrb	r2, [r3, #27]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	7f1a      	ldrb	r2, [r3, #28]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	7f5a      	ldrb	r2, [r3, #29]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	7f9a      	ldrb	r2, [r3, #30]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	7fda      	ldrb	r2, [r3, #31]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801018a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801018e:	4618      	mov	r0, r3
 8010190:	3718      	adds	r7, #24
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b090      	sub	sp, #64	; 0x40
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
 801019e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80101a0:	2300      	movs	r3, #0
 80101a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80101a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d10a      	bne.n	80101c4 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80101ae:	f107 020c 	add.w	r2, r7, #12
 80101b2:	2331      	movs	r3, #49	; 0x31
 80101b4:	f240 110f 	movw	r1, #271	; 0x10f
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7fe fda3 	bl	800ed04 <VL53L1_ReadMulti>
 80101be:	4603      	mov	r3, r0
 80101c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80101c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d109      	bne.n	80101e0 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80101cc:	f107 030c 	add.w	r3, r7, #12
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	4619      	mov	r1, r3
 80101d4:	2031      	movs	r0, #49	; 0x31
 80101d6:	f7ff feb8 	bl	800ff4a <VL53L1_i2c_decode_nvm_copy_data>
 80101da:	4603      	mov	r3, r0
 80101dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80101e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3740      	adds	r7, #64	; 0x40
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af02      	add	r7, sp, #8
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80101f6:	2300      	movs	r3, #0
 80101f8:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 80101fa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f7fe fe46 	bl	800ee90 <VL53L1_WaitUs>
 8010204:	4603      	mov	r3, r0
 8010206:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8010208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d10b      	bne.n	8010228 <VL53L1_poll_for_boot_completion+0x3c>
		status =
 8010210:	2301      	movs	r3, #1
 8010212:	9301      	str	r3, [sp, #4]
 8010214:	2301      	movs	r3, #1
 8010216:	9300      	str	r3, [sp, #0]
 8010218:	2301      	movs	r3, #1
 801021a:	22e5      	movs	r2, #229	; 0xe5
 801021c:	6839      	ldr	r1, [r7, #0]
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f7fe fe4c 	bl	800eebc <VL53L1_WaitValueMaskEx>
 8010224:	4603      	mov	r3, r0
 8010226:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8010228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d103      	bne.n	8010238 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8010230:	2103      	movs	r1, #3
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7fd fe06 	bl	800de44 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b088      	sub	sp, #32
 8010248:	af02      	add	r7, sp, #8
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801024e:	2300      	movs	r3, #0
 8010250:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801025a:	2300      	movs	r3, #0
 801025c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8010264:	f003 0310 	and.w	r3, r3, #16
 8010268:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801026a:	7bfb      	ldrb	r3, [r7, #15]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d102      	bne.n	8010276 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 8010270:	2301      	movs	r3, #1
 8010272:	75fb      	strb	r3, [r7, #23]
 8010274:	e001      	b.n	801027a <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8010276:	2300      	movs	r3, #0
 8010278:	75fb      	strb	r3, [r7, #23]

	status =
 801027a:	7dfa      	ldrb	r2, [r7, #23]
 801027c:	2301      	movs	r3, #1
 801027e:	9301      	str	r3, [sp, #4]
 8010280:	2301      	movs	r3, #1
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	4613      	mov	r3, r2
 8010286:	2231      	movs	r2, #49	; 0x31
 8010288:	6839      	ldr	r1, [r7, #0]
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7fe fe16 	bl	800eebc <VL53L1_WaitValueMaskEx>
 8010290:	4603      	mov	r3, r0
 8010292:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010294:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3718      	adds	r7, #24
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80102a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80102d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80102a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80102a6:	e003      	b.n	80102b0 <LoopCopyDataInit>

080102a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80102a8:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80102aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80102ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80102ae:	3104      	adds	r1, #4

080102b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80102b0:	480b      	ldr	r0, [pc, #44]	; (80102e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80102b2:	4b0c      	ldr	r3, [pc, #48]	; (80102e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80102b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80102b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80102b8:	d3f6      	bcc.n	80102a8 <CopyDataInit>
  ldr  r2, =_sbss
 80102ba:	4a0b      	ldr	r2, [pc, #44]	; (80102e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80102bc:	e002      	b.n	80102c4 <LoopFillZerobss>

080102be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80102be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80102c0:	f842 3b04 	str.w	r3, [r2], #4

080102c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80102c4:	4b09      	ldr	r3, [pc, #36]	; (80102ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80102c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80102c8:	d3f9      	bcc.n	80102be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80102ca:	f7f5 f93b 	bl	8005544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80102ce:	f000 f98d 	bl	80105ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80102d2:	f7f4 fe69 	bl	8004fa8 <main>
  bx  lr    
 80102d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80102d8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80102dc:	0801171c 	.word	0x0801171c
  ldr  r0, =_sdata
 80102e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80102e4:	20000370 	.word	0x20000370
  ldr  r2, =_sbss
 80102e8:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 80102ec:	20000e60 	.word	0x20000e60

080102f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80102f0:	e7fe      	b.n	80102f0 <ADC_IRQHandler>
	...

080102f4 <__sflush_r>:
 80102f4:	898a      	ldrh	r2, [r1, #12]
 80102f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102fa:	4605      	mov	r5, r0
 80102fc:	0710      	lsls	r0, r2, #28
 80102fe:	460c      	mov	r4, r1
 8010300:	d45a      	bmi.n	80103b8 <__sflush_r+0xc4>
 8010302:	684b      	ldr	r3, [r1, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	dc05      	bgt.n	8010314 <__sflush_r+0x20>
 8010308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801030a:	2b00      	cmp	r3, #0
 801030c:	dc02      	bgt.n	8010314 <__sflush_r+0x20>
 801030e:	2000      	movs	r0, #0
 8010310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010316:	2e00      	cmp	r6, #0
 8010318:	d0f9      	beq.n	801030e <__sflush_r+0x1a>
 801031a:	2300      	movs	r3, #0
 801031c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010320:	682f      	ldr	r7, [r5, #0]
 8010322:	602b      	str	r3, [r5, #0]
 8010324:	d033      	beq.n	801038e <__sflush_r+0x9a>
 8010326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010328:	89a3      	ldrh	r3, [r4, #12]
 801032a:	075a      	lsls	r2, r3, #29
 801032c:	d505      	bpl.n	801033a <__sflush_r+0x46>
 801032e:	6863      	ldr	r3, [r4, #4]
 8010330:	1ac0      	subs	r0, r0, r3
 8010332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010334:	b10b      	cbz	r3, 801033a <__sflush_r+0x46>
 8010336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010338:	1ac0      	subs	r0, r0, r3
 801033a:	2300      	movs	r3, #0
 801033c:	4602      	mov	r2, r0
 801033e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010340:	6a21      	ldr	r1, [r4, #32]
 8010342:	4628      	mov	r0, r5
 8010344:	47b0      	blx	r6
 8010346:	1c43      	adds	r3, r0, #1
 8010348:	89a3      	ldrh	r3, [r4, #12]
 801034a:	d106      	bne.n	801035a <__sflush_r+0x66>
 801034c:	6829      	ldr	r1, [r5, #0]
 801034e:	291d      	cmp	r1, #29
 8010350:	d84b      	bhi.n	80103ea <__sflush_r+0xf6>
 8010352:	4a2b      	ldr	r2, [pc, #172]	; (8010400 <__sflush_r+0x10c>)
 8010354:	40ca      	lsrs	r2, r1
 8010356:	07d6      	lsls	r6, r2, #31
 8010358:	d547      	bpl.n	80103ea <__sflush_r+0xf6>
 801035a:	2200      	movs	r2, #0
 801035c:	6062      	str	r2, [r4, #4]
 801035e:	04d9      	lsls	r1, r3, #19
 8010360:	6922      	ldr	r2, [r4, #16]
 8010362:	6022      	str	r2, [r4, #0]
 8010364:	d504      	bpl.n	8010370 <__sflush_r+0x7c>
 8010366:	1c42      	adds	r2, r0, #1
 8010368:	d101      	bne.n	801036e <__sflush_r+0x7a>
 801036a:	682b      	ldr	r3, [r5, #0]
 801036c:	b903      	cbnz	r3, 8010370 <__sflush_r+0x7c>
 801036e:	6560      	str	r0, [r4, #84]	; 0x54
 8010370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010372:	602f      	str	r7, [r5, #0]
 8010374:	2900      	cmp	r1, #0
 8010376:	d0ca      	beq.n	801030e <__sflush_r+0x1a>
 8010378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801037c:	4299      	cmp	r1, r3
 801037e:	d002      	beq.n	8010386 <__sflush_r+0x92>
 8010380:	4628      	mov	r0, r5
 8010382:	f000 f9d7 	bl	8010734 <_free_r>
 8010386:	2000      	movs	r0, #0
 8010388:	6360      	str	r0, [r4, #52]	; 0x34
 801038a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801038e:	6a21      	ldr	r1, [r4, #32]
 8010390:	2301      	movs	r3, #1
 8010392:	4628      	mov	r0, r5
 8010394:	47b0      	blx	r6
 8010396:	1c41      	adds	r1, r0, #1
 8010398:	d1c6      	bne.n	8010328 <__sflush_r+0x34>
 801039a:	682b      	ldr	r3, [r5, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d0c3      	beq.n	8010328 <__sflush_r+0x34>
 80103a0:	2b1d      	cmp	r3, #29
 80103a2:	d001      	beq.n	80103a8 <__sflush_r+0xb4>
 80103a4:	2b16      	cmp	r3, #22
 80103a6:	d101      	bne.n	80103ac <__sflush_r+0xb8>
 80103a8:	602f      	str	r7, [r5, #0]
 80103aa:	e7b0      	b.n	801030e <__sflush_r+0x1a>
 80103ac:	89a3      	ldrh	r3, [r4, #12]
 80103ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103b2:	81a3      	strh	r3, [r4, #12]
 80103b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b8:	690f      	ldr	r7, [r1, #16]
 80103ba:	2f00      	cmp	r7, #0
 80103bc:	d0a7      	beq.n	801030e <__sflush_r+0x1a>
 80103be:	0793      	lsls	r3, r2, #30
 80103c0:	680e      	ldr	r6, [r1, #0]
 80103c2:	bf08      	it	eq
 80103c4:	694b      	ldreq	r3, [r1, #20]
 80103c6:	600f      	str	r7, [r1, #0]
 80103c8:	bf18      	it	ne
 80103ca:	2300      	movne	r3, #0
 80103cc:	eba6 0807 	sub.w	r8, r6, r7
 80103d0:	608b      	str	r3, [r1, #8]
 80103d2:	f1b8 0f00 	cmp.w	r8, #0
 80103d6:	dd9a      	ble.n	801030e <__sflush_r+0x1a>
 80103d8:	4643      	mov	r3, r8
 80103da:	463a      	mov	r2, r7
 80103dc:	6a21      	ldr	r1, [r4, #32]
 80103de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80103e0:	4628      	mov	r0, r5
 80103e2:	47b0      	blx	r6
 80103e4:	2800      	cmp	r0, #0
 80103e6:	dc07      	bgt.n	80103f8 <__sflush_r+0x104>
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ee:	81a3      	strh	r3, [r4, #12]
 80103f0:	f04f 30ff 	mov.w	r0, #4294967295
 80103f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f8:	4407      	add	r7, r0
 80103fa:	eba8 0800 	sub.w	r8, r8, r0
 80103fe:	e7e8      	b.n	80103d2 <__sflush_r+0xde>
 8010400:	20400001 	.word	0x20400001

08010404 <_fflush_r>:
 8010404:	b538      	push	{r3, r4, r5, lr}
 8010406:	690b      	ldr	r3, [r1, #16]
 8010408:	4605      	mov	r5, r0
 801040a:	460c      	mov	r4, r1
 801040c:	b1db      	cbz	r3, 8010446 <_fflush_r+0x42>
 801040e:	b118      	cbz	r0, 8010418 <_fflush_r+0x14>
 8010410:	6983      	ldr	r3, [r0, #24]
 8010412:	b90b      	cbnz	r3, 8010418 <_fflush_r+0x14>
 8010414:	f000 f860 	bl	80104d8 <__sinit>
 8010418:	4b0c      	ldr	r3, [pc, #48]	; (801044c <_fflush_r+0x48>)
 801041a:	429c      	cmp	r4, r3
 801041c:	d109      	bne.n	8010432 <_fflush_r+0x2e>
 801041e:	686c      	ldr	r4, [r5, #4]
 8010420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010424:	b17b      	cbz	r3, 8010446 <_fflush_r+0x42>
 8010426:	4621      	mov	r1, r4
 8010428:	4628      	mov	r0, r5
 801042a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801042e:	f7ff bf61 	b.w	80102f4 <__sflush_r>
 8010432:	4b07      	ldr	r3, [pc, #28]	; (8010450 <_fflush_r+0x4c>)
 8010434:	429c      	cmp	r4, r3
 8010436:	d101      	bne.n	801043c <_fflush_r+0x38>
 8010438:	68ac      	ldr	r4, [r5, #8]
 801043a:	e7f1      	b.n	8010420 <_fflush_r+0x1c>
 801043c:	4b05      	ldr	r3, [pc, #20]	; (8010454 <_fflush_r+0x50>)
 801043e:	429c      	cmp	r4, r3
 8010440:	bf08      	it	eq
 8010442:	68ec      	ldreq	r4, [r5, #12]
 8010444:	e7ec      	b.n	8010420 <_fflush_r+0x1c>
 8010446:	2000      	movs	r0, #0
 8010448:	bd38      	pop	{r3, r4, r5, pc}
 801044a:	bf00      	nop
 801044c:	08011694 	.word	0x08011694
 8010450:	080116b4 	.word	0x080116b4
 8010454:	08011674 	.word	0x08011674

08010458 <_cleanup_r>:
 8010458:	4901      	ldr	r1, [pc, #4]	; (8010460 <_cleanup_r+0x8>)
 801045a:	f000 b8a9 	b.w	80105b0 <_fwalk_reent>
 801045e:	bf00      	nop
 8010460:	08010405 	.word	0x08010405

08010464 <std.isra.0>:
 8010464:	2300      	movs	r3, #0
 8010466:	b510      	push	{r4, lr}
 8010468:	4604      	mov	r4, r0
 801046a:	6003      	str	r3, [r0, #0]
 801046c:	6043      	str	r3, [r0, #4]
 801046e:	6083      	str	r3, [r0, #8]
 8010470:	8181      	strh	r1, [r0, #12]
 8010472:	6643      	str	r3, [r0, #100]	; 0x64
 8010474:	81c2      	strh	r2, [r0, #14]
 8010476:	6103      	str	r3, [r0, #16]
 8010478:	6143      	str	r3, [r0, #20]
 801047a:	6183      	str	r3, [r0, #24]
 801047c:	4619      	mov	r1, r3
 801047e:	2208      	movs	r2, #8
 8010480:	305c      	adds	r0, #92	; 0x5c
 8010482:	f000 f94e 	bl	8010722 <memset>
 8010486:	4b05      	ldr	r3, [pc, #20]	; (801049c <std.isra.0+0x38>)
 8010488:	6263      	str	r3, [r4, #36]	; 0x24
 801048a:	4b05      	ldr	r3, [pc, #20]	; (80104a0 <std.isra.0+0x3c>)
 801048c:	62a3      	str	r3, [r4, #40]	; 0x28
 801048e:	4b05      	ldr	r3, [pc, #20]	; (80104a4 <std.isra.0+0x40>)
 8010490:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010492:	4b05      	ldr	r3, [pc, #20]	; (80104a8 <std.isra.0+0x44>)
 8010494:	6224      	str	r4, [r4, #32]
 8010496:	6323      	str	r3, [r4, #48]	; 0x30
 8010498:	bd10      	pop	{r4, pc}
 801049a:	bf00      	nop
 801049c:	08010ce9 	.word	0x08010ce9
 80104a0:	08010d0b 	.word	0x08010d0b
 80104a4:	08010d43 	.word	0x08010d43
 80104a8:	08010d67 	.word	0x08010d67

080104ac <__sfmoreglue>:
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	1e4a      	subs	r2, r1, #1
 80104b0:	2568      	movs	r5, #104	; 0x68
 80104b2:	4355      	muls	r5, r2
 80104b4:	460e      	mov	r6, r1
 80104b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80104ba:	f000 f989 	bl	80107d0 <_malloc_r>
 80104be:	4604      	mov	r4, r0
 80104c0:	b140      	cbz	r0, 80104d4 <__sfmoreglue+0x28>
 80104c2:	2100      	movs	r1, #0
 80104c4:	e880 0042 	stmia.w	r0, {r1, r6}
 80104c8:	300c      	adds	r0, #12
 80104ca:	60a0      	str	r0, [r4, #8]
 80104cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80104d0:	f000 f927 	bl	8010722 <memset>
 80104d4:	4620      	mov	r0, r4
 80104d6:	bd70      	pop	{r4, r5, r6, pc}

080104d8 <__sinit>:
 80104d8:	6983      	ldr	r3, [r0, #24]
 80104da:	b510      	push	{r4, lr}
 80104dc:	4604      	mov	r4, r0
 80104de:	bb33      	cbnz	r3, 801052e <__sinit+0x56>
 80104e0:	6483      	str	r3, [r0, #72]	; 0x48
 80104e2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80104e4:	6503      	str	r3, [r0, #80]	; 0x50
 80104e6:	4b12      	ldr	r3, [pc, #72]	; (8010530 <__sinit+0x58>)
 80104e8:	4a12      	ldr	r2, [pc, #72]	; (8010534 <__sinit+0x5c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	6282      	str	r2, [r0, #40]	; 0x28
 80104ee:	4298      	cmp	r0, r3
 80104f0:	bf04      	itt	eq
 80104f2:	2301      	moveq	r3, #1
 80104f4:	6183      	streq	r3, [r0, #24]
 80104f6:	f000 f81f 	bl	8010538 <__sfp>
 80104fa:	6060      	str	r0, [r4, #4]
 80104fc:	4620      	mov	r0, r4
 80104fe:	f000 f81b 	bl	8010538 <__sfp>
 8010502:	60a0      	str	r0, [r4, #8]
 8010504:	4620      	mov	r0, r4
 8010506:	f000 f817 	bl	8010538 <__sfp>
 801050a:	2200      	movs	r2, #0
 801050c:	60e0      	str	r0, [r4, #12]
 801050e:	2104      	movs	r1, #4
 8010510:	6860      	ldr	r0, [r4, #4]
 8010512:	f7ff ffa7 	bl	8010464 <std.isra.0>
 8010516:	2201      	movs	r2, #1
 8010518:	2109      	movs	r1, #9
 801051a:	68a0      	ldr	r0, [r4, #8]
 801051c:	f7ff ffa2 	bl	8010464 <std.isra.0>
 8010520:	2202      	movs	r2, #2
 8010522:	2112      	movs	r1, #18
 8010524:	68e0      	ldr	r0, [r4, #12]
 8010526:	f7ff ff9d 	bl	8010464 <std.isra.0>
 801052a:	2301      	movs	r3, #1
 801052c:	61a3      	str	r3, [r4, #24]
 801052e:	bd10      	pop	{r4, pc}
 8010530:	080116d4 	.word	0x080116d4
 8010534:	08010459 	.word	0x08010459

08010538 <__sfp>:
 8010538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801053a:	4b1c      	ldr	r3, [pc, #112]	; (80105ac <__sfp+0x74>)
 801053c:	681e      	ldr	r6, [r3, #0]
 801053e:	69b3      	ldr	r3, [r6, #24]
 8010540:	4607      	mov	r7, r0
 8010542:	b913      	cbnz	r3, 801054a <__sfp+0x12>
 8010544:	4630      	mov	r0, r6
 8010546:	f7ff ffc7 	bl	80104d8 <__sinit>
 801054a:	3648      	adds	r6, #72	; 0x48
 801054c:	68b4      	ldr	r4, [r6, #8]
 801054e:	6873      	ldr	r3, [r6, #4]
 8010550:	3b01      	subs	r3, #1
 8010552:	d503      	bpl.n	801055c <__sfp+0x24>
 8010554:	6833      	ldr	r3, [r6, #0]
 8010556:	b133      	cbz	r3, 8010566 <__sfp+0x2e>
 8010558:	6836      	ldr	r6, [r6, #0]
 801055a:	e7f7      	b.n	801054c <__sfp+0x14>
 801055c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010560:	b16d      	cbz	r5, 801057e <__sfp+0x46>
 8010562:	3468      	adds	r4, #104	; 0x68
 8010564:	e7f4      	b.n	8010550 <__sfp+0x18>
 8010566:	2104      	movs	r1, #4
 8010568:	4638      	mov	r0, r7
 801056a:	f7ff ff9f 	bl	80104ac <__sfmoreglue>
 801056e:	6030      	str	r0, [r6, #0]
 8010570:	2800      	cmp	r0, #0
 8010572:	d1f1      	bne.n	8010558 <__sfp+0x20>
 8010574:	230c      	movs	r3, #12
 8010576:	603b      	str	r3, [r7, #0]
 8010578:	4604      	mov	r4, r0
 801057a:	4620      	mov	r0, r4
 801057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010582:	81e3      	strh	r3, [r4, #14]
 8010584:	2301      	movs	r3, #1
 8010586:	81a3      	strh	r3, [r4, #12]
 8010588:	6665      	str	r5, [r4, #100]	; 0x64
 801058a:	6025      	str	r5, [r4, #0]
 801058c:	60a5      	str	r5, [r4, #8]
 801058e:	6065      	str	r5, [r4, #4]
 8010590:	6125      	str	r5, [r4, #16]
 8010592:	6165      	str	r5, [r4, #20]
 8010594:	61a5      	str	r5, [r4, #24]
 8010596:	2208      	movs	r2, #8
 8010598:	4629      	mov	r1, r5
 801059a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801059e:	f000 f8c0 	bl	8010722 <memset>
 80105a2:	6365      	str	r5, [r4, #52]	; 0x34
 80105a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80105a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80105a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80105aa:	e7e6      	b.n	801057a <__sfp+0x42>
 80105ac:	080116d4 	.word	0x080116d4

080105b0 <_fwalk_reent>:
 80105b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b4:	4680      	mov	r8, r0
 80105b6:	4689      	mov	r9, r1
 80105b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80105bc:	2600      	movs	r6, #0
 80105be:	b914      	cbnz	r4, 80105c6 <_fwalk_reent+0x16>
 80105c0:	4630      	mov	r0, r6
 80105c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c6:	68a5      	ldr	r5, [r4, #8]
 80105c8:	6867      	ldr	r7, [r4, #4]
 80105ca:	3f01      	subs	r7, #1
 80105cc:	d501      	bpl.n	80105d2 <_fwalk_reent+0x22>
 80105ce:	6824      	ldr	r4, [r4, #0]
 80105d0:	e7f5      	b.n	80105be <_fwalk_reent+0xe>
 80105d2:	89ab      	ldrh	r3, [r5, #12]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d907      	bls.n	80105e8 <_fwalk_reent+0x38>
 80105d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105dc:	3301      	adds	r3, #1
 80105de:	d003      	beq.n	80105e8 <_fwalk_reent+0x38>
 80105e0:	4629      	mov	r1, r5
 80105e2:	4640      	mov	r0, r8
 80105e4:	47c8      	blx	r9
 80105e6:	4306      	orrs	r6, r0
 80105e8:	3568      	adds	r5, #104	; 0x68
 80105ea:	e7ee      	b.n	80105ca <_fwalk_reent+0x1a>

080105ec <__libc_init_array>:
 80105ec:	b570      	push	{r4, r5, r6, lr}
 80105ee:	4e0d      	ldr	r6, [pc, #52]	; (8010624 <__libc_init_array+0x38>)
 80105f0:	4c0d      	ldr	r4, [pc, #52]	; (8010628 <__libc_init_array+0x3c>)
 80105f2:	1ba4      	subs	r4, r4, r6
 80105f4:	10a4      	asrs	r4, r4, #2
 80105f6:	2500      	movs	r5, #0
 80105f8:	42a5      	cmp	r5, r4
 80105fa:	d109      	bne.n	8010610 <__libc_init_array+0x24>
 80105fc:	4e0b      	ldr	r6, [pc, #44]	; (801062c <__libc_init_array+0x40>)
 80105fe:	4c0c      	ldr	r4, [pc, #48]	; (8010630 <__libc_init_array+0x44>)
 8010600:	f000 fecc 	bl	801139c <_init>
 8010604:	1ba4      	subs	r4, r4, r6
 8010606:	10a4      	asrs	r4, r4, #2
 8010608:	2500      	movs	r5, #0
 801060a:	42a5      	cmp	r5, r4
 801060c:	d105      	bne.n	801061a <__libc_init_array+0x2e>
 801060e:	bd70      	pop	{r4, r5, r6, pc}
 8010610:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010614:	4798      	blx	r3
 8010616:	3501      	adds	r5, #1
 8010618:	e7ee      	b.n	80105f8 <__libc_init_array+0xc>
 801061a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801061e:	4798      	blx	r3
 8010620:	3501      	adds	r5, #1
 8010622:	e7f2      	b.n	801060a <__libc_init_array+0x1e>
 8010624:	08011714 	.word	0x08011714
 8010628:	08011714 	.word	0x08011714
 801062c:	08011714 	.word	0x08011714
 8010630:	08011718 	.word	0x08011718

08010634 <__swhatbuf_r>:
 8010634:	b570      	push	{r4, r5, r6, lr}
 8010636:	460e      	mov	r6, r1
 8010638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801063c:	2900      	cmp	r1, #0
 801063e:	b090      	sub	sp, #64	; 0x40
 8010640:	4614      	mov	r4, r2
 8010642:	461d      	mov	r5, r3
 8010644:	da07      	bge.n	8010656 <__swhatbuf_r+0x22>
 8010646:	2300      	movs	r3, #0
 8010648:	602b      	str	r3, [r5, #0]
 801064a:	89b3      	ldrh	r3, [r6, #12]
 801064c:	061a      	lsls	r2, r3, #24
 801064e:	d410      	bmi.n	8010672 <__swhatbuf_r+0x3e>
 8010650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010654:	e00e      	b.n	8010674 <__swhatbuf_r+0x40>
 8010656:	aa01      	add	r2, sp, #4
 8010658:	f000 fc88 	bl	8010f6c <_fstat_r>
 801065c:	2800      	cmp	r0, #0
 801065e:	dbf2      	blt.n	8010646 <__swhatbuf_r+0x12>
 8010660:	9a02      	ldr	r2, [sp, #8]
 8010662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010666:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801066a:	425a      	negs	r2, r3
 801066c:	415a      	adcs	r2, r3
 801066e:	602a      	str	r2, [r5, #0]
 8010670:	e7ee      	b.n	8010650 <__swhatbuf_r+0x1c>
 8010672:	2340      	movs	r3, #64	; 0x40
 8010674:	2000      	movs	r0, #0
 8010676:	6023      	str	r3, [r4, #0]
 8010678:	b010      	add	sp, #64	; 0x40
 801067a:	bd70      	pop	{r4, r5, r6, pc}

0801067c <__smakebuf_r>:
 801067c:	898b      	ldrh	r3, [r1, #12]
 801067e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010680:	079d      	lsls	r5, r3, #30
 8010682:	4606      	mov	r6, r0
 8010684:	460c      	mov	r4, r1
 8010686:	d507      	bpl.n	8010698 <__smakebuf_r+0x1c>
 8010688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801068c:	6023      	str	r3, [r4, #0]
 801068e:	6123      	str	r3, [r4, #16]
 8010690:	2301      	movs	r3, #1
 8010692:	6163      	str	r3, [r4, #20]
 8010694:	b002      	add	sp, #8
 8010696:	bd70      	pop	{r4, r5, r6, pc}
 8010698:	ab01      	add	r3, sp, #4
 801069a:	466a      	mov	r2, sp
 801069c:	f7ff ffca 	bl	8010634 <__swhatbuf_r>
 80106a0:	9900      	ldr	r1, [sp, #0]
 80106a2:	4605      	mov	r5, r0
 80106a4:	4630      	mov	r0, r6
 80106a6:	f000 f893 	bl	80107d0 <_malloc_r>
 80106aa:	b948      	cbnz	r0, 80106c0 <__smakebuf_r+0x44>
 80106ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106b0:	059a      	lsls	r2, r3, #22
 80106b2:	d4ef      	bmi.n	8010694 <__smakebuf_r+0x18>
 80106b4:	f023 0303 	bic.w	r3, r3, #3
 80106b8:	f043 0302 	orr.w	r3, r3, #2
 80106bc:	81a3      	strh	r3, [r4, #12]
 80106be:	e7e3      	b.n	8010688 <__smakebuf_r+0xc>
 80106c0:	4b0d      	ldr	r3, [pc, #52]	; (80106f8 <__smakebuf_r+0x7c>)
 80106c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80106c4:	89a3      	ldrh	r3, [r4, #12]
 80106c6:	6020      	str	r0, [r4, #0]
 80106c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106cc:	81a3      	strh	r3, [r4, #12]
 80106ce:	9b00      	ldr	r3, [sp, #0]
 80106d0:	6163      	str	r3, [r4, #20]
 80106d2:	9b01      	ldr	r3, [sp, #4]
 80106d4:	6120      	str	r0, [r4, #16]
 80106d6:	b15b      	cbz	r3, 80106f0 <__smakebuf_r+0x74>
 80106d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106dc:	4630      	mov	r0, r6
 80106de:	f000 fc57 	bl	8010f90 <_isatty_r>
 80106e2:	b128      	cbz	r0, 80106f0 <__smakebuf_r+0x74>
 80106e4:	89a3      	ldrh	r3, [r4, #12]
 80106e6:	f023 0303 	bic.w	r3, r3, #3
 80106ea:	f043 0301 	orr.w	r3, r3, #1
 80106ee:	81a3      	strh	r3, [r4, #12]
 80106f0:	89a3      	ldrh	r3, [r4, #12]
 80106f2:	431d      	orrs	r5, r3
 80106f4:	81a5      	strh	r5, [r4, #12]
 80106f6:	e7cd      	b.n	8010694 <__smakebuf_r+0x18>
 80106f8:	08010459 	.word	0x08010459

080106fc <malloc>:
 80106fc:	4b02      	ldr	r3, [pc, #8]	; (8010708 <malloc+0xc>)
 80106fe:	4601      	mov	r1, r0
 8010700:	6818      	ldr	r0, [r3, #0]
 8010702:	f000 b865 	b.w	80107d0 <_malloc_r>
 8010706:	bf00      	nop
 8010708:	2000030c 	.word	0x2000030c

0801070c <memcpy>:
 801070c:	b510      	push	{r4, lr}
 801070e:	1e43      	subs	r3, r0, #1
 8010710:	440a      	add	r2, r1
 8010712:	4291      	cmp	r1, r2
 8010714:	d100      	bne.n	8010718 <memcpy+0xc>
 8010716:	bd10      	pop	{r4, pc}
 8010718:	f811 4b01 	ldrb.w	r4, [r1], #1
 801071c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010720:	e7f7      	b.n	8010712 <memcpy+0x6>

08010722 <memset>:
 8010722:	4402      	add	r2, r0
 8010724:	4603      	mov	r3, r0
 8010726:	4293      	cmp	r3, r2
 8010728:	d100      	bne.n	801072c <memset+0xa>
 801072a:	4770      	bx	lr
 801072c:	f803 1b01 	strb.w	r1, [r3], #1
 8010730:	e7f9      	b.n	8010726 <memset+0x4>
	...

08010734 <_free_r>:
 8010734:	b538      	push	{r3, r4, r5, lr}
 8010736:	4605      	mov	r5, r0
 8010738:	2900      	cmp	r1, #0
 801073a:	d045      	beq.n	80107c8 <_free_r+0x94>
 801073c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010740:	1f0c      	subs	r4, r1, #4
 8010742:	2b00      	cmp	r3, #0
 8010744:	bfb8      	it	lt
 8010746:	18e4      	addlt	r4, r4, r3
 8010748:	f000 fc5e 	bl	8011008 <__malloc_lock>
 801074c:	4a1f      	ldr	r2, [pc, #124]	; (80107cc <_free_r+0x98>)
 801074e:	6813      	ldr	r3, [r2, #0]
 8010750:	4610      	mov	r0, r2
 8010752:	b933      	cbnz	r3, 8010762 <_free_r+0x2e>
 8010754:	6063      	str	r3, [r4, #4]
 8010756:	6014      	str	r4, [r2, #0]
 8010758:	4628      	mov	r0, r5
 801075a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801075e:	f000 bc54 	b.w	801100a <__malloc_unlock>
 8010762:	42a3      	cmp	r3, r4
 8010764:	d90c      	bls.n	8010780 <_free_r+0x4c>
 8010766:	6821      	ldr	r1, [r4, #0]
 8010768:	1862      	adds	r2, r4, r1
 801076a:	4293      	cmp	r3, r2
 801076c:	bf04      	itt	eq
 801076e:	681a      	ldreq	r2, [r3, #0]
 8010770:	685b      	ldreq	r3, [r3, #4]
 8010772:	6063      	str	r3, [r4, #4]
 8010774:	bf04      	itt	eq
 8010776:	1852      	addeq	r2, r2, r1
 8010778:	6022      	streq	r2, [r4, #0]
 801077a:	6004      	str	r4, [r0, #0]
 801077c:	e7ec      	b.n	8010758 <_free_r+0x24>
 801077e:	4613      	mov	r3, r2
 8010780:	685a      	ldr	r2, [r3, #4]
 8010782:	b10a      	cbz	r2, 8010788 <_free_r+0x54>
 8010784:	42a2      	cmp	r2, r4
 8010786:	d9fa      	bls.n	801077e <_free_r+0x4a>
 8010788:	6819      	ldr	r1, [r3, #0]
 801078a:	1858      	adds	r0, r3, r1
 801078c:	42a0      	cmp	r0, r4
 801078e:	d10b      	bne.n	80107a8 <_free_r+0x74>
 8010790:	6820      	ldr	r0, [r4, #0]
 8010792:	4401      	add	r1, r0
 8010794:	1858      	adds	r0, r3, r1
 8010796:	4282      	cmp	r2, r0
 8010798:	6019      	str	r1, [r3, #0]
 801079a:	d1dd      	bne.n	8010758 <_free_r+0x24>
 801079c:	6810      	ldr	r0, [r2, #0]
 801079e:	6852      	ldr	r2, [r2, #4]
 80107a0:	605a      	str	r2, [r3, #4]
 80107a2:	4401      	add	r1, r0
 80107a4:	6019      	str	r1, [r3, #0]
 80107a6:	e7d7      	b.n	8010758 <_free_r+0x24>
 80107a8:	d902      	bls.n	80107b0 <_free_r+0x7c>
 80107aa:	230c      	movs	r3, #12
 80107ac:	602b      	str	r3, [r5, #0]
 80107ae:	e7d3      	b.n	8010758 <_free_r+0x24>
 80107b0:	6820      	ldr	r0, [r4, #0]
 80107b2:	1821      	adds	r1, r4, r0
 80107b4:	428a      	cmp	r2, r1
 80107b6:	bf04      	itt	eq
 80107b8:	6811      	ldreq	r1, [r2, #0]
 80107ba:	6852      	ldreq	r2, [r2, #4]
 80107bc:	6062      	str	r2, [r4, #4]
 80107be:	bf04      	itt	eq
 80107c0:	1809      	addeq	r1, r1, r0
 80107c2:	6021      	streq	r1, [r4, #0]
 80107c4:	605c      	str	r4, [r3, #4]
 80107c6:	e7c7      	b.n	8010758 <_free_r+0x24>
 80107c8:	bd38      	pop	{r3, r4, r5, pc}
 80107ca:	bf00      	nop
 80107cc:	200008e8 	.word	0x200008e8

080107d0 <_malloc_r>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	1ccd      	adds	r5, r1, #3
 80107d4:	f025 0503 	bic.w	r5, r5, #3
 80107d8:	3508      	adds	r5, #8
 80107da:	2d0c      	cmp	r5, #12
 80107dc:	bf38      	it	cc
 80107de:	250c      	movcc	r5, #12
 80107e0:	2d00      	cmp	r5, #0
 80107e2:	4606      	mov	r6, r0
 80107e4:	db01      	blt.n	80107ea <_malloc_r+0x1a>
 80107e6:	42a9      	cmp	r1, r5
 80107e8:	d903      	bls.n	80107f2 <_malloc_r+0x22>
 80107ea:	230c      	movs	r3, #12
 80107ec:	6033      	str	r3, [r6, #0]
 80107ee:	2000      	movs	r0, #0
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	f000 fc09 	bl	8011008 <__malloc_lock>
 80107f6:	4a23      	ldr	r2, [pc, #140]	; (8010884 <_malloc_r+0xb4>)
 80107f8:	6814      	ldr	r4, [r2, #0]
 80107fa:	4621      	mov	r1, r4
 80107fc:	b991      	cbnz	r1, 8010824 <_malloc_r+0x54>
 80107fe:	4c22      	ldr	r4, [pc, #136]	; (8010888 <_malloc_r+0xb8>)
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	b91b      	cbnz	r3, 801080c <_malloc_r+0x3c>
 8010804:	4630      	mov	r0, r6
 8010806:	f000 fa3b 	bl	8010c80 <_sbrk_r>
 801080a:	6020      	str	r0, [r4, #0]
 801080c:	4629      	mov	r1, r5
 801080e:	4630      	mov	r0, r6
 8010810:	f000 fa36 	bl	8010c80 <_sbrk_r>
 8010814:	1c43      	adds	r3, r0, #1
 8010816:	d126      	bne.n	8010866 <_malloc_r+0x96>
 8010818:	230c      	movs	r3, #12
 801081a:	6033      	str	r3, [r6, #0]
 801081c:	4630      	mov	r0, r6
 801081e:	f000 fbf4 	bl	801100a <__malloc_unlock>
 8010822:	e7e4      	b.n	80107ee <_malloc_r+0x1e>
 8010824:	680b      	ldr	r3, [r1, #0]
 8010826:	1b5b      	subs	r3, r3, r5
 8010828:	d41a      	bmi.n	8010860 <_malloc_r+0x90>
 801082a:	2b0b      	cmp	r3, #11
 801082c:	d90f      	bls.n	801084e <_malloc_r+0x7e>
 801082e:	600b      	str	r3, [r1, #0]
 8010830:	50cd      	str	r5, [r1, r3]
 8010832:	18cc      	adds	r4, r1, r3
 8010834:	4630      	mov	r0, r6
 8010836:	f000 fbe8 	bl	801100a <__malloc_unlock>
 801083a:	f104 000b 	add.w	r0, r4, #11
 801083e:	1d23      	adds	r3, r4, #4
 8010840:	f020 0007 	bic.w	r0, r0, #7
 8010844:	1ac3      	subs	r3, r0, r3
 8010846:	d01b      	beq.n	8010880 <_malloc_r+0xb0>
 8010848:	425a      	negs	r2, r3
 801084a:	50e2      	str	r2, [r4, r3]
 801084c:	bd70      	pop	{r4, r5, r6, pc}
 801084e:	428c      	cmp	r4, r1
 8010850:	bf0d      	iteet	eq
 8010852:	6863      	ldreq	r3, [r4, #4]
 8010854:	684b      	ldrne	r3, [r1, #4]
 8010856:	6063      	strne	r3, [r4, #4]
 8010858:	6013      	streq	r3, [r2, #0]
 801085a:	bf18      	it	ne
 801085c:	460c      	movne	r4, r1
 801085e:	e7e9      	b.n	8010834 <_malloc_r+0x64>
 8010860:	460c      	mov	r4, r1
 8010862:	6849      	ldr	r1, [r1, #4]
 8010864:	e7ca      	b.n	80107fc <_malloc_r+0x2c>
 8010866:	1cc4      	adds	r4, r0, #3
 8010868:	f024 0403 	bic.w	r4, r4, #3
 801086c:	42a0      	cmp	r0, r4
 801086e:	d005      	beq.n	801087c <_malloc_r+0xac>
 8010870:	1a21      	subs	r1, r4, r0
 8010872:	4630      	mov	r0, r6
 8010874:	f000 fa04 	bl	8010c80 <_sbrk_r>
 8010878:	3001      	adds	r0, #1
 801087a:	d0cd      	beq.n	8010818 <_malloc_r+0x48>
 801087c:	6025      	str	r5, [r4, #0]
 801087e:	e7d9      	b.n	8010834 <_malloc_r+0x64>
 8010880:	bd70      	pop	{r4, r5, r6, pc}
 8010882:	bf00      	nop
 8010884:	200008e8 	.word	0x200008e8
 8010888:	200008ec 	.word	0x200008ec

0801088c <_printf_common>:
 801088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010890:	4691      	mov	r9, r2
 8010892:	461f      	mov	r7, r3
 8010894:	688a      	ldr	r2, [r1, #8]
 8010896:	690b      	ldr	r3, [r1, #16]
 8010898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801089c:	4293      	cmp	r3, r2
 801089e:	bfb8      	it	lt
 80108a0:	4613      	movlt	r3, r2
 80108a2:	f8c9 3000 	str.w	r3, [r9]
 80108a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108aa:	4606      	mov	r6, r0
 80108ac:	460c      	mov	r4, r1
 80108ae:	b112      	cbz	r2, 80108b6 <_printf_common+0x2a>
 80108b0:	3301      	adds	r3, #1
 80108b2:	f8c9 3000 	str.w	r3, [r9]
 80108b6:	6823      	ldr	r3, [r4, #0]
 80108b8:	0699      	lsls	r1, r3, #26
 80108ba:	bf42      	ittt	mi
 80108bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80108c0:	3302      	addmi	r3, #2
 80108c2:	f8c9 3000 	strmi.w	r3, [r9]
 80108c6:	6825      	ldr	r5, [r4, #0]
 80108c8:	f015 0506 	ands.w	r5, r5, #6
 80108cc:	d107      	bne.n	80108de <_printf_common+0x52>
 80108ce:	f104 0a19 	add.w	sl, r4, #25
 80108d2:	68e3      	ldr	r3, [r4, #12]
 80108d4:	f8d9 2000 	ldr.w	r2, [r9]
 80108d8:	1a9b      	subs	r3, r3, r2
 80108da:	429d      	cmp	r5, r3
 80108dc:	db29      	blt.n	8010932 <_printf_common+0xa6>
 80108de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80108e2:	6822      	ldr	r2, [r4, #0]
 80108e4:	3300      	adds	r3, #0
 80108e6:	bf18      	it	ne
 80108e8:	2301      	movne	r3, #1
 80108ea:	0692      	lsls	r2, r2, #26
 80108ec:	d42e      	bmi.n	801094c <_printf_common+0xc0>
 80108ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108f2:	4639      	mov	r1, r7
 80108f4:	4630      	mov	r0, r6
 80108f6:	47c0      	blx	r8
 80108f8:	3001      	adds	r0, #1
 80108fa:	d021      	beq.n	8010940 <_printf_common+0xb4>
 80108fc:	6823      	ldr	r3, [r4, #0]
 80108fe:	68e5      	ldr	r5, [r4, #12]
 8010900:	f8d9 2000 	ldr.w	r2, [r9]
 8010904:	f003 0306 	and.w	r3, r3, #6
 8010908:	2b04      	cmp	r3, #4
 801090a:	bf08      	it	eq
 801090c:	1aad      	subeq	r5, r5, r2
 801090e:	68a3      	ldr	r3, [r4, #8]
 8010910:	6922      	ldr	r2, [r4, #16]
 8010912:	bf0c      	ite	eq
 8010914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010918:	2500      	movne	r5, #0
 801091a:	4293      	cmp	r3, r2
 801091c:	bfc4      	itt	gt
 801091e:	1a9b      	subgt	r3, r3, r2
 8010920:	18ed      	addgt	r5, r5, r3
 8010922:	f04f 0900 	mov.w	r9, #0
 8010926:	341a      	adds	r4, #26
 8010928:	454d      	cmp	r5, r9
 801092a:	d11b      	bne.n	8010964 <_printf_common+0xd8>
 801092c:	2000      	movs	r0, #0
 801092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010932:	2301      	movs	r3, #1
 8010934:	4652      	mov	r2, sl
 8010936:	4639      	mov	r1, r7
 8010938:	4630      	mov	r0, r6
 801093a:	47c0      	blx	r8
 801093c:	3001      	adds	r0, #1
 801093e:	d103      	bne.n	8010948 <_printf_common+0xbc>
 8010940:	f04f 30ff 	mov.w	r0, #4294967295
 8010944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010948:	3501      	adds	r5, #1
 801094a:	e7c2      	b.n	80108d2 <_printf_common+0x46>
 801094c:	18e1      	adds	r1, r4, r3
 801094e:	1c5a      	adds	r2, r3, #1
 8010950:	2030      	movs	r0, #48	; 0x30
 8010952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010956:	4422      	add	r2, r4
 8010958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801095c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010960:	3302      	adds	r3, #2
 8010962:	e7c4      	b.n	80108ee <_printf_common+0x62>
 8010964:	2301      	movs	r3, #1
 8010966:	4622      	mov	r2, r4
 8010968:	4639      	mov	r1, r7
 801096a:	4630      	mov	r0, r6
 801096c:	47c0      	blx	r8
 801096e:	3001      	adds	r0, #1
 8010970:	d0e6      	beq.n	8010940 <_printf_common+0xb4>
 8010972:	f109 0901 	add.w	r9, r9, #1
 8010976:	e7d7      	b.n	8010928 <_printf_common+0x9c>

08010978 <_printf_i>:
 8010978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801097c:	4617      	mov	r7, r2
 801097e:	7e0a      	ldrb	r2, [r1, #24]
 8010980:	b085      	sub	sp, #20
 8010982:	2a6e      	cmp	r2, #110	; 0x6e
 8010984:	4698      	mov	r8, r3
 8010986:	4606      	mov	r6, r0
 8010988:	460c      	mov	r4, r1
 801098a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801098c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8010990:	f000 80bc 	beq.w	8010b0c <_printf_i+0x194>
 8010994:	d81a      	bhi.n	80109cc <_printf_i+0x54>
 8010996:	2a63      	cmp	r2, #99	; 0x63
 8010998:	d02e      	beq.n	80109f8 <_printf_i+0x80>
 801099a:	d80a      	bhi.n	80109b2 <_printf_i+0x3a>
 801099c:	2a00      	cmp	r2, #0
 801099e:	f000 80c8 	beq.w	8010b32 <_printf_i+0x1ba>
 80109a2:	2a58      	cmp	r2, #88	; 0x58
 80109a4:	f000 808a 	beq.w	8010abc <_printf_i+0x144>
 80109a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80109b0:	e02a      	b.n	8010a08 <_printf_i+0x90>
 80109b2:	2a64      	cmp	r2, #100	; 0x64
 80109b4:	d001      	beq.n	80109ba <_printf_i+0x42>
 80109b6:	2a69      	cmp	r2, #105	; 0x69
 80109b8:	d1f6      	bne.n	80109a8 <_printf_i+0x30>
 80109ba:	6821      	ldr	r1, [r4, #0]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80109c2:	d023      	beq.n	8010a0c <_printf_i+0x94>
 80109c4:	1d11      	adds	r1, r2, #4
 80109c6:	6019      	str	r1, [r3, #0]
 80109c8:	6813      	ldr	r3, [r2, #0]
 80109ca:	e027      	b.n	8010a1c <_printf_i+0xa4>
 80109cc:	2a73      	cmp	r2, #115	; 0x73
 80109ce:	f000 80b4 	beq.w	8010b3a <_printf_i+0x1c2>
 80109d2:	d808      	bhi.n	80109e6 <_printf_i+0x6e>
 80109d4:	2a6f      	cmp	r2, #111	; 0x6f
 80109d6:	d02a      	beq.n	8010a2e <_printf_i+0xb6>
 80109d8:	2a70      	cmp	r2, #112	; 0x70
 80109da:	d1e5      	bne.n	80109a8 <_printf_i+0x30>
 80109dc:	680a      	ldr	r2, [r1, #0]
 80109de:	f042 0220 	orr.w	r2, r2, #32
 80109e2:	600a      	str	r2, [r1, #0]
 80109e4:	e003      	b.n	80109ee <_printf_i+0x76>
 80109e6:	2a75      	cmp	r2, #117	; 0x75
 80109e8:	d021      	beq.n	8010a2e <_printf_i+0xb6>
 80109ea:	2a78      	cmp	r2, #120	; 0x78
 80109ec:	d1dc      	bne.n	80109a8 <_printf_i+0x30>
 80109ee:	2278      	movs	r2, #120	; 0x78
 80109f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80109f4:	496e      	ldr	r1, [pc, #440]	; (8010bb0 <_printf_i+0x238>)
 80109f6:	e064      	b.n	8010ac2 <_printf_i+0x14a>
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80109fe:	1d11      	adds	r1, r2, #4
 8010a00:	6019      	str	r1, [r3, #0]
 8010a02:	6813      	ldr	r3, [r2, #0]
 8010a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e0a3      	b.n	8010b54 <_printf_i+0x1dc>
 8010a0c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8010a10:	f102 0104 	add.w	r1, r2, #4
 8010a14:	6019      	str	r1, [r3, #0]
 8010a16:	d0d7      	beq.n	80109c8 <_printf_i+0x50>
 8010a18:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	da03      	bge.n	8010a28 <_printf_i+0xb0>
 8010a20:	222d      	movs	r2, #45	; 0x2d
 8010a22:	425b      	negs	r3, r3
 8010a24:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010a28:	4962      	ldr	r1, [pc, #392]	; (8010bb4 <_printf_i+0x23c>)
 8010a2a:	220a      	movs	r2, #10
 8010a2c:	e017      	b.n	8010a5e <_printf_i+0xe6>
 8010a2e:	6820      	ldr	r0, [r4, #0]
 8010a30:	6819      	ldr	r1, [r3, #0]
 8010a32:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010a36:	d003      	beq.n	8010a40 <_printf_i+0xc8>
 8010a38:	1d08      	adds	r0, r1, #4
 8010a3a:	6018      	str	r0, [r3, #0]
 8010a3c:	680b      	ldr	r3, [r1, #0]
 8010a3e:	e006      	b.n	8010a4e <_printf_i+0xd6>
 8010a40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a44:	f101 0004 	add.w	r0, r1, #4
 8010a48:	6018      	str	r0, [r3, #0]
 8010a4a:	d0f7      	beq.n	8010a3c <_printf_i+0xc4>
 8010a4c:	880b      	ldrh	r3, [r1, #0]
 8010a4e:	4959      	ldr	r1, [pc, #356]	; (8010bb4 <_printf_i+0x23c>)
 8010a50:	2a6f      	cmp	r2, #111	; 0x6f
 8010a52:	bf14      	ite	ne
 8010a54:	220a      	movne	r2, #10
 8010a56:	2208      	moveq	r2, #8
 8010a58:	2000      	movs	r0, #0
 8010a5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8010a5e:	6865      	ldr	r5, [r4, #4]
 8010a60:	60a5      	str	r5, [r4, #8]
 8010a62:	2d00      	cmp	r5, #0
 8010a64:	f2c0 809c 	blt.w	8010ba0 <_printf_i+0x228>
 8010a68:	6820      	ldr	r0, [r4, #0]
 8010a6a:	f020 0004 	bic.w	r0, r0, #4
 8010a6e:	6020      	str	r0, [r4, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d13f      	bne.n	8010af4 <_printf_i+0x17c>
 8010a74:	2d00      	cmp	r5, #0
 8010a76:	f040 8095 	bne.w	8010ba4 <_printf_i+0x22c>
 8010a7a:	4675      	mov	r5, lr
 8010a7c:	2a08      	cmp	r2, #8
 8010a7e:	d10b      	bne.n	8010a98 <_printf_i+0x120>
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	07da      	lsls	r2, r3, #31
 8010a84:	d508      	bpl.n	8010a98 <_printf_i+0x120>
 8010a86:	6923      	ldr	r3, [r4, #16]
 8010a88:	6862      	ldr	r2, [r4, #4]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	bfde      	ittt	le
 8010a8e:	2330      	movle	r3, #48	; 0x30
 8010a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a98:	ebae 0305 	sub.w	r3, lr, r5
 8010a9c:	6123      	str	r3, [r4, #16]
 8010a9e:	f8cd 8000 	str.w	r8, [sp]
 8010aa2:	463b      	mov	r3, r7
 8010aa4:	aa03      	add	r2, sp, #12
 8010aa6:	4621      	mov	r1, r4
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7ff feef 	bl	801088c <_printf_common>
 8010aae:	3001      	adds	r0, #1
 8010ab0:	d155      	bne.n	8010b5e <_printf_i+0x1e6>
 8010ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab6:	b005      	add	sp, #20
 8010ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010abc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8010ac0:	493c      	ldr	r1, [pc, #240]	; (8010bb4 <_printf_i+0x23c>)
 8010ac2:	6822      	ldr	r2, [r4, #0]
 8010ac4:	6818      	ldr	r0, [r3, #0]
 8010ac6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010aca:	f100 0504 	add.w	r5, r0, #4
 8010ace:	601d      	str	r5, [r3, #0]
 8010ad0:	d001      	beq.n	8010ad6 <_printf_i+0x15e>
 8010ad2:	6803      	ldr	r3, [r0, #0]
 8010ad4:	e002      	b.n	8010adc <_printf_i+0x164>
 8010ad6:	0655      	lsls	r5, r2, #25
 8010ad8:	d5fb      	bpl.n	8010ad2 <_printf_i+0x15a>
 8010ada:	8803      	ldrh	r3, [r0, #0]
 8010adc:	07d0      	lsls	r0, r2, #31
 8010ade:	bf44      	itt	mi
 8010ae0:	f042 0220 	orrmi.w	r2, r2, #32
 8010ae4:	6022      	strmi	r2, [r4, #0]
 8010ae6:	b91b      	cbnz	r3, 8010af0 <_printf_i+0x178>
 8010ae8:	6822      	ldr	r2, [r4, #0]
 8010aea:	f022 0220 	bic.w	r2, r2, #32
 8010aee:	6022      	str	r2, [r4, #0]
 8010af0:	2210      	movs	r2, #16
 8010af2:	e7b1      	b.n	8010a58 <_printf_i+0xe0>
 8010af4:	4675      	mov	r5, lr
 8010af6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010afa:	fb02 3310 	mls	r3, r2, r0, r3
 8010afe:	5ccb      	ldrb	r3, [r1, r3]
 8010b00:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010b04:	4603      	mov	r3, r0
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d1f5      	bne.n	8010af6 <_printf_i+0x17e>
 8010b0a:	e7b7      	b.n	8010a7c <_printf_i+0x104>
 8010b0c:	6808      	ldr	r0, [r1, #0]
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	6949      	ldr	r1, [r1, #20]
 8010b12:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010b16:	d004      	beq.n	8010b22 <_printf_i+0x1aa>
 8010b18:	1d10      	adds	r0, r2, #4
 8010b1a:	6018      	str	r0, [r3, #0]
 8010b1c:	6813      	ldr	r3, [r2, #0]
 8010b1e:	6019      	str	r1, [r3, #0]
 8010b20:	e007      	b.n	8010b32 <_printf_i+0x1ba>
 8010b22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b26:	f102 0004 	add.w	r0, r2, #4
 8010b2a:	6018      	str	r0, [r3, #0]
 8010b2c:	6813      	ldr	r3, [r2, #0]
 8010b2e:	d0f6      	beq.n	8010b1e <_printf_i+0x1a6>
 8010b30:	8019      	strh	r1, [r3, #0]
 8010b32:	2300      	movs	r3, #0
 8010b34:	6123      	str	r3, [r4, #16]
 8010b36:	4675      	mov	r5, lr
 8010b38:	e7b1      	b.n	8010a9e <_printf_i+0x126>
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	1d11      	adds	r1, r2, #4
 8010b3e:	6019      	str	r1, [r3, #0]
 8010b40:	6815      	ldr	r5, [r2, #0]
 8010b42:	6862      	ldr	r2, [r4, #4]
 8010b44:	2100      	movs	r1, #0
 8010b46:	4628      	mov	r0, r5
 8010b48:	f7ef fb4a 	bl	80001e0 <memchr>
 8010b4c:	b108      	cbz	r0, 8010b52 <_printf_i+0x1da>
 8010b4e:	1b40      	subs	r0, r0, r5
 8010b50:	6060      	str	r0, [r4, #4]
 8010b52:	6863      	ldr	r3, [r4, #4]
 8010b54:	6123      	str	r3, [r4, #16]
 8010b56:	2300      	movs	r3, #0
 8010b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b5c:	e79f      	b.n	8010a9e <_printf_i+0x126>
 8010b5e:	6923      	ldr	r3, [r4, #16]
 8010b60:	462a      	mov	r2, r5
 8010b62:	4639      	mov	r1, r7
 8010b64:	4630      	mov	r0, r6
 8010b66:	47c0      	blx	r8
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d0a2      	beq.n	8010ab2 <_printf_i+0x13a>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	079b      	lsls	r3, r3, #30
 8010b70:	d507      	bpl.n	8010b82 <_printf_i+0x20a>
 8010b72:	2500      	movs	r5, #0
 8010b74:	f104 0919 	add.w	r9, r4, #25
 8010b78:	68e3      	ldr	r3, [r4, #12]
 8010b7a:	9a03      	ldr	r2, [sp, #12]
 8010b7c:	1a9b      	subs	r3, r3, r2
 8010b7e:	429d      	cmp	r5, r3
 8010b80:	db05      	blt.n	8010b8e <_printf_i+0x216>
 8010b82:	68e0      	ldr	r0, [r4, #12]
 8010b84:	9b03      	ldr	r3, [sp, #12]
 8010b86:	4298      	cmp	r0, r3
 8010b88:	bfb8      	it	lt
 8010b8a:	4618      	movlt	r0, r3
 8010b8c:	e793      	b.n	8010ab6 <_printf_i+0x13e>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	464a      	mov	r2, r9
 8010b92:	4639      	mov	r1, r7
 8010b94:	4630      	mov	r0, r6
 8010b96:	47c0      	blx	r8
 8010b98:	3001      	adds	r0, #1
 8010b9a:	d08a      	beq.n	8010ab2 <_printf_i+0x13a>
 8010b9c:	3501      	adds	r5, #1
 8010b9e:	e7eb      	b.n	8010b78 <_printf_i+0x200>
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1a7      	bne.n	8010af4 <_printf_i+0x17c>
 8010ba4:	780b      	ldrb	r3, [r1, #0]
 8010ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bae:	e765      	b.n	8010a7c <_printf_i+0x104>
 8010bb0:	080116e9 	.word	0x080116e9
 8010bb4:	080116d8 	.word	0x080116d8

08010bb8 <_puts_r>:
 8010bb8:	b570      	push	{r4, r5, r6, lr}
 8010bba:	460e      	mov	r6, r1
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	b118      	cbz	r0, 8010bc8 <_puts_r+0x10>
 8010bc0:	6983      	ldr	r3, [r0, #24]
 8010bc2:	b90b      	cbnz	r3, 8010bc8 <_puts_r+0x10>
 8010bc4:	f7ff fc88 	bl	80104d8 <__sinit>
 8010bc8:	69ab      	ldr	r3, [r5, #24]
 8010bca:	68ac      	ldr	r4, [r5, #8]
 8010bcc:	b913      	cbnz	r3, 8010bd4 <_puts_r+0x1c>
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f7ff fc82 	bl	80104d8 <__sinit>
 8010bd4:	4b23      	ldr	r3, [pc, #140]	; (8010c64 <_puts_r+0xac>)
 8010bd6:	429c      	cmp	r4, r3
 8010bd8:	d117      	bne.n	8010c0a <_puts_r+0x52>
 8010bda:	686c      	ldr	r4, [r5, #4]
 8010bdc:	89a3      	ldrh	r3, [r4, #12]
 8010bde:	071b      	lsls	r3, r3, #28
 8010be0:	d51d      	bpl.n	8010c1e <_puts_r+0x66>
 8010be2:	6923      	ldr	r3, [r4, #16]
 8010be4:	b1db      	cbz	r3, 8010c1e <_puts_r+0x66>
 8010be6:	3e01      	subs	r6, #1
 8010be8:	68a3      	ldr	r3, [r4, #8]
 8010bea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010bee:	3b01      	subs	r3, #1
 8010bf0:	60a3      	str	r3, [r4, #8]
 8010bf2:	b9e9      	cbnz	r1, 8010c30 <_puts_r+0x78>
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	da2e      	bge.n	8010c56 <_puts_r+0x9e>
 8010bf8:	4622      	mov	r2, r4
 8010bfa:	210a      	movs	r1, #10
 8010bfc:	4628      	mov	r0, r5
 8010bfe:	f000 f8d3 	bl	8010da8 <__swbuf_r>
 8010c02:	3001      	adds	r0, #1
 8010c04:	d011      	beq.n	8010c2a <_puts_r+0x72>
 8010c06:	200a      	movs	r0, #10
 8010c08:	bd70      	pop	{r4, r5, r6, pc}
 8010c0a:	4b17      	ldr	r3, [pc, #92]	; (8010c68 <_puts_r+0xb0>)
 8010c0c:	429c      	cmp	r4, r3
 8010c0e:	d101      	bne.n	8010c14 <_puts_r+0x5c>
 8010c10:	68ac      	ldr	r4, [r5, #8]
 8010c12:	e7e3      	b.n	8010bdc <_puts_r+0x24>
 8010c14:	4b15      	ldr	r3, [pc, #84]	; (8010c6c <_puts_r+0xb4>)
 8010c16:	429c      	cmp	r4, r3
 8010c18:	bf08      	it	eq
 8010c1a:	68ec      	ldreq	r4, [r5, #12]
 8010c1c:	e7de      	b.n	8010bdc <_puts_r+0x24>
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4628      	mov	r0, r5
 8010c22:	f000 f925 	bl	8010e70 <__swsetup_r>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d0dd      	beq.n	8010be6 <_puts_r+0x2e>
 8010c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2e:	bd70      	pop	{r4, r5, r6, pc}
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	da04      	bge.n	8010c3e <_puts_r+0x86>
 8010c34:	69a2      	ldr	r2, [r4, #24]
 8010c36:	4293      	cmp	r3, r2
 8010c38:	db06      	blt.n	8010c48 <_puts_r+0x90>
 8010c3a:	290a      	cmp	r1, #10
 8010c3c:	d004      	beq.n	8010c48 <_puts_r+0x90>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	1c5a      	adds	r2, r3, #1
 8010c42:	6022      	str	r2, [r4, #0]
 8010c44:	7019      	strb	r1, [r3, #0]
 8010c46:	e7cf      	b.n	8010be8 <_puts_r+0x30>
 8010c48:	4622      	mov	r2, r4
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f000 f8ac 	bl	8010da8 <__swbuf_r>
 8010c50:	3001      	adds	r0, #1
 8010c52:	d1c9      	bne.n	8010be8 <_puts_r+0x30>
 8010c54:	e7e9      	b.n	8010c2a <_puts_r+0x72>
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	200a      	movs	r0, #10
 8010c5a:	1c5a      	adds	r2, r3, #1
 8010c5c:	6022      	str	r2, [r4, #0]
 8010c5e:	7018      	strb	r0, [r3, #0]
 8010c60:	bd70      	pop	{r4, r5, r6, pc}
 8010c62:	bf00      	nop
 8010c64:	08011694 	.word	0x08011694
 8010c68:	080116b4 	.word	0x080116b4
 8010c6c:	08011674 	.word	0x08011674

08010c70 <puts>:
 8010c70:	4b02      	ldr	r3, [pc, #8]	; (8010c7c <puts+0xc>)
 8010c72:	4601      	mov	r1, r0
 8010c74:	6818      	ldr	r0, [r3, #0]
 8010c76:	f7ff bf9f 	b.w	8010bb8 <_puts_r>
 8010c7a:	bf00      	nop
 8010c7c:	2000030c 	.word	0x2000030c

08010c80 <_sbrk_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	4c06      	ldr	r4, [pc, #24]	; (8010c9c <_sbrk_r+0x1c>)
 8010c84:	2300      	movs	r3, #0
 8010c86:	4605      	mov	r5, r0
 8010c88:	4608      	mov	r0, r1
 8010c8a:	6023      	str	r3, [r4, #0]
 8010c8c:	f000 fb78 	bl	8011380 <_sbrk>
 8010c90:	1c43      	adds	r3, r0, #1
 8010c92:	d102      	bne.n	8010c9a <_sbrk_r+0x1a>
 8010c94:	6823      	ldr	r3, [r4, #0]
 8010c96:	b103      	cbz	r3, 8010c9a <_sbrk_r+0x1a>
 8010c98:	602b      	str	r3, [r5, #0]
 8010c9a:	bd38      	pop	{r3, r4, r5, pc}
 8010c9c:	20000e5c 	.word	0x20000e5c

08010ca0 <siprintf>:
 8010ca0:	b40e      	push	{r1, r2, r3}
 8010ca2:	b500      	push	{lr}
 8010ca4:	b09c      	sub	sp, #112	; 0x70
 8010ca6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8010caa:	ab1d      	add	r3, sp, #116	; 0x74
 8010cac:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010cb0:	9002      	str	r0, [sp, #8]
 8010cb2:	9006      	str	r0, [sp, #24]
 8010cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010cb8:	480a      	ldr	r0, [pc, #40]	; (8010ce4 <siprintf+0x44>)
 8010cba:	9104      	str	r1, [sp, #16]
 8010cbc:	9107      	str	r1, [sp, #28]
 8010cbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cc6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010cca:	6800      	ldr	r0, [r0, #0]
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	a902      	add	r1, sp, #8
 8010cd0:	f000 fa1e 	bl	8011110 <_svfiprintf_r>
 8010cd4:	9b02      	ldr	r3, [sp, #8]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	701a      	strb	r2, [r3, #0]
 8010cda:	b01c      	add	sp, #112	; 0x70
 8010cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ce0:	b003      	add	sp, #12
 8010ce2:	4770      	bx	lr
 8010ce4:	2000030c 	.word	0x2000030c

08010ce8 <__sread>:
 8010ce8:	b510      	push	{r4, lr}
 8010cea:	460c      	mov	r4, r1
 8010cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cf0:	f000 fb02 	bl	80112f8 <_read_r>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	bfab      	itete	ge
 8010cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8010cfc:	181b      	addge	r3, r3, r0
 8010cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d02:	bfac      	ite	ge
 8010d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d06:	81a3      	strhlt	r3, [r4, #12]
 8010d08:	bd10      	pop	{r4, pc}

08010d0a <__swrite>:
 8010d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d0e:	461f      	mov	r7, r3
 8010d10:	898b      	ldrh	r3, [r1, #12]
 8010d12:	05db      	lsls	r3, r3, #23
 8010d14:	4605      	mov	r5, r0
 8010d16:	460c      	mov	r4, r1
 8010d18:	4616      	mov	r6, r2
 8010d1a:	d505      	bpl.n	8010d28 <__swrite+0x1e>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	2200      	movs	r2, #0
 8010d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d24:	f000 f944 	bl	8010fb0 <_lseek_r>
 8010d28:	89a3      	ldrh	r3, [r4, #12]
 8010d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d32:	81a3      	strh	r3, [r4, #12]
 8010d34:	4632      	mov	r2, r6
 8010d36:	463b      	mov	r3, r7
 8010d38:	4628      	mov	r0, r5
 8010d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3e:	f000 b885 	b.w	8010e4c <_write_r>

08010d42 <__sseek>:
 8010d42:	b510      	push	{r4, lr}
 8010d44:	460c      	mov	r4, r1
 8010d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d4a:	f000 f931 	bl	8010fb0 <_lseek_r>
 8010d4e:	1c43      	adds	r3, r0, #1
 8010d50:	89a3      	ldrh	r3, [r4, #12]
 8010d52:	bf15      	itete	ne
 8010d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d5e:	81a3      	strheq	r3, [r4, #12]
 8010d60:	bf18      	it	ne
 8010d62:	81a3      	strhne	r3, [r4, #12]
 8010d64:	bd10      	pop	{r4, pc}

08010d66 <__sclose>:
 8010d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d6a:	f000 b8ef 	b.w	8010f4c <_close_r>

08010d6e <strcpy>:
 8010d6e:	4603      	mov	r3, r0
 8010d70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d74:	f803 2b01 	strb.w	r2, [r3], #1
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	d1f9      	bne.n	8010d70 <strcpy+0x2>
 8010d7c:	4770      	bx	lr

08010d7e <strncpy>:
 8010d7e:	b570      	push	{r4, r5, r6, lr}
 8010d80:	4604      	mov	r4, r0
 8010d82:	b902      	cbnz	r2, 8010d86 <strncpy+0x8>
 8010d84:	bd70      	pop	{r4, r5, r6, pc}
 8010d86:	4623      	mov	r3, r4
 8010d88:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010d8c:	f803 5b01 	strb.w	r5, [r3], #1
 8010d90:	1e56      	subs	r6, r2, #1
 8010d92:	b91d      	cbnz	r5, 8010d9c <strncpy+0x1e>
 8010d94:	4414      	add	r4, r2
 8010d96:	42a3      	cmp	r3, r4
 8010d98:	d103      	bne.n	8010da2 <strncpy+0x24>
 8010d9a:	bd70      	pop	{r4, r5, r6, pc}
 8010d9c:	461c      	mov	r4, r3
 8010d9e:	4632      	mov	r2, r6
 8010da0:	e7ef      	b.n	8010d82 <strncpy+0x4>
 8010da2:	f803 5b01 	strb.w	r5, [r3], #1
 8010da6:	e7f6      	b.n	8010d96 <strncpy+0x18>

08010da8 <__swbuf_r>:
 8010da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010daa:	460e      	mov	r6, r1
 8010dac:	4614      	mov	r4, r2
 8010dae:	4605      	mov	r5, r0
 8010db0:	b118      	cbz	r0, 8010dba <__swbuf_r+0x12>
 8010db2:	6983      	ldr	r3, [r0, #24]
 8010db4:	b90b      	cbnz	r3, 8010dba <__swbuf_r+0x12>
 8010db6:	f7ff fb8f 	bl	80104d8 <__sinit>
 8010dba:	4b21      	ldr	r3, [pc, #132]	; (8010e40 <__swbuf_r+0x98>)
 8010dbc:	429c      	cmp	r4, r3
 8010dbe:	d12a      	bne.n	8010e16 <__swbuf_r+0x6e>
 8010dc0:	686c      	ldr	r4, [r5, #4]
 8010dc2:	69a3      	ldr	r3, [r4, #24]
 8010dc4:	60a3      	str	r3, [r4, #8]
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	071a      	lsls	r2, r3, #28
 8010dca:	d52e      	bpl.n	8010e2a <__swbuf_r+0x82>
 8010dcc:	6923      	ldr	r3, [r4, #16]
 8010dce:	b363      	cbz	r3, 8010e2a <__swbuf_r+0x82>
 8010dd0:	6923      	ldr	r3, [r4, #16]
 8010dd2:	6820      	ldr	r0, [r4, #0]
 8010dd4:	1ac0      	subs	r0, r0, r3
 8010dd6:	6963      	ldr	r3, [r4, #20]
 8010dd8:	b2f6      	uxtb	r6, r6
 8010dda:	4298      	cmp	r0, r3
 8010ddc:	4637      	mov	r7, r6
 8010dde:	db04      	blt.n	8010dea <__swbuf_r+0x42>
 8010de0:	4621      	mov	r1, r4
 8010de2:	4628      	mov	r0, r5
 8010de4:	f7ff fb0e 	bl	8010404 <_fflush_r>
 8010de8:	bb28      	cbnz	r0, 8010e36 <__swbuf_r+0x8e>
 8010dea:	68a3      	ldr	r3, [r4, #8]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	60a3      	str	r3, [r4, #8]
 8010df0:	6823      	ldr	r3, [r4, #0]
 8010df2:	1c5a      	adds	r2, r3, #1
 8010df4:	6022      	str	r2, [r4, #0]
 8010df6:	701e      	strb	r6, [r3, #0]
 8010df8:	6963      	ldr	r3, [r4, #20]
 8010dfa:	3001      	adds	r0, #1
 8010dfc:	4298      	cmp	r0, r3
 8010dfe:	d004      	beq.n	8010e0a <__swbuf_r+0x62>
 8010e00:	89a3      	ldrh	r3, [r4, #12]
 8010e02:	07db      	lsls	r3, r3, #31
 8010e04:	d519      	bpl.n	8010e3a <__swbuf_r+0x92>
 8010e06:	2e0a      	cmp	r6, #10
 8010e08:	d117      	bne.n	8010e3a <__swbuf_r+0x92>
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f7ff faf9 	bl	8010404 <_fflush_r>
 8010e12:	b190      	cbz	r0, 8010e3a <__swbuf_r+0x92>
 8010e14:	e00f      	b.n	8010e36 <__swbuf_r+0x8e>
 8010e16:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <__swbuf_r+0x9c>)
 8010e18:	429c      	cmp	r4, r3
 8010e1a:	d101      	bne.n	8010e20 <__swbuf_r+0x78>
 8010e1c:	68ac      	ldr	r4, [r5, #8]
 8010e1e:	e7d0      	b.n	8010dc2 <__swbuf_r+0x1a>
 8010e20:	4b09      	ldr	r3, [pc, #36]	; (8010e48 <__swbuf_r+0xa0>)
 8010e22:	429c      	cmp	r4, r3
 8010e24:	bf08      	it	eq
 8010e26:	68ec      	ldreq	r4, [r5, #12]
 8010e28:	e7cb      	b.n	8010dc2 <__swbuf_r+0x1a>
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	f000 f81f 	bl	8010e70 <__swsetup_r>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d0cc      	beq.n	8010dd0 <__swbuf_r+0x28>
 8010e36:	f04f 37ff 	mov.w	r7, #4294967295
 8010e3a:	4638      	mov	r0, r7
 8010e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	08011694 	.word	0x08011694
 8010e44:	080116b4 	.word	0x080116b4
 8010e48:	08011674 	.word	0x08011674

08010e4c <_write_r>:
 8010e4c:	b538      	push	{r3, r4, r5, lr}
 8010e4e:	4c07      	ldr	r4, [pc, #28]	; (8010e6c <_write_r+0x20>)
 8010e50:	4605      	mov	r5, r0
 8010e52:	4608      	mov	r0, r1
 8010e54:	4611      	mov	r1, r2
 8010e56:	2200      	movs	r2, #0
 8010e58:	6022      	str	r2, [r4, #0]
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	f7f3 ff48 	bl	8004cf0 <_write>
 8010e60:	1c43      	adds	r3, r0, #1
 8010e62:	d102      	bne.n	8010e6a <_write_r+0x1e>
 8010e64:	6823      	ldr	r3, [r4, #0]
 8010e66:	b103      	cbz	r3, 8010e6a <_write_r+0x1e>
 8010e68:	602b      	str	r3, [r5, #0]
 8010e6a:	bd38      	pop	{r3, r4, r5, pc}
 8010e6c:	20000e5c 	.word	0x20000e5c

08010e70 <__swsetup_r>:
 8010e70:	4b32      	ldr	r3, [pc, #200]	; (8010f3c <__swsetup_r+0xcc>)
 8010e72:	b570      	push	{r4, r5, r6, lr}
 8010e74:	681d      	ldr	r5, [r3, #0]
 8010e76:	4606      	mov	r6, r0
 8010e78:	460c      	mov	r4, r1
 8010e7a:	b125      	cbz	r5, 8010e86 <__swsetup_r+0x16>
 8010e7c:	69ab      	ldr	r3, [r5, #24]
 8010e7e:	b913      	cbnz	r3, 8010e86 <__swsetup_r+0x16>
 8010e80:	4628      	mov	r0, r5
 8010e82:	f7ff fb29 	bl	80104d8 <__sinit>
 8010e86:	4b2e      	ldr	r3, [pc, #184]	; (8010f40 <__swsetup_r+0xd0>)
 8010e88:	429c      	cmp	r4, r3
 8010e8a:	d10f      	bne.n	8010eac <__swsetup_r+0x3c>
 8010e8c:	686c      	ldr	r4, [r5, #4]
 8010e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	0715      	lsls	r5, r2, #28
 8010e96:	d42c      	bmi.n	8010ef2 <__swsetup_r+0x82>
 8010e98:	06d0      	lsls	r0, r2, #27
 8010e9a:	d411      	bmi.n	8010ec0 <__swsetup_r+0x50>
 8010e9c:	2209      	movs	r2, #9
 8010e9e:	6032      	str	r2, [r6, #0]
 8010ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ea4:	81a3      	strh	r3, [r4, #12]
 8010ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eaa:	bd70      	pop	{r4, r5, r6, pc}
 8010eac:	4b25      	ldr	r3, [pc, #148]	; (8010f44 <__swsetup_r+0xd4>)
 8010eae:	429c      	cmp	r4, r3
 8010eb0:	d101      	bne.n	8010eb6 <__swsetup_r+0x46>
 8010eb2:	68ac      	ldr	r4, [r5, #8]
 8010eb4:	e7eb      	b.n	8010e8e <__swsetup_r+0x1e>
 8010eb6:	4b24      	ldr	r3, [pc, #144]	; (8010f48 <__swsetup_r+0xd8>)
 8010eb8:	429c      	cmp	r4, r3
 8010eba:	bf08      	it	eq
 8010ebc:	68ec      	ldreq	r4, [r5, #12]
 8010ebe:	e7e6      	b.n	8010e8e <__swsetup_r+0x1e>
 8010ec0:	0751      	lsls	r1, r2, #29
 8010ec2:	d512      	bpl.n	8010eea <__swsetup_r+0x7a>
 8010ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ec6:	b141      	cbz	r1, 8010eda <__swsetup_r+0x6a>
 8010ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ecc:	4299      	cmp	r1, r3
 8010ece:	d002      	beq.n	8010ed6 <__swsetup_r+0x66>
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f7ff fc2f 	bl	8010734 <_free_r>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8010eda:	89a3      	ldrh	r3, [r4, #12]
 8010edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010ee0:	81a3      	strh	r3, [r4, #12]
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	6063      	str	r3, [r4, #4]
 8010ee6:	6923      	ldr	r3, [r4, #16]
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	89a3      	ldrh	r3, [r4, #12]
 8010eec:	f043 0308 	orr.w	r3, r3, #8
 8010ef0:	81a3      	strh	r3, [r4, #12]
 8010ef2:	6923      	ldr	r3, [r4, #16]
 8010ef4:	b94b      	cbnz	r3, 8010f0a <__swsetup_r+0x9a>
 8010ef6:	89a3      	ldrh	r3, [r4, #12]
 8010ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f00:	d003      	beq.n	8010f0a <__swsetup_r+0x9a>
 8010f02:	4621      	mov	r1, r4
 8010f04:	4630      	mov	r0, r6
 8010f06:	f7ff fbb9 	bl	801067c <__smakebuf_r>
 8010f0a:	89a2      	ldrh	r2, [r4, #12]
 8010f0c:	f012 0301 	ands.w	r3, r2, #1
 8010f10:	d00c      	beq.n	8010f2c <__swsetup_r+0xbc>
 8010f12:	2300      	movs	r3, #0
 8010f14:	60a3      	str	r3, [r4, #8]
 8010f16:	6963      	ldr	r3, [r4, #20]
 8010f18:	425b      	negs	r3, r3
 8010f1a:	61a3      	str	r3, [r4, #24]
 8010f1c:	6923      	ldr	r3, [r4, #16]
 8010f1e:	b953      	cbnz	r3, 8010f36 <__swsetup_r+0xc6>
 8010f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010f28:	d1ba      	bne.n	8010ea0 <__swsetup_r+0x30>
 8010f2a:	bd70      	pop	{r4, r5, r6, pc}
 8010f2c:	0792      	lsls	r2, r2, #30
 8010f2e:	bf58      	it	pl
 8010f30:	6963      	ldrpl	r3, [r4, #20]
 8010f32:	60a3      	str	r3, [r4, #8]
 8010f34:	e7f2      	b.n	8010f1c <__swsetup_r+0xac>
 8010f36:	2000      	movs	r0, #0
 8010f38:	e7f7      	b.n	8010f2a <__swsetup_r+0xba>
 8010f3a:	bf00      	nop
 8010f3c:	2000030c 	.word	0x2000030c
 8010f40:	08011694 	.word	0x08011694
 8010f44:	080116b4 	.word	0x080116b4
 8010f48:	08011674 	.word	0x08011674

08010f4c <_close_r>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	4c06      	ldr	r4, [pc, #24]	; (8010f68 <_close_r+0x1c>)
 8010f50:	2300      	movs	r3, #0
 8010f52:	4605      	mov	r5, r0
 8010f54:	4608      	mov	r0, r1
 8010f56:	6023      	str	r3, [r4, #0]
 8010f58:	f000 f9ea 	bl	8011330 <_close>
 8010f5c:	1c43      	adds	r3, r0, #1
 8010f5e:	d102      	bne.n	8010f66 <_close_r+0x1a>
 8010f60:	6823      	ldr	r3, [r4, #0]
 8010f62:	b103      	cbz	r3, 8010f66 <_close_r+0x1a>
 8010f64:	602b      	str	r3, [r5, #0]
 8010f66:	bd38      	pop	{r3, r4, r5, pc}
 8010f68:	20000e5c 	.word	0x20000e5c

08010f6c <_fstat_r>:
 8010f6c:	b538      	push	{r3, r4, r5, lr}
 8010f6e:	4c07      	ldr	r4, [pc, #28]	; (8010f8c <_fstat_r+0x20>)
 8010f70:	2300      	movs	r3, #0
 8010f72:	4605      	mov	r5, r0
 8010f74:	4608      	mov	r0, r1
 8010f76:	4611      	mov	r1, r2
 8010f78:	6023      	str	r3, [r4, #0]
 8010f7a:	f000 f9e1 	bl	8011340 <_fstat>
 8010f7e:	1c43      	adds	r3, r0, #1
 8010f80:	d102      	bne.n	8010f88 <_fstat_r+0x1c>
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	b103      	cbz	r3, 8010f88 <_fstat_r+0x1c>
 8010f86:	602b      	str	r3, [r5, #0]
 8010f88:	bd38      	pop	{r3, r4, r5, pc}
 8010f8a:	bf00      	nop
 8010f8c:	20000e5c 	.word	0x20000e5c

08010f90 <_isatty_r>:
 8010f90:	b538      	push	{r3, r4, r5, lr}
 8010f92:	4c06      	ldr	r4, [pc, #24]	; (8010fac <_isatty_r+0x1c>)
 8010f94:	2300      	movs	r3, #0
 8010f96:	4605      	mov	r5, r0
 8010f98:	4608      	mov	r0, r1
 8010f9a:	6023      	str	r3, [r4, #0]
 8010f9c:	f000 f9d8 	bl	8011350 <_isatty>
 8010fa0:	1c43      	adds	r3, r0, #1
 8010fa2:	d102      	bne.n	8010faa <_isatty_r+0x1a>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	b103      	cbz	r3, 8010faa <_isatty_r+0x1a>
 8010fa8:	602b      	str	r3, [r5, #0]
 8010faa:	bd38      	pop	{r3, r4, r5, pc}
 8010fac:	20000e5c 	.word	0x20000e5c

08010fb0 <_lseek_r>:
 8010fb0:	b538      	push	{r3, r4, r5, lr}
 8010fb2:	4c07      	ldr	r4, [pc, #28]	; (8010fd0 <_lseek_r+0x20>)
 8010fb4:	4605      	mov	r5, r0
 8010fb6:	4608      	mov	r0, r1
 8010fb8:	4611      	mov	r1, r2
 8010fba:	2200      	movs	r2, #0
 8010fbc:	6022      	str	r2, [r4, #0]
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	f000 f9ce 	bl	8011360 <_lseek>
 8010fc4:	1c43      	adds	r3, r0, #1
 8010fc6:	d102      	bne.n	8010fce <_lseek_r+0x1e>
 8010fc8:	6823      	ldr	r3, [r4, #0]
 8010fca:	b103      	cbz	r3, 8010fce <_lseek_r+0x1e>
 8010fcc:	602b      	str	r3, [r5, #0]
 8010fce:	bd38      	pop	{r3, r4, r5, pc}
 8010fd0:	20000e5c 	.word	0x20000e5c

08010fd4 <memmove>:
 8010fd4:	4288      	cmp	r0, r1
 8010fd6:	b510      	push	{r4, lr}
 8010fd8:	eb01 0302 	add.w	r3, r1, r2
 8010fdc:	d803      	bhi.n	8010fe6 <memmove+0x12>
 8010fde:	1e42      	subs	r2, r0, #1
 8010fe0:	4299      	cmp	r1, r3
 8010fe2:	d10c      	bne.n	8010ffe <memmove+0x2a>
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	4298      	cmp	r0, r3
 8010fe8:	d2f9      	bcs.n	8010fde <memmove+0xa>
 8010fea:	1881      	adds	r1, r0, r2
 8010fec:	1ad2      	subs	r2, r2, r3
 8010fee:	42d3      	cmn	r3, r2
 8010ff0:	d100      	bne.n	8010ff4 <memmove+0x20>
 8010ff2:	bd10      	pop	{r4, pc}
 8010ff4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ff8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010ffc:	e7f7      	b.n	8010fee <memmove+0x1a>
 8010ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011002:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011006:	e7eb      	b.n	8010fe0 <memmove+0xc>

08011008 <__malloc_lock>:
 8011008:	4770      	bx	lr

0801100a <__malloc_unlock>:
 801100a:	4770      	bx	lr

0801100c <_realloc_r>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	4607      	mov	r7, r0
 8011010:	4614      	mov	r4, r2
 8011012:	460e      	mov	r6, r1
 8011014:	b921      	cbnz	r1, 8011020 <_realloc_r+0x14>
 8011016:	4611      	mov	r1, r2
 8011018:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801101c:	f7ff bbd8 	b.w	80107d0 <_malloc_r>
 8011020:	b922      	cbnz	r2, 801102c <_realloc_r+0x20>
 8011022:	f7ff fb87 	bl	8010734 <_free_r>
 8011026:	4625      	mov	r5, r4
 8011028:	4628      	mov	r0, r5
 801102a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801102c:	f000 f976 	bl	801131c <_malloc_usable_size_r>
 8011030:	4284      	cmp	r4, r0
 8011032:	d90f      	bls.n	8011054 <_realloc_r+0x48>
 8011034:	4621      	mov	r1, r4
 8011036:	4638      	mov	r0, r7
 8011038:	f7ff fbca 	bl	80107d0 <_malloc_r>
 801103c:	4605      	mov	r5, r0
 801103e:	2800      	cmp	r0, #0
 8011040:	d0f2      	beq.n	8011028 <_realloc_r+0x1c>
 8011042:	4631      	mov	r1, r6
 8011044:	4622      	mov	r2, r4
 8011046:	f7ff fb61 	bl	801070c <memcpy>
 801104a:	4631      	mov	r1, r6
 801104c:	4638      	mov	r0, r7
 801104e:	f7ff fb71 	bl	8010734 <_free_r>
 8011052:	e7e9      	b.n	8011028 <_realloc_r+0x1c>
 8011054:	4635      	mov	r5, r6
 8011056:	e7e7      	b.n	8011028 <_realloc_r+0x1c>

08011058 <__ssputs_r>:
 8011058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801105c:	688e      	ldr	r6, [r1, #8]
 801105e:	429e      	cmp	r6, r3
 8011060:	4682      	mov	sl, r0
 8011062:	460c      	mov	r4, r1
 8011064:	4691      	mov	r9, r2
 8011066:	4698      	mov	r8, r3
 8011068:	d835      	bhi.n	80110d6 <__ssputs_r+0x7e>
 801106a:	898a      	ldrh	r2, [r1, #12]
 801106c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011070:	d031      	beq.n	80110d6 <__ssputs_r+0x7e>
 8011072:	6825      	ldr	r5, [r4, #0]
 8011074:	6909      	ldr	r1, [r1, #16]
 8011076:	1a6f      	subs	r7, r5, r1
 8011078:	6965      	ldr	r5, [r4, #20]
 801107a:	2302      	movs	r3, #2
 801107c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011080:	fb95 f5f3 	sdiv	r5, r5, r3
 8011084:	f108 0301 	add.w	r3, r8, #1
 8011088:	443b      	add	r3, r7
 801108a:	429d      	cmp	r5, r3
 801108c:	bf38      	it	cc
 801108e:	461d      	movcc	r5, r3
 8011090:	0553      	lsls	r3, r2, #21
 8011092:	d531      	bpl.n	80110f8 <__ssputs_r+0xa0>
 8011094:	4629      	mov	r1, r5
 8011096:	f7ff fb9b 	bl	80107d0 <_malloc_r>
 801109a:	4606      	mov	r6, r0
 801109c:	b950      	cbnz	r0, 80110b4 <__ssputs_r+0x5c>
 801109e:	230c      	movs	r3, #12
 80110a0:	f8ca 3000 	str.w	r3, [sl]
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110aa:	81a3      	strh	r3, [r4, #12]
 80110ac:	f04f 30ff 	mov.w	r0, #4294967295
 80110b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110b4:	463a      	mov	r2, r7
 80110b6:	6921      	ldr	r1, [r4, #16]
 80110b8:	f7ff fb28 	bl	801070c <memcpy>
 80110bc:	89a3      	ldrh	r3, [r4, #12]
 80110be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80110c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c6:	81a3      	strh	r3, [r4, #12]
 80110c8:	6126      	str	r6, [r4, #16]
 80110ca:	6165      	str	r5, [r4, #20]
 80110cc:	443e      	add	r6, r7
 80110ce:	1bed      	subs	r5, r5, r7
 80110d0:	6026      	str	r6, [r4, #0]
 80110d2:	60a5      	str	r5, [r4, #8]
 80110d4:	4646      	mov	r6, r8
 80110d6:	4546      	cmp	r6, r8
 80110d8:	bf28      	it	cs
 80110da:	4646      	movcs	r6, r8
 80110dc:	4632      	mov	r2, r6
 80110de:	4649      	mov	r1, r9
 80110e0:	6820      	ldr	r0, [r4, #0]
 80110e2:	f7ff ff77 	bl	8010fd4 <memmove>
 80110e6:	68a3      	ldr	r3, [r4, #8]
 80110e8:	1b9b      	subs	r3, r3, r6
 80110ea:	60a3      	str	r3, [r4, #8]
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	441e      	add	r6, r3
 80110f0:	6026      	str	r6, [r4, #0]
 80110f2:	2000      	movs	r0, #0
 80110f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110f8:	462a      	mov	r2, r5
 80110fa:	f7ff ff87 	bl	801100c <_realloc_r>
 80110fe:	4606      	mov	r6, r0
 8011100:	2800      	cmp	r0, #0
 8011102:	d1e1      	bne.n	80110c8 <__ssputs_r+0x70>
 8011104:	6921      	ldr	r1, [r4, #16]
 8011106:	4650      	mov	r0, sl
 8011108:	f7ff fb14 	bl	8010734 <_free_r>
 801110c:	e7c7      	b.n	801109e <__ssputs_r+0x46>
	...

08011110 <_svfiprintf_r>:
 8011110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011114:	b09d      	sub	sp, #116	; 0x74
 8011116:	4680      	mov	r8, r0
 8011118:	9303      	str	r3, [sp, #12]
 801111a:	898b      	ldrh	r3, [r1, #12]
 801111c:	061c      	lsls	r4, r3, #24
 801111e:	460d      	mov	r5, r1
 8011120:	4616      	mov	r6, r2
 8011122:	d50f      	bpl.n	8011144 <_svfiprintf_r+0x34>
 8011124:	690b      	ldr	r3, [r1, #16]
 8011126:	b96b      	cbnz	r3, 8011144 <_svfiprintf_r+0x34>
 8011128:	2140      	movs	r1, #64	; 0x40
 801112a:	f7ff fb51 	bl	80107d0 <_malloc_r>
 801112e:	6028      	str	r0, [r5, #0]
 8011130:	6128      	str	r0, [r5, #16]
 8011132:	b928      	cbnz	r0, 8011140 <_svfiprintf_r+0x30>
 8011134:	230c      	movs	r3, #12
 8011136:	f8c8 3000 	str.w	r3, [r8]
 801113a:	f04f 30ff 	mov.w	r0, #4294967295
 801113e:	e0c5      	b.n	80112cc <_svfiprintf_r+0x1bc>
 8011140:	2340      	movs	r3, #64	; 0x40
 8011142:	616b      	str	r3, [r5, #20]
 8011144:	2300      	movs	r3, #0
 8011146:	9309      	str	r3, [sp, #36]	; 0x24
 8011148:	2320      	movs	r3, #32
 801114a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801114e:	2330      	movs	r3, #48	; 0x30
 8011150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011154:	f04f 0b01 	mov.w	fp, #1
 8011158:	4637      	mov	r7, r6
 801115a:	463c      	mov	r4, r7
 801115c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011160:	2b00      	cmp	r3, #0
 8011162:	d13c      	bne.n	80111de <_svfiprintf_r+0xce>
 8011164:	ebb7 0a06 	subs.w	sl, r7, r6
 8011168:	d00b      	beq.n	8011182 <_svfiprintf_r+0x72>
 801116a:	4653      	mov	r3, sl
 801116c:	4632      	mov	r2, r6
 801116e:	4629      	mov	r1, r5
 8011170:	4640      	mov	r0, r8
 8011172:	f7ff ff71 	bl	8011058 <__ssputs_r>
 8011176:	3001      	adds	r0, #1
 8011178:	f000 80a3 	beq.w	80112c2 <_svfiprintf_r+0x1b2>
 801117c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801117e:	4453      	add	r3, sl
 8011180:	9309      	str	r3, [sp, #36]	; 0x24
 8011182:	783b      	ldrb	r3, [r7, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 809c 	beq.w	80112c2 <_svfiprintf_r+0x1b2>
 801118a:	2300      	movs	r3, #0
 801118c:	f04f 32ff 	mov.w	r2, #4294967295
 8011190:	9304      	str	r3, [sp, #16]
 8011192:	9307      	str	r3, [sp, #28]
 8011194:	9205      	str	r2, [sp, #20]
 8011196:	9306      	str	r3, [sp, #24]
 8011198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801119c:	931a      	str	r3, [sp, #104]	; 0x68
 801119e:	2205      	movs	r2, #5
 80111a0:	7821      	ldrb	r1, [r4, #0]
 80111a2:	4850      	ldr	r0, [pc, #320]	; (80112e4 <_svfiprintf_r+0x1d4>)
 80111a4:	f7ef f81c 	bl	80001e0 <memchr>
 80111a8:	1c67      	adds	r7, r4, #1
 80111aa:	9b04      	ldr	r3, [sp, #16]
 80111ac:	b9d8      	cbnz	r0, 80111e6 <_svfiprintf_r+0xd6>
 80111ae:	06d9      	lsls	r1, r3, #27
 80111b0:	bf44      	itt	mi
 80111b2:	2220      	movmi	r2, #32
 80111b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80111b8:	071a      	lsls	r2, r3, #28
 80111ba:	bf44      	itt	mi
 80111bc:	222b      	movmi	r2, #43	; 0x2b
 80111be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80111c2:	7822      	ldrb	r2, [r4, #0]
 80111c4:	2a2a      	cmp	r2, #42	; 0x2a
 80111c6:	d016      	beq.n	80111f6 <_svfiprintf_r+0xe6>
 80111c8:	9a07      	ldr	r2, [sp, #28]
 80111ca:	2100      	movs	r1, #0
 80111cc:	200a      	movs	r0, #10
 80111ce:	4627      	mov	r7, r4
 80111d0:	3401      	adds	r4, #1
 80111d2:	783b      	ldrb	r3, [r7, #0]
 80111d4:	3b30      	subs	r3, #48	; 0x30
 80111d6:	2b09      	cmp	r3, #9
 80111d8:	d951      	bls.n	801127e <_svfiprintf_r+0x16e>
 80111da:	b1c9      	cbz	r1, 8011210 <_svfiprintf_r+0x100>
 80111dc:	e011      	b.n	8011202 <_svfiprintf_r+0xf2>
 80111de:	2b25      	cmp	r3, #37	; 0x25
 80111e0:	d0c0      	beq.n	8011164 <_svfiprintf_r+0x54>
 80111e2:	4627      	mov	r7, r4
 80111e4:	e7b9      	b.n	801115a <_svfiprintf_r+0x4a>
 80111e6:	4a3f      	ldr	r2, [pc, #252]	; (80112e4 <_svfiprintf_r+0x1d4>)
 80111e8:	1a80      	subs	r0, r0, r2
 80111ea:	fa0b f000 	lsl.w	r0, fp, r0
 80111ee:	4318      	orrs	r0, r3
 80111f0:	9004      	str	r0, [sp, #16]
 80111f2:	463c      	mov	r4, r7
 80111f4:	e7d3      	b.n	801119e <_svfiprintf_r+0x8e>
 80111f6:	9a03      	ldr	r2, [sp, #12]
 80111f8:	1d11      	adds	r1, r2, #4
 80111fa:	6812      	ldr	r2, [r2, #0]
 80111fc:	9103      	str	r1, [sp, #12]
 80111fe:	2a00      	cmp	r2, #0
 8011200:	db01      	blt.n	8011206 <_svfiprintf_r+0xf6>
 8011202:	9207      	str	r2, [sp, #28]
 8011204:	e004      	b.n	8011210 <_svfiprintf_r+0x100>
 8011206:	4252      	negs	r2, r2
 8011208:	f043 0302 	orr.w	r3, r3, #2
 801120c:	9207      	str	r2, [sp, #28]
 801120e:	9304      	str	r3, [sp, #16]
 8011210:	783b      	ldrb	r3, [r7, #0]
 8011212:	2b2e      	cmp	r3, #46	; 0x2e
 8011214:	d10e      	bne.n	8011234 <_svfiprintf_r+0x124>
 8011216:	787b      	ldrb	r3, [r7, #1]
 8011218:	2b2a      	cmp	r3, #42	; 0x2a
 801121a:	f107 0101 	add.w	r1, r7, #1
 801121e:	d132      	bne.n	8011286 <_svfiprintf_r+0x176>
 8011220:	9b03      	ldr	r3, [sp, #12]
 8011222:	1d1a      	adds	r2, r3, #4
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	9203      	str	r2, [sp, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	bfb8      	it	lt
 801122c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011230:	3702      	adds	r7, #2
 8011232:	9305      	str	r3, [sp, #20]
 8011234:	4c2c      	ldr	r4, [pc, #176]	; (80112e8 <_svfiprintf_r+0x1d8>)
 8011236:	7839      	ldrb	r1, [r7, #0]
 8011238:	2203      	movs	r2, #3
 801123a:	4620      	mov	r0, r4
 801123c:	f7ee ffd0 	bl	80001e0 <memchr>
 8011240:	b138      	cbz	r0, 8011252 <_svfiprintf_r+0x142>
 8011242:	2340      	movs	r3, #64	; 0x40
 8011244:	1b00      	subs	r0, r0, r4
 8011246:	fa03 f000 	lsl.w	r0, r3, r0
 801124a:	9b04      	ldr	r3, [sp, #16]
 801124c:	4303      	orrs	r3, r0
 801124e:	9304      	str	r3, [sp, #16]
 8011250:	3701      	adds	r7, #1
 8011252:	7839      	ldrb	r1, [r7, #0]
 8011254:	4825      	ldr	r0, [pc, #148]	; (80112ec <_svfiprintf_r+0x1dc>)
 8011256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801125a:	2206      	movs	r2, #6
 801125c:	1c7e      	adds	r6, r7, #1
 801125e:	f7ee ffbf 	bl	80001e0 <memchr>
 8011262:	2800      	cmp	r0, #0
 8011264:	d035      	beq.n	80112d2 <_svfiprintf_r+0x1c2>
 8011266:	4b22      	ldr	r3, [pc, #136]	; (80112f0 <_svfiprintf_r+0x1e0>)
 8011268:	b9fb      	cbnz	r3, 80112aa <_svfiprintf_r+0x19a>
 801126a:	9b03      	ldr	r3, [sp, #12]
 801126c:	3307      	adds	r3, #7
 801126e:	f023 0307 	bic.w	r3, r3, #7
 8011272:	3308      	adds	r3, #8
 8011274:	9303      	str	r3, [sp, #12]
 8011276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011278:	444b      	add	r3, r9
 801127a:	9309      	str	r3, [sp, #36]	; 0x24
 801127c:	e76c      	b.n	8011158 <_svfiprintf_r+0x48>
 801127e:	fb00 3202 	mla	r2, r0, r2, r3
 8011282:	2101      	movs	r1, #1
 8011284:	e7a3      	b.n	80111ce <_svfiprintf_r+0xbe>
 8011286:	2300      	movs	r3, #0
 8011288:	9305      	str	r3, [sp, #20]
 801128a:	4618      	mov	r0, r3
 801128c:	240a      	movs	r4, #10
 801128e:	460f      	mov	r7, r1
 8011290:	3101      	adds	r1, #1
 8011292:	783a      	ldrb	r2, [r7, #0]
 8011294:	3a30      	subs	r2, #48	; 0x30
 8011296:	2a09      	cmp	r2, #9
 8011298:	d903      	bls.n	80112a2 <_svfiprintf_r+0x192>
 801129a:	2b00      	cmp	r3, #0
 801129c:	d0ca      	beq.n	8011234 <_svfiprintf_r+0x124>
 801129e:	9005      	str	r0, [sp, #20]
 80112a0:	e7c8      	b.n	8011234 <_svfiprintf_r+0x124>
 80112a2:	fb04 2000 	mla	r0, r4, r0, r2
 80112a6:	2301      	movs	r3, #1
 80112a8:	e7f1      	b.n	801128e <_svfiprintf_r+0x17e>
 80112aa:	ab03      	add	r3, sp, #12
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	462a      	mov	r2, r5
 80112b0:	4b10      	ldr	r3, [pc, #64]	; (80112f4 <_svfiprintf_r+0x1e4>)
 80112b2:	a904      	add	r1, sp, #16
 80112b4:	4640      	mov	r0, r8
 80112b6:	f3af 8000 	nop.w
 80112ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 80112be:	4681      	mov	r9, r0
 80112c0:	d1d9      	bne.n	8011276 <_svfiprintf_r+0x166>
 80112c2:	89ab      	ldrh	r3, [r5, #12]
 80112c4:	065b      	lsls	r3, r3, #25
 80112c6:	f53f af38 	bmi.w	801113a <_svfiprintf_r+0x2a>
 80112ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112cc:	b01d      	add	sp, #116	; 0x74
 80112ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d2:	ab03      	add	r3, sp, #12
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	462a      	mov	r2, r5
 80112d8:	4b06      	ldr	r3, [pc, #24]	; (80112f4 <_svfiprintf_r+0x1e4>)
 80112da:	a904      	add	r1, sp, #16
 80112dc:	4640      	mov	r0, r8
 80112de:	f7ff fb4b 	bl	8010978 <_printf_i>
 80112e2:	e7ea      	b.n	80112ba <_svfiprintf_r+0x1aa>
 80112e4:	080116fa 	.word	0x080116fa
 80112e8:	08011700 	.word	0x08011700
 80112ec:	08011704 	.word	0x08011704
 80112f0:	00000000 	.word	0x00000000
 80112f4:	08011059 	.word	0x08011059

080112f8 <_read_r>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	4c07      	ldr	r4, [pc, #28]	; (8011318 <_read_r+0x20>)
 80112fc:	4605      	mov	r5, r0
 80112fe:	4608      	mov	r0, r1
 8011300:	4611      	mov	r1, r2
 8011302:	2200      	movs	r2, #0
 8011304:	6022      	str	r2, [r4, #0]
 8011306:	461a      	mov	r2, r3
 8011308:	f000 f832 	bl	8011370 <_read>
 801130c:	1c43      	adds	r3, r0, #1
 801130e:	d102      	bne.n	8011316 <_read_r+0x1e>
 8011310:	6823      	ldr	r3, [r4, #0]
 8011312:	b103      	cbz	r3, 8011316 <_read_r+0x1e>
 8011314:	602b      	str	r3, [r5, #0]
 8011316:	bd38      	pop	{r3, r4, r5, pc}
 8011318:	20000e5c 	.word	0x20000e5c

0801131c <_malloc_usable_size_r>:
 801131c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011320:	2800      	cmp	r0, #0
 8011322:	f1a0 0004 	sub.w	r0, r0, #4
 8011326:	bfbc      	itt	lt
 8011328:	580b      	ldrlt	r3, [r1, r0]
 801132a:	18c0      	addlt	r0, r0, r3
 801132c:	4770      	bx	lr
	...

08011330 <_close>:
 8011330:	4b02      	ldr	r3, [pc, #8]	; (801133c <_close+0xc>)
 8011332:	2258      	movs	r2, #88	; 0x58
 8011334:	601a      	str	r2, [r3, #0]
 8011336:	f04f 30ff 	mov.w	r0, #4294967295
 801133a:	4770      	bx	lr
 801133c:	20000e5c 	.word	0x20000e5c

08011340 <_fstat>:
 8011340:	4b02      	ldr	r3, [pc, #8]	; (801134c <_fstat+0xc>)
 8011342:	2258      	movs	r2, #88	; 0x58
 8011344:	601a      	str	r2, [r3, #0]
 8011346:	f04f 30ff 	mov.w	r0, #4294967295
 801134a:	4770      	bx	lr
 801134c:	20000e5c 	.word	0x20000e5c

08011350 <_isatty>:
 8011350:	4b02      	ldr	r3, [pc, #8]	; (801135c <_isatty+0xc>)
 8011352:	2258      	movs	r2, #88	; 0x58
 8011354:	601a      	str	r2, [r3, #0]
 8011356:	2000      	movs	r0, #0
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	20000e5c 	.word	0x20000e5c

08011360 <_lseek>:
 8011360:	4b02      	ldr	r3, [pc, #8]	; (801136c <_lseek+0xc>)
 8011362:	2258      	movs	r2, #88	; 0x58
 8011364:	601a      	str	r2, [r3, #0]
 8011366:	f04f 30ff 	mov.w	r0, #4294967295
 801136a:	4770      	bx	lr
 801136c:	20000e5c 	.word	0x20000e5c

08011370 <_read>:
 8011370:	4b02      	ldr	r3, [pc, #8]	; (801137c <_read+0xc>)
 8011372:	2258      	movs	r2, #88	; 0x58
 8011374:	601a      	str	r2, [r3, #0]
 8011376:	f04f 30ff 	mov.w	r0, #4294967295
 801137a:	4770      	bx	lr
 801137c:	20000e5c 	.word	0x20000e5c

08011380 <_sbrk>:
 8011380:	4b04      	ldr	r3, [pc, #16]	; (8011394 <_sbrk+0x14>)
 8011382:	6819      	ldr	r1, [r3, #0]
 8011384:	4602      	mov	r2, r0
 8011386:	b909      	cbnz	r1, 801138c <_sbrk+0xc>
 8011388:	4903      	ldr	r1, [pc, #12]	; (8011398 <_sbrk+0x18>)
 801138a:	6019      	str	r1, [r3, #0]
 801138c:	6818      	ldr	r0, [r3, #0]
 801138e:	4402      	add	r2, r0
 8011390:	601a      	str	r2, [r3, #0]
 8011392:	4770      	bx	lr
 8011394:	200008f0 	.word	0x200008f0
 8011398:	20000e60 	.word	0x20000e60

0801139c <_init>:
 801139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139e:	bf00      	nop
 80113a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113a2:	bc08      	pop	{r3}
 80113a4:	469e      	mov	lr, r3
 80113a6:	4770      	bx	lr

080113a8 <_fini>:
 80113a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113aa:	bf00      	nop
 80113ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113ae:	bc08      	pop	{r3}
 80113b0:	469e      	mov	lr, r3
 80113b2:	4770      	bx	lr
